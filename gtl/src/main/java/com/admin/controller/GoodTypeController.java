package com.admin.controller;

import java.util.UUID;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import com.admin.model.GoodType;
import com.admin.model.Log;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.Json;
import com.admin.pageModel.PageHelper;
import com.admin.service.GoodTypeService;
import com.admin.service.GoodsManagementServiceI;
import com.admin.service.LogServiceI;
import com.admin.util.InfoUtil;
import com.web.util.TimeUtils;

@Controller
@RequestMapping("/GoodTypeController")
public class GoodTypeController {
	
	@Autowired
	private GoodTypeService gts;
	
	@Autowired
	private GoodsManagementServiceI gms;
	
	@Autowired
	private LogServiceI logService;

	/**
	 * 跳转到合作伙伴管理页面
	 * 
	 * @return
	 */
	@RequestMapping("/manager")
	public String manager() {
		return "/admin/goodType/goodType";
	}

	/**
	 * 获取商品分类列表
	 * 
	 * @param p
	 * @param ph
	 * @return
	 */
	@RequestMapping("/dataGrid")
	@ResponseBody
	public DataGrid dataGrid(GoodType p, PageHelper ph) {
		return gts.dataGridForOne(p, ph);

	}

	/**
	 * 跳转到商品分类添加页面
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/addPage")
	public String addPage(HttpServletRequest request) {
		GoodType ppr = new GoodType();
		ppr.setId(UUID.randomUUID().toString());
		request.setAttribute("GoodType", ppr);
		return "/admin/goodType/goodTypeAdd";
	}

	/**
	 * 添加商品分类
	 * 
	 * @param partner
	 * @return
	 */
	@RequestMapping("/add")
	@ResponseBody
	public Json add(GoodType gy) {
		Json j = new Json();
		try {
			gts.add(gy);
		} catch (Exception e) {
			e.printStackTrace();
		}
		j.setSuccess(true);
		j.setMsg("添加成功！");
		return j;
	}

	/**
	 * 跳转到商品分类编辑页面
	 * 
	 * @param request
	 * @param id
	 * @return
	 */
	@RequestMapping("/editPage")
	public String editPage(HttpServletRequest request, String id) {
		GoodType gy = gts.get(id);
		request.setAttribute("GoodType", gy);
		return "/admin/goodType/goodTypeEdit";
	}

	/**
	 * 合作伙伴修改
	 * 
	 * @param request
	 * @param session
	 * @param partner
	 * @return
	 */
	@RequestMapping("/edit")
	@ResponseBody
	public Json edit(HttpServletRequest request, HttpSession session,
			GoodType gy) {
		Json j = new Json();
		try {
			gts.edit(gy);
			Log log = new Log();
			log.setType("update");// 操作描述
			log.setAuthor(InfoUtil.getUser(session));// 操作员
			log.setIp(InfoUtil.getIpAddr(request));// ip
			log.setTteble("t_goodsType");// 操作的表
			log.setTid(gy.getId());// 操作的ID
			log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
			logService.add(log);
		} catch (Exception e) {
			e.printStackTrace();
		}
		j.setSuccess(true);
		j.setMsg("编辑成功！");
		return j;
	}

	/**
	 * 删除合作伙伴
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/delete")
	@ResponseBody
	public Json delete(String id) {
		Json j = new Json();
		gts.delete(id);
		j.setMsg("删除成功！");
		j.setSuccess(true);
		return j;
	}

	/**
	 * 批量删除
	 * 
	 * @param ids
	 * @param session
	 * @return
	 */
	@RequestMapping("/batchDelete")
	@ResponseBody
	public Json batchDelete(String ids, HttpSession session) {
		Json j = new Json();
		if (ids != null && ids.length() > 0) {
			for (String id : ids.split(",")) {
				if (id != null) {
					this.delete(id);
				}
			}
		}
		j.setMsg("批量删除成功！");
		j.setSuccess(true);
		return j;
	}
}

