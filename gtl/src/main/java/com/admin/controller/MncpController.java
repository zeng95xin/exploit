package com.admin.controller;

import java.io.OutputStream;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableWorkbook;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.CzdTj;
import com.admin.model.ExchangeGoods;
import com.admin.model.IntegralConfig;
import com.admin.model.Log;
import com.admin.model.LoginUser;
import com.admin.model.Mncp;
import com.admin.model.Tgxt;
import com.admin.model.gpsy;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.Json;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.service.GpsyServiceI;
import com.admin.service.IntegralConfigServiceI;
import com.admin.service.LogServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.MncpServiceI;
import com.admin.service.XwxServiceI;
import com.admin.util.ConfigUtil;
import com.admin.util.InfoUtil;
import com.web.util.TimeUtils;

/**
 * 用户控制器
 * 
 * @author
 * 
 */
@Controller
@RequestMapping("/mncpController")
public class MncpController extends BaseController {

	@Autowired
	private MncpServiceI mncpServiceI;

	@Autowired
	private LoginUserServiceI loginUserService;

	@Autowired
	private LogServiceI logService;

	WritableWorkbook book = null;

	/**
	 * 跳转到页面
	 * 
	 * @return
	 */
	@RequestMapping("/index")
	public String manager() {
		// 每天的date时刻执行task, 仅执行一次
		return "/page/index";

	}

	/**
	 * 跳转到列表页面
	 * 
	 * @return
	 */
	@RequestMapping("/mncpList")
	public String MncpList(HttpServletRequest request,
			HttpServletResponse response, ModelMap modelMap) throws Exception {
		return "/admin/mncp/mncpList";
	}

	/**
	 * 获取个股新闻数据表格
	 * 
	 * @param user
	 * @return
	 */
	@RequestMapping("/dataGrid")
	@ResponseBody
	public DataGrid dataGrid(Mncp g, PageHelper ph) {
		return mncpServiceI.dataGridForOne(g, ph);
	}

	/**
	 * 删除用户
	 * 
	 * @param id
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/delete")
	@ResponseBody
	public Json delete(String id, HttpSession session,
			HttpServletRequest request) throws Exception {
		SessionInfo sessionInfo = (SessionInfo) session.getAttribute(ConfigUtil
				.getSessionInfoName());
		Json j = new Json();
		if (id != null && !id.equalsIgnoreCase(sessionInfo.getId())) {// 不能删除自己
			mncpServiceI.delete(id);
		}
		j.setMsg("删除成功！");

		Log log = new Log();
		log.setType("delete");// 操作描述
		log.setAuthor(InfoUtil.getUser(session));// 操作员
		log.setIp(InfoUtil.getIpAddr(request));// ip
		log.setTteble("t_mncp");// 操作的表
		log.setTid(id);// 操作的ID
		log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
		logService.add(log);

		j.setSuccess(true);
		return j;
	}

	/**
	 * 跳转到添加用户页面
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/addCzdTjPage")
	public String addCzdTjPage(HttpServletRequest request) {
		return "/admin/czdTj/addCzdTjPage";

	}

	/**
	 * 添加
	 * 
	 * @return
	 */
	@RequestMapping("/add")
	@ResponseBody
	public Json add(CzdTj p, HttpServletRequest request, HttpSession session) {
		Json j = new Json();

		return j;
	}

	/**
	 * 跳转到用户修改页面
	 * 
	 * @return
	 */
	@RequestMapping("/editCzdTjPage")
	public String editCzdTjPage(HttpServletRequest request, String id) {

		return "/admin/czdTj/editCzdTjPage";
	}

	/**
	 * 修改用户
	 * 
	 * @param user
	 * @return
	 */
	@RequestMapping("/edit")
	@ResponseBody
	public Json edit(CzdTj p, HttpServletRequest request, HttpSession session) {
		Json j = new Json();
		return j;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            ('0','1','2')
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/batchDelete")
	@ResponseBody
	public Json batchDelete(String ids, HttpSession session,
			HttpServletRequest request) throws Exception {
		Json j = new Json();
		if (ids != null && ids.length() > 0) {
			for (String id : ids.split(",")) {
				if (id != null) {
					this.delete(id, session, request);
				}
			}
		}
		j.setMsg("批量删除成功！");
		j.setSuccess(true);
		return j;
	}

	@RequestMapping(value = "/export")
	public void exportExcel(HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		String username = request.getParameter("username");
		String mrlx = request.getParameter("mrlx");
		String cz = request.getParameter("cz");
		String nickname = request.getParameter("nickname");
		Mncp mp = new Mncp();
		mp.setUsername(username);
		mp.setMrlx(mrlx);
		mp.setCz(cz);
		mp.setNickname(nickname);
		String hql = " from Mncp t";
		if (mp != null) {
			hql += " where 1=1 ";
			if (org.apache.commons.lang3.StringUtils.isNotBlank(username)) {
				hql += " and t.username =" + username;
			}
			if (org.apache.commons.lang3.StringUtils.isNotBlank(mrlx)) {
				hql += " and t.mrlx =" + mrlx;
			}
			if (org.apache.commons.lang3.StringUtils.isNotBlank(cz)) {
				hql += " and t.cz =" + cz;
			}
			if (org.apache.commons.lang3.StringUtils.isNotBlank(nickname)) {
				hql += " and t.nickname =" + nickname;
			}
		}
		List<Mncp> mncpList = mncpServiceI.getGPJYList(hql);

		HSSFWorkbook wb = new HSSFWorkbook();
		HSSFSheet sheet = wb.createSheet("Mncp");
		HSSFRow row = sheet.createRow((int) 0);
		HSSFCellStyle style = wb.createCellStyle();
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		String[] excelHeader = { "用户名", "证券代码", "证券名称", "成交数量", "成本价格", "买入类型",
				"状态", "操作", "成交时间", "赛季名" };

		for (int i = 0; i < excelHeader.length; i++) {
			HSSFCell cell = row.createCell(i);
			cell.setCellValue(excelHeader[i]);
			cell.setCellStyle(style);
			sheet.autoSizeColumn(i);
		}

		for (int i = 0; i < mncpList.size(); i++) {
			row = sheet.createRow(i + 1);
			Mncp p = mncpList.get(i);
			String bzName = "";
			if (org.apache.commons.lang3.StringUtils.isNotBlank(p.getBz())) {

				if (p.getBz().equals("0")) { // 证券备注： 0：未成交，1：成交，2：撤销
					bzName = "未成交";
				} else if (p.getBz().equals("1")) {
					bzName = "成交";
				} else {
					bzName = "撤销";
				}
			}
			// 买入类型 0：普通赛；1：赛季赛
			String mrlxName = "";
			if (org.apache.commons.lang3.StringUtils.isNotBlank(p.getMrlx())) {

				if (p.getMrlx().equals("0")) {
					mrlxName = "普通赛";
				} else {
					mrlxName = "赛季赛";
				}
			}
			// 操作 0：买入；1：卖出
			String czName = "";
			if (org.apache.commons.lang3.StringUtils.isNotBlank(p.getCz())) {

				if (p.getCz().equals("0")) {
					czName = "买入";
				} else if (p.getCz().equals("1")) {
					czName = "卖出";
				} else {
					czName = "撤销";
				}
			}
			row.createCell(0).setCellValue(p.getUsername());
			row.createCell(1).setCellValue(p.getZqdm());
			row.createCell(2).setCellValue(p.getZqname());
			row.createCell(3).setCellValue(p.getCjsl());
			row.createCell(4).setCellValue(p.getWtjg());
			row.createCell(5).setCellValue(mrlxName);
			row.createCell(6).setCellValue(bzName);
			row.createCell(7).setCellValue(czName);
			row.createCell(8).setCellValue(p.getCjtime());
			row.createCell(9).setCellValue(p.getSjname());

		}
		response.setContentType("application/vnd.ms-excel");
		String filename = "股票交易列表" + TimeUtils.getNow14() + ".xls";
		response.setHeader("Content-disposition", "attachment;filename="
				+ filename);
		OutputStream ouputStream = response.getOutputStream();
		wb.write(ouputStream);
		ouputStream.flush();
		ouputStream.close();
	}

}
