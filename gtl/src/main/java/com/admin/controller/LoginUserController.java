package com.admin.controller;

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.Jfxhjl;
import com.admin.model.Log;
import com.admin.model.LoginUser;
import com.admin.model.UserJfBg;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.Json;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.service.JfxhjlfServiceI;
import com.admin.service.LogServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.util.ConfigUtil;
import com.admin.util.InfoUtil;
import com.web.util.TimeUtils;

/**
 * 外部用户控制器
 * 
 * @author
 * 
 */
@Controller
@RequestMapping("/loginUserController")
public class LoginUserController extends BaseController {

	@Autowired
	private LoginUserServiceI service;

	@Autowired
	private JfxhjlfServiceI jfxhjlfServiceI;

	@Autowired
	private LogServiceI logService;

	/**
	 * 获取用户数据表格
	 * 
	 * @param user
	 * @return
	 * @throws IOException
	 */
	@RequestMapping("/dataGrid")
	@ResponseBody
	public DataGrid dataGrid(LoginUser user, PageHelper ph,
			HttpServletResponse response, HttpServletRequest request)
			throws IOException {
		response.setCharacterEncoding("utf-8");
		DataGrid d = service.dataGrid(user, ph);
		return d;
	}

	/**
	 * 跳转到用户列表页面
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/loginuser")
	public String loginUser(HttpServletRequest request) {

		return "/admin/loginUser/loginUser";
	}


	@RequestMapping("/loginuserjf")
	public String loginUserJf(HttpServletRequest request) {

		return "/admin/loginUser/loginUserJf";
	}

	@RequestMapping("/editPage1")
	public String editPage1(String id, HttpServletRequest request) {
		LoginUser user = service.getLoginUser(id);
		request.setAttribute("user", user);
		return "/admin/loginUser/editPage";
	}

	@RequestMapping("/editPage2")
	public String editPage2(String id, HttpServletRequest request) {
		LoginUser user = service.getLoginUser(id);
		request.setAttribute("user", user);
		return "/admin/loginUser/mmxg";
	}

	@RequestMapping("/editPage3")
	public String editPage3(String id, HttpServletRequest request) {
		LoginUser user = service.getLoginUser(id);
		request.setAttribute("user", user);
		return "/admin/loginUser/edit";
	}

	/**
	 * 禁用
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/jinyong")
	@ResponseBody
	public Json jinyong(String id, HttpSession session) {
		SessionInfo sessionInfo = (SessionInfo) session.getAttribute(ConfigUtil
				.getSessionInfoName());
		Json j = new Json();
		if (id != null && !id.equalsIgnoreCase(sessionInfo.getId())) {// 不能禁用自己
			try {
				service.jinyong(id);
				j.setMsg("禁用成功！");
				j.setSuccess(true);
			} catch (Exception e) {
				j.setMsg("禁用失败!" + e.getMessage());
				j.setSuccess(false);
			}
		}
		return j;
	}

	/**
	 * 解禁
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/jiejin")
	@ResponseBody
	public Json jiejin(String id, HttpSession session) {
		SessionInfo sessionInfo = (SessionInfo) session.getAttribute(ConfigUtil
				.getSessionInfoName());
		Json j = new Json();
		if (id != null && !id.equalsIgnoreCase(sessionInfo.getId())) {// 不能解禁自己
			try {
				service.jiejin(id);
				j.setMsg("解禁成功！");
				j.setSuccess(true);
			} catch (Exception e) {
				j.setMsg("解禁失败!" + e.getMessage());
				j.setSuccess(false);
			}
		}
		return j;
	}

	/**
	 * 批量禁用用户
	 * 
	 * @param ids
	 *            ('0','1','2')
	 * @return
	 */
	@RequestMapping("/pljy")
	@ResponseBody
	public Json pljy(String ids, HttpSession session) {
		Json j = new Json();
		if (ids != null && ids.length() > 0) {
			for (String id : ids.split(",")) {
				if (id != null) {
					this.jinyong(id, session);
				}
			}
		}
		j.setMsg("批量禁用成功！");
		j.setSuccess(true);
		return j;
	}

	/**
	 * 批量禁用用户
	 * 
	 * @param ids
	 *            ('0','1','2')
	 * @return
	 */
	@RequestMapping("/pljj")
	@ResponseBody
	public Json pljj(String ids, HttpSession session) {
		Json j = new Json();
		if (ids != null && ids.length() > 0) {
			for (String id : ids.split(",")) {
				if (id != null) {
					this.jiejin(id, session);
				}
			}
		}
		j.setMsg("批量解禁成功！");
		j.setSuccess(true);
		return j;
	}

	/**
	 * 添加用户
	 * 
	 * @return
	 */
	@RequestMapping("/add")
	@ResponseBody
	public Json add(LoginUser user, HttpSession session,
			HttpServletRequest request) {
		Json j = new Json();
		try {
			service.add(user);
			j.setSuccess(true);
			j.setMsg("添加成功！");
			j.setObj(user);

			Log log = new Log();
			log.setType("add");// 操作描述
			log.setAuthor(InfoUtil.getUser(session));// 操作员
			log.setIp(InfoUtil.getIpAddr(request));// ip
			log.setTteble("loginuser");// 操作的表
			log.setTid(user.getId());// 操作的ID
			log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
			logService.add(log);
		} catch (Exception e) {
			j.setMsg(e.getMessage());
		}
		return j;
	}

	/**
	 * 投资顾问列表
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/tzgw")
	public String tzgw(HttpServletRequest request) {
		return "/admin/loginUser/tzgw";
	}

	/**
	 * 获取投资顾问审核数据表格
	 * 
	 * @param user
	 * @return
	 */
	@RequestMapping("/dataGrid1")
	@ResponseBody
	public DataGrid dataGrid1(LoginUser user, PageHelper ph) {
		return service.dataGrid1(user, ph);
	}

	/**
	 * 审核
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/shtg")
	@ResponseBody
	public Json shenhe(String id, String type, HttpSession session) {
		SessionInfo sessionInfo = (SessionInfo) session.getAttribute(ConfigUtil
				.getSessionInfoName());
		Json j = new Json();
		if (id != null && !id.equalsIgnoreCase(sessionInfo.getId())) {// 不能解禁自己
			try {
				service.shenhe(id, type);
				j.setMsg("审核成功！");
				j.setSuccess(true);
			} catch (Exception e) {
				j.setMsg("审核失败!" + e.getMessage());
				j.setSuccess(false);
			}
		}
		return j;
	}

	/**
	 * 批量审核 type=1 审核通过 type=0审核不通过
	 * 
	 * @param ids
	 *            ('0','1','2')
	 * @return
	 */
	@RequestMapping("/plsh")
	@ResponseBody
	public Json plsh(String ids, String type, HttpSession session) {
		Json j = new Json();
		if (ids != null && ids.length() > 0) {
			for (String id : ids.split(",")) {
				if (id != null) {
					if (type != null) {
						this.shenhe(id, type, session);
					}

				}
			}
		}
		j.setMsg("批量审核成功！");
		j.setSuccess(true);
		return j;
	}

	/**
	 * 密码修改
	 * 
	 * @return
	 */
	@RequestMapping("/mmxg")
	@ResponseBody
	public Json mmxg(LoginUser user, HttpServletRequest request,
			HttpSession session) {
		Json j = new Json();
		try {
			service.mmxg(user);
			j.setSuccess(true);
			j.setMsg("提交成功！");
			j.setObj(user);
		} catch (Exception e) {
			j.setMsg(e.getMessage());
		}
		return j;
	}

	/**
	 * 修改
	 * 
	 * @return
	 */
	@RequestMapping("/infoupdate")
	@ResponseBody
	public Json update(LoginUser user, HttpServletRequest request,
			HttpSession session) {
		Json j = new Json();
		try {
			service.updateInfo(user);
			j.setSuccess(true);
			j.setMsg("提交成功！");
			j.setObj(user);
		} catch (Exception e) {
			j.setMsg(e.getMessage());
		}
		return j;
	}

	/**
	 * 修改
	 * 
	 * @return
	 */
	@RequestMapping("/update")
	@ResponseBody
	public Json update(UserJfBg user, HttpServletRequest request,
			HttpSession session) {
		Json j = new Json();
		try {
			LoginUser u = service.getLoginUser(user.getId());
			if (user.getBgtype().equals("add")) {
				int jf = Integer.valueOf(user.getBgsl());
				u.setJifen(u.getJifen() + jf);
				service.saveScore(u,"系统打赏" , null, user.getBgyy());
//				service.update(u);
				Jfxhjl jj = new Jfxhjl();
				jj.setResaon(user.getBgyy());
				jj.setUserid(user.getId());
				jj.setSl("+" + user.getBgsl());
				jj.setWzid("");
				jfxhjlfServiceI.add(jj);
			} else {
				int jf = Integer.valueOf(user.getBgsl());
				u.setJifen(u.getJifen() - jf);
				service.saveScore(u,"系统打赏" , null, user.getBgyy());
//				service.update(u);
				Jfxhjl jj = new Jfxhjl();
				jj.setResaon(user.getBgyy());
				jj.setUserid(user.getId());
				jj.setSl("-" + user.getBgsl());
				jj.setWzid("");
				jfxhjlfServiceI.add(jj);
			}
			j.setSuccess(true);
			j.setMsg("提交成功！");
			j.setObj(user);
		} catch (Exception e) {
			j.setMsg(e.getMessage());
		}
		return j;
	}

	/**
	 * 导出数据为excel
	 * 
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@RequestMapping(value = "/export")
	public void exportExcel(HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		List<LoginUser> list = service.getAllUser();

		HSSFWorkbook wb = service.export(list);
		response.setContentType("application/vnd.ms-excel");
		String filename = "外部用户列表" + TimeUtils.getNow14() + ".xls";
		response.setHeader("Content-disposition", "attachment;filename="
				+ filename);
		OutputStream ouputStream = response.getOutputStream();
		wb.write(ouputStream);
		ouputStream.flush();
		ouputStream.close();

	}

	/**
	 * 跳转到名家評價
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/mjpjym")
	public String mjpjym(String id,HttpServletRequest request) {
		LoginUser user = service.getLoginUser(id);
		request.setAttribute("user", user);
		return "/admin/loginUser/mjpj";
	}
	
	/**
	 * 名家评级
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/mjpj")
	@ResponseBody
	public Json mjpj(String id,String mjpj,HttpSession session) {
		Json j = new Json();
		try {
			service.mjpj(id,mjpj);
			j.setMsg("评级成功！");
			j.setSuccess(true);
		} catch (Exception e) {
			j.setMsg("评级失败!" + e.getMessage());
			j.setSuccess(false);
		}
		return j;
	}

}
