package com.admin.controller;

import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.Log;
import com.admin.model.WcpBz;
import com.admin.model.WcpJs;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.Json;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.User;
import com.admin.service.LogServiceI;
import com.admin.service.WcpJsServiceI;
import com.admin.util.InfoUtil;
import com.web.util.TimeUtils;

/**
 * 微操盘介绍控制器
 * 
 * @author
 * 
 */
@Controller
@RequestMapping("/wcpJsController")
public class WcpJsController extends BaseController {

	@Autowired
	private WcpJsServiceI wcpJsService;
	@Autowired
	private LogServiceI logService;

	/**
	 * 跳转到微操盘介绍管理页面
	 * 
	 * @return
	 */
	@RequestMapping("/manager")
	public String manager() {
		return "/admin/wcpJs/wcpJs";
	}

	/**
	 * 跳转到微操盘介绍添加页面
	 * 
	 * @return
	 */
	@RequestMapping("/addPage")
	public String addPage(HttpSession session, HttpServletRequest request) {
		WcpJs r = new WcpJs();
		User user = (User) session.getAttribute("loginUser");
		r.setUserId(user.getId());
		r.setUserName(user.getUsername());
		r.setId(UUID.randomUUID().toString());
		request.setAttribute("wcpJs", r);
		return "/admin/wcpJs/wcpJsAdd";
	}

	/**
	 * 添加微操盘介绍
	 * 
	 * @return
	 */
	@RequestMapping("/add")
	@ResponseBody
	public Json add(WcpJs wcpJs) {
		Json j = new Json();
		// <img
		// src="/gtl/attached/image/2015/08/06/229c08b7-4d49-4942-bd9e-4f1142daa8c9.gif"
		// alt="" />
		// &lt;img
		// src=&quot;/gtl/attached/image/2015/08/06/05289f0f-c80d-4086-8d81-e69e15e86f9e.gif&quot;
		// alt=&quot;&quot; /&gt;
		try {
			wcpJsService.add(wcpJs);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		j.setSuccess(true);
		j.setMsg("添加成功！");
		return j;
	}

	/**
	 * 跳转到微操盘介绍修改页面
	 * 
	 * @return
	 */
	@RequestMapping("/editPage")
	public String editPage(HttpSession session, HttpServletRequest request,
			String id) {
		// WcpJs r = wcpJsService.get(id);
		List<WcpJs> wcpJsList = wcpJsService.wcpJsList();
		WcpJs r = new WcpJs();
		if (wcpJsList.size() > 0) {
			r = wcpJsList.get(0);
		} else {
			User user = (User) session.getAttribute("loginUser");
			r.setUserId(user.getId());
			r.setUserName(user.getUsername());
		}
		request.setAttribute("wcpJs", r);
		return "/admin/wcpJs/wcpJsEdit";
	}

	/**
	 * 保存
	 * 
	 * @param integralConfig
	 * @return
	 */
	@RequestMapping("/save")
	@ResponseBody
	public Json save(HttpServletRequest request, HttpSession session,
			WcpJs wcpJs) {
		Json j = new Json();
		try {
			if (!StringUtils.isEmpty(wcpJs.getId())) {
				wcpJsService.edit(wcpJs);
				Log log = new Log();
				log.setType("update");// 操作描述
				log.setAuthor(InfoUtil.getUser(session));// 操作员
				log.setIp(InfoUtil.getIpAddr(request));// ip
				log.setTteble("t_wcpBz");// 操作的表
				log.setTid(wcpJs.getId());// 操作的ID
				log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
				logService.add(log);
			} else {
				wcpJs.setId(UUID.randomUUID().toString());
				wcpJsService.add(wcpJs);
			}
			j.setSuccess(true);
			j.setMsg("保存成功！");
			j.setObj(wcpJs);
		} catch (Exception e) {
			// e.printStackTrace();
			j.setMsg(e.getMessage());
		}
		return j;
	}

	/**
	 * 修改微操盘介绍
	 * 
	 * @param wcpJs
	 * @return
	 */
	@RequestMapping("/edit")
	@ResponseBody
	public Json edit(HttpServletRequest request, HttpSession session,
			WcpJs wcpJs) {
		Json j = new Json();
		try {
			wcpJsService.edit(wcpJs);
			Log log = new Log();
			log.setType("update");// 操作描述
			log.setAuthor(InfoUtil.getUser(session));// 操作员
			log.setIp(InfoUtil.getIpAddr(request));// ip
			log.setTteble("t_wcpJs");// 操作的表
			log.setTid(wcpJs.getId());// 操作的ID
			log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
			logService.add(log);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		j.setSuccess(true);
		j.setMsg("编辑成功！");
		return j;
	}

	/**
	 * 获得微操盘介绍列表
	 * 
	 * @return
	 */
	@RequestMapping("/dataGrid")
	@ResponseBody
	public DataGrid dataGrid(WcpJs p, PageHelper ph) {
		return wcpJsService.dataGrid(p, ph);
	}

	/**
	 * 删除微操盘介绍
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/delete")
	@ResponseBody
	public Json delete(String id) {
		Json j = new Json();
		wcpJsService.delete(id);
		j.setMsg("删除成功！");
		j.setSuccess(true);
		return j;
	}

	@RequestMapping("/batchDelete")
	@ResponseBody
	public Json batchDelete(String ids, HttpSession session) {
		Json j = new Json();
		if (ids != null && ids.length() > 0) {
			for (String id : ids.split(",")) {
				if (id != null) {
					this.delete(id);
				}
			}
		}
		j.setMsg("批量删除成功！");
		j.setSuccess(true);
		return j;
	}
}
