package com.admin.controller;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.MultipartResolver;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import com.admin.comparator.NameComparator;
import com.admin.comparator.SizeComparator;
import com.admin.comparator.TypeComparator;
import com.admin.util.ConfigUtil;
import com.log.ProjectConfig;

/**
 * 文件控制器
 * 
 * @author
 * 
 */
@Controller
@RequestMapping("/fileController")
public class FileController extends BaseController {

	/**
	 * 浏览器服务器附件
	 * 
	 * @param response
	 * @param request
	 * @param session
	 * @return
	 */
	@RequestMapping("/fileManage")
	@ResponseBody
	public Map<String, Object> fileManage(HttpServletResponse response, HttpServletRequest request,
			HttpSession session) {
		Map<String, Object> m = new HashMap<String, Object>();

		// 根目录路径，可以指定绝对路径，比如 /var/www/attached/
		 String rootPath = "/data/images/attached/";
		//String rootPath = ProjectConfig.basePath + "/attached/";
		// 根目录URL，可以指定绝对路径，比如 http://www.yoursite.com/attached/
		 String rootUrl = "http://admin.gtl666.com/attached";
		//String rootUrl = ProjectConfig.baseUrl + "/attached/";

		// 图片扩展名
		String[] fileTypes = new String[] { "gif", "jpg", "jpeg", "png", "bmp" };

		String dirName = request.getParameter("dir");
		if (dirName != null) {
			if (!Arrays.<String>asList(new String[] { "image", "flash", "media", "file" }).contains(dirName)) {
				// out.println("Invalid Directory name.");
				// return;
				try {
					response.getWriter().write("无效的目录名称！");
				} catch (IOException e) {
					e.printStackTrace();
				}
				return m;
			}
			rootPath += dirName + "/";
			rootUrl += dirName + "/";
			File saveDirFile = new File(rootPath);
			if (!saveDirFile.exists()) {
				saveDirFile.mkdirs();
			}
		}

		// 根据path参数，设置各路径和URL
		String path = request.getParameter("path") != null ? request.getParameter("path") : "";
		String currentPath = rootPath + path;
		String currentUrl = rootUrl + path;
		String currentDirPath = path;
		String moveupDirPath = "";
		if (!"".equals(path)) {
			String str = currentDirPath.substring(0, currentDirPath.length() - 1);
			moveupDirPath = str.lastIndexOf("/") >= 0 ? str.substring(0, str.lastIndexOf("/") + 1) : "";
		}

		// 排序形式，name or size or type
		String order = request.getParameter("order") != null ? request.getParameter("order").toLowerCase() : "name";

		// 不允许使用..移动到上一级目录
		if (path.indexOf("..") >= 0) {
			// out.println("Access is not allowed.");
			// return;
			try {
				response.getWriter().write("不允许访问！");
			} catch (IOException e) {
				e.printStackTrace();
			}
			return m;
		}
		// 最后一个字符不是/
		if (!"".equals(path) && !path.endsWith("/")) {
			// out.println("Parameter is not valid.");
			// return;
			try {
				response.getWriter().write("参数无效！");
			} catch (IOException e) {
				e.printStackTrace();
			}
			return m;
		}
		// 目录不存在或不是目录
		File currentPathFile = new File(currentPath);
		if (!currentPathFile.isDirectory()) {
			// out.println("Directory does not exist.");
			// return;
			try {
				response.getWriter().write("目录不存在！");
			} catch (IOException e) {
				e.printStackTrace();
			}
			return m;
		}

		// 遍历目录取的文件信息
		List<Hashtable<String, Object>> fileList = new ArrayList<Hashtable<String, Object>>();
		if (currentPathFile.listFiles() != null) {
			for (File file : currentPathFile.listFiles()) {
				Hashtable<String, Object> hash = new Hashtable<String, Object>();
				String fileName = file.getName();
				if (file.isDirectory()) {
					hash.put("is_dir", true);
					hash.put("has_file", (file.listFiles() != null));
					hash.put("filesize", 0L);
					hash.put("is_photo", false);
					hash.put("filetype", "");
				} else if (file.isFile()) {
					String fileExt = fileName.substring(fileName.lastIndexOf(".") + 1).toLowerCase();
					hash.put("is_dir", false);
					hash.put("has_file", false);
					hash.put("filesize", file.length());
					hash.put("is_photo", Arrays.<String>asList(fileTypes).contains(fileExt));
					hash.put("filetype", fileExt);
				}
				hash.put("filename", fileName);
				hash.put("datetime", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(file.lastModified()));
				fileList.add(hash);
			}
		}

		if ("size".equals(order)) {
			Collections.sort(fileList, new SizeComparator());
		} else if ("type".equals(order)) {
			Collections.sort(fileList, new TypeComparator());
		} else {
			Collections.sort(fileList, new NameComparator());
		}
		m.put("moveup_dir_path", moveupDirPath);
		m.put("current_dir_path", currentDirPath);
		m.put("current_url", currentUrl);
		m.put("total_count", fileList.size());
		m.put("file_list", fileList);

		return m;
	}

	/**
	 * 
	 * @param response
	 * @param request
	 * @param session
	 * @return
	 */
	@RequestMapping("/upload")
	@ResponseBody
	public Map<String, Object> upload(HttpServletResponse response, HttpServletRequest request, HttpSession session) {
		Map<String, Object> m = new HashMap<String, Object>();
		m.put("error", 1);
		m.put("message", "上传失败！");

		String savePath ="/data/images/attached/";
		 // 根目录URL，可以指定绝对路径，比如 http://www.yoursite.com/attached/
		 //String rootUrl = "http://img.gtl666.com/";
		 String saveUrl = "http://img.gtl666.com/attached/";

		// 定义允许上传的文件扩展名
		HashMap<String, String> extMap = new HashMap<String, String>();
		extMap.put("image", ConfigUtil.get("image"));
		extMap.put("flash", ConfigUtil.get("flash"));
		extMap.put("media", ConfigUtil.get("media"));
		extMap.put("file", ConfigUtil.get("file"));


		if (!ServletFileUpload.isMultipartContent(request)) {
			m.put("error", 1);
			m.put("message", "请选择文件！");
			return m;
		}
		// 检查目录
		File uploadDir = new File(savePath);
		if (!uploadDir.isDirectory()) {
			uploadDir.mkdirs();
		}

		// 检查目录写权限
		if (!uploadDir.canWrite()) {
			m.put("error", 1);
			m.put("message", "上传目录没有写权限！");
			return m;
		}

		String dirName = request.getParameter("dir");
		if (dirName == null) {
			dirName = "image";
		}
		if (!extMap.containsKey(dirName)) {
			m.put("error", 1);
			m.put("message", "目录名不正确！");
			return m;
		}

		// 创建文件夹
		savePath += dirName + "/";
		saveUrl += dirName + "/";
		File saveDirFile = new File(savePath);
		if (!saveDirFile.exists()) {
			saveDirFile.mkdirs();
		}
		SimpleDateFormat yearDf = new SimpleDateFormat("yyyy");
		SimpleDateFormat monthDf = new SimpleDateFormat("MM");
		SimpleDateFormat dateDf = new SimpleDateFormat("dd");
		Date date = new Date();
		String ymd = yearDf.format(date) + "/" + monthDf.format(date) + "/" + dateDf.format(date) + "/";
		savePath += ymd;
		saveUrl += ymd;
		File dirFile = new File(savePath);
		if (!dirFile.exists()) {
			dirFile.mkdirs();
		}
		long maxSize = Long.parseLong(ConfigUtil.get("maxFileSize")); // 允许上传最大文件大小(字节)

		if (ServletFileUpload.isMultipartContent(request)) {// 判断表单是否存在enctype="multipart/form-data"

			// 创建一个通用的多部分解析器
			CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(
					request.getSession().getServletContext());
			// 判断 request 是否有文件上传,即多部分请求
			if (multipartResolver.isMultipart(request)) {
				// 转换成多部分request
				MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
//				zeng修改			
				//MultipartResolver resolver = new CommonsMultipartResolver(request.getSession().getServletContext());
			    //MultipartHttpServletRequest multiRequest = resolver.resolveMultipart(request);
				// 取得request中的所有文件名
				Iterator<String> iter = multiRequest.getFileNames();
				while (iter.hasNext()) {
					// 记录上传过程起始时的时间，用来计算上传时间
					int pre = (int) System.currentTimeMillis();
					// 取得上传文件
					MultipartFile file = multiRequest.getFile(iter.next());
					if (file != null) {
						String fileName = file.getOriginalFilename();
						// 检查扩展名
						String fileExt = fileName.substring(fileName.lastIndexOf(".") + 1).toLowerCase();
//						if (!Arrays.<String>asList(extMap.get(dirName).split(",")).contains(fileExt)) {
//							m.put("error", 1);
//							m.put("message", "上传文件扩展名是不允许的扩展名。\n只允许" + extMap.get(dirName) + "格式！");
//							return m;
//						}

						String newFileName = UUID.randomUUID().toString() + "." + fileExt;
						if (!file.isEmpty()) {
							File localFile = new File(savePath, newFileName);
							try {
								file.transferTo(localFile);
							} catch (IllegalStateException | IOException e) {
								return m;
							}
						}
						m.put("url", saveUrl + newFileName);
					}
					int finaltime = (int) System.currentTimeMillis();
					System.out.println(finaltime - pre);
				}

			}

		}
		m.put("error", 0);
		m.put("messages", "上传成功！");
		return m;
	}

}
