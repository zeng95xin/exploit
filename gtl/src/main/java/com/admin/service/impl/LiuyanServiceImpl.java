package com.admin.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.AdDaoI;
import com.admin.dao.LiuYanDaoI;
import com.admin.dao.LoginUserDaoI;
import com.admin.dao.RoleDaoI;
import com.admin.dao.TgdjDaoI;
import com.admin.dao.ThemeDaoI;
import com.admin.dao.UserDaoI;
import com.admin.model.Ad;
import com.admin.model.LoginUser;
import com.admin.model.Tgdj;
import com.admin.model.TliuYan;
import com.admin.model.Tresource;
import com.admin.model.Trole;
import com.admin.model.Tuser;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.service.AdServiceI;
import com.admin.service.LiuyanServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.TgdjServiceI;

import com.admin.service.UserServiceI;
import com.admin.util.MD5Util;
import com.web.entity.Person;
import com.web.util.PageModel;
import com.web.util.TimeUtils;

@Service
public class LiuyanServiceImpl implements LiuyanServiceI {

	@Autowired
	private LiuYanDaoI dao;

	@Override
	public DataGrid dataGrid(TliuYan t, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<TliuYan> ul = new ArrayList<TliuYan>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from TliuYan t ";
		List<TliuYan> l = dao.find(hql + whereHql(t, params) + orderHql(ph),
				params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (TliuYan t1 : l) {
				TliuYan u = new TliuYan();
				BeanUtils.copyProperties(t1, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count("select count(*) " + hql + whereHql(t, params),
				params));
		return dg;
	}

	/**
	 * where条件封装
	 * 
	 * @param ad
	 * @param params
	 * @return
	 */
	private String whereHql(TliuYan ad, Map<String, Object> params) {
		String hql = "";
		if (ad != null) {
			hql += " where 1=1 ";
			/*
			 * if (ad.getUserid() != null) { hql += " and t.userid = :userid";
			 * params.put("userid", ad.getUserid()); }
			 */
		}
		return hql;
	}

	/**
	 * order封装
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	/**
	 * 新增
	 */
	@Override
	public void add(TliuYan t) throws Exception {
		t.setId(UUID.randomUUID().toString());
		t.setLytime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		dao.save(t);
	}

	/**
	 * 删除
	 */
	@Override
	public void delete(String id) throws Exception {
		TliuYan ad = dao.get(TliuYan.class, id);
		dao.delete(ad);
	}

	/**
	 * 修改
	 */
	@Override
	public void update(TliuYan tt) throws Exception {
		TliuYan a = dao.get(TliuYan.class, tt.getId());
		/*
		 * a.setTitle(tt.getTitle()); a.setContent(tt.getContent());
		 * a.setImage(tt.getImage()); a.setJf(tt.getJf());
		 * if(StringUtils.isNotBlank(tt.getGmcs())){ a.setGmcs(tt.getGmcs()); }
		 * if(StringUtils.isNotBlank(tt.getZan())){ a.setZan(tt.getZan()); }
		 * if(StringUtils.isNotBlank(tt.getTucao())){ a.setTucao(tt.getTucao());
		 * }
		 */
		dao.update(a);
	}

	/**
	 * 得到对象
	 */
	@Override
	public TliuYan get(String id) throws Exception {
		return dao.get(TliuYan.class, id);
	}

	@Override
	public List<TliuYan> getList(String userid, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ").append(TliuYan.class.getSimpleName())
				.append(" a ");
		sff.append(" where 1=1");

		if (StringUtils.isNotBlank(userid)) {
			sff.append(" and userid='" + userid + "'");
		}
		sff.append(" order by lytime desc");
		List<TliuYan> list = dao.find(sff.toString(), Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public int getCount(String userid, String sort) {
		String time = TimeUtils.getTime("yyyy-MM-dd HH:mm:ss");
		String now = time.substring(11, 13);
		String hql = "";
		if (StringUtils.isNotBlank(sort)) {
			if (sort.equals("zj")) {
				hql = "select count(*) from TliuYan where 1=1 and substring(add_time,12,8)<'12:00:00' ";
			} else {
				hql = "select count(*) from TliuYan where 1=1 ";

			}
		} else {
			hql = "select count(*) from TliuYan where 1=1 ";
		}

		if (StringUtils.isNotBlank(userid)) {
			hql += " and userid='" + userid + "' ";
		}

		return dao.count(hql).intValue();
	}

}
