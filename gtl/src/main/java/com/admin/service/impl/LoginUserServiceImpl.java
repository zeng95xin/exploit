package com.admin.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.LoginUserDaoI;
import com.admin.dao.PtsBmDaoI;
import com.admin.model.JgDevice;
import com.admin.model.LoginUser;
import com.admin.model.PtsBm;
import com.admin.model.Score;
import com.admin.model.ScoreType;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.LoginUserServiceI;
import com.admin.service.ScoreServiceI;
import com.admin.service.ScoreTypeServiceI;
import com.admin.util.MD5Util;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.huanxin.util.ChartUtlis;
import com.web.util.HttpClientUtil;
import com.web.util.TimeUtils;

@Service
public class LoginUserServiceImpl implements LoginUserServiceI {

	@Autowired
	private LoginUserDaoI dao;

	@Autowired
	private PtsBmDaoI ptsBmDaoI;

	@Autowired
	private ScoreServiceI scoreServiceI;
	@Autowired
	private ScoreTypeServiceI scoreTypeServiceI;

	@Override
	public DataGrid dataGrid(LoginUser user, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<LoginUser> ul = new ArrayList<LoginUser>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from LoginUser t ";
		List<LoginUser> l = dao.find(hql + whereHql(user, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (LoginUser t : l) {
				LoginUser u = new LoginUser();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count(
				"select count(*) " + hql + whereHql(user, params), params));
		return dg;
	}

	private String whereHql(LoginUser user, Map<String, Object> params) {
		String hql = "";
		if (user != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(user.getName())) {
				hql += " and t.name like :name";
				params.put("name", "%%" + user.getName() + "%%");
			}
			if (StringUtils.isNotBlank(user.getTjr())) {
				hql += " and t.tjr like :tjr";
				params.put("tjr", "%%" + user.getTjr() + "%%");
			}

			if (StringUtils.isNotBlank(user.getNickname())) {
				hql += " and t.nickname like :nickname";
				params.put("nickname", "%%" + user.getNickname() + "%%");
			}

			if (user.getStatus() != null) {
				if (!user.getStatus().equals("")) {
					hql += " and t.status = :status";
					params.put("status", user.getStatus());
				}
			}
			if (user.getUsertype() != null) {
				if (!user.getUsertype().equals("")) {
					hql += " and t.usertype = :type";
					params.put("type", user.getUsertype());
				}
			}
			if (user.getStarttime() != null) {
				if (!user.getStarttime().equals("")) {
					hql += " and t.zctime >= :start";
					params.put("start", user.getStarttime());
				}
			}
			if (user.getEndtime() != null) {
				if (!user.getEndtime().equals("")) {
					hql += " and t.zctime <= :end";
					params.put("end", user.getEndtime());
				}
			}
			if (user.getId() != null) {
				if (!user.getId().equals("")) {
					hql += " and t.id = :id";
					params.put("id", user.getId());
				}
			}

		}
		return hql;
	}

	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	synchronized public int add(LoginUser user) throws Exception {
		Map<String, Object> params = new HashMap<String, Object>();
		int errorcode = 0;
		params.put("name", user.getName());
		params.put("phone", user.getPhone());
		if (dao.count(
				"select count(*) from LoginUser t where t.phone = :phone or t.name = :name",
				params) > 0) {
			errorcode = 1;
			// throw new Exception("用户名已存在！");
		} else {
			//user.setId(UUID.randomUUID().toString());
			user.setStatus("1");// 1正常 0禁用
			user.setUsertype("1");// 1普通用户 2投资顾问
			user.setJyz(0);//
			user.setYue("0");//
			user.setTx("");
			user.setLevel("1");
			user.setPwd(MD5Util.md5(user.getPwd()));
			user.setZctime(TimeUtils.getTime("yyyy-MM-dd"));
			
			user.setHostFlag("0");//设置是否为主播字段值为0：不是主播；
			
			List<Map<String, String>> userList=new ArrayList<Map<String,String>>();
			Map<String, String> map=new HashMap<String, String>();
			map.put("username", user.getPhone());
			map.put("password", user.getPhone());
			userList.add(map);
			ChartUtlis cus=new ChartUtlis();
			cus.addImUser(userList);
			
			user.setIm_username(user.getPhone());
			user.setIm_password(user.getPhone());
			dao.save(user);
			errorcode = 0;

			PtsBm ptsBm = new PtsBm();
			String userName = user.getNickname();

			ptsBm.setId(UUID.randomUUID().toString());
			// 用户名 Text 注册用户账号
			ptsBm.setUserId(user.getId());
			ptsBm.setUserName(userName);
			// 收益率 Int 当前赛季的收益率
			ptsBm.setSyl("0");
			// 上缴手续费 Int 金额
			ptsBm.setSjSxf("0");
			// 税务贡献 Int 金额
			ptsBm.setSwGx("0");
			// 结算日期 Date 日期类型
			ptsBm.setJsRq("");
			ptsBm.setDqJb(user.getPtsjb());
			ptsBmDaoI.save(ptsBm);
		}

		return errorcode;
	}

	/**
	 * 禁用
	 */
	@Override
	public void jinyong(String id) throws Exception {
		LoginUser lg = dao.get(LoginUser.class, id);
		lg.setStatus("0");
		dao.update(lg);
	}

	/**
	 * 解禁
	 */
	@Override
	public void jiejin(String id) throws Exception {
		LoginUser lg = dao.get(LoginUser.class, id);
		lg.setStatus("1");
		dao.update(lg);
	}

	/**
	 * 待审核列表，投资顾问
	 */
	@Override
	public DataGrid dataGrid1(LoginUser user, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<LoginUser> ul = new ArrayList<LoginUser>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from LoginUser t ";
		List<LoginUser> l = dao.find(hql + whereHql1(user, params)
				+ orderHql1(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (LoginUser t : l) {
				LoginUser u = new LoginUser();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count("select count(*) " + hql
				+ whereHql1(user, params), params));
		return dg;
	}

	private String whereHql1(LoginUser user, Map<String, Object> params) {
		String hql = "";
		if (user != null) {
			hql += " where t.usertype='2' ";
			if (user.getName() != null) {
				hql += " and t.name like :name";
				params.put("name", "%%" + user.getName() + "%%");
			}
			if (user.getTgstatus() != null) {
				if (!user.getTgstatus().equals("")) {
					hql += " and t.tgstatus = :status";
					params.put("status", user.getTgstatus());
				}
			}

			if (user.getStarttime() != null) {
				if (!user.getStarttime().equals("")) {
					hql += " and t.zctime >= :start";
					params.put("start", user.getStarttime());
				}
			}
			if (user.getEndtime() != null) {
				if (!user.getEndtime().equals("")) {
					hql += " and t.zctime <= :end";
					params.put("end", user.getEndtime());
				}
			}

		}
		return hql;
	}

	private String orderHql1(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void shenhe(String id, String type) throws Exception {
		LoginUser lg = dao.get(LoginUser.class, id);
		lg.setTgstatus(type);
		dao.update(lg);
	}

	@Override
	public LoginUser login(LoginUser user) {

		String registrationId = user.getRegistrationId();
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("name", user.getName());
		params.put("pwd", MD5Util.md5(user.getPwd()));
		LoginUser t = dao.get(
				"from LoginUser t where t.name = :name and t.pwd = :pwd",
				params);

		if (t != null) {
			String userid = t.getId();
			BeanUtils.copyProperties(t, user);
			try {
				String token = "NzZkNGY0NTkyYmQ1OTA5ZTY2NmVhNTI3OmM5YWNjMjJiNjlkODY3YjU5MTMwNjRjNA==";
				String url = "https://device.jpush.cn/v3/devices/"
						+ registrationId; // 绑定用户设备编号

				JgDevice jsdever = new JgDevice();
				jsdever.setAlias(userid.replace("-", ""));
				String requestBody = JSON.toJSONString(jsdever);
				//System.out.println("body:"+requestBody);
				Map<String, String> headerMap = new HashMap<String, String>(); // 请求头header
				headerMap.put("Authorization", "Basic " + token);
				headerMap.put("Accept", "application/json");
				String abc = HttpClientUtil.postHttps(url, requestBody,
						"application/json; charset=utf-8", headerMap);
				//System.out.println("极光绑定设备日志输出：" + abc);
			} catch (Exception e) {
			}
			return user;
		}
		return null;
	}
	
	@Override
	public LoginUser loginSanFang(LoginUser user) {
		
		String registrationId = user.getRegistrationId();
		Map<String, Object> params = new HashMap<String, Object>(1);
		params.put("name", user.getName());
		LoginUser t = dao.get(
				"from LoginUser t where t.name = :name",
				params);
		
		if (t != null) {
			if(!user.getPwd().equals(t.getPwd()) && !MD5Util.md5(user.getPwd()).equals(t.getPwd())){
				return null;
			}
			String userid = t.getId();
			BeanUtils.copyProperties(t, user);
			try {
				String token = "NzZkNGY0NTkyYmQ1OTA5ZTY2NmVhNTI3OmM5YWNjMjJiNjlkODY3YjU5MTMwNjRjNA==";
				String url = "https://device.jpush.cn/v3/devices/"
						+ registrationId; // 绑定用户设备编号
				
				JgDevice jsdever = new JgDevice();
				jsdever.setAlias(userid.replace("-", ""));
				String requestBody = JSON.toJSONString(jsdever);
				//System.out.println("body:"+requestBody);
				Map<String, String> headerMap = new HashMap<String, String>(); // 请求头header
				headerMap.put("Authorization", "Basic " + token);
				headerMap.put("Accept", "application/json");
				String abc = HttpClientUtil.postHttps(url, requestBody,
						"application/json; charset=utf-8", headerMap);
				//System.out.println("极光绑定设备日志输出：" + abc);
			} catch (Exception e) {
			}
			return user;
		}
		return null;
	}

	@Override
	public void reg(LoginUser user) throws Exception {
		// TODO Auto-generated method stub

	}

	/**
	 * 投资顾问列表
	 */
	@Override
	public List<LoginUser> getList() {
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ").append(LoginUser.class.getSimpleName())
		.append(" a ");
		sff.append(" where usertype='2'");
		List<LoginUser> list = dao.getList(sff.toString());
		return list;
	}

	@Override
	public LoginUser getLoginUser(String id) {
		LoginUser l = dao.get(LoginUser.class, id);
		return l;
	}

	@Override
	public List<LoginUser> userListByStatus(String status) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("status", status);
		List<LoginUser> l = dao.find(
				"from LoginUser t where 1=1 and t.status =:status", params);
		return l;
	}

	@Override
	public void update(LoginUser l) throws Exception {
		dao.update(l);
	}

	@Override
	public List<LoginUser> getZjdr(String page, String rows) throws Exception {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		StringBuffer sff = new StringBuffer();
		sff.append("select a.id,a.name,a.nickname,a.tx,a.phone,a.jifen,a.jyz,a.level,(select sum(sl) from ");
		sff.append(" t_jf_xhjl ");
		sff.append(" where userid=a.id and ttype='1') as drfs ");
		sff.append("from ").append(" loginuser ").append(" a ");
		sff.append(" where a.usertype='2' order by drfs desc");
		List<Object[]> list = dao.findBySql(sff.toString(),
				Integer.valueOf(page), Integer.valueOf(rows));
		List<LoginUser> list_1 = new ArrayList<LoginUser>();
		for (int i = 0; i < list.size(); i++) {
			Object[] row = (Object[]) list.get(i);
			String id = (String) row[0];
			String name = (String) row[1];
			String nickname = (String) row[2];
			String tx = (String) row[3];
			String phone = (String) row[4];
			int jifen = (Integer) row[5];
			int jyz = (Integer) row[6];
			String level = (String) row[7];
			double drfs = (Double) row[8];
			LoginUser lg = new LoginUser();
			lg.setId(id);
			lg.setName(name);
			lg.setNickname(nickname);
			lg.setTx(tx);
			lg.setPhone(phone);
			lg.setJifen(jifen);
			lg.setJyz(jyz);
			lg.setLevel(level);
			lg.setDrfs(drfs + "");
			list_1.add(lg);

		}
		return list_1;
	}

	@Override
	public int getCount() {
		String sql = "select count(*) from loginuser where usertype='2'";
		return dao.countBySql(sql).intValue();
	}

	public List<LoginUser> ptsPm(String page, String rows) throws Exception {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		Map<String, Object> params = new HashMap<String, Object>();
		List<LoginUser> l = dao
				.find("from LoginUser t where 1=1 and t.usertype='2' and t.status ='1' and t.ptsjb is not null order by ptsjb desc",
						params, Integer.valueOf(page), Integer.valueOf(rows));
		return l;
	}

	public int ptsPmCount() {
		return dao
				.count("select count(*) from LoginUser t where 1=1 and t.usertype='2' and t.status ='1' and t.ptsjb is not null")
				.intValue();
	}

	@Override
	public LoginUser getUser(String username, String phone) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("name", username);
		params.put("phone", phone);
		LoginUser t = dao.get(
				"from LoginUser t where t.name = :name and t.phone = :phone",
				params);
		if (t != null) {
			return t;
		}
		return null;

	}

	@Override
	public LoginUser getUserByName(String username) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("name", username);
		LoginUser t = dao.get("from LoginUser t where t.name = :name", params);
		if (t != null) {
			return t;
		}
		return null;

	}

	@Override
	public List<LoginUser> getAllUser() {
		String hql = "from LoginUser t where 1=1";
		List<LoginUser> list = dao.getList(hql);
		return list;
	}

	String[] excelHeader = { "用户名", "昵称", "手机号码", "积分", "用户类型", "普通赛金币",
	"赛季赛金币" };

	@Override
	public HSSFWorkbook export(List<LoginUser> list) {
		HSSFWorkbook wb = new HSSFWorkbook();
		HSSFSheet sheet = wb.createSheet("LoginUser");
		HSSFRow row = sheet.createRow((int) 0);
		HSSFCellStyle style = wb.createCellStyle();
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);

		for (int i = 0; i < excelHeader.length; i++) {
			HSSFCell cell = row.createCell(i);
			cell.setCellValue(excelHeader[i]);
			cell.setCellStyle(style);
			sheet.autoSizeColumn(i);
		}

		for (int i = 0; i < list.size(); i++) {
			row = sheet.createRow(i + 1);
			LoginUser p = list.get(i);
			row.createCell(0).setCellValue(p.getName());
			row.createCell(1).setCellValue(p.getNickname());
			row.createCell(2).setCellValue(p.getPhone());
			row.createCell(3).setCellValue(p.getJifen());
			if (p.getUsertype().equals("2")) {
				row.createCell(4).setCellValue("投资顾问");
			} else {
				row.createCell(4).setCellValue("普通用户");
			}

			row.createCell(5).setCellValue(p.getPtsjb());
			row.createCell(6).setCellValue(p.getSjsjb());
		}
		return wb;
	}

	@Override
	public LoginUser getUser(String userid) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("userid", userid);

		LoginUser t = dao.get(
				"from LoginUser t where 1 = 1 and t.id = :userid", params);
		if (t != null) {
			return t;
		}
		return null;
	}

	@Override
	public void mmxg(LoginUser l) throws Exception {
		LoginUser user = dao.get(LoginUser.class, l.getId());
		user.setPwd(MD5Util.md5(l.getPwd()));
		dao.update(user);
	}

	@Override
	public void updateInfo(LoginUser l) throws Exception {
		//		LoginUser user = dao.get(LoginUser.class, l.getId());
		//		user.setNickname(l.getNickname());
		//		user.setTx(l.getTx());
		//		user.setPhone(l.getPhone());
		//		if(l.getJifen()!=null){
		//			//积分保持不变
		//			if(user.getJifen().equals(l.getJifen())){
		//
		//			}else{
		//				List<ScoreType> list=scoreTypeServiceI.findScoreTypes(null);
		//				int scores=user.getJifen();
		//				int updateScore=l.getJifen();
		//				ScoreType scoreType=new ScoreType();
		//				scoreType.setTypeName("系统打赏");
		//				for(int i=0;i<list.size();i++){
		//					if(list.get(i).getTypeName().equals(scoreType.getTypeName())){
		//						scoreType=list.get(i);
		//					}
		//				}
		//				Score score=new Score();
		//				score.setId(UUID.randomUUID().toString());
		//				score.setLoginUser(user);
		//				score.setScoreType(scoreType);
		//				score.setDetiles("后台修改");
		//				score.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		//				score.setScore(new Integer(scores-updateScore).toString());
		//				scoreServiceI.save(score);
		//			}
		//
		//
		//		}
		//		user.setJifen(l.getJifen());
		//		user.setGxqm(l.getGxqm());
		//		/*user.setPtsjb(l.getSjsjb());
		//		user.setSjsjb(l.getPtsjb());*/
		//		user.setPtsjb(l.getPtsjb());
		//		user.setSjsjb(l.getSjsjb());
		//		
		//		dao.update(user);
		saveScore(l, "系统打赏", null, "后台修改");
	}

	@Override
	public LoginUser getUserByPhone(String phone) {
		// TODO Auto-generated method stub
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("phone", phone);
		String hql = "from LoginUser t where 1=1 and t.phone = :phone";
		LoginUser user = dao.get(hql, params);

		//

		return user;
	}

	@Override
	public JSONObject jgtsDevice(String tsbm) {

		return null;
	}

	public static void main(String[] args) {
		String token = "NzZkNGY0NTkyYmQ1OTA5ZTY2NmVhNTI3OmM5YWNjMjJiNjlkODY3YjU5MTMwNjRjNA==";
		String url = "https://device.jpush.cn/v3/devices/" + "000004146c6";
		String userid = "485b36c578fe41e0ba4b363869f669b3";
		JgDevice jsdever = new JgDevice();
		jsdever.setAlias(userid);
		String requestBody = JSON.toJSONString(jsdever);
		Map<String, String> headerMap = new HashMap<String, String>();
		headerMap.put("Authorization", "Basic " + token);
		headerMap.put("Accept", "application/json");
		String abc = HttpClientUtil.postHttps(url, requestBody,
				"application/json; charset=utf-8", headerMap);
		//System.out.println("极光绑定设备日志输出：" + abc);
	}

	@Override
	public List<LoginUser> getNickName(String nickName) {
		// TODO Auto-generated method stub
		String hql = "";
		if (StringUtils.isNotBlank(nickName)) {
			hql = " from LoginUser t where 1=1 and nickname ='" + nickName
					+ "'";
		}
		List<LoginUser> list = dao.find(hql);
		return list;
	}

	@Override
	public List<LoginUser> getTgList() {
		// TODO Auto-generated method stub
		String hql = " from LoginUser where 1=1 and usertype='2'";
		List<LoginUser> list = dao.find(hql);
		return list;
	}

	@Override
	public LoginUser getUserByNickName(String nickName) {
		LoginUser loginuser = null;
		String hql = "";
		if (StringUtils.isNotBlank(nickName)) {
			hql = " from LoginUser t where 1=1 and nickname like '%" + nickName
					+ "%%'";
		}
		List<LoginUser> list = dao.find(hql);
		if (list.size() > 0) {
			loginuser = list.get(0);
		}
		return loginuser;
	}

	@Override
	public List<String> getUseridList() {
		// TODO Auto-generated method stub
		String hql = " from LoginUser where 1=1 ";
		List<LoginUser> list = dao.find(hql);
		List<String> useridlist = new ArrayList<String>();
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				LoginUser c = list.get(i);
				useridlist.add(c.getId().replace("-", "")); // 发送时别名不能有-，替换为""
			}
		}
		return useridlist;
	}

	@Override
	public List<String> getUseridRigstList() {
		String hql = " from LoginUser where 1=1 ";
		List<LoginUser> list = dao.find(hql);
		List<String> useridlist = new ArrayList<String>();
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				LoginUser c = list.get(i);
				useridlist.add(c.getRegistrationId()); 
			}
		}
		return useridlist;
	}

	/**
	 * 保存积分操作信息
	 * @param loginUser  
	 * @param String
	 * @param loginUser2
	 * @param detiles
	 */
	@Override
	public void saveScore(LoginUser loginUser,String reason,LoginUser loginUser2,String detiles){
		List<ScoreType> list=scoreTypeServiceI.findScoreTypes(null);
		if(loginUser!=null){
			if(loginUser.getJifen()!=null){
				LoginUser user = dao.get(LoginUser.class, loginUser.getId());

				//积分操作不变
				if(user.getJifen().equals(loginUser.getJifen())){
					if(reason.equals("新增用户")){
						int scores=user.getJifen();
						ScoreType scoreType=null;
//						scoreType.setTypeName(reason);
						for(int i=0;i<list.size();i++){
							if(list.get(i).getTypeName().equals(reason)){
								scoreType=list.get(i);
							}
						}
						Score score=new Score();
						score.setId(UUID.randomUUID().toString());
						score.setLoginUser(user);
						score.setScoreType(scoreType);
						score.setDetiles(detiles);
						score.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
						score.setScore(new Integer(-scores).toString());
						if(loginUser2!=null){
							score.setByLoginUser(loginUser2);
						}

						scoreServiceI.save(score);
					}else{
						user.setNickname(loginUser.getNickname());
						user.setTx(loginUser.getTx());
						user.setPhone(loginUser.getPhone());
						user.setJifen(loginUser.getJifen());
						user.setGxqm(loginUser.getGxqm());
						/*user.setPtsjb(l.getSjsjb());
					user.setSjsjb(l.getPtsjb());*/
						user.setPtsjb(loginUser.getPtsjb());
						user.setSjsjb(loginUser.getSjsjb());
						dao.update(user);
					}
				}else{
					int scores=user.getJifen();
					int updateScore=loginUser.getJifen();
					ScoreType scoreType=null;
//					scoreType.setTypeName(reason);
					for(int i=0;i<list.size();i++){
						if(list.get(i).getTypeName().equals(reason)){
							scoreType=list.get(i);
						}
					}
					Score score=new Score();
					score.setId(UUID.randomUUID().toString());
					score.setLoginUser(user);
					score.setScoreType(scoreType);
					score.setDetiles(detiles);
					score.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
					score.setScore(new Integer(scores-updateScore).toString());
					if(loginUser2!=null){
						score.setByLoginUser(loginUser2);
						this.saveScore(null, "打赏", loginUser2, detiles);
					}

					scoreServiceI.save(score);
					user.setNickname(loginUser.getNickname());
					user.setTx(loginUser.getTx());
					user.setPhone(loginUser.getPhone());
					user.setJifen(loginUser.getJifen());
					user.setGxqm(loginUser.getGxqm());
					/*user.setPtsjb(l.getSjsjb());
				user.setSjsjb(l.getPtsjb());*/
					user.setPtsjb(loginUser.getPtsjb());
					user.setSjsjb(loginUser.getSjsjb());
					dao.update(user);
				}

			}
		}else{
			if(loginUser2.getJifen()!=null){
				LoginUser user = dao.get(LoginUser.class, loginUser2.getId());

				//积分操作不变
				if(user.getJifen().equals(loginUser2.getJifen())){

				}else{

					int scores=user.getJifen();
					int updateScore=loginUser2.getJifen();
					ScoreType scoreType=null;
//					scoreType.setTypeName(reason);
					for(int i=0;i<list.size();i++){
						if(list.get(i).getTypeName().equals(reason)){
							scoreType=list.get(i);
						}
					}
					Score score=new Score();
					score.setId(UUID.randomUUID().toString());
					score.setLoginUser(user);
					score.setScoreType(scoreType);
					score.setDetiles(detiles);
					score.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
					score.setScore(new Integer(scores-updateScore).toString());


					scoreServiceI.save(score);
					user.setNickname(loginUser2.getNickname());
					user.setTx(loginUser2.getTx());
					user.setPhone(loginUser2.getPhone());
					user.setJifen(loginUser2.getJifen());
					user.setGxqm(loginUser2.getGxqm());
					/*user.setPtsjb(l.getSjsjb());
					user.setSjsjb(l.getPtsjb());*/
					user.setPtsjb(loginUser2.getPtsjb());
					user.setSjsjb(loginUser2.getSjsjb());
					dao.update(user);
				}

			}

		}

	}
	

	/**
	 * 禁用
	 */
	@Override
	public void mjpj(String id,String mjpj) throws Exception {
		LoginUser lg = dao.get(LoginUser.class, id);
		lg.setMjpj(mjpj);
		dao.update(lg);
	}
}
