package com.admin.service.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.HostMainDao;
import com.admin.model.JPushChatModel;
import com.admin.model.LoginUser;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.ChatRoomService;
import com.admin.service.HostMainService;
import com.admin.service.JPushApiClient;
import com.admin.service.LoginUserServiceI;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.huanxin.util.ChartUtlis;
import com.web.entity.ChatHouse;
import com.web.entity.ChatRoom;
import com.web.entity.HostMain;
import com.web.util.TimeUtils;

@Service
public class HostMainServiceImpl implements HostMainService{
	
	@Autowired
	private HostMainDao hostMainDao;
	
	@Autowired
	private LoginUserServiceI loginUserServiceI;
	
	@Autowired
	private JPushApiClient jppApiClient;
	
	@Autowired
	private ChatRoomService chatRoomService;

	/**
	 * 新增播主
	 */
	@Override
	public void add(HostMain hostMain) throws Exception {
		hostMainDao.save(hostMain);
	}

	/**
	 * 主播列表获取
	 */
	@Override
	public DataGrid dataGrid(HostMain hostMain, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<HostMain> lhm = new ArrayList<HostMain>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from HostMain t ";
		List<HostMain> l = hostMainDao.find(hql + whereHql(hostMain, params) + orderHql(ph),
				params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (HostMain t : l) {
				HostMain u = new HostMain();
				String userid = t.getUserId();
				LoginUser lg = loginUserServiceI.getLoginUser(userid);
				if (lg != null && StringUtils.isNotBlank(lg.getNickname())) {
					
					t.setHostNickname(lg.getNickname());
				} else {
					t.setHostNickname("");
				}
				
				BeanUtils.copyProperties(t, u);
				lhm.add(u);
			}
		}
		dg.setRows(lhm);
		dg.setTotal(hostMainDao.count("select count(*) " + hql + whereHql(hostMain, params),
				params));
		return dg;
	}

	/**
	 * 根据ID删除主播
	 */
	@Override
	public void delete(String hostMainId) throws Exception {
		HostMain hsm=hostMainDao.get(HostMain.class, hostMainId);
		hostMainDao.delete(hsm);
	}

	/**
	 * 更新主播
	 */
	@Override
	public void update(HostMain hostMain) throws Exception {
		hostMainDao.update(hostMain);
	}
	@Override
	public void update2(HostMain hostMain) throws Exception {
		HostMain hostMain1=new HostMain();
		hostMain1=hostMainDao.get(HostMain.class, hostMain.getId());
		
		if (StringUtils.isNotBlank(hostMain.getHomeLable())) {
			hostMain1.setHomeLable(hostMain.getHomeLable());
		}
		if (StringUtils.isNotBlank(hostMain.getHostEndTime())) {
			hostMain1.setHostEndTime(hostMain.getHostEndTime());
		}
		if (StringUtils.isNotBlank(hostMain.getHostHomeName())) {
			hostMain1.setHostHomeName(hostMain.getHostHomeName());
		}
		if (StringUtils.isNotBlank(hostMain.getHostIntroduction())) {
			hostMain1.setHostIntroduction(hostMain.getHostIntroduction());
		}
		if (StringUtils.isNotBlank(hostMain.getHostStartTime())) {
			hostMain1.setHostStartTime(hostMain.getHostStartTime());
		}
		if (StringUtils.isNotBlank(hostMain.getHostStype())) {
			hostMain1.setHostStype(hostMain.getHostStype());
		}
		if (StringUtils.isNotBlank(hostMain.getHostLetter())) {
			hostMain1.setHostLetter(hostMain.getHostLetter());
		}
		
		hostMainDao.update(hostMain1);
	}

	/**
	 * 根据ID获取主播信息
	 */
	@Override
	public HostMain get(String hostMainId) throws Exception {
		HostMain hsm=hostMainDao.get(HostMain.class, hostMainId);
		return hsm;
	}

	/**
	 * where条件封装
	 * 
	 * @param ad
	 * @param params
	 * @return
	 */
	private String whereHql(HostMain hostMain, Map<String, Object> params) {
		String hql = "";
		if (hostMain != null) {
			hql += " where 1=1 ";
			/*
			 * if (ad.getLanmu() != null) { hql += " and t.lanmu = :lanmu";
			 * params.put("lanmu", ad.getLanmu()); }
			 */
		
			if (StringUtils.isNotBlank(hostMain.getHostHomeName())) {//直播间名称
				hql += " and t.hostHomeName like = :hostHomeName";
				params.put("hostHomeName", "%%" +hostMain.getHostHomeName()+ "%%");
			}
			if (StringUtils.isNotBlank(hostMain.getHostNickname())) {//主播昵称
				hql += " and t.hostNickname like = :hostNickname";
				params.put("hostNickname", "%%" +hostMain.getHostNickname()+ "%%");
			}
			if (StringUtils.isNotBlank(hostMain.getHostStype())) {//主播类型
				hql += " and t.hostStype  = :hostStype";
				params.put("hostStype", hostMain.getHostStype());
			}
			if (StringUtils.isNotBlank(hostMain.getHostName())) {//主播姓名
				hql += " and t.hostName like = :hostName";
				params.put("hostName", "%%" +hostMain.getHostName()+ "%%");
			}
			

		}
		return hql;
	}

	/**
	 * order封装
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public HostMain getHost(String userId) throws Exception {
		HostMain hm=new HostMain();
		if (StringUtils.isNotBlank(userId)) {
			hm=hostMainDao.get(" from HostMain t where 1=1 and t.userId = '"+userId+"'");
		}
		if (hm != null) {
			return hm;
		}
		return null;
	}

	@Override
	public void shenhe(HostMain t) throws Exception {
		String id = t.getId();
		HostMain hm=hostMainDao.get(HostMain.class,id);
		String userid;
		
		
		if (StringUtils.isNotBlank(t.getHostStatus()) && t.getHostStatus().equals("1")) {
			if (hm != null) {
				hm.setHostStatus(t.getHostStatus());
				//userid = t.getUserId();
				userid = hm.getUserId();
				LoginUser lg=new LoginUser();
				lg=loginUserServiceI.getUser(userid);
				if (lg != null) {
					lg.setHostFlag("1");
				}
				loginUserServiceI.update(lg);
				
				String title01 = "主播申请审核信息";
				String content01 = hm.getHostNickname() + ":您申请主播审核已通过，请重新登录获取新的权限'";
				List<String> rigstId = new ArrayList<String>();
				LoginUser loginUser=loginUserServiceI.getUser(userid);
				rigstId.add(loginUser.getRegistrationId());
				if(rigstId!=null&&rigstId.size()>0){
					JPushChatModel jpModel = new JPushChatModel();
					jpModel.setType("10"); // 申请牛人审核成功
					jpModel.setTitle(title01);// 推送题目
					jpModel.setContent(content01);// 推送内容
					jpModel.setDataId(userid);
					jppApiClient.jPush_rigstId(rigstId, jpModel);
				}
				List<ChatHouse> listh=new ArrayList<ChatHouse>();
				//List<ChatHouse> listCh=new ArrayList<ChatHouse>();
				listh=chatRoomService.getAllByCreateTime(TimeUtils.getTime("yyyy-MM-dd"), hm.getHostName(), hm.getId());
				if (listh == null || listh.size() <= 0) {
					chatRoomService.addChatHouseByHm(hm);
				}
				
				
			}
		}
		if (StringUtils.isNotBlank(t.getHostStatus()) && t.getHostStatus().equals("2")) {
			if (hm != null) {
				hm.setHostStatus(t.getHostStatus());
				
				userid = hm.getUserId();
				LoginUser lg=new LoginUser();
				lg=loginUserServiceI.getUser(userid);
				if (lg != null) {
					lg.setHostFlag("0");
				}
				loginUserServiceI.update(lg);
			}
		}
		hostMainDao.update(hm);
	}

	@Override
	public void update1(HostMain t) throws Exception {
		String id = t.getId();
		HostMain hm=hostMainDao.get(HostMain.class,id);
		hm.setBtgly(t.getBtgly());
		hm.setHostStatus(t.getHostStatus());
		hostMainDao.update(hm);
		
	}

	@Override
	public Map<String, List<HostMain>> getAllHost() throws Exception {
		Map<String, List<HostMain>> map= new HashMap<String, List<HostMain>>();
		String hql=" from HostMain t where 1=1 group by t.hostLetter order by t.hostLetter asc";
		List<HostMain> listHost=hostMainDao.find(hql);
		if (listHost!= null&&listHost.size()>0) {
			for (HostMain hostMain : listHost) {
				List<HostMain> list=new ArrayList<HostMain>();
				String hql1=" from HostMain t where 1=1 and t.hostLetter='"+hostMain.getHostLetter()+"'";
				list=hostMainDao.find(hql1);
				//Collections.sort(list);
				map.put(hostMain.getHostLetter(), list);
			}
			return map;
		}
		return null;
	}

	@Override
	public Map<String, List<String>> getAllHostName() throws Exception {
		Map<String, List<String>> map= new HashMap<String, List<String>>();
		String hql=" from HostMain t where 1=1 group by t.hostLetter order by t.hostLetter asc";
		List<HostMain> listHost=hostMainDao.find(hql);
		if (listHost!= null&&listHost.size()>0) {
			for (HostMain hostMain : listHost) {
				List<HostMain> list=new ArrayList<HostMain>();
				List<String> listName=new ArrayList<String>();
				
				String hql1=" from HostMain t where 1=1 and t.hostLetter='"+hostMain.getHostLetter()+"'";
				list=hostMainDao.find(hql1);
				if (list!= null && list.size()>0) {
					for (HostMain hostMain2 : list) {
						listName.add(hostMain2.getHostHomeName());
					}
				}
				map.put(hostMain.getHostLetter(), listName);
			}
			return map;
		}
		return null;
	}

	@Override
	public List<HostMain> getAllList() {
		List<HostMain> lhm=new ArrayList<HostMain>();
		String hql = "from HostMain t where 1=1 and t.hostStatus='1' " ;
		lhm=hostMainDao.find(hql);
		if (lhm!=null && lhm.size()>0) {
			return lhm;
		}
		return null;
	}

	@Override
	public List<HostMain> getHostName(String hostHomeName) {
		List<HostMain> lhm=new ArrayList<HostMain>();
		String hql = "from HostMain t where 1=1" ;
		
		if (StringUtils.isNotBlank(hostHomeName)) {
			hql+=" and t.hostHomeName= '"+hostHomeName+"' ";
		}
		
		lhm=hostMainDao.find(hql);
		if (lhm!=null && lhm.size()>0) {
			return lhm;
		}
		return null;
	}

	@Override
	public List<HostMain> getByNowTime(String row, String page) {
		
		List<HostMain> lhm=new ArrayList<HostMain>();
		JSONObject json1=new JSONObject();
		ChartUtlis cu=new ChartUtlis();
		try {
			if (StringUtils.isBlank(row)) {
				row="10";
			}
			if (StringUtils.isBlank(page)) {
				page="1";
			}
			
			Date date=new Date();
			//System.out.println(TimeUtils.stringlongToyyyyMMddHHmm(date.getTime()+""));
			String nowDate=TimeUtils.stringlongToyyyyMMddHHmm(date.getTime()+"");//获取当前的时间戳，并转化为yyyyMMddHHmmss
			//System.out.println(nowDate);
			String createTimes=new SimpleDateFormat("yyyy-MM-dd").format(date);//当前日期转化为yyyy-MM-dd
			//System.out.println(createTimes);
			String times=nowDate.substring(8, 10);//获取当前时间的小时数
			//System.out.println(times);
			
			Map<String, Object> params = new HashMap<String, Object>();
			String hql = "from HostMain t where 1=1 and hostStartTime <= '"+ Integer.parseInt(times)
					+"'  and hostEndTime >=  '"+ Integer.parseInt(times)+"' ";
			List<HostMain> hm=hostMainDao.find(hql);
			if (hm!=null && hm.size()>0) {
				
				for (HostMain hostMain : lhm) {
					List<ChatHouse> chat=new ArrayList<ChatHouse>();
					chat=chatRoomService.getAllByCreateTime(createTimes, hostMain.getHostName(),hostMain.getId());
					if (chat == null ) {
						continue;
					}
					json1=JSONObject.parseObject(cu.getRoom(chat.get(0).getId()));
					String data=json1.getString("data");
					//System.out.println("聊天室ID为："+data);
					JSONObject json=new JSONObject();
					json=JSON.parseObject("data");
					hostMain.setLookNum(json.getIntValue("affiliations_count"));
					hostMain.setStatus("1");//直播中
					hostMainDao.update(hostMain);
					
				}
			}
			String hqll = "from HostMain t where 1=1 and hostStartTime <= '"+ Integer.parseInt(times)
					+"'  and hostEndTime >=  '"+ Integer.parseInt(times)+"' order by affiliations_count desc";
			lhm=hostMainDao.find(hqll,Integer.parseInt(page), Integer.parseInt(row));
			if (lhm != null && (lhm.size() > 0)) {
				return lhm;
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}

	@Override
	public List<HostMain> getByAskNum(String row, String page) {
		if (StringUtils.isBlank(row)) {
			row="10";
		}
		if (StringUtils.isBlank(page)) {
			page="1";
		}
		
		List<HostMain> list =new ArrayList<HostMain>();
		String hql=" from HostMain where 1=1 order by hsotAsk desc ";
		
		list=hostMainDao.find(hql, Integer.parseInt(page), Integer.parseInt(row));
		if (list != null && (list.size() > 0)) {
			return list;
		}
		return null;
	}
}
