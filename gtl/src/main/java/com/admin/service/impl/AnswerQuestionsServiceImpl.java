package com.admin.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.AnswerQuestionsDaoI;
import com.admin.model.AnswerQuestions;
import com.admin.model.Tgsq;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.AnswerQuestionsServiceI;

@Service
public class AnswerQuestionsServiceImpl implements AnswerQuestionsServiceI {

	@Autowired
	private AnswerQuestionsDaoI answerQuestionsDao;

	@Override
	public DataGrid dataGrid(AnswerQuestions answerQuestions, PageHelper ph) {
		DataGrid dg = new DataGrid();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from AnswerQuestions t ";
		List<AnswerQuestions> l = answerQuestionsDao.find(
				hql + whereHql(answerQuestions, params) + orderHql(ph), params,
				ph.getPage(), ph.getRows());
		dg.setRows(l);
		dg.setTotal(answerQuestionsDao.count("select count(*) " + hql
				+ whereHql(answerQuestions, params), params));
		return dg;
	}

	private String whereHql(AnswerQuestions answerQuestions,
			Map<String, Object> params) {
		String hql = "";
		if (answerQuestions != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(answerQuestions.getTitle())) {
				hql += " and t.title like :title";
				params.put("title", "%%" + answerQuestions.getTitle() + "%%");
			}
			if (StringUtils.isNotBlank(answerQuestions.getUserName())) {
				hql += " and t.userName like :userName";
				params.put("userName", "%%" + answerQuestions.getUserName()
						+ "%%");
			}
			if (StringUtils.isNotBlank(answerQuestions.getUserId())) {
				hql += " and t.userId = :userId";
				params.put("userId", answerQuestions.getUserId());
			}
			if (StringUtils.isNotBlank(answerQuestions.getReleaseTime())) {
				hql += " and t.releaseTime like :releaseTime";
				params.put("releaseTime",
						"%%" + answerQuestions.getReleaseTime() + "%%");
			}
			if (StringUtils.isNotBlank(answerQuestions.getState())) {
				hql += " and t.state = '" + answerQuestions.getState() + "'";
			}
			if (StringUtils.isNotBlank(answerQuestions.getReleaseContent())) {
				hql += " and t.releaseContent like :releaseContent";
				params.put("releaseContent",
						"%%" + answerQuestions.getReleaseContent() + "%%");
			}
			if (StringUtils.isNotBlank(answerQuestions.getReleaseIp())) {
				hql += " and t.releaseIp = :releaseIp";
				params.put("releaseIp", answerQuestions.getReleaseIp());
			}
			if (StringUtils.isNotBlank(answerQuestions.getReleaseJf())) {
				hql += " and t.releaseJf = :releaseJf";
				params.put("releaseJf", answerQuestions.getReleaseJf());
			}
			if (StringUtils.isNotBlank(answerQuestions.getTzgwId())) {
				hql += " and t.tzgwId = :tzgwId";
				params.put("tzgwId", answerQuestions.getTzgwId());
			} else {
				hql += " and t.tzgwId is null";
			}
			if (StringUtils.isNotBlank(answerQuestions.getFenLei())) {
				hql += " and t.fenLei = :fenLei";
				params.put("fenLei", answerQuestions.getFenLei());
			}
			if (StringUtils.isNotBlank(answerQuestions.getJfflag())) {
				if (answerQuestions.getJfflag().equals("1")) {
					hql += " and t.releaseJf > 0";
				} else {
					hql += " and t.releaseJf = 0";
				}
			}
		}
		return hql;
	}

	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void add(AnswerQuestions answerQuestions) throws Exception {
		AnswerQuestions u = new AnswerQuestions();
		BeanUtils.copyProperties(answerQuestions, u);
		answerQuestionsDao.save(answerQuestions);
	}

	@Override
	public AnswerQuestions get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		AnswerQuestions t = answerQuestionsDao.get(
				"select distinct t from AnswerQuestions t where t.id = :id",
				params);
		return t;
	}

	@Override
	public void edit(AnswerQuestions answerQuestions) throws Exception {
		answerQuestionsDao.update(answerQuestions);
	}

	@Override
	public void delete(String id) {
		answerQuestionsDao.delete(answerQuestionsDao.get(AnswerQuestions.class,
				id));
	}

	@Override
	public List<AnswerQuestions> answerQuestionsList() {
		List<AnswerQuestions> t = answerQuestionsDao
				.find("from AnswerQuestions t ");
		return t;
	}

	@Override
	public List<AnswerQuestions> answerQuestionsList(
			AnswerQuestions answerQuestions, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from AnswerQuestions t ";
		List<AnswerQuestions> l = answerQuestionsDao.find(
				hql + whereHql(answerQuestions, params)
						+ " order by t.releaseTime desc", params,
				Integer.valueOf(page), Integer.valueOf(rows));
		return l;
	}

	@Override
	public int getCount(AnswerQuestions answerQuestions) {
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = "select count(*) from AnswerQuestions t "
				+ whereHql(answerQuestions, params);
		return answerQuestionsDao.count(hql, params).intValue();
	}

	

}
