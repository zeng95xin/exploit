package com.admin.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.AdDaoI;
import com.admin.dao.JfxhDaoI;
import com.admin.dao.LoginUserDaoI;
import com.admin.dao.RoleDaoI;
import com.admin.dao.UserDaoI;
import com.admin.model.Ad;
import com.admin.model.Ggxw;
import com.admin.model.Jfxhjl;
import com.admin.model.LoginUser;
import com.admin.model.Tgsdz;
import com.admin.model.Tgxt;
import com.admin.model.Tresource;
import com.admin.model.Trole;
import com.admin.model.Tuser;
import com.admin.model.TxwxGl;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.service.AdServiceI;
import com.admin.service.GqbServiceI;
import com.admin.service.GxtServiceI;
import com.admin.service.JfxhjlfServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.UserServiceI;
import com.admin.service.XwxServiceI;
import com.admin.util.MD5Util;
import com.web.entity.Person;
import com.web.util.PageModel;
import com.web.util.TimeUtils;

@Service
public class JfxhjlServiceImpl implements JfxhjlfServiceI {

	@Autowired
	private JfxhDaoI dao;

	@Autowired
	private LoginUserServiceI loginUserServiceI;
	
	@Autowired
	private GqbServiceI gqbs;
	
	@Autowired
	private XwxServiceI xwxs;
	
	@Autowired
	private GxtServiceI gxts;
	

	/**
	 * 消费记录新增
	 */
	@Override
	public void add(Jfxhjl j) throws Exception {
		LoginUser lgu=loginUserServiceI.getLoginUser(j.getUserid());
		j.setId(UUID.randomUUID().toString());
		j.setXftime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		if (lgu != null) {
			
			j.setGrzjf(lgu.getJifen().toString());
		}
		String hql002 = "select sum(sl) from t_jf_xhjl";
		Double ptjf = 0.0;
		List<Object[]> list = dao.findBySql(hql002);
		for (int i = 0; i < list.size(); i++) {
			Object ob = list.get(0);
			ptjf = (Double)ob;
		}
		Double all=ptjf+Double.parseDouble(j.getSl());
		j.setPtzjf(all.toString());
		dao.save(j);
	}

	/**
	 * 消费记录查询
	 */
	@Override
	public List<Jfxhjl> getList(String userid, String wzid, String startdate,
			String enddate, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ").append(Jfxhjl.class.getSimpleName())
				.append(" a ");
		sff.append(" where userid='" + userid + "'");
		if (StringUtils.isNoneBlank(wzid)) {
			sff.append(" and wzid='" + wzid + "'");
		}
		if (StringUtils.isNoneBlank(startdate)) {
			startdate = startdate + " 00:00:00";
			sff.append(" and xftime>='" + startdate + "'");
		}
		if (StringUtils.isNoneBlank(enddate)) {
			enddate = enddate + " 23:59:59";
			sff.append(" and xftime='" + enddate + "'");
		}
		sff.append(" order by xftime desc ");
		List<Jfxhjl> list = dao.find(sff.toString(), Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public int getCount(String userid, String wzid, String startdate,
			String enddate) {
		StringBuffer sff = new StringBuffer();
		sff.append("select count(*) from ")
				.append(Jfxhjl.class.getSimpleName()).append(" a ");
		sff.append(" where userid='" + userid + "'");
		if (StringUtils.isNoneBlank(wzid)) {
			sff.append(" and wzid='" + wzid + "'");
		}
		if (StringUtils.isNoneBlank(startdate)) {
			startdate = startdate + " 00:00:00";
			sff.append(" and xftime>='" + startdate + "'");
		}
		if (StringUtils.isNoneBlank(enddate)) {
			enddate = enddate + " 23:59:59";
			sff.append(" and xftime='" + enddate + "'");
		}
		return dao.count(sff.toString()).intValue();
	}

	@Override
	public DataGrid dataGridForOne(Jfxhjl g, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Jfxhjl> ul = new ArrayList<Jfxhjl>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Jfxhjl t ";
		List<Jfxhjl> l = dao.find(hql + whereHqlForOne(g, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Jfxhjl t : l) {
				String userid = t.getUserid(); // 打赏用户id
				String bdsUserid = t.getWzid(); // 被打赏的用户id
				if (StringUtils.isNotBlank(userid)) {
					if ("GUANGFANGID".equals(userid)) {
						t.setUsername("*官方平台*");
						t.setNickname("*官方平台*");
						t.setUserType("3");
						//t.setUserType("*官方平台*");
					} else {
						LoginUser loginuser = loginUserServiceI
								.getLoginUser(userid);
						if (loginuser != null) {
							t.setUsername(loginuser.getName());
							t.setNickname(loginuser.getNickname());
							t.setUserType(loginuser.getUsertype());
//							t.setGrzjf(loginuser.getJifen().toString());
						}
					}
				}
				if (StringUtils.isNotBlank(bdsUserid)) {
					if ("GFWZ".equals(bdsUserid)) {
						t.setBdsUsername("平台文章");
						//t.setBdsUserType("*官方平台*");
						t.setBdsUserType("3");
					} else {
						LoginUser bdsLogin = loginUserServiceI
								.getLoginUser(bdsUserid);
						if (bdsLogin != null) {
							t.setBdsUsername(bdsLogin.getName());
							t.setBdsUserType(bdsLogin.getUsertype());
						}
						TxwxGl tgl=xwxs.getTxwxGl(bdsUserid);
						if (tgl != null) {
							t.setBdsUsername(tgl.getXwfbz());
							t.setBdsUserType("新闻线");
						}
						Tgsdz tz=gqbs.getGqbdz(bdsUserid);
						if (tz != null) {
							t.setBdsUsername(tz.getTgname());
							t.setBdsUserType("股趣吧");
						}
						Tgxt tt=gxts.getGxt(bdsUserid);
						if (tt!=null) {
							t.setBdsUsername(tt.getGxtfbz());
							t.setBdsUserType("股学堂");
						}
					}
				}
				
//				String hql002 = " select abs(SUM(sl+0)) as ptjf, count(userid) as con from t_jf_xhjl t where t.sl+0 <0";
//				String ptjf = "0";
//				List<Object[]> list = dao.findBySql(hql002);
//				for (int i = 0; i < list.size(); i++) {
//					Object[] ob = list.get(0);
//					ptjf = ob[0].toString();
//				}
//				t.setPtzjf("+" + ptjf);
				Jfxhjl u = new Jfxhjl();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count(
				"select count(*) " + hql + whereHqlForOne(g, params), params));
		return dg;
	}

	/**
	 * where 条件封装
	 * 
	 * @param p
	 * @param params
	 * @return
	 */
	private String whereHqlForOne(Jfxhjl g, Map<String, Object> params) {
		//String hql = " where 1=1 and reason like '%%打赏%' ";
		String hql = "";
		if (g != null) {
			hql += " where 1=1 and reason like '%%打赏%' ";
			/*
			 * if (g.getTitle() != null) { hql +=
			 * " and t.dztitel like :dztitel"; params.put("title", "%%" +
			 * g.getTitle() + "%%"); }
			 */
			if (StringUtils.isNotBlank(g.getUsername())) {
				hql += " and t.username like :username";
				params.put("username", "%%" +g.getUsername() + "%%");
			}

		}
		return hql;
	}

	/**
	 * 排序条件
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void delete(String id) {
		Jfxhjl jl=dao.get(Jfxhjl.class, id);
		dao.delete(jl);
		
	}

}
