package com.admin.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.GoodsManagementDaoI;
import com.admin.model.GoodType;
import com.admin.model.GoodsManagement;
import com.admin.model.MallManagement;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.GoodTypeService;
import com.admin.service.GoodsManagementServiceI;
import com.admin.service.MallManagementServiceI;

@Service
public class GoodsManagementServiceImpl implements GoodsManagementServiceI {

	@Autowired
	private GoodsManagementDaoI goodsManagementDao;
	@Autowired
	private MallManagementServiceI mallManagementServiceI;
	
	@Autowired
	private GoodTypeService gdts;

	@Override
	public DataGrid dataGrid(GoodsManagement goodsManagement, PageHelper ph) {
		DataGrid dg = new DataGrid();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from GoodsManagement t ";
		MallManagement mallManagement = null;
		List<GoodsManagement> l = goodsManagementDao.find(
				hql + whereHql(goodsManagement, params) + orderHql(ph), params,
				ph.getPage(), ph.getRows());
		List<GoodsManagement> gms = new ArrayList<GoodsManagement>();
		for (GoodsManagement goodsManagement2 : l) {
			if (goodsManagement2 != null
					&& StringUtils.isNotBlank(goodsManagement2.getMallId())) {
				mallManagement = mallManagementServiceI.get(goodsManagement2
						.getMallId());
				goodsManagement2.setMallName(mallManagement.getMallName());
				if (StringUtils.isNotBlank(goodsManagement2.getGoodType())) {
					GoodType gtt=gdts.get(goodsManagement2.getGoodType());
					if (gtt != null) {
						goodsManagement2.setGoodType(gtt.getTypeName());
					}
				} else {
					goodsManagement2.setGoodType("未选择分类");
				}
			}
			gms.add(goodsManagement2);
		}
		dg.setRows(gms);
		dg.setTotal(goodsManagementDao.count("select count(*) " + hql
				+ whereHql(goodsManagement, params), params));
		return dg;
	}

	private String whereHql(GoodsManagement goodsManagement,
			Map<String, Object> params) {
		String hql = "";
		if (goodsManagement != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(goodsManagement.getGoodsName())) {
				hql += " and t.goodsName like :goodsName";
				params.put("goodsName", "%%" + goodsManagement.getGoodsName()
						+ "%%");
			}
			if (StringUtils.isNotBlank(goodsManagement.getGoodslogo())) {
				hql += " and t.malllogo = :goodsName";
				params.put("malllogo", goodsManagement.getGoodslogo());
			}
			if (StringUtils.isNotBlank(goodsManagement.getGoodsprofile())) {
				hql += " and t.goodsprofile like :goodsprofile";
				params.put("goodsprofile",
						"%%" + goodsManagement.getGoodsprofile() + "%%");
			}
			if (StringUtils.isNotBlank(goodsManagement.getMallId())) {
				hql += " and t.maillId = :maillId";
				params.put("maillId", goodsManagement.getMallId());
			}
			if (StringUtils.isNotBlank(goodsManagement.getGoodsNum())) {
				hql += " and t.goodsNum = :goodsNum";
				params.put("goodsNum", goodsManagement.getGoodsNum());
			}
			if (StringUtils.isNotBlank(goodsManagement.getGoodsPrice())) {
				hql += " and t.goodsprice like :goodsprice";
				params.put("goodsprice", "%%" + goodsManagement.getGoodsPrice()
						+ "%%");
			}
			if (StringUtils.isNotBlank(goodsManagement.getGoodType())) {
				hql += " and t.goodType = :goodType";
				params.put("goodType", goodsManagement.getGoodType());
			}
		}
		return hql;
	}

	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void add(GoodsManagement goodsManagement) throws Exception {
		GoodsManagement u = new GoodsManagement();
		BeanUtils.copyProperties(goodsManagement, u);
		// 得到主图片路径
		// if(StringUtils.isNotBlank(goodsManagement.getGoodslogo())){
		// Integer a =
		// goodsManagement.getGoodslogo().indexOf("&lt;img src=&quot;");
		// Integer b =
		// goodsManagement.getGoodslogo().indexOf("&quot; alt=&quot;&quot; /&gt");
		// if(a!=null&&a!=-1&&b!=null&&b!=-1){
		// String xx=goodsManagement.getGoodslogo().substring(a,
		// b).replace("&lt;img src=&quot;", "");
		// goodsManagement.setGoodslogo(xx);
		// }else {
		// goodsManagement.setGoodslogo("");
		// }
		// }
		// 阿萨德sad&lt;img
		// src=&quot;/gtl/attached/image/2015/08/06/583a3a11-5e9f-4aa8-9e50-fe1e93847f83.png&quot;
		// alt=&quot;&quot; /&gt;擦擦擦手&lt;img
		// src=&quot;/gtl/attached/image/2015/08/06/0c396f41-2cc3-4093-b696-bbe67b1b92cb.gif&quot;
		// alt=&quot;&quot; /&gt;擦拭
		// 得到多图片路径
		// if(StringUtils.isNotBlank(goodsManagement.getGoodsPictures())){
		// Integer a =
		// goodsManagement.getGoodsPictures().indexOf("&lt;img src=&quot;");
		// Integer b =
		// goodsManagement.getGoodsPictures().indexOf("&quot; alt=&quot;&quot; /&gt");
		// //判断是否存在图片
		// if(a!=null&&a!=-1&&b!=null&&b!=-1){
		// StringBuffer sb = new StringBuffer();
		// String[]
		// tupians=goodsManagement.getGoodsPictures().split("&quot; alt=&quot;&quot; /&gt");
		// for (int i = 0; i < tupians.length; i++) {
		// String string = tupians[i];
		// Integer c = string.indexOf("&lt;img src=&quot;");
		// if(StringUtils.isNotBlank(string)&&c!=-1){
		// String xx=string.substring(c).replace("&lt;img src=&quot;", "");
		// sb.append(xx+";");
		// }
		// }
		// String tp=sb.toString();
		// goodsManagement.setGoodsPictures(tp);
		// }else {
		// goodsManagement.setGoodsPictures("");
		// }
		// }
		goodsManagementDao.save(goodsManagement);
	}

	@Override
	public GoodsManagement get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		GoodsManagement t = goodsManagementDao.get(
				"select distinct t from GoodsManagement t where t.id = :id",
				params);
		if (t != null && StringUtils.isNotBlank(t.getMallId())) {
			MallManagement mallManagement = mallManagementServiceI.get(t
					.getMallId());
			t.setMallName(mallManagement.getMallName());
		}
		return t;
	}

	@Override
	public void edit(GoodsManagement goodsManagement) throws Exception {
		// 得到主图片路径
		// if(StringUtils.isNotBlank(goodsManagement.getGoodslogo())){
		// Integer a =
		// goodsManagement.getGoodslogo().indexOf("&lt;img src=&quot;");
		// Integer b =
		// goodsManagement.getGoodslogo().indexOf("&quot; alt=&quot;&quot; /&gt");
		// if(a!=null&&a!=-1&&b!=null&&b!=-1){
		// String xx=goodsManagement.getGoodslogo().substring(a,
		// b).replace("&lt;img src=&quot;", "");
		// goodsManagement.setGoodslogo(xx);
		// }else {
		// goodsManagement.setGoodslogo("");
		// }
		// }
		// 得到多图片路径
		// if(StringUtils.isNotBlank(goodsManagement.getGoodsPictures())){
		// Integer a =
		// goodsManagement.getGoodsPictures().indexOf("&lt;img src=&quot;");
		// Integer b =
		// goodsManagement.getGoodsPictures().indexOf("&quot; alt=&quot;&quot; /&gt");
		// //判断是否存在图片
		// if(a!=null&&a!=-1&&b!=null&&b!=-1){
		// StringBuffer sb = new StringBuffer();
		// String[]
		// tupians=goodsManagement.getGoodsPictures().split("&quot; alt=&quot;&quot; /&gt");
		// for (int i = 0; i < tupians.length; i++) {
		// String string = tupians[i];
		// Integer c = string.indexOf("&lt;img src=&quot;");
		// if(StringUtils.isNotBlank(string)&&c!=-1){
		// String xx=string.substring(c).replace("&lt;img src=&quot;", "");
		// sb.append(xx+";");
		// }
		// }
		// String tp=sb.toString();
		// goodsManagement.setGoodsPictures(tp);
		// }else {
		// goodsManagement.setGoodsPictures("");
		// }
		// }
		goodsManagementDao.update(goodsManagement);
	}

	@Override
	public void delete(String id) {
		goodsManagementDao.delete(goodsManagementDao.get(GoodsManagement.class,
				id));
	}

	@Override
	public List<GoodsManagement> goodsManagementList(String sjid, String page,
			String rows) {
		String hql = "from GoodsManagement t where goodCategory='1'";
		/*if (sjid != null) {
			if (!sjid.equals("")) {
				hql += " where mallId='" + sjid + "'";
			}
		}*/
		if (StringUtils.isNotBlank(sjid)) {
			hql += " and  mallId='" + sjid + "'";
		}
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		List<GoodsManagement> t = goodsManagementDao.find(hql,
				Integer.valueOf(page), Integer.valueOf(rows));

		List<GoodsManagement> gms = new ArrayList<GoodsManagement>();
		MallManagement mallManagement = null;
		for (GoodsManagement goodsManagement2 : t) {
			if (goodsManagement2 != null
					&& StringUtils.isNotBlank(goodsManagement2.getMallId())) {
				mallManagement = mallManagementServiceI.get(goodsManagement2
						.getMallId());
				goodsManagement2.setMallName(mallManagement.getMallName());
			}
			gms.add(goodsManagement2);
		}
		return gms;
	}
	
	@Override
	public List<GoodsManagement> goodsManagementListByType(String goodType,
			String page, String rows) {
		String hql = "from GoodsManagement t where goodCategory='2'";
		/*if (sjid != null) {
			if (!sjid.equals("")) {
				hql += " where mallId='" + sjid + "'";
			}
		}*/
		if (StringUtils.isNotBlank(goodType)) {
			hql += " and goodType='" + goodType + "'";
		}
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		List<GoodsManagement> t = goodsManagementDao.find(hql,
				Integer.valueOf(page), Integer.valueOf(rows));

		List<GoodsManagement> gms = new ArrayList<GoodsManagement>();
		MallManagement mallManagement = null;
		for (GoodsManagement goodsManagement2 : t) {
			if (goodsManagement2 != null
					&& StringUtils.isNotBlank(goodsManagement2.getMallId())) {
				mallManagement = mallManagementServiceI.get(goodsManagement2
						.getMallId());
				goodsManagement2.setMallName(mallManagement.getMallName());
			}
			gms.add(goodsManagement2);
		}
		return gms;
	}
	
	@Override
	public List<GoodsManagement> goodAll(String page, String rows) {
		String hql = "from GoodsManagement t where 1=1 and goodCategory='2'";
		
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		List<GoodsManagement> t = goodsManagementDao.find(hql,
				Integer.valueOf(page), Integer.valueOf(rows));

		List<GoodsManagement> gms = new ArrayList<GoodsManagement>();
		MallManagement mallManagement = null;
		for (GoodsManagement goodsManagement2 : t) {
			if (goodsManagement2 != null
					&& StringUtils.isNotBlank(goodsManagement2.getMallId())) {
				mallManagement = mallManagementServiceI.get(goodsManagement2
						.getMallId());
				goodsManagement2.setMallName(mallManagement.getMallName());
			}
			gms.add(goodsManagement2);
		}
		return gms;
	}

	@Override
	public int getCount(String sjid) {
		String hql = "select count(*) from GoodsManagement";
		if (StringUtils.isNotBlank(sjid)) {
			hql += " where mallId='" + sjid + "'";
		}
		return goodsManagementDao.count(hql).intValue();
	}

	@Override
	public int goodsManagementListByTypeCount(String goodType) {
		String hql = "select count(*) from GoodsManagement where goodCategory='2'";
		if (StringUtils.isNotBlank(goodType)) {
			hql += " and goodType='" + goodType + "'";
		}
		return goodsManagementDao.count(hql).intValue();
	}

	

	

}
