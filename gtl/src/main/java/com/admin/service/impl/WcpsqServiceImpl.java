package com.admin.service.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.CpApplicationDaoI;
import com.admin.dao.GqbdzDaoI;
import com.admin.dao.RoleDaoI;
import com.admin.dao.UserDaoI;
import com.admin.dao.VIPApplicationDaoI;
import com.admin.dao.WcpApplicationDaoI;
import com.admin.dao.WebDaoI;
import com.admin.model.TcpApplication;
import com.admin.model.TczdXz;
import com.admin.model.Tgsdz;
import com.admin.model.Tgxt;
import com.admin.model.Tresource;
import com.admin.model.Trole;
import com.admin.model.Tuser;
import com.admin.model.VIPApplication;
import com.admin.model.WcpApplication;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.service.CpApplicationServiceI;
import com.admin.service.GqbServiceI;
import com.admin.service.GxtServiceI;
import com.admin.service.UserServiceI;
import com.admin.service.VIPApplicationServiceI;
import com.admin.service.WcpsqServiceI;
import com.admin.service.WebServiceI;
import com.admin.util.MD5Util;
import com.web.entity.Person;
import com.web.util.PageModel;
import com.web.util.TimeUtils;

@Service
public class WcpsqServiceImpl implements WcpsqServiceI {

	@Autowired
	private WcpApplicationDaoI dao;

	@Override
	public DataGrid dataGridForOne(WcpApplication g, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<WcpApplication> ul = new ArrayList<WcpApplication>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from WcpApplication t ";
		List<WcpApplication> l = dao.find(hql + whereHqlForOne(g, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (WcpApplication t : l) {
				WcpApplication u = new WcpApplication();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count(
				"select count(*) " + hql + whereHqlForOne(g, params), params));
		return dg;
	}

	@Override
	public DataGrid dataGridForOne2(WcpApplication g, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<WcpApplication> ul = new ArrayList<WcpApplication>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from WcpApplication t ";
		List<WcpApplication> l = dao.find(hql + whereHqlForOne2(g, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (WcpApplication t : l) {
				WcpApplication u = new WcpApplication();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count(
				"select count(*) " + hql + whereHqlForOne(g, params), params));
		return dg;
	}

	/**
	 * where 条件封装
	 * 
	 * @param p
	 * @param params
	 * @return
	 */
	private String whereHqlForOne(WcpApplication g, Map<String, Object> params) {
		String hql = "";
		if (g != null) {
			hql += " where 1=1 ";
			if (g.getUsername() != null) {
				hql += " and t.username like :username";
				params.put("username", "%%" + g.getUsername() + "%%");
			}
		}
		return hql;
	}

	/**
	 * where 条件2封装
	 * 
	 * @param p
	 * @param params
	 * @return
	 */
	private String whereHqlForOne2(WcpApplication g, Map<String, Object> params) {
		String hql = "";
		if (g != null) {
			hql += " where 1=1 and t.shzt in ('1','3','4') ";
			if (g.getUsername() != null) {
				hql += " and t.username like :username";
				params.put("username", "%%" + g.getUsername() + "%%");
			}
		}
		return hql;
	}

	/**
	 * 排序条件
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void delete(String id) {
		dao.delete(dao.get(WcpApplication.class, id));
	}

	@Override
	synchronized public void add(WcpApplication ad) throws Exception {
		/*
		 * Map<String, Object> params = new HashMap<String, Object>();
		 * params.put("gxttitel", p.getGxttitel());
		 */
		ad.setId(UUID.randomUUID().toString());
		ad.setSqtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		Calendar cale = Calendar.getInstance(); // 获取当前时间
		String year = String.valueOf(cale.get(Calendar.YEAR));
		String month = String.valueOf(cale.get(Calendar.MONTH) + 1);
		String dates = String.valueOf(cale.get(Calendar.DATE));
		String hour = String.valueOf(cale.get(Calendar.HOUR_OF_DAY));
		String minute = String.valueOf(cale.get(Calendar.MINUTE));
		String second = String.valueOf(cale.get(Calendar.SECOND));
		String userid = ad.getUserid();
		String djid = year + month + dates + hour + minute + second + userid; // 拼接单据ID
		ad.setDjid(djid);
		ad.setShzt("0");
		dao.save(ad);

	}

	/**
	 * 通过id获取段子实体类
	 */
	@Override
	public WcpApplication get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		WcpApplication t = dao.get(
				"select distinct t from WcpApplication t  where t.id = :id",
				params);
		WcpApplication u = new WcpApplication();
		BeanUtils.copyProperties(t, u);
		return u;
	}

	String[] excelHeader = { "标题", "分类", "发布者", "发布时间" };

	@Override
	public void edit(WcpApplication p) throws Exception {
		WcpApplication a = dao.get(WcpApplication.class, p.getId());
		a.setShzt(p.getShzt());
		if ("3".equals(p.getShzt())) {// 注：若在保证金审核通过（开户成功）条件下，设置微操盘开始时间
			a.setStarttime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		}

		dao.update(a);
	}

	@Override
	public HSSFWorkbook export(List<WcpApplication> list) {
		// TODO Auto-generated method stub
		return null;
	}

	/**
	 * 查看我的wcp记录
	 */
	@Override
	public List<WcpApplication> getList(String userid, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ")
				.append(WcpApplication.class.getSimpleName()).append(" a ");
		sff.append(" where 1=1");
		if (userid != null) { // 当投资顾问自我查看申请列表时只能看到自己的申请列表
			if (!userid.equals("")) {
				sff.append(" and userid='" + userid + "' order by sqtime desc");
			}
		} else {// 当首页查看投顾产品申请列表时只能看到审核通过的
			sff.append(" and shzt='1'  order by sqtime desc");
		}
		List<WcpApplication> list = dao.find(sff.toString(),
				Integer.valueOf(page), Integer.valueOf(rows));
		return list;
	}

	@Override
	public List<WcpApplication> getList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int getCount(String userid) {
		StringBuffer sff = new StringBuffer();
		sff.append("select count(*) from ")
				.append(WcpApplication.class.getSimpleName()).append(" a ");
		sff.append(" where 1=1");
		if (userid != null) { // 当投资顾问自我查看申请列表时只能看到自己的申请列表
			if (!userid.equals("")) {
				sff.append(" and userid='" + userid + "'");
			}
		} else {// 当首页查看投顾产品申请列表时只能看到审核通过的
			sff.append(" and shzt='1'");
		}
		return dao.count(sff.toString()).intValue();
	}

}
