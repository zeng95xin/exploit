package com.admin.service.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.GqbdzDaoI;
import com.admin.dao.RoleDaoI;
import com.admin.dao.TgInfoDaoI;
import com.admin.dao.UserDaoI;
import com.admin.dao.TgInfoDaoI;
import com.admin.dao.WebDaoI;
import com.admin.model.LoginUser;
import com.admin.model.Mrzcjs;
import com.admin.model.TczdXz;
import com.admin.model.Tgdj;
import com.admin.model.Tgsdz;
import com.admin.model.Tgxt;
import com.admin.model.Tresource;
import com.admin.model.Trole;
import com.admin.model.Tuser;
import com.admin.model.TgInfo;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.service.LoginUserServiceI;
import com.admin.service.MrzcjsServiceI;
import com.admin.service.TgInfoServiceI;
import com.admin.service.GqbServiceI;
import com.admin.service.GxtServiceI;
import com.admin.service.UserServiceI;
import com.admin.service.TgInfoServiceI;
import com.admin.service.WebServiceI;
import com.admin.util.MD5Util;
import com.web.entity.Person;
import com.web.util.PageModel;
import com.web.util.TimeUtils;

@Service
public class TgInfoServiceImpl implements TgInfoServiceI {

	@Autowired
	private TgInfoDaoI dao;

	@Autowired
	private LoginUserServiceI loginUserServiceI;
	@Autowired
	private MrzcjsServiceI mrzcjsServiceI;

	@Override
	public DataGrid dataGridForOne(TgInfo g, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<TgInfo> ul = new ArrayList<TgInfo>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from TgInfo t ";
		List<TgInfo> l = dao.find(hql + whereHqlForOne(g, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (TgInfo t : l) {
				TgInfo u = new TgInfo();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count(
				"select count(*) " + hql + whereHqlForOne(g, params), params));
		return dg;
	}

	/**
	 * where 条件封装
	 * 
	 * @param p
	 * @param params
	 * @return
	 */
	private String whereHqlForOne(TgInfo g, Map<String, Object> params) {
		String hql = "";
		/*
		 * if (g != null) { hql += " where 1=1 "; if (g.getTitle() != null) {
		 * hql += " and t.dztitel like :dztitel"; params.put("title", "%%" +
		 * g.getTitle() + "%%"); }
		 * 
		 * 
		 * }
		 */
		return hql;
	}

	/**
	 * 排序条件
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void delete(String id) {
		dao.delete(dao.get(TgInfo.class, id));
	}

	@Override
	synchronized public void add(TgInfo p) throws Exception {

		p.setId(UUID.randomUUID().toString());
		p.setJstime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		dao.save(p);

	}

	/**
	 * 通过id获取段子实体类
	 */
	@Override
	public TgInfo get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		TgInfo t = dao.get("select distinct t from TgInfo t  where t.id = :id",
				params);
		TgInfo u = new TgInfo();
		BeanUtils.copyProperties(t, u);
		return u;
	}

	String[] excelHeader = { "标题", "分类", "发布者", "发布时间" };

	@Override
	public void edit(TgInfo p) throws Exception {
		TgInfo a = dao.get(TgInfo.class, p.getId());

		dao.update(a);
	}

	@Override
	public HSSFWorkbook export(List<TgInfo> list) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<TgInfo> getList(String fl, String gplb, String page, String rows) {
		/*
		 * StringBuffer sff = new StringBuffer();
		 * sff.append("select a from ").append
		 * (TgInfo.class.getSimpleName()).append(" a ");
		 * sff.append(" where 1=1 "); if (StringUtils.isNotBlank(fl)){
		 * sff.append(" and lx ='"+fl+"'"); } if(StringUtils.isNotBlank(gplb)){
		 * sff.append("  and gplb ='"+gplb+"'"); }
		 * sff.append(" order by fbtime desc"); List<TgInfo> list =
		 * dao.find(sff.toString());
		 */
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String hql = "from TgInfo where 1=1";
		if (StringUtils.isNotBlank(fl)) {
			hql += " and lx ='" + fl + "'";
		}
		if (StringUtils.isNotBlank(gplb)) {
			hql += "and gplb ='" + gplb + "'";
		}
		hql += " order by fbtime desc";
		List<TgInfo> list = dao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public List<TgInfo> getCzdList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void tgInfoAutoInserte() {
		// TODO Auto-generated method stub
		/*
		 * Date date = new Date(); SimpleDateFormat formatter = new
		 * SimpleDateFormat("yyyy-MM-dd"); String jstime =
		 * formatter.format(date);
		 */
		List<LoginUser> list = loginUserServiceI.getTgList();
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				LoginUser l = list.get(i);
				String userid = l.getId();
				TgInfo tg = new TgInfo();
				tg.setUserid(userid);
				// tg.setJstime(jstime);
				tg.setId(UUID.randomUUID().toString());
				tg.setJstime(TimeUtils.getTime("yyyy-MM-dd"));
				dao.save(tg);

			}
		}
	}

	@Override
	public void tgInfoAutoUpdate() {
		// TODO Auto-generated method stub
		String jstime = TimeUtils.getTime("yyyy-MM-dd");
		String hql = " from TgInfo where 1=1  and jstime='" + jstime + "'";
		List<TgInfo> list = dao.find(hql);
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				TgInfo tg = list.get(i);
				String userid = tg.getUserid();
				Mrzcjs zcjs = mrzcjsServiceI.getTgInfozc(userid);
				if (zcjs != null) {
					// 收益查询
					if (StringUtils.isNotBlank(zcjs.getZsy())) {
						tg.setPtssy(zcjs.getZsy());
					} else {
						tg.setPtssy("-999999999999");
					}
					if (StringUtils.isNotBlank(zcjs.getSjzsy())) {
						tg.setSjssy(zcjs.getSjzsy());
					} else {
						tg.setSjssy("-999999999999");
					}
				} else {
					tg.setPtssy("-999999999999");
					tg.setSjssy("-999999999999");
				}
				String ptspm = mrzcjsServiceI.getTgPmCount(userid, "0");
				String sjspm = mrzcjsServiceI.getTgPmCount(userid, "1");

				Integer ptpm = Integer.parseInt(ptspm) + 1;
				Integer sjpm = Integer.parseInt(sjspm) + 1;
				tg.setPtspm(ptpm.toString());
				tg.setSjspm(sjpm.toString());
				dao.update(tg);
			}
		}

	}

}
