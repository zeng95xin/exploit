package com.admin.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.admin.dao.AppPayDaoI;
import com.admin.dao.LoginUserDaoI;
import com.admin.dao.impl.JfxhjlDaoImpl;
import com.admin.model.Jfxhjl;
import com.admin.model.LoginUser;
import com.admin.model.TPayOrder;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.AppPayServiceI;
import com.admin.service.LoginUserServiceI;
import com.lcjh.dao.Lcjh2Dao;
import com.lcjh.dao.LcjhCjBuySellRecordDao;
import com.lcjh.entity.Lcjh2;
import com.lcjh.entity.LcjhCjBuySellRecord;
import com.lcjh.enummole.PayOrderTypeEnum;
import com.web.util.TimeUtils;

@Service
public class AppPayServiceImpl implements AppPayServiceI {

	@Autowired
	private AppPayDaoI dao;

	@Autowired
	private LoginUserDaoI loginUserDaoI;

	@Autowired
	private JfxhjlDaoImpl jfxhjlDaoImpl;

	@Autowired
	private LoginUserServiceI loginUserServiceI;
	@Autowired
	private Lcjh2Dao lcjh2Dao;
	@Autowired
	private LcjhCjBuySellRecordDao lcjhCjBuySellRecordDao;

	/**
	 * 新增
	 */
	@Override
	public void add(TPayOrder order) throws Exception {
		dao.save(order);
	}

	/**
	 * 删除
	 */
	@Override
	public void delete(String orderId) throws Exception {
		TPayOrder ad = dao.get(TPayOrder.class, orderId);
		dao.delete(ad);
	}

	/**
	 * 修改
	 */
	@Override
	public void update(TPayOrder order) throws Exception {
		dao.update(order);
	}

	/**
	 * 得到对象
	 */
	@Override
	public TPayOrder get(String orderId) throws Exception {
		return dao.get(TPayOrder.class, orderId);
	}

	@Override
	public String getid(String id) {
//		// 查询支付成功后,购买数量的变化
//		String hql = "from Lcjh2 where userId=:userId";
//		Map<String, Object> params = new HashMap<String, Object>();
//		params.put("userId", id);
//		Lcjh2 lcjh2 = lcjh2Dao.get(hql, params);
//		int count = lcjh2.getBuyCount();
//		Map<String, Object> paramss = new HashMap<String, Object>();
//		String hql1 = "from LcjhUserBuyRecord where userId=:userId and lcjhId=:lcjhId";
//		paramss.put("userId", id);
//		paramss.put("lcjhId", lcjh2.getId());
//		LcjhCjBuySellRecord lcjhCjBuySellRecord = lcjhCjBuySellRecordDao.get(hql1, paramss);
//		if (lcjhCjBuySellRecord != null) {
//			lcjh2.setBuyCount(count + 1);
//			lcjh2Dao.update(lcjh2);
//		}
		return id;
	}

	@Override
	public TPayOrder getByOtherId(String otherOrderId) throws Exception {
		String hql = "from TPayOrder where otherOrderId = :otherOrderId";
		Map<String, Object> params = new HashMap<String, Object>(1);
		params.put("otherOrderId", otherOrderId);
		return dao.get(hql, params);
	}

	@Override
	public TPayOrder getByOtherIdAndUserId(String otherOrderId, String userId, PayOrderTypeEnum payStatus)
			throws Exception {
		String hql = "from TPayOrder where otherOrderId = :otherOrderId and userId = :userId and payStatus = :payStatus";
		Map<String, Object> params = new HashMap<String, Object>(3);
		params.put("otherOrderId", otherOrderId);
		params.put("userId", userId);
		params.put("payStatus", payStatus.getCode());
		return dao.get(hql, params);
	}

	/**
	 * 支付成功的订单处理
	 */
	@Transactional
	@Override
	public void payProcess(TPayOrder order) throws Exception {
		synchronized (this) {
			TPayOrder orderP = this.get(order.getOrderId());
			if ("NOT_PAY".equals(orderP.getPayStatus())) {
				// 执行更改状态为已付款
				orderP.setPayStatus("ALREADY_PAY");
				orderP.setPayTime(new Date());
				orderP.setPayMoney(order.getPayMoney());
				this.update(orderP);
				// 2.1 如果为充值积分
				if ("ADD_INTEGRAL".equals(order.getOrderType())) {
					// 2.1.1，加积分(用户ID在order中能查询)，插入数据到积分增加日志表等
					String userid = order.getUserid();
					long sjjf = order.getIntegralCount();
					LoginUser user = loginUserDaoI.get(LoginUser.class, userid);
					int jf = user.getJifen();
					user.setJifen(jf + Integer.valueOf(sjjf + ""));
					loginUserServiceI.saveScore(null, "充值", user, "充值积分");
					loginUserDaoI.update(user);

					Jfxhjl jj = new Jfxhjl();// 积分消耗记录
					jj.setResaon("充值");// 原因
					jj.setUserid(userid);// 用户id
					jj.setSl("+" + sjjf);// +正 -负 数量
					jj.setWzid("");//
					jj.setId(UUID.randomUUID().toString());// id
					jj.setXftime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 时间
					jfxhjlDaoImpl.save(jj);
				}
				// 2.2如果为商品订单
				if ("BUY_COMMODITY".equals(order.getOrderType())) {

				}
			}
		}
	}

	@Override
	public DataGrid dataGrid(TPayOrder ad, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<TPayOrder> ul = new ArrayList<TPayOrder>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from TPayOrder t ";
		List<TPayOrder> l = dao.find(hql + whereHql(ad, params) + orderHql(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (TPayOrder t : l) {
				TPayOrder u = new TPayOrder();
				String userid = t.getUserid();
				LoginUser lg = loginUserServiceI.getLoginUser(userid);
				String username = null;
				if (lg != null) {
					username = lg.getNickname();
				} else {
					username = "";
				}
				t.setUsername(username);
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count("select count(*) " + hql + whereHql(ad, params), params));
		return dg;
	}

	/**
	 * where条件封装
	 * 
	 * @param ad
	 * @param params
	 * @return
	 */
	private String whereHql(TPayOrder ad, Map<String, Object> params) {
		String hql = "";
		if (ad != null) {
			hql += " where 1=1 ";
			/*
			 * if (ad.getLanmu() != null) { hql += " and t.lanmu = :lanmu";
			 * params.put("lanmu", ad.getLanmu()); }
			 */
			if (StringUtils.isNotBlank(ad.getOrderId())) {
				hql += " and t.orderId = :order_id";
				params.put("order_id", ad.getOrderId());
			}
			if (StringUtils.isNotBlank(ad.getPayStatus())) {
				hql += " and t.payStatus = :pay_status";
				params.put("pay_status", ad.getPayStatus());
			}
			if (StringUtils.isNotBlank(ad.getOrderType())) {
				hql += " and t.orderType = :order_type";
				params.put("order_type", ad.getOrderType());
			}
			if (StringUtils.isNotBlank(ad.getPayChannel())) {
				hql += " and t.payChannel = :pay_channel";
				params.put("pay_channel", ad.getPayChannel());
			}

		}
		return hql;
	}

	/**
	 * order封装
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

}
