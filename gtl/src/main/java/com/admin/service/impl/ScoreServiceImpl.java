package com.admin.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.BaseDaoI;
import com.admin.dao.ScoreDaoI;
import com.admin.model.Ad;
import com.admin.model.LoginUser;
import com.admin.model.Score;
import com.admin.model.ScoreType;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.LoginUserServiceI;
import com.admin.service.ScoreServiceI;
import com.admin.service.baseImpl.BaseServiceImpl;

@Service
public class ScoreServiceImpl extends BaseServiceImpl<Score> implements ScoreServiceI{
		
	private ScoreDaoI scoreDaoI;
	
	@Autowired
	private LoginUserServiceI loginUserServiceI;
	
	@Autowired
	public ScoreServiceImpl(ScoreDaoI scoreDaoI) {
		this.scoreDaoI=scoreDaoI;
		this.baseDaoI=scoreDaoI;
	}

	
	

	

	public Score getScore(String id) {
		return scoreDaoI.get(id);
	}
	 
	@Override
	public List<Score> findScore(Score score) {
		Map<String, Object> params = new HashMap<String, Object>();
		String hql=whereHql(score, params);
		List<Score> scores=scoreDaoI.find(hql, params);
		
		return scores;
	}
	
	/**
	 * HQLWhere条件拼装
	 */
	private String whereHql(Score sc, Map<String, Object> params) {
		StringBuffer hql = new StringBuffer("from Score t ");
		if (sc != null) {
			hql.append(" where 1=1 ");
			
			if(sc.getLoginUser()!=null){
				if(sc.getLoginUser().getId()!=null){
					hql.append(" and t.loginUser = :loginUser");
					params.put("loginUser", sc.getLoginUser());
				}else{
					hql.append(" and t.loginUser = ''");
				}
				
			}
			if(sc.getScoreType()!=null){
				hql.append("  and t.scoreType = :scoreType");
				params.put("scoreType", sc.getScoreType());
			}
			if(StringUtils.isNotBlank(sc.getTime())){
				hql.append(" and t.time like :time");
				params.put("time", "%"+sc.getTime()+"%");
			}
			
			if (StringUtils.isNotBlank(sc.getScore())) {
				hql.append(" and t.score = :score");
				params.put("score", sc.getScore());
			}
			
			hql.append(" order by t.time desc");
		}
		return hql.toString();
	}
	
	
	






	@Override
	public DataGrid dataGridForOne(Score score, PageHelper ph) {
		DataGrid dg = new DataGrid();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql=whereHql(score, params);
		List<Score> scores2=scoreDaoI.find(hql, params, ph.getPage(), ph.getRows());	
		if (scores2!= null && scores2.size() > 0) {
			for (Score t : scores2) {
				//克隆新的对象，防止产生同一个对象
				LoginUser loginUser=t.getLoginUser().clone();
				ScoreType scoreType=t.getScoreType().clone();
				t.setLoginUser(loginUser);
				t.setScoreType(scoreType);
				if(t.getByLoginUser()!=null){
					LoginUser byLoginUser=	t.getByLoginUser().clone();
					t.setByLoginUser(byLoginUser);
				}
				
			}
		}
		dg.setRows(scores2);
 		dg.setTotal(scoreDaoI.count("select count(*) "  + whereHql(score, params), params));
		return dg;
	}
	
	
}
