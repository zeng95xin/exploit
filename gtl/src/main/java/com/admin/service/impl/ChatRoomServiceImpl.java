package com.admin.service.impl;

import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.ChatRoomDao;
import com.admin.service.ChatRoomService;
import com.admin.service.HostMainService;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.huanxin.util.ChartUtlis;
import com.web.entity.ChatHouse;
import com.web.entity.ChatRoom;
import com.web.entity.ChatRoomList;
import com.web.entity.HostMain;
import com.web.util.TimeUtils;

@Service
public class ChatRoomServiceImpl implements ChatRoomService{
	
	@Autowired
	private ChatRoomDao chatRoomDao;
	
	@Autowired
	private HostMainService hostMainService;

	@Override
	public void add(ChatHouse room) throws Exception {
		chatRoomDao.save(room);
		
	}

	@Override
	public ChatHouse getByRoomId(String id) {
		
		return chatRoomDao.get(ChatHouse.class, id);
	}

	@Override
	public void update(ChatHouse room) {
		chatRoomDao.update(room);
		
	}
	
	@Override
	public void updateNew(ChatHouse room) {
		ChatHouse ch =new ChatHouse();
		if (StringUtils.isNotBlank(room.getCreateTime())) {
			ch.setCreateTime(room.getCreateTime());
		}
		if (StringUtils.isNotBlank(room.getDescription())) {
			ch.setDescription(room.getDescription());
		}
		if (StringUtils.isNotBlank(room.getEndTime())) {
			ch.setEndTime(room.getEndTime());
		}
		if (StringUtils.isNotBlank(room.getHostId())) {
			ch.setHostId(room.getHostId());
		}
		if (StringUtils.isNotBlank(room.getId())) {
			ch.setId(room.getId());
		}
		if (StringUtils.isNotBlank(room.getMember())) {
			ch.setMember(room.getMember());
		}
		if (StringUtils.isNotBlank(room.getName())) {
			ch.setName(room.getName());
		}
		if (StringUtils.isNotBlank(room.getOwner())) {
			ch.setOwner(room.getOwner());
		}
		if (StringUtils.isNotBlank(room.getStartTime())) {
			ch.setStartTime(room.getStartTime());
		}
		if (StringUtils.isNotBlank(room.getUpdateTime())) {
			ch.setUpdateTime(room.getUpdateTime());
		}
		if (room.getAffiliations_count() > 0) {
			ch.setAffiliations_count(room.getAffiliations_count());
		}
		if (room.getMaxusers() > 0) {
			ch.setMaxusers(room.getMaxusers());
		}
		if (room.getVisitCount() > 0) {
			ch.setVisitCount(room.getVisitCount());
		}
		
		chatRoomDao.update(ch);
	}

	@Override
	public List<ChatHouse> getByCreateTime(String createTime, String row,
			String page) {
		if (StringUtils.isBlank(row)) {
			row="10";
		}
		if (StringUtils.isBlank(page)) {
			page="1";
		}
		
		String hql=" from ChatHouse where 1=1 ";
		if (StringUtils.isNotBlank(createTime)) {
			hql+=" and createTime= '"+createTime + "' order by affiliations_count desc";
		}
		List<ChatHouse> list=new ArrayList<ChatHouse>();
		list=chatRoomDao.find(hql, Integer.parseInt(page), Integer.parseInt(row));
		if (list != null && (list.size() > 0)) {
			return list;
		}
		return null;
	}

	@Override
	public List<ChatHouse> getAllByCreateTime(String createTime, String owner,String hostId) {
		List<ChatHouse> ch=new ArrayList<ChatHouse>();
		String hql=" from ChatHouse where 1=1 ";
		if (StringUtils.isNotBlank(createTime) && StringUtils.isNotBlank(owner)&& StringUtils.isNotBlank(hostId)) {
			hql += " and owner='"+owner+"' and createTime='"+createTime+"'  and  hostId= '"+hostId+"'";
			ch=chatRoomDao.find(hql);
			if (ch != null && (ch.size() >0)) {
				return ch;
			}
		}
		return null;
	}

	@Override
	public List<ChatHouse> getByCount(String row, String page) {
		if (StringUtils.isBlank(row)) {
			row="10";
		}
		if (StringUtils.isBlank(page)) {
			page="1";
		}
		String hql="";
		Date date=new Date();
		String createTimes=new SimpleDateFormat("yyyy-MM-dd").format(date);//当前日期转化为yyyy-MM-dd
		//System.out.println(createTimes);
		
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(date);
		calendar.add(calendar.DATE, -1);// 把日期往后增加一天.整数往后推,负数往前移动
		date = calendar.getTime(); // 这个时间就是日期往后推一天的结果
		String ztDate = new SimpleDateFormat("yyyy-MM-dd").format(date); // 昨天日期
		
		String sql="select count(1) from ChatHouse where 1=1  and createTime='"+createTimes+"' order by visitCount desc";
		BigInteger bigi=chatRoomDao.countBySql(sql);
		
		List<ChatHouse> list=new ArrayList<ChatHouse>();
		if (bigi.equals(BigInteger.ZERO)) {
			hql=" from ChatHouse where 1=1  and createTime='"+ztDate+"' and houseType='0' order by visitCount desc";
		} else {
			hql=" from ChatHouse where 1=1  and createTime='"+createTimes+"' and houseType='0' order by visitCount desc";
		}
		list=chatRoomDao.find(hql, Integer.parseInt(page), Integer.parseInt(row));
		if (list != null && (list.size() > 0)) {
			return list;
		}
		return null;
	}

	@Override
	public List<ChatRoom> getAllRoom(String hostId, String row, String page) {
		if (StringUtils.isBlank(row)) {
			row="10";
		}
		if (StringUtils.isBlank(page)) {
			page="1";
		}
		List<ChatRoom> listc=new ArrayList<ChatRoom>();
		List<ChatHouse> list=new ArrayList<ChatHouse>();
		String hql=" from ChatHouse where 1=1  and  hostId='"+hostId+"' and houseType='0' order by createTime desc ";
		list=chatRoomDao.find(hql, Integer.parseInt(page), Integer.parseInt(row));
		if (list != null && list.size() > 0) {
			for (int i = 0; i <list.size(); i++) {
				String sql="";
				String sql2="";
				ChatHouse ch=new ChatHouse();
				ch=list.get(i);
				ChatRoom cr=new ChatRoom();
				BeanUtils.copyProperties(ch, cr);
				cr.setNper(i+1);
				ChatHouse list1=new ChatHouse();
				ChatHouse list2=new ChatHouse();
				if (StringUtils.isNotBlank(ch.getCreateTime())) {
					sql=" from ChatHouse where 1=1  and  hostId='"+hostId+"' and houseType='1' and createTime='"+ch.getCreateTime()+"' ";
					sql2=" from ChatHouse where 1=1  and  hostId='"+hostId+"' and houseType='2' and createTime='"+ch.getCreateTime()+"' ";
					list1=chatRoomDao.get(sql);
					list2=chatRoomDao.get(sql2);
				}
				if (list1 != null) {
					cr.setAudioId(list1.getId());
				}
				if (list2 != null) {
					cr.setInteractiveId(list2.getId());
				}
				listc.add(cr);
			}
			return listc;
		}
		return null;
	}

	@Override
	public List<ChatHouse> getAllRoomByHostId(String hostId) {
		List<ChatHouse> list=new ArrayList<ChatHouse>();
		String hql=" from ChatHouse where 1=1 and  hostId='"+hostId+"' and houseType='0' order by createTime desc ";
		list=chatRoomDao.find(hql);
		if (list!= null && (list.size() >0 )) {
			return list;
		}
		return null;
	}
	
	@Override
	public List<ChatHouse> getAllRoomByHostId1(String hostId) {
		List<ChatHouse> list=new ArrayList<ChatHouse>();
		String hql=" from ChatHouse where 1=1 and  hostId='"+hostId+"'  order by createTime desc ";
		list=chatRoomDao.find(hql);
		if (list!= null && (list.size() >0 )) {
			return list;
		}
		return null;
	}

	@Override
	public ChatRoomList getCountByHostId(String hostId) {
		ChatRoomList crl=new ChatRoomList();
		List<ChatHouse> list=new ArrayList<ChatHouse>();
		String hql=" from ChatHouse where 1=1 and  hostId='"+hostId+"' and houseType='0' order by createTime ASC ";
		list=chatRoomDao.find(hql);
		if (list!= null && (list.size() >0 )) {
			crl.setCount(list.size());
			crl.setStartTime(list.get(0).getCreateTime());
		}
		return crl;
	}

	@Override
	public List<ChatRoom> getTodayPoint(String row, String page) {
		String hql="  from ChatHouse WHERE 1=1 and houseType='0'  ORDER BY createTime DESC,createHours DESC";
		List<ChatRoom> listc=new ArrayList<ChatRoom>();
		List<ChatHouse> list=new ArrayList<ChatHouse>();
		if (StringUtils.isBlank(row)) {
			row="10";
		}
		if (StringUtils.isBlank(page)) {
			page="1";
		}
		/*Date date=new Date();
		String createTimes=new SimpleDateFormat("yyyy-MM-dd").format(date);
		
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(date);
		calendar.add(calendar.DATE, -1);// 把日期往后增加一天.整数往后推,负数往前移动
		date = calendar.getTime(); // 这个时间就是日期往后推一天的结果
		String ztDate = new SimpleDateFormat("yyyy-MM-dd").format(date); // 昨天日期
		
		String sql="select count(1) from ChatHouse where 1=1  and createTime='"+createTimes+"' order by createHours desc";
		BigInteger bigi=chatRoomDao.countBySql(sql);
		
		if (bigi.equals(BigInteger.ZERO)) {
			hql=" from ChatHouse where 1=1  and createTime='"+ztDate+"' order by createHours desc";
		} else {
			hql=" from ChatHouse where 1=1  and createTime='"+createTimes+"' order by createHours desc";
		}*/
		list=chatRoomDao.find(hql, Integer.parseInt(page), Integer.parseInt(row));
		if (list != null && (list.size() > 0)) {
			
			for (ChatHouse chatHouse : list) {
				ChatRoom crm=new ChatRoom();
				BeanUtils.copyProperties(chatHouse, crm);
				HostMain hm=new HostMain();
				try {
					if (StringUtils.isNotBlank(chatHouse.getHostId())) {
						hm=hostMainService.get(chatHouse.getHostId());
						if (hm != null ) {
							if (StringUtils.isNotBlank(hm.getHostImage())) {
								crm.setHostImage(hm.getHostImage());
							}
						}
						
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				listc.add(crm);
			}
			return listc;
		}
		
		return null;
	}

	
	@Override
	public List<ChatRoom> getHostTodayPoint(String hostId, String row,
			String page) {
		String hql="  from ChatHouse WHERE 1=1  ";
		List<ChatRoom> listc=new ArrayList<ChatRoom>();
		List<ChatHouse> list=new ArrayList<ChatHouse>();
		if (StringUtils.isBlank(row)) {
			row="10";
		}
		if (StringUtils.isBlank(page)) {
			page="1";
		}
		if (StringUtils.isNotBlank(hostId)) {
			hql+=" and hostId='"+hostId+"' and houseType='0' ORDER BY createTime DESC";
			list=chatRoomDao.find(hql, Integer.parseInt(page), Integer.parseInt(row));
		}
		if (list != null && (list.size() > 0)) {
			
			for (ChatHouse chatHouse : list) {
				ChatRoom crm=new ChatRoom();
				BeanUtils.copyProperties(chatHouse, crm);
				HostMain hm=new HostMain();
				try {
					if (StringUtils.isNotBlank(chatHouse.getHostId())) {
						hm=hostMainService.get(chatHouse.getHostId());
						if (hm != null ) {
							if (StringUtils.isNotBlank(hm.getHostImage())) {
								crm.setHostImage(hm.getHostImage());
							}
						}
						
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				listc.add(crm);
			}
			return listc;
		}
		return null;
	}

	@Override
	public ChatHouse updateHostTodayPoint(String hostId) {
		String hql="  from ChatHouse WHERE 1=1  ";
		String createTime=TimeUtils.getTime("yyyy-MM-dd");
		ChatHouse ch=new ChatHouse();
		if (StringUtils.isNotBlank(hostId)) {
			hql+=" and hostId='"+hostId+"' and createTime='"+createTime+"' and houseType='0' ORDER BY createTime DESC";
			ch=chatRoomDao.get(hql);
		}
		if (ch != null) {
			return ch;
		}
		return null;
	}

	@Override
	public void addChatHouse() throws Exception {
		ChartUtlis cu=new ChartUtlis();
		JSONObject json=new JSONObject();
		JSONObject json1=new JSONObject();
		JSONObject json2=new JSONObject();
		List<HostMain> listh=new ArrayList<HostMain>();
		listh=hostMainService.getAllList();
		if (listh != null && listh.size() > 0) {
			for (HostMain hostMain : listh) {
				ChatHouse chatHouse=new ChatHouse();
				List<ChatHouse> listHouse=new ArrayList<ChatHouse>();
				if (hostMain != null ) {
					json.put("maxusers", 5000);
					
					if (StringUtils.isNotBlank(hostMain.getId())) {
						chatHouse.setHostId(hostMain.getId());
					}
					if (StringUtils.isNotBlank(hostMain.getHostEndTime())) {
						chatHouse.setEndTime(hostMain.getHostEndTime());
					}
					if (StringUtils.isNotBlank(hostMain.getHostStartTime())) {
						chatHouse.setStartTime(hostMain.getHostStartTime());
					}
					if (StringUtils.isNotBlank(hostMain.getHostHomeName())) {
						json.put("name", hostMain.getHostHomeName());//直播间名称，主播申请时就固定了
						chatHouse.setName(hostMain.getHostHomeName());
					}
					if (StringUtils.isNotBlank(hostMain.getHostName())) {
						json.put("owner", hostMain.getHostName());//聊天室创建者的环信账号，既是用户注册时的电话号码
						chatHouse.setOwner(hostMain.getHostName());
					}
					if (StringUtils.isNotBlank(hostMain.getHostIntroduction())) {
						json.put("description", hostMain.getHostIntroduction());//播主的个人简介简介
						chatHouse.setDescription(hostMain.getHostIntroduction());
					}
					chatHouse.setMaxusers(5000);
					chatHouse.setCreateTime(TimeUtils.getTime("yyyy-MM-dd"));
					chatHouse.setUpdateTime(TimeUtils.getTime("yyyy-MM-dd"));
					chatHouse.setCreateHours(TimeUtils.getTime("HH:mm:ss"));
					chatHouse.setVisitCount(0);
					for (int i = 0; i < 3; i++) {
						ChatHouse chatH=new ChatHouse();
						BeanUtils.copyProperties(chatHouse, chatH);
						String requestBody = "";String ids="";String id="";
						requestBody=json.toJSONString();
						json1=JSONObject.parseObject(cu.creatRoom(requestBody));
						ids=json1.getString("data");
						json2=JSON.parseObject(ids);
						id=json2.getString("id");//获取到环信返回的聊天室ID
						if (StringUtils.isNotBlank(id)) {
							//System.out.println(id);
							listHouse=getAllRoomByHostId(chatHouse.getHostId());
							if (listHouse != null && (listHouse.size() > 0)) {
								chatH.setNper(listHouse.size()+1);
							} else {
								chatH.setNper(1);
							}
							chatH.setId(id);
							chatH.setHouseType(i+"");
							
							chatRoomDao.save(chatH);
							//System.out.println("创建聊天室"+chatH.getHouseType()+"成功！");
							
						} else {
							continue;
						}
					}
				}else{
					continue;
				}
			}
		}else{
			//System.out.println("还没有主播存在！");
		}
		
	}

	@Override
	public void addChatHouseByHm(HostMain hm) throws Exception {
		ChartUtlis cu=new ChartUtlis();
		JSONObject json=new JSONObject();
		JSONObject json1=new JSONObject();
		JSONObject json2=new JSONObject();
		
		ChatHouse chatHouse=new ChatHouse();
		List<ChatHouse> listHouse=new ArrayList<ChatHouse>();
		if (hm != null ) {
			json.put("maxusers", 5000);
			
			if (StringUtils.isNotBlank(hm.getId())) {
				chatHouse.setHostId(hm.getId());
			}
			if (StringUtils.isNotBlank(hm.getHostEndTime())) {
				chatHouse.setEndTime(hm.getHostEndTime());
			}
			if (StringUtils.isNotBlank(hm.getHostStartTime())) {
				chatHouse.setStartTime(hm.getHostStartTime());
			}
			if (StringUtils.isNotBlank(hm.getHostHomeName())) {
				json.put("name", hm.getHostHomeName());//直播间名称，主播申请时就固定了
				chatHouse.setName(hm.getHostHomeName());
			}
			if (StringUtils.isNotBlank(hm.getHostName())) {
				json.put("owner", hm.getHostName());//聊天室创建者的环信账号，既是用户注册时的电话号码
				chatHouse.setOwner(hm.getHostName());
			}
			if (StringUtils.isNotBlank(hm.getHostIntroduction())) {
				json.put("description", hm.getHostIntroduction());//播主的个人简介简介
				chatHouse.setDescription(hm.getHostIntroduction());
			}
			chatHouse.setMaxusers(5000);
			chatHouse.setCreateTime(TimeUtils.getTime("yyyy-MM-dd"));
			chatHouse.setUpdateTime(TimeUtils.getTime("yyyy-MM-dd"));
			chatHouse.setCreateHours(TimeUtils.getTime("HH:mm:ss"));
			chatHouse.setVisitCount(0);
			for (int i = 0; i < 3; i++) {
				ChatHouse chatH=new ChatHouse();
				BeanUtils.copyProperties(chatHouse, chatH);
				String requestBody = "";String ids="";String id="";
				requestBody=json.toJSONString();
				json1=JSONObject.parseObject(cu.creatRoom(requestBody));
				ids=json1.getString("data");
				json2=JSON.parseObject(ids);
				id=json2.getString("id");//获取到环信返回的聊天室ID
				if (StringUtils.isNotBlank(id)) {
					//System.out.println(id);
					listHouse=getAllRoomByHostId(chatHouse.getHostId());
					if (listHouse != null && (listHouse.size() > 0)) {
						chatH.setNper(listHouse.size()+1);
					} else {
						chatH.setNper(1);
					}
					chatH.setId(id);
					chatH.setHouseType(i+"");
					
					chatRoomDao.save(chatH);
					//System.out.println("创建聊天室"+chatH.getHouseType()+"成功！");
					
				} else {
					continue;
				}
			}
		}
		
		
	}
	

}
