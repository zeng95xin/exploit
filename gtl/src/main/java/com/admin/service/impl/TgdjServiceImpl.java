package com.admin.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.TgdjDaoI;
import com.admin.model.JPushChatModel;
import com.admin.model.Tgdj;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.JPushApiClient;
import com.admin.service.MyCareServiceI;
import com.admin.service.TgdjServiceI;
import com.web.util.TimeUtils;

@Service
public class TgdjServiceImpl implements TgdjServiceI {
	
//	private static Logger logger=Logger.getLogger(TgdjServiceImpl.class);

	@Autowired
	private TgdjDaoI dao;

	@Autowired
	private JPushApiClient jPushApiClient;

	@Autowired
	private MyCareServiceI myCareServiceI;

	@Override
	public DataGrid dataGrid(Tgdj t, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Tgdj> ul = new ArrayList<Tgdj>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Tgdj t ";
		List<Tgdj> l = dao.find(hql + whereHql(t, params) + orderHql(ph),
				params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Tgdj t1 : l) {
				Tgdj u = new Tgdj();
				BeanUtils.copyProperties(t1, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count("select count(*) " + hql + whereHql(t, params),
				params));
		return dg;
	}

	/**
	 * where条件封装
	 * 
	 * @param ad
	 * @param params
	 * @return
	 */
	private String whereHql(Tgdj ad, Map<String, Object> params) {
		String hql = "";
		if (ad != null) {
			hql += " where 1=1 ";
			if (ad.getUserid() != null) {
				hql += " and t.userid = :userid";
				params.put("userid", ad.getUserid());
			}
			if (ad.getTitle() != null) {
				hql += " and t.title = :title";
				params.put("title", ad.getTitle());
			}
		}
		return hql;
	}

	/**
	 * order封装
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	/**
	 * 新增
	 */
	@Override
	public void add(Tgdj t) throws Exception {
		String id = UUID.randomUUID().toString();
		t.setId(id);
		t.setAdd_time(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		t.setZan("0");
		t.setTucao("0");
		t.setGmcs("0");
		dao.save(t);
		//System.out.println("投顾点金新闻userID"+t.getUserid());
		String title01 = "股天乐信息";
		String content01 = "你关注的股天乐投资顾问发布了点金新闻，请关注此信息!";
//		List<String> alias = myCareServiceI.getUseridList(t.getUserid());
		List<String>reigsts=myCareServiceI.getRigestId(t.getUserid());
		if(reigsts!=null&&reigsts.size()>0){
			JPushChatModel jpModel = new JPushChatModel();
			jpModel.setType("2"); // 投顾点金
			jpModel.setTitle(title01);// 推送题目
			jpModel.setContent(content01);// 推送内容
			jpModel.setDataId(id); // 文章id
			jPushApiClient.jPush_rigstId(reigsts, jpModel);
		}
		
//		jPushApiClient.jPush(alias, jpModel);
	}

	/**
	 * 删除
	 */
	@Override
	public void delete(String id) throws Exception {
		Tgdj ad = dao.get(Tgdj.class, id);
		dao.delete(ad);
	}

	/**
	 * 修改
	 */
	@Override
	public void update(Tgdj tt) throws Exception {
		if (StringUtils.isNotBlank(tt.getId())) {
			Tgdj a = dao.get(Tgdj.class, tt.getId());
			a.setTitle(tt.getTitle());
			a.setContent(tt.getContent());
			a.setImage(tt.getImage());
			a.setZy(tt.getZy());
			a.setJf(tt.getJf());
			if (StringUtils.isNotBlank(tt.getGmcs())) {
				a.setGmcs(tt.getGmcs());
			}
			if (StringUtils.isNotBlank(tt.getZan())) {
				a.setZan(tt.getZan());
			}
			if (StringUtils.isNotBlank(tt.getTucao())) {
				a.setTucao(tt.getTucao());
			}
			dao.update(a);
		} else {

			tt.setId(UUID.randomUUID().toString());
			tt.setAdd_time(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
			tt.setZan("0");
			tt.setTucao("0");
			tt.setGmcs("0");
			dao.save(tt);
		}

	}

	/**
	 * 得到对象
	 */
	@Override
	public Tgdj get(String id) throws Exception {
		return dao.get(Tgdj.class, id);
	}

	@Override
	public List<Tgdj> getList(String userid, String page, String rows,
			String sort, String fl) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ").append(Tgdj.class.getSimpleName())
				.append(" a ");
		sff.append(" where 1=1");
		if (StringUtils.isNotBlank(sort)) {
			if (sort.equals("01")) {// 今天
				sff.append(" and add_time like '%"
						+ TimeUtils.getTime("yyyy-MM-dd") + "%'");

			} else if (sort.equals("02")) {
				sff.append(" and YEARWEEK(date_format(add_time,'%Y-%m-%d')) = YEARWEEK(now()) ");
			} else if (sort.equals("03")) {
				sff.append(" and YEARWEEK(date_format(add_time,'%Y-%m-%d')) < YEARWEEK(now()) ");
			}
		}
		if (StringUtils.isNotBlank(fl)) {
			sff.append(" and type='" + fl + "'");
		}
		if (StringUtils.isNotBlank(userid)) {
			sff.append(" and userid='" + userid + "'");
		}
		sff.append(" order by add_time desc");
		List<Tgdj> list = dao.find(sff.toString(), Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public int getCount(String userid, String sort) {
		String time = TimeUtils.getTime("yyyy-MM-dd HH:mm:ss");
		String now = time.substring(11, 13);
		String hql = "";
		if (StringUtils.isNotBlank(sort)) {
			if (sort.equals("01")) {
				hql = "select count(*) from Tgdj where 1=1 and add_time like '%"
						+ TimeUtils.getTime("yyyy-MM-dd") + "%' ";
			} else if (sort.equals("02")) {
				hql = "select count(*) from Tgdj where 1=1 and YEARWEEK(date_format(add_time,'%Y-%m-%d')) = YEARWEEK(now()) ";
			} else if (sort.equals("03")) {
				hql = "select count(*) from Tgdj where 1=1 and YEARWEEK(date_format(add_time,'%Y-%m-%d')) < YEARWEEK(now())";
			}
		} else {
			hql = "select count(*) from Tgdj where 1=1 ";
		}

		if (StringUtils.isNotBlank(userid)) {
			hql += " and userid='" + userid + "' ";
		}

		return dao.count(hql).intValue();
	}

	@Override
	public List<Tgdj> getGmMaxList() {
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ").append(Tgdj.class.getSimpleName())
				.append(" a ");
		sff.append(" where 1=1 ");
		sff.append("and a.gmcs = (select MAX(b.gmcs) from ")
				.append(Tgdj.class.getSimpleName()).append(" b ) ");

		sff.append(" order by add_time desc");
		List<Tgdj> gmmaxList = dao.find(sff.toString());
		return gmmaxList;
	}

	@Override
	public List<Tgdj> getHpMaxList() {
		// TODO Auto-generated method stub
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ").append(Tgdj.class.getSimpleName())
				.append(" a ");
		sff.append(" where 1=1 ");
		sff.append("and a.zan = (select MAX(b.zan) from ")
				.append(Tgdj.class.getSimpleName()).append(" b ) ");

		sff.append(" order by add_time desc");
		List<Tgdj> hpmaxList = dao.find(sff.toString());
		return hpmaxList;
	}

}
