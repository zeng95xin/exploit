package com.admin.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.WcpJsDaoI;
import com.admin.model.WcpJs;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.WcpJsServiceI;

@Service
public class WcpJsServiceImpl implements WcpJsServiceI {

	@Autowired
	private WcpJsDaoI wcpJsDao;

	@Override
	public DataGrid dataGrid(WcpJs wcpJs, PageHelper ph) {
		DataGrid dg = new DataGrid();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from WcpJs t ";
		List<WcpJs> l = wcpJsDao.find(hql + whereHql(wcpJs, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		dg.setRows(l);
		dg.setTotal(wcpJsDao.count(
				"select count(*) " + hql + whereHql(wcpJs, params), params));
		return dg;
	}

	private String whereHql(WcpJs wcpJs, Map<String, Object> params) {
		String hql = "";
		if (wcpJs != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(wcpJs.getTitle())) {
				hql += " and t.title like :title";
				params.put("title", "%%" + wcpJs.getTitle() + "%%");
			}
			if (StringUtils.isNotBlank(wcpJs.getUserName())) {
				hql += " and t.userName like :userName";
				params.put("userName", "%%" + wcpJs.getUserName() + "%%");
			}
			if (StringUtils.isNotBlank(wcpJs.getUserId())) {
				hql += " and t.userId = :userId";
				params.put("userId", wcpJs.getUserId());
			}
			if (StringUtils.isNotBlank(wcpJs.getReleaseTime())) {
				hql += " and t.releaseTime like :releaseTime";
				params.put("releaseTime", "%%" + wcpJs.getReleaseTime() + "%%");
			}
			if (StringUtils.isNotBlank(wcpJs.getContent())) {
				hql += " and t.content like :content";
				params.put("content", "%%" + wcpJs.getContent() + "%%");
			}
		}
		return hql;
	}

	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void add(WcpJs wcpJs) throws Exception {
		WcpJs u = new WcpJs();
		BeanUtils.copyProperties(wcpJs, u);
		wcpJsDao.save(wcpJs);
	}

	@Override
	public WcpJs get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		WcpJs t = wcpJsDao.get(
				"select distinct t from WcpJs t where t.id = :id", params);
		return t;
	}

	@Override
	public void edit(WcpJs wcpJs) throws Exception {
		wcpJsDao.update(wcpJs);
	}

	@Override
	public void delete(String id) {
		wcpJsDao.delete(wcpJsDao.get(WcpJs.class, id));
	}

	@Override
	public List<WcpJs> wcpJsList() {
		List<WcpJs> t = wcpJsDao
				.find("from WcpJs t order by t.releaseTime desc");
		return t;
	}

}
