package com.admin.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.AdDaoI;
import com.admin.dao.GoldTipsDaoI;
import com.admin.dao.GoldTipsWDDaoI;
import com.admin.dao.LoginUserDaoI;
import com.admin.dao.RoleDaoI;
import com.admin.dao.UserDaoI;
import com.admin.model.Ad;
import com.admin.model.GoldQuesAnw;
import com.admin.model.GoldTips;
import com.admin.model.LoginUser;
import com.admin.model.Tresource;
import com.admin.model.Trole;
import com.admin.model.Tuser;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.service.AdServiceI;
import com.admin.service.GoldTipsServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.UserServiceI;
import com.admin.util.MD5Util;
import com.alibaba.fastjson.JSONObject;
import com.web.entity.Person;
import com.web.util.PageModel;
import com.web.util.TimeUtils;

@Service
public class GoldTipsServiceImpl implements GoldTipsServiceI {

	@Autowired
	private GoldTipsDaoI dao;

	@Autowired
	private GoldTipsWDDaoI goldTipsWDDaoI;

	@Override
	public DataGrid dataGrid(GoldTips g, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<GoldTips> ul = new ArrayList<GoldTips>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from GoldTips t ";
		List<GoldTips> l = dao.find(hql + whereHql(g, params) + orderHql(ph),
				params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (GoldTips t : l) {
				GoldTips u = new GoldTips();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count("select count(*) " + hql + whereHql(g, params),
				params));
		return dg;
	}

	/**
	 * where条件封装
	 * 
	 * @param ad
	 * @param params
	 * @return
	 */
	private String whereHql(GoldTips g, Map<String, Object> params) {
		String hql = "";
		if (g != null) {
			hql += " where 1=1 ";
			if (g.getTitle() != null) {
				hql += " and t.title like :title";
				params.put("title", "%%" + g.getTitle() + "%%");
			}
			if (g.getSydate() != null) {
				hql += " and t.sydate=:sydate";
				params.put("sydate", g.getSydate());
			}
		}
		return hql;
	}

	/**
	 * order封装
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	/**
	 * 新增
	 */
	@Override
	public void add(GoldTips g) throws Exception {
		g.setId(UUID.randomUUID().toString());
		g.setFbtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		dao.save(g);
	}

	/**
	 * 删除
	 */
	@Override
	public void delete(String id) throws Exception {
		GoldTips ad = dao.get(GoldTips.class, id);
		dao.delete(ad);
	}

	/**
	 * 修改
	 */
	@Override
	public void update(GoldTips g) throws Exception {
		GoldTips gt = dao.get(GoldTips.class, g.getId());
		gt.setSydate(g.getSydate());
		gt.setTitle(g.getTitle());
		gt.setContent(g.getContent());
		gt.setJfxh(g.getJfxh());
		dao.update(gt);
	}

	/**
	 * 得到对象
	 */
	@Override
	public GoldTips get(String id) throws Exception {
		return dao.get(GoldTips.class, id);
	}

	@Override
	public List<GoldTips> getList(String userid, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ").append(GoldTips.class.getSimpleName())
				.append(" a ");
		sff.append(" where 1=1 ");
		if (StringUtils.isNotBlank(userid)) {
			sff.append(" and author ='" + userid + "'");
		}
		sff.append(" order by fbtime desc ");
		List<GoldTips> list = dao.find(sff.toString(), Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public void jnck(String jnid, String userid) throws Exception {
		GoldTips g = dao.get(GoldTips.class, jnid);
		String user = g.getUserList();
		String u = user + ";" + userid;
		g.setUserList(u);
		dao.update(g);
	}

	@Override
	public void twadd(String userid, String jnid, String twcontent) {
		GoldTips g = dao.get(GoldTips.class, jnid);
		GoldQuesAnw gqa = new GoldQuesAnw();
		gqa.setId(UUID.randomUUID().toString());
		gqa.setTitle(g.getTitle());
		gqa.setTwcontent(twcontent);
		gqa.setContent(g.getContent());
		gqa.setUserid(userid);
		gqa.setStatus("0");
		gqa.setTwtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		goldTipsWDDaoI.save(gqa);
	}

	@Override
	public DataGrid dataGridWD(GoldQuesAnw g, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<GoldQuesAnw> ul = new ArrayList<GoldQuesAnw>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from GoldQuesAnw t ";
		List<GoldQuesAnw> l = goldTipsWDDaoI.find(hql + whereHql1(g, params)
				+ orderHql1(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (GoldQuesAnw t : l) {
				GoldQuesAnw u = new GoldQuesAnw();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(goldTipsWDDaoI.count(
				"select count(*) " + hql + whereHql1(g, params), params));
		return dg;
	}

	/**
	 * where条件封装
	 * 
	 * @param ad
	 * @param params
	 * @return
	 */
	private String whereHql1(GoldQuesAnw g, Map<String, Object> params) {
		String hql = "";
		if (g != null) {
			hql += " where 1=1 ";
			if (g.getTitle() != null) {
				hql += " and t.title like :title";
				params.put("title", "%%" + g.getTitle() + "%%");
			}
			if (StringUtils.isNotBlank(g.getStatus())) {
				hql += " and t.status=:status";
				params.put("status", g.getStatus());
			}
		}
		return hql;
	}

	/**
	 * order封装
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql1(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public GoldQuesAnw getGQA(String id) throws Exception {

		return goldTipsWDDaoI.get(GoldQuesAnw.class, id);
	}

	@Override
	public void wthd(GoldQuesAnw g) throws Exception {
		GoldQuesAnw gg = goldTipsWDDaoI.get(GoldQuesAnw.class, g.getId());
		gg.setHdcontent(g.getHdcontent());
		gg.setStatus("1");
		gg.setHdtime(g.getHdtime());
		gg.setHdry(g.getHdry());
		gg.setHdryid(g.getHdryid());
		goldTipsWDDaoI.update(gg);
	}

	@Override
	public List<GoldQuesAnw> getWDList(String userid, String jnid) {
		StringBuffer sff = new StringBuffer();
		String date = TimeUtils.getTime("yyyy-MM-dd");
		sff.append("select a from ").append(GoldQuesAnw.class.getSimpleName())
				.append(" a ");
		sff.append(" where userid='" + userid + "'");
		if (StringUtils.isNotBlank(jnid)) {
			sff.append(" and jnid ='" + jnid + "'");
		}
		List<GoldQuesAnw> list = goldTipsWDDaoI.getList(sff.toString());
		return list;
	}

	@Override
	public void hjwdpj(String id, String myd) throws Exception {
		GoldQuesAnw gg = goldTipsWDDaoI.get(GoldQuesAnw.class, id);
		gg.setMyd(myd);
		goldTipsWDDaoI.update(gg);
	}

	@Override
	public int getCount(String userid) {
		StringBuffer sff = new StringBuffer();
		String date = TimeUtils.getTime("yyyy-MM-dd");
		sff.append("select count(*)  from ")
				.append(GoldTips.class.getSimpleName()).append(" a ");
		sff.append(" where 1=1 ");
		if (StringUtils.isNotBlank(userid)) {
			sff.append(" and author = '" + userid + "'");
		}
		return dao.count(sff.toString()).intValue();
	}

}
