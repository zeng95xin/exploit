package com.admin.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.GiftDao;
import com.admin.model.LoginUser;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.GiftService;
import com.web.entity.Gift;
import com.web.entity.HostMain;

@Service
public class GiftServiceImpl implements GiftService {
	
	@Autowired
	private GiftDao giftDao;

	@Override
	public void add(Gift gift) throws Exception {
		giftDao.save(gift);
	}

	@Override
	public DataGrid dataGrid(Gift gift, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Gift> lhm = new ArrayList<Gift>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Gift t ";
		List<Gift> l = giftDao.find(hql + whereHql(gift, params) + orderHql(ph),
				params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Gift t : l) {
				Gift u = new Gift();
				BeanUtils.copyProperties(t, u);
				lhm.add(u);
			}
		}
		dg.setRows(lhm);
		dg.setTotal(giftDao.count("select count(*) " + hql + whereHql(gift, params),
				params));
		return dg;
	}

	private String orderHql(PageHelper ph) {
			String orderString = "";
			if (ph.getSort() != null && ph.getOrder() != null) {
				orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
			}
			return orderString;
	}

	private String whereHql(Gift gift, Map<String, Object> params) {
		String hql = "";
		if (gift != null) {
			hql += " where 1=1 ";
			
			if (StringUtils.isNotBlank(gift.getGiftName())) {//主播昵称
				hql += " and t.giftName like = :giftName";
				params.put("giftName", "%%" +gift.getGiftName()+ "%%");
			}
		}
		return hql;
		
	}

	@Override
	public void delete(String giftId) throws Exception {
		giftDao.delete(giftDao.get(Gift.class, giftId));
	}

	@Override
	public void update(Gift gift) throws Exception {
		giftDao.update(gift);

	}

	@Override
	public Gift get(String giftId) throws Exception {
		return giftDao.get(Gift.class, giftId);
	}

	@Override
	public List<Gift> getAll() {
		List<Gift> list=new ArrayList<Gift>();
		String hql = " from Gift t ";
		list=giftDao.find(hql);
		if ((list != null ) && (list.size() > 0)) {
			return list;
		}
		return null;
	}

}
