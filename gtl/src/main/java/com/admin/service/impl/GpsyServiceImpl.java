package com.admin.service.impl;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.math.BigDecimal;
import java.net.URL;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.GpsyDaoI;
import com.admin.dao.GqbdzDaoI;
import com.admin.dao.RoleDaoI;
import com.admin.dao.UserDaoI;
import com.admin.dao.GgxwDaoI;
import com.admin.dao.WebDaoI;
import com.admin.model.LoginUser;
import com.admin.model.MnSjBm;
import com.admin.model.MnSjZd;
import com.admin.model.Mncp;
import com.admin.model.Mrzcjs;
import com.admin.model.TczdXz;
import com.admin.model.Tgdj;
import com.admin.model.Tgsdz;
import com.admin.model.Tgxt;
import com.admin.model.Tresource;
import com.admin.model.Trole;
import com.admin.model.Tuser;
import com.admin.model.Ggxw;
import com.admin.model.gpsy;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.service.GgxwServiceI;
import com.admin.service.GpsyServiceI;
import com.admin.service.GqbServiceI;
import com.admin.service.GxtServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.MnSjBmServiceI;
import com.admin.service.MnSjZdServiceI;
import com.admin.service.MncpServiceI;
import com.admin.service.MrzcjsServiceI;
import com.admin.service.UserServiceI;
import com.admin.service.GgxwServiceI;
import com.admin.service.WebServiceI;
import com.admin.util.MD5Util;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.web.entity.Person;
import com.web.util.PageModel;
import com.web.util.TimeUtils;

@Service
public class GpsyServiceImpl implements GpsyServiceI {

	@Autowired
	private GpsyDaoI dao;

	@Autowired
	private LoginUserServiceI loginUserServiceI;

	@Autowired
	private MnSjZdServiceI mnSjZdServiceI;

	@Autowired
	private MncpServiceI mncpServiceI;

	@Autowired
	private MnSjBmServiceI mnSjBmServiceI;

	@Autowired
	private MrzcjsServiceI mrzcjsServiceI;

	@Override
	public DataGrid dataGridForOne(gpsy g, PageHelper ph) {
		DecimalFormat df = new DecimalFormat("#.###");
		DataGrid dg = new DataGrid();
		List<gpsy> ul = new ArrayList<gpsy>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from gpsy t ";
		List<gpsy> l = dao.find(hql + whereHqlForOne(g, params) + orderHql(ph),
				params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (gpsy t : l) {
				gpsy u = new gpsy();
				String userid = t.getUserid();
				String sjid = t.getSjid();
				LoginUser loginuser = loginUserServiceI.getUser(userid);

				if (loginuser != null) {
					t.setJrcg(loginuser.getName()); // 匹配出该用户username
				} else {
					t.setJrcg("");
				}

				MnSjZd mnsj = mnSjZdServiceI.get(sjid);
				if (mnsj != null) {
					t.setSjname(mnsj.getSjName());
				} else {
					t.setSjname("普通赛");
				}
				String mrlx=t.getMrlx();
				Mrzcjs mrs=mrzcjsServiceI.getMyzc(userid, mrlx, sjid);
				if (mrs != null) {
					String position=df.format(Double.parseDouble(t.getCgsl())*Double.parseDouble(t.getZgcbjg())/Double.parseDouble(mrs.getZczl())*100);
					t.setPosition(position);
				}
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count(
				"select count(*) " + hql + whereHqlForOne(g, params), params));
		return dg;
	}

	/**
	 * where 条件封装
	 * 
	 * @param p
	 * @param params
	 * @return
	 */
	private String whereHqlForOne(gpsy g, Map<String, Object> params) {
		String hql = "";
		String userid = "";
		if (g != null) {
			hql += " where 1=1  and t.cgsl <>'0.0'";
			if (g.getJrcg() != null) {
				String username = g.getJrcg();
				LoginUser loginuser = loginUserServiceI.getUserByName(username);
				if (loginuser != null) {
					userid = loginuser.getId();
				}

				hql += " and t.userid = :userid";
				params.put("userid", userid);
			}
			if (StringUtils.isNotBlank(g.getPosition())) {
				String position=g.getPosition();
				hql += " and t.position like :position";
				params.put("position","%%"+ position+"%%");
			}
			if (g.getNickname() != null && !"".equals(g.getNickname())) {
				String nickname = g.getNickname();
				LoginUser loginuser = loginUserServiceI
						.getUserByNickName(nickname);
				if (loginuser != null) {
					userid = loginuser.getId();
				}

				hql += " and t.userid = :userid";
				params.put("userid", userid);
			}
		}
		return hql;
	}

	/**
	 * 排序条件
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void delete(String id) {
		dao.delete(dao.get(gpsy.class, id));
	}

	@Override
	synchronized public void add(gpsy p) throws Exception {
		p.setId(UUID.randomUUID().toString());
		p.setJstime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		dao.save(p);
	}

	/**
	 * 通过id获取段子实体类
	 */
	@Override
	public gpsy get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		gpsy t = dao.get("select distinct t from gpsy t  where t.id = :id",
				params);
		gpsy u = new gpsy();
		BeanUtils.copyProperties(t, u);
		return u;
	}

	String[] excelHeader = { "标题", "分类", "发布者", "发布时间" };

	@Override
	public void edit(gpsy p) throws Exception {
		dao.update(p);
	}

	@Override
	public HSSFWorkbook export(List<gpsy> list) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<gpsy> getList(String fl, String gplb, String page, String rows) {
		/*
		 * StringBuffer sff = new StringBuffer();
		 * sff.append("select a from ").append
		 * (gpsy.class.getSimpleName()).append(" a ");
		 * sff.append(" where 1=1 "); if (StringUtils.isNotBlank(fl)){
		 * sff.append(" and lx ='"+fl+"'"); } if(StringUtils.isNotBlank(gplb)){
		 * sff.append("  and gplb ='"+gplb+"'"); }
		 * sff.append(" order by fbtime desc"); List<gpsy> list =
		 * dao.find(sff.toString());
		 */
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String hql = "from gpsy where 1=1";
		if (StringUtils.isNotBlank(fl)) {
			hql += " and lx ='" + fl + "'";
		}
		if (StringUtils.isNotBlank(gplb)) {
			hql += "and gplb ='" + gplb + "'";
		}
		hql += " order by fbtime desc";
		List<gpsy> list = dao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public List<gpsy> getCzdList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public gpsy getGpsy(String userid, String zqdm, String mrlx, String sjid) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("userid", userid);
		params.put("zqdm", zqdm);
		params.put("mrlx", mrlx);
		params.put("sjid", sjid);
		gpsy t = dao
				.get("select distinct t from gpsy t  where t.userid = :userid and t.mrlx = :mrlx and t.zqdm = :zqdm and t.sjid = :sjid ",
						params);
		return t;
	}

	/**
	 * 获取持仓数据list
	 */
	@Override
	public List<gpsy> getGpsyList() {
		// String hql =
		// "from gpsy where 1=1 and cgsl <> '0.0' order by jstime desc ";
		String hql = "from gpsy where 1=1  order by jstime desc ";
		List<gpsy> list = dao.find(hql);
		return list;
	}

	@Override
	public List<gpsy> getMyccList(String userid, String mrlx, String page,
			String rows, String sjid) {
		/**
		 * 获取赛季赛最新一次数据
		 */
		/*
		 * List<MnSjZd> mnsjList = mnSjZdServiceI.getMnsjList(); String zxSjid =
		 * ""; String sjzcbj = ""; if(mnsjList.size()>0){ MnSjZd mnsjzd =
		 * mnsjList.get(0); zxSjid = mnsjzd.getId(); sjzcbj =
		 * mnsjzd.getChuShi(); //赛季赛本金 }
		 */
		String hql = "from gpsy where 1=1 ";
		if (StringUtils.isNotBlank(userid)) {
			hql += " and userid= '" + userid + "'";
		}
		if (StringUtils.isNotBlank(mrlx)) {
			if (mrlx.equals("0")) {
				hql += " and mrlx= '" + mrlx + "'";
			} else if (mrlx.equals("1")) {
				hql += " and mrlx= '" + mrlx + "' and sjid='" + sjid + "'";
			}
		}
		hql += " and cgsl <> '0.0' order by jstime desc";
		List<gpsy> list = null;
		if (StringUtils.isBlank(page) && StringUtils.isBlank(rows)) {
			list = dao.find(hql);
		} else {
			list = dao.find(hql, Integer.valueOf(page), Integer.valueOf(rows));
		}

		return list;
	}

	@Override
	public List<gpsy> getMyccList02(String userid, String mrlx) {
		String hql = "from gpsy where 1=1 ";
		if (StringUtils.isNotBlank(userid)) {
			hql += " and userid= '" + userid + "'";
		}
		if (StringUtils.isNotBlank(mrlx)) {
			hql += " and mrlx= '" + mrlx + "'";
		}
		hql += " and cgsl <> '0.0' order by jstime desc";
		List<gpsy> list = dao.find(hql);
		return list;
	}

	@Override
	public List<gpsy> getGgccList(String userid, String mrlx, String zqdm) {
		// TODO Auto-generated method stub
		String hql = " from gpsy  where 1=1 and userid ='" + userid
				+ "' and mrlx='" + mrlx + "' and zqdm ='" + zqdm
				+ "' order by jstime desc";
		List<gpsy> list = dao.find(hql);
		return list;
	}

	@Override
	public List<gpsy> getCcinfo(String userid, String mrlx, String sjid) {
		// TODO Auto-generated method stub
		String hql = " from gpsy  where 1=1 and userid ='" + userid
				+ "' and mrlx='" + mrlx + "' and sjid='" + sjid
				+ "'order by jstime desc";
		List<gpsy> list = dao.find(hql);
		return list;
	}

	@Override
	public void deleteDqsy(String userid, String sjsid) {
		// TODO Auto-generated method stub
		// String hql =
		// " from gpsy where 1=1 and  userid ='"+userid+"' and sjid='"+sjsid+"' and mrlx = '1' ";
		String hql = " from gpsy where 1=1 and  userid ='" + userid
				+ "' and mrlx = '1'";
		List<gpsy> list = dao.find(hql);
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				gpsy gp = list.get(i);
				dao.delete(gp);
			}
		}
	}

	/**
	 * 股票送股自动结算方法
	 * 
	 * @throws Exception
	 */
	@Override
	public void sgzdjs() throws Exception {
		//System.out.println("开始除权除息了！");
		DecimalFormat df = new DecimalFormat("#.00");
		URL u = new URL("http://www.gtl666.com/servlet/XDGeter");//获取当日除权出息的股票信息
		InputStream in = u.openStream();
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		try {
			byte buf[] = new byte[1024];
			int read = 0;
			while ((read = in.read(buf)) > 0) {
				out.write(buf, 0, read);
			}
		} finally {
			if (in != null) {
				in.close();
			}
		}
		byte b[] = out.toByteArray();
		JSONObject jsObject = JSON.parseObject(new String(b, "utf-8")); // 将json结果转换成jsonObject

		// JSONObject jsObject = new JSONObject(); //调用接口获取送股数据
		JSONArray jsList = null;
		if ("0".equals(jsObject.getString("errorCode"))) {
			jsList = jsObject.getJSONArray("content"); // 获取到赠送股数据数组list
		}
		JSONObject sg = new JSONObject();

		String hql = " from gpsy where 1=1 and cgsl <> '0.0' ";
		List<gpsy> gp_list = dao.find(hql);
		if (jsList.size() > 0) {
			if (gp_list.size() > 0) {
				for (int j = 0; j < gp_list.size(); j++) {
					gpsy gp = gp_list.get(j); // 获取持仓列表里面持股数量》0 数据
					String zqdm = gp.getZqdm();
					String userid = gp.getUserid(); // 获取用户id
					String subcode = zqdm.substring(2, zqdm.length()); // 获取去除前缀证券代码
					Double yycgsl = Double.parseDouble(gp.getCgsl()); // 获取原有持股数量
					Double yycgcbj = Double.parseDouble(gp.getZgcbjg());// 获取原有每股成本价格
					String mrlx = gp.getMrlx();
					//if (jsList.size() > 0) {
						for (int i = 0; i < jsList.size(); i++) {
							sg = jsList.getJSONObject(i);
							String code = sg.getString("code");// 获取接口数据证券代码
							String rs = sg.getString("rs"); // rs 代表配股数量
							String money = sg.getString("money");// money 代表分红利润钱
							if (code.equals(subcode)) {
								LoginUser loginuser = loginUserServiceI
										.getUser(userid);
								Double yyptsjb = Double.parseDouble(loginuser
										.getPtsjb()); // 获取原有普通赛金币
								Double yysjsjb = Double.parseDouble(loginuser
										.getSjsjb()); // 获取原有赛季赛金币
								Double fh = yycgsl * Double.parseDouble(money) / 10; // 分红金额
								// 计算出现有成本价
								/*Double nowcbj = yycgcbj
										- (Double.parseDouble(money) / 10);*/ 
								Double nowcbj =yycgcbj/(1+Double.parseDouble(rs)/10);
								if (mrlx.equals("0")) {// 普通赛买入的时候
									Double nowPtsjb = yyptsjb + fh;
									BigDecimal bd = new BigDecimal(nowPtsjb);
									bd.setScale(2, BigDecimal.ROUND_HALF_UP)
											.doubleValue(); // 保留小数点后两位且四舍五入
									loginuser.setPtsjb(df.format(bd));
									loginUserServiceI.update(loginuser); // 更新loginuser信息
								} else if (mrlx.equals("1")) {// 赛季赛买入时
									Double nowSjsjb = yysjsjb + fh;//分红后的赛季赛金币
									BigDecimal bd = new BigDecimal(nowSjsjb);
									bd.setScale(2, BigDecimal.ROUND_HALF_UP)
											.doubleValue(); // 保留小数点后两位且四舍五入
									loginuser.setSjsjb(df.format(bd));
									loginUserServiceI.update(loginuser); // 更新loginuser信息
								}
								BigDecimal cbjbd = new BigDecimal(nowcbj);
								cbjbd.setScale(2, BigDecimal.ROUND_HALF_UP)
										.doubleValue(); // 保留小数点后两位且四舍五入
								gp.setZgcbjg(df.format(cbjbd)); // 更新分红后成本价格

								Double sgsl = yycgsl * Double.parseDouble(rs) / 10; // 送股数量
								Double nowcgsl = yycgsl + sgsl; // 送股后的现有持股数量
								BigDecimal cgsbd = new BigDecimal(nowcgsl);
								cgsbd.setScale(2, BigDecimal.ROUND_HALF_UP)
										.doubleValue();
								gp.setCgsl(df.format(cgsbd));// 更新送股后持股数

								dao.update(gp); // 更新持仓数据

							}

						}
					//}

				}

			}
		}
		//System.out.println("结束除权除息了！");
	}

	@Override
	public List<gpsy> getJrqksj(String userid, String mrlx) {
		// TODO Auto-generated method stub
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String nowday = sdf.format(date);
		String hql = "";
		if (StringUtils.isNotBlank(userid)) {
			hql = " from gpsy where 1=1 and userid='" + userid
					+ "' and cgsl='0.0' and wtmccj='1' and jstime like '"
					+ nowday + "%' and mrlx ='" + mrlx + "' ";
		} else {
			return null;
		}
		List<gpsy> list = dao.find(hql);
		return list;
	}

	@Override
	public JSONObject autoDeleteDatas() throws Exception {
		// TODO Auto-generated method stub

		JSONObject json = new JSONObject();

		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String nowday = sdf.format(date);
		String tgzcId = "6bc06b9a-2eed-4f17-aa07-aaa3cf9c4630"; // 投顾专场ID
		// 清理数据

		// 1、参加投顾专场用户赛季赛数据
		List<MnSjBm> bmList = mnSjBmServiceI.getTgzcBmList(tgzcId); // 获取报名投顾专场用户报名数据
		if (bmList.size() > 0) {

			for (int i = 0; i < bmList.size(); i++) {
				String userid = bmList.get(i).getUserId();

				// 1、参加投顾专场用户赛季赛数据
				LoginUser dqTg = loginUserServiceI.getUser(userid);
				dqTg.setSjsjb("200000");
				loginUserServiceI.update(dqTg);

				// 2、每日资产数据更新
				List<Mrzcjs> mrzcList = mrzcjsServiceI.getTgzcList(userid);
				if (mrzcList.size() > 0) {
					for (int j = 0; j < mrzcList.size(); j++) {
						Mrzcjs dqjs = mrzcList.get(j);
						dqjs.setSjbrsy("0");
						dqjs.setSjbzsy("0");
						dqjs.setSjbysy("0");
						dqjs.setSjzsy("0");
						dqjs.setSjzczl("200000");

						mrzcjsServiceI.edit(dqjs);
					}
				}

			}
		}

		// 3、模拟操盘数据mncp
		List<Mncp> mncpList = mncpServiceI.getTgzcList(tgzcId);
		if (mncpList.size() > 0) {
			for (int i = 0; i < mncpList.size(); i++) {
				String mncpid = mncpList.get(i).getId();
				mncpServiceI.delete(mncpid);
			}
		}

		// 4、持仓数据清理gpsy
		String hql = " from gpsy where 1=1 and sjid='" + tgzcId + "'";
		List<gpsy> ccList = dao.find(hql);
		if (ccList.size() > 0) {
			for (int i = 0; i < ccList.size(); i++) {
				gpsy dqcc = ccList.get(i);
				dao.delete(dqcc);
			}
		}
		json.put("errorCode", "0");
		json.put("errorMsg", "更新成功");
		return json;
	}

	@Override
	public gpsy getNowGpsy(String userid, String zqdm, String mrlx) {
		// TODO Auto-generated method stub
		String hql = " from gpsy where 1=1 and userid='" + userid
				+ "' and zqdm ='" + zqdm + "' and mrlx ='" + mrlx + "'";
		gpsy gpsy = dao.get(hql);
		return gpsy;
	}

	@Override
	public List<gpsy> getJrAllmcList(String userid, String mrlx, String sjid) {
		// TODO Auto-generated method stub
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String nowday = sdf.format(date);
		String hql = "from gpsy where 1=1 and " + "userid='" + userid
				+ "' and cgsl='0.0' and sjid ='" + sjid
				+ "' and wtmccj is null  and mrlx ='" + mrlx
				+ "' and wtmcTime like '" + nowday + "%%'";
		List<gpsy> list = dao.find(hql);
		return list;
	}

	@Override
	public void updateCbj() throws Exception {
		// TODO Auto-generated method stub

		String sql = "update t_gpsy a set a.zgcbjg = (select sum(case cz when '0' then wtsl*wtjg when '1' then -1*wtsl*wtjg end )/sum(case cz when '0' then wtsl when '1' then -1*wtsl end  ) "
				+ " from t_mncp where a.userid = userid and zqdm=a.zqdm and bz='1' and a.mrlx= mrlx  group by userid,zqdm )";
		dao.executeSql(sql);

	}

}
