package com.admin.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.Column;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.SunSharesDaoI;
import com.admin.model.SunShares;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.SunSharesServiceI;

@Service
public class SunSharesServiceImpl implements SunSharesServiceI {

	@Autowired
	private SunSharesDaoI sunSharesDao;

	@Override
	public DataGrid dataGrid(SunShares sunShares, PageHelper ph) {
		DataGrid dg = new DataGrid();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from SunShares t ";
		List<SunShares> l = sunSharesDao.find(hql + whereHql(sunShares, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		dg.setRows(l);
		dg.setTotal(sunSharesDao.count(
				"select count(*) " + hql + whereHql(sunShares, params), params));
		return dg;
	}

	private String whereHql(SunShares sunShares, Map<String, Object> params) {
		String hql = "";
		if (sunShares != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(sunShares.getTitle())) {
				hql += " and t.title like :title";
				params.put("title", "%%" + sunShares.getTitle() + "%%");
			}
			if (StringUtils.isNotBlank(sunShares.getUserName())) {
				hql += " and t.userName like :userName";
				params.put("userName", "%%" + sunShares.getUserName() + "%%");
			}
			if (StringUtils.isNotBlank(sunShares.getUserId())) {
				hql += " and t.userId = :userId";
				params.put("userId", sunShares.getUserId());
			}
			if (StringUtils.isNotBlank(sunShares.getReleaseTime())) {
				hql += " and t.releaseTime like :releaseTime";
				params.put("releaseTime", "%%" + sunShares.getReleaseTime()
						+ "%%");
			}
			if (StringUtils.isNotBlank(sunShares.getState())) {
				hql += " and t.state = :state";
				params.put("state", sunShares.getState());
			}

			// /////////////////////////////////////////////////////////
			if (StringUtils.isNotBlank(sunShares.getReleaseTime())) {
				hql += " and t.content like :content";
				params.put("content", "%%" + sunShares.getContent() + "%%");
			}
			if (StringUtils.isNotBlank(sunShares.getReleaseTime())) {
				hql += " and t.power like :power";
				params.put("power", "%%" + sunShares.getPower() + "%%");
			}
			if (StringUtils.isNotBlank(sunShares.getXhJf())) {
				hql += " and t.xhJf like :xhJf";
				params.put("xhJf", "%%" + sunShares.getXhJf() + "%%");
			}
			if (StringUtils.isNotBlank(sunShares.getGmCs())) {
				hql += " and t.gmCs like :gmCs";
				params.put("gmCs", "%%" + sunShares.getGmCs() + "%%");
			}
			if (StringUtils.isNotBlank(sunShares.getZan())) {
				hql += " and t.zan like :zan";
				params.put("zan", "%%" + sunShares.getZan() + "%%");
			}
			if (StringUtils.isNotBlank(sunShares.getTuCao())) {
				hql += " and t.tuCao like :tuCao";
				params.put("tuCao", "%%" + sunShares.getTuCao() + "%%");
			}
		}
		return hql;
	}

	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void add(SunShares sunShares) throws Exception {
		SunShares u = new SunShares();
		BeanUtils.copyProperties(sunShares, u);
		sunSharesDao.save(sunShares);
	}

	@Override
	public SunShares get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		SunShares t = sunSharesDao.get(
				"select distinct t from SunShares t where t.id = :id", params);
		return t;
	}

	@Override
	public void edit(SunShares sunShares) throws Exception {
		sunSharesDao.update(sunShares);
	}

	@Override
	public void delete(String id) {
		sunSharesDao.delete(sunSharesDao.get(SunShares.class, id));
	}

	@Override
	public List<SunShares> sunSharesList() {
		List<SunShares> t = sunSharesDao.find("from SunShares t ");
		return t;
	}

	@Override
	public List<SunShares> sunSharesListByUserId(String userId, String page,
			String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		List<SunShares> t = new ArrayList<SunShares>();
		if (StringUtils.isNotBlank(userId)) {
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("userId", userId);
			t = sunSharesDao
					.find("from SunShares t where 1=1 and t.userId=:userId and t.state='1' order by releaseTime desc ",
							params, Integer.valueOf(page),
							Integer.valueOf(rows));
		} else {
			t = sunSharesDao
					.find("from SunShares t where 1=1 and t.state='1' order by releaseTime desc",
							Integer.valueOf(page), Integer.valueOf(rows));
		}

		return t;
	}

	@Override
	public void update(SunShares sunShares) throws Exception {
		sunSharesDao.update(sunShares);
	}

	@Override
	public int getCount(String userid) {
		String hql = "select count(*) from SunShares where state='1'";
		if (StringUtils.isNotBlank(userid)) {
			hql += " and userid='" + userid + "'";
		}
		return sunSharesDao.count(hql).intValue();
	}
}
