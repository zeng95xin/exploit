package com.admin.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.ActualGoldBulletinDaoI;
import com.admin.model.ActualGoldBulletin;
import com.admin.model.LoginUser;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.ActualGoldBulletinServiceI;
import com.admin.service.LoginUserServiceI;

@Service
public class ActualGoldBulletinServiceImpl implements
		ActualGoldBulletinServiceI {

	@Autowired
	private ActualGoldBulletinDaoI actualGoldBulletinDao;
	@Autowired
	private LoginUserServiceI loginUserServiceI;

	@Override
	public DataGrid dataGrid(ActualGoldBulletin actualGoldBulletin,
			PageHelper ph) {
		DataGrid dg = new DataGrid();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from ActualGoldBulletin t ";
		List<ActualGoldBulletin> l = actualGoldBulletinDao.find(
				hql + whereHql(actualGoldBulletin, params) + orderHql(ph),
				params, ph.getPage(), ph.getRows());
		List<ActualGoldBulletin> actualGoldBulletins = new ArrayList<ActualGoldBulletin>();
		LoginUser loginUser = null;
		for (ActualGoldBulletin actualGoldBulletin2 : l) {
			if (StringUtils.isNoneBlank(actualGoldBulletin2.getUserId())) {
				loginUser = loginUserServiceI.getLoginUser(actualGoldBulletin2
						.getUserId());
				if (loginUser != null) {
					actualGoldBulletin2.setUserName(loginUser.getNickname());
				}
				actualGoldBulletins.add(actualGoldBulletin2);
			}
		}
		dg.setRows(actualGoldBulletins);
		dg.setTotal(actualGoldBulletinDao.count("select count(*) " + hql
				+ whereHql(actualGoldBulletin, params), params));
		return dg;
	}

	private String whereHql(ActualGoldBulletin actualGoldBulletin,
			Map<String, Object> params) {
		String hql = "";
		if (actualGoldBulletin != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(actualGoldBulletin.getBroadcastTime())) {
				hql += " and t.broadcastTime like :broadcastTime";
				params.put("broadcastTime",
						"%%" + actualGoldBulletin.getBroadcastTime() + "%%");
			}
			if (StringUtils.isNotBlank(actualGoldBulletin.getBroadcastEvents())) {
				hql += " and t.broadcastEvents like :broadcastEvents";
				params.put("broadcastEvents",
						"%%" + actualGoldBulletin.getBroadcastEvents() + "%%");
			}
			if (StringUtils.isNotBlank(actualGoldBulletin.getUserId())) {
				hql += " and t.userId = :userId";
				params.put("userId", "'" + actualGoldBulletin.getUserId() + "'");
			}
			if (StringUtils.isNotBlank(actualGoldBulletin.getUserName())) {
				hql += " and t.userName like :userName";
				params.put("userName", "%%" + actualGoldBulletin.getUserName()
						+ "%%");
			}
		}
		return hql;
	}

	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void add(ActualGoldBulletin actualGoldBulletin) throws Exception {
		ActualGoldBulletin u = new ActualGoldBulletin();
		BeanUtils.copyProperties(actualGoldBulletin, u);
		actualGoldBulletinDao.save(actualGoldBulletin);
	}

	@Override
	public ActualGoldBulletin get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		ActualGoldBulletin t = actualGoldBulletinDao.get(
				"select distinct t from ActualGoldBulletin t where t.id = :id",
				params);
		return t;
	}

	@Override
	public void edit(ActualGoldBulletin actualGoldBulletin) throws Exception {
		actualGoldBulletinDao.update(actualGoldBulletin);
	}

	@Override
	public void delete(String id) {
		actualGoldBulletinDao.delete(actualGoldBulletinDao.get(
				ActualGoldBulletin.class, id));
	}

	@Override
	public List<ActualGoldBulletin> actualGoldBulletinList() {
		List<ActualGoldBulletin> t = actualGoldBulletinDao
				.find("from ActualGoldBulletin t ");
		List<ActualGoldBulletin> actualGoldBulletins = new ArrayList<ActualGoldBulletin>();
		LoginUser loginUser = null;
		for (ActualGoldBulletin actualGoldBulletin2 : t) {
			if (StringUtils.isNoneBlank(actualGoldBulletin2.getUserId())) {
				loginUser = loginUserServiceI.getLoginUser(actualGoldBulletin2
						.getUserId());
				if (loginUser != null) {
					actualGoldBulletin2.setUserName(loginUser.getNickname());
				}
				actualGoldBulletins.add(actualGoldBulletin2);
			}
		}
		return actualGoldBulletins;
	}

	@Override
	public List<ActualGoldBulletin> actualGoldBulletinListByBroadcastTime(
			String broadcastTime, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		Map<String, Object> params = new HashMap<String, Object>();
		if (StringUtils.isNotBlank(broadcastTime)) {
			if (broadcastTime.length() > 10) {
				broadcastTime = broadcastTime.substring(0, 10);
			}
		}
		params.put("broadcastTime", "%%" + broadcastTime + "%%");
		List<ActualGoldBulletin> t = actualGoldBulletinDao
				.find("from ActualGoldBulletin t where t.broadcastTime like :broadcastTime",
						params, Integer.valueOf(page), Integer.valueOf(rows));
		List<ActualGoldBulletin> actualGoldBulletins = new ArrayList<ActualGoldBulletin>();
		LoginUser loginUser = null;
		for (ActualGoldBulletin actualGoldBulletin2 : t) {
			if (StringUtils.isNoneBlank(actualGoldBulletin2.getUserId())) {
				loginUser = loginUserServiceI.getLoginUser(actualGoldBulletin2
						.getUserId());
				if (loginUser != null) {
					actualGoldBulletin2.setUserName(loginUser.getNickname());
				}
				actualGoldBulletins.add(actualGoldBulletin2);
			}
		}
		return actualGoldBulletins;
	}

	@Override
	public int getCount(String broadcastTime) {
		Map<String, Object> params = new HashMap<String, Object>();
		if (StringUtils.isNotBlank(broadcastTime)) {
			if (broadcastTime.length() > 10) {
				broadcastTime = broadcastTime.substring(0, 10);
			}
		}
		params.put("broadcastTime", "%%" + broadcastTime + "%%");
		return actualGoldBulletinDao
				.count("select count(*) from ActualGoldBulletin t where t.broadcastTime like :broadcastTime",
						params).intValue();
	}

}
