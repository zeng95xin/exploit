package com.admin.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.WarCareDaoI;
import com.admin.model.WarCare;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.WarCareServiceI;

@Service
public class WarCareServiceImpl implements WarCareServiceI {

	@Autowired
	private WarCareDaoI warCareDao;

	@Override
	public DataGrid dataGrid(WarCare warCare, PageHelper ph) {
		DataGrid dg = new DataGrid();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from WarCare t ";
		List<WarCare> l = warCareDao.find(hql + whereHql(warCare, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		dg.setRows(l);
		dg.setTotal(warCareDao.count(
				"select count(*) " + hql + whereHql(warCare, params), params));
		return dg;
	}

	private String whereHql(WarCare warCare, Map<String, Object> params) {
		String hql = "";
		if (warCare != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(warCare.getTitle())) {
				hql += " and t.title like :title";
				params.put("title", "%%" + warCare.getTitle() + "%%");
			}
			if (StringUtils.isNotBlank(warCare.getUserName())) {
				hql += " and t.userName like :userName";
				params.put("userName", "%%" + warCare.getUserName() + "%%");
			}
			if (StringUtils.isNotBlank(warCare.getUserId())) {
				hql += " and t.userId = :userId";
				params.put("userId", warCare.getUserId());
			}
			if (StringUtils.isNotBlank(warCare.getReleaseTime())) {
				hql += " and t.releaseTime like :releaseTime";
				params.put("releaseTime", "%%" + warCare.getReleaseTime()
						+ "%%");
			}
			if (StringUtils.isNotBlank(warCare.getState())) {
				hql += " and t.state = :state";
				params.put("state", warCare.getState());
			}
			if (StringUtils.isNotBlank(warCare.getReleaseContent())) {
				hql += " and t.releaseContent like :releaseContent";
				params.put("releaseContent", "%%" + warCare.getReleaseContent()
						+ "%%");
			}
			if (StringUtils.isNotBlank(warCare.getReleaseIp())) {
				hql += " and t.releaseIp = :releaseIp";
				params.put("releaseIp", warCare.getReleaseIp());
			}
			if (StringUtils.isNotBlank(warCare.getXhJf())) {
				hql += " and t.xhJf like :xhJf";
				params.put("xhJf", "%%" + warCare.getXhJf() + "%%");
			}
			if (StringUtils.isNotBlank(warCare.getGmCs())) {
				hql += " and t.gmCs like :gmCs";
				params.put("gmCs", "%%" + warCare.getGmCs() + "%%");
			}
			if (StringUtils.isNotBlank(warCare.getZan())) {
				hql += " and t.zan like :zan";
				params.put("zan", "%%" + warCare.getZan() + "%%");
			}
			if (StringUtils.isNotBlank(warCare.getTuCao())) {
				hql += " and t.tuCao like :tuCao";
				params.put("tuCao", "%%" + warCare.getTuCao() + "%%");
			}
		}
		return hql;
	}

	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void add(WarCare warCare) throws Exception {
		WarCare u = new WarCare();
		BeanUtils.copyProperties(warCare, u);
		warCareDao.save(warCare);
	}

	@Override
	public WarCare get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		WarCare t = warCareDao.get(
				"select distinct t from WarCare t where t.id = :id", params);
		return t;
	}

	@Override
	public void edit(WarCare warCare) throws Exception {
		warCareDao.update(warCare);
	}

	@Override
	public void delete(String id) {
		warCareDao.delete(warCareDao.get(WarCare.class, id));
	}

	@Override
	public List<WarCare> warCareList() {
		List<WarCare> t = warCareDao.find("from WarCare t ");
		return t;
	}

	@Override
	public List<WarCare> warCareList(WarCare warCare, String page, String rows,
			String sort) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = "from WarCare t " + whereHql(warCare, params);
		if (StringUtils.isNotBlank(sort)) {
			if (sort.equals("zj")) {
				hql += " and substring(t.releaseTime,12,8)<'12:00:00' ";
			} else {
				hql += " and substring(t.releaseTime,12,8)>'12:00:00' ";
			}
		}
		hql += " order by t.releaseTime desc";
		List<WarCare> t = warCareDao.find(hql, params, Integer.valueOf(page),
				Integer.valueOf(rows));
		return t;
	}

	@Override
	public void update(WarCare warCare) throws Exception {
		warCareDao.update(warCare);
	}

	@Override
	public int getCount(String userid, String sort) {
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = "select count(*) from WarCare t where 1=1";
		if (StringUtils.isNotBlank(userid)) {
			hql += " and userid='" + userid + "'";
		}
		if (StringUtils.isNotBlank(sort)) {
			if (sort.equals("zj")) {
				hql += " and substring(t.releaseTime,12,8)<'12:00:00' ";
			} else {
				hql += " and substring(t.releaseTime,12,8)>'12:00:00' ";
			}
		}
		return warCareDao.count(hql).intValue();
	}

	@Override
	public List<WarCare> getWarcareByTgid(String tgid, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String hql = "from WarCare t where 1=1 and userid='" + tgid + "'";
		return warCareDao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
	}

	@Override
	public int getCountByTgid(String tgid) {
		String hql = "select count(*) from WarCare t where 1=1 and userid='"
				+ tgid + "'";
		return warCareDao.count(hql).intValue();
	}

}
