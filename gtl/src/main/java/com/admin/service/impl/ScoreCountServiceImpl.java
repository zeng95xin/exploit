package com.admin.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.BaseDaoI;
import com.admin.dao.ScoreCountDaoI;
import com.admin.dao.ScoreDaoI;
import com.admin.model.Ad;
import com.admin.model.LoginUser;
import com.admin.model.Score;
import com.admin.model.ScoreCount;
import com.admin.model.ScoreType;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.LoginUserServiceI;
import com.admin.service.ScoreCountServiceI;
import com.admin.service.ScoreServiceI;
import com.admin.service.ScoreTypeServiceI;
import com.admin.service.baseImpl.BaseServiceImpl;
import com.web.util.TimeUtils;

@Service
public class ScoreCountServiceImpl extends BaseServiceImpl<ScoreCount> implements ScoreCountServiceI{
	
	private ScoreCountDaoI countDaoI;
	
	@Autowired
	private ScoreTypeServiceI scoreTypeServiceI;
	
	@Autowired
	public ScoreCountServiceImpl(ScoreCountDaoI countDaoI) {
		this.baseDaoI=countDaoI;
		this.countDaoI=countDaoI;
	}
	
	@Override
	public DataGrid dataGridForOne(ScoreCount scoreCount, PageHelper ph) {
		DataGrid dg = new DataGrid();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql=whereHql(scoreCount,params);
		List<ScoreCount> scores2=countDaoI.find(hql, params, ph.getPage(), ph.getRows());	
		if (scores2!= null && scores2.size() > 0) {
			for (ScoreCount t : scores2) {
				//克隆新的对象，防止产生同一个对象
				ScoreType scoreType=t.getScoreType().clone();
				t.setScoreType(scoreType);
			}
		}
		dg.setRows(scores2);
 		dg.setTotal(countDaoI.count("select count(*) "+hql, params));
		return dg;
	}
	
	
	/**
	 *  统计积分列表的信息
	 */
	public void countScore(){
		//System.out.println("method ----------------------------------------");
		List<ScoreType> scoreTypes=scoreTypeServiceI.find("from ScoreType");
		for(int i=0;i<scoreTypes.size();i++){
			Map<String, Object> params=new HashMap<String, Object>();
			String time=TimeUtils.getTime("yyyy-MM-dd");
			String hql=" select SUM(a.score) ,b.* from t_sys_score a left join t_sys_score_type b on a.scoreTypeId=b.id   where b.id=:value and a.time like :time";
			params.put("value", scoreTypes.get(i).getId());
			params.put("time", "%"+time+"%");
			List<Object[]>  objects= countDaoI.findBySql(hql, params);
			for(int k=0;k<objects.size();k++){
					ScoreCount count=new ScoreCount();
					count.setId(UUID.randomUUID().toString());
					ScoreType scoreType=new ScoreType();
					if(objects.get(k)[0] instanceof Double){
						count.setAllScore(((Double)objects.get(k)[0]).toString());
					}
					if(objects.get(k)[0]!=null){
						
					}else{
						count.setAllScore("0");
					}
					
					scoreType.setId((String)objects.get(k)[1]);
					scoreType.setTypeName((String)objects.get(k)[2]);
					count.setScoreType(scoreType);
					count.setTime(time);
					countDaoI.save(count);
			}
			
			
		}
		//System.out.println("end ----------------------------------------");
	}
		
	/**
	 * HQLWhere条件拼装
	 */
	private String whereHql(ScoreCount scoreCount, Map<String, Object> params) {
		StringBuffer hql = new StringBuffer("from ScoreCount t ");
		if(scoreCount!=null){
			hql.append(" where 1=1 ");
			if(StringUtils.isNotBlank(scoreCount.getTime())){
				hql.append(" and t.time like :time");
				params.put("time", "%"+scoreCount.getTime()+"%");
			}
			if(scoreCount.getScoreType()!=null){
				hql.append("  and t.scoreType = :scoreType");
				params.put("scoreType", scoreCount.getScoreType());
			}
			hql.append(" order by t.time desc");	
		
		}
		
			
		
		return hql.toString();
	}
	
	
	
}
