package com.admin.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.IntegralConfigDaoI;
import com.admin.dao.XwxGlDaoI;
import com.admin.model.IntegralConfig;
import com.admin.model.Tgxt;
import com.admin.model.TxwxGl;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.IntegralConfigServiceI;
import com.admin.service.XwxServiceI;
import com.web.entity.Person;
import com.web.util.TimeUtils;

@Service
public class XwxServiceImpl implements XwxServiceI {

	@Autowired
	private XwxGlDaoI xwxGlDao;

	@Override
	public DataGrid dataGrid(TxwxGl txwxGl, PageHelper ph) {
		DataGrid dg = new DataGrid();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from TxwxGl t where t.xwzd='1' or t.xwzhuy='2'";
		List<TxwxGl> l = xwxGlDao.find(hql + whereHql(txwxGl, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		dg.setRows(l);
		dg.setTotal(xwxGlDao.count(
				"select count(*) " + hql + whereHql(txwxGl, params), params));
		return dg;
	}

	@Override
	public DataGrid dataGridForOne(TxwxGl g, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<TxwxGl> ul = new ArrayList<TxwxGl>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from TxwxGl t ";
		List<TxwxGl> l = xwxGlDao.findTxwxGlOne(hql + whereHqlForOne(g, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (TxwxGl t : l) {
				TxwxGl u = new TxwxGl();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(xwxGlDao.count(
				"select count(*) " + hql + whereHqlForOne(g, params), params));
		return dg;
	}

	private String whereHql(TxwxGl txwxGl, Map<String, Object> params) {
		String hql = "";
		if (txwxGl != null) {
			if (StringUtils.isNoneBlank(txwxGl.getXwtitel())) {
				hql += " and t.xwtitel like :xwtitel";
				params.put("xwtitel", "%%" + txwxGl.getXwtitel() + "%%");
			}
			if (StringUtils.isNoneBlank(txwxGl.getXwfbz())) {
				hql += " and t.xwfbz =:xwfbz";
				params.put("xwfbz", txwxGl.getXwfbz());
			}

		}
		return hql;
	}

	/**
	 * where 条件封装
	 * 
	 * @param p
	 * @param params
	 * @return
	 */
	private String whereHqlForOne(TxwxGl g, Map<String, Object> params) {
		String hql = "";
		if (g != null) {
			hql += " where 1=1 and t.xwfbfl = '" + g.getXwfbfl() + "'";
			if (StringUtils.isNoneBlank(g.getXwtitel())) {
				hql += " and t.xwtitel like :xwtitel";
				params.put("xwtitel", "%%" + g.getXwtitel() + "%%");
			}
			if (StringUtils.isNoneBlank(g.getXwfbz())) {
				hql += " and t.xwfbz =:xwfbz";
				params.put("xwfbz", g.getXwfbz());
			}

		}
		return hql;
	}

	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void add(TxwxGl txwxGl) throws Exception {
		TxwxGl u = new TxwxGl();
		BeanUtils.copyProperties(txwxGl, u);
		txwxGl.setId(UUID.randomUUID().toString());

		txwxGl.setXwfbtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		txwxGl.setXwbtccs("0");
		txwxGl.setXwbzcs("0");
		txwxGl.setXwgmcs("0");
		xwxGlDao.save(txwxGl);
	}

	@Override
	public TxwxGl get() {
		TxwxGl t = xwxGlDao.get("select distinct t from t_xwxgl t");
		return t;
	}

	@Override
	synchronized public void edit(TxwxGl p) throws Exception {
		TxwxGl u = xwxGlDao.get(TxwxGl.class, p.getId());
		u.setImage(p.getImage());
		u.setXwnr(p.getXwnr());
		u.setXwtitel(p.getXwtitel());
		u.setXwfbfl(p.getXwfbfl());
		u.setXwfbz(p.getXwfbz());
		u.setXwzy(p.getXwzy());
		if (u.getXwfbtime() == null) {
			u.setXwfbtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		}
		u.setXwsqdj(p.getXwsqdj());
		u.setXwjfxh(p.getXwjfxh());
		// u.setXwsslx(p.getXwsslx());
		u.setXwzd(p.getXwzd());
		u.setXwzhuy(p.getXwzhuy());
		xwxGlDao.update(u);
	}

	@Override
	public void delete(String id) {
		xwxGlDao.delete(xwxGlDao.get(TxwxGl.class, id));
	}
	
	@Override
	public void deleteZdZy(String id) {
		TxwxGl news=xwxGlDao.get(TxwxGl.class, id);
		if (news != null) {
			if (StringUtils.isNotBlank(news.getXwzd()) && news.getXwzd().equals("1")) {
				news.setXwzd("");
			}
			if (StringUtils.isNotBlank(news.getXwzhuy()) &&news.getXwzhuy().equals("2")) {
				news.setXwzhuy("");
			}
		}
		xwxGlDao.update(news);
		
	}

	@Override
	public List<TxwxGl> getList(String fl, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String sql = "from TxwxGl where 1=1 ";
		if (StringUtils.isNotBlank(fl)) {
			sql += " and xwfbfl='" + fl + "' ";
		}
		//sql += " and xwzd is null order by xwzd desc,xwfbtime desc";
		sql += "  order by xwzd desc,xwfbtime desc";
		List<TxwxGl> t = xwxGlDao.find(sql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return t;
	}

	@Override
	public TxwxGl getTxwxGl(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		TxwxGl t = xwxGlDao.get(
				"select distinct t from TxwxGl t  where t.id = :id", params);
		/*TxwxGl u = new TxwxGl();
		if (t != null) {
			BeanUtils.copyProperties(t, u);
		}*/
		return t;
	}

	String[] excelHeader = { "标题", "分类", "内容", "发布者", "发布时间" };

	@Override
	public HSSFWorkbook export(List<TxwxGl> list) {
		HSSFWorkbook wb = new HSSFWorkbook();
		HSSFSheet sheet = wb.createSheet("Txwxgl");
		HSSFRow row = sheet.createRow((int) 0);
		HSSFCellStyle style = wb.createCellStyle();
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);

		for (int i = 0; i < excelHeader.length; i++) {
			HSSFCell cell = row.createCell(i);
			cell.setCellValue(excelHeader[i]);
			cell.setCellStyle(style);
			sheet.autoSizeColumn(i);
		}

		for (int i = 0; i < list.size(); i++) {
			row = sheet.createRow(i + 1);
			TxwxGl p = list.get(i);
			row.createCell(0).setCellValue(p.getXwtitel());
			row.createCell(1).setCellValue(p.getXwfbfl());
			row.createCell(2).setCellValue(p.getXwnr());
			row.createCell(3).setCellValue(p.getXwfbz());
			row.createCell(4).setCellValue(p.getXwfbtime());

		}
		return wb;
	}

	@Override
	public void update(TxwxGl txwxGl) throws Exception {
		xwxGlDao.update(txwxGl);
	}

	@Override
	public int getCount(String fl) {
		String hql = "select count(*) from TxwxGl t where 1=1 ";
		if (StringUtils.isNotBlank(fl)) {
			hql += " and xwfbfl='" + fl + "' ";
		}
		return xwxGlDao.count(hql).intValue();
	}

	@Override
	public List<TxwxGl> getTop2() {
		String sql = "from TxwxGl where 1=1 ";
		sql += " order by xwfbtime desc";
		List<TxwxGl> t = xwxGlDao.find(sql, 1, 2);
		return t;
	}

	@Override
	public List<TxwxGl> getzxList(String xwsslx, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String sql = "from TxwxGl where 1=1 ";
		if (StringUtils.isNotBlank(xwsslx) && xwsslx.equals("01")) {
			sql += " and xwzhuy='2'";
		} else if (StringUtils.isNotBlank(xwsslx) && xwsslx.equals("02")) {
			sql += " and xwzd='1'";
		}
		sql += " order by xwfbtime desc";
		List<TxwxGl> t = xwxGlDao.find(sql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return t;
	}

	@Override
	public List<TxwxGl> getFlList(String fl, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String sql = "from TxwxGl where 1=1 ";
		if (StringUtils.isNotBlank(fl)) {
			sql += " and xwfbfl='" + fl + "' ";
		}
		sql += "order by xwzd desc ,xwfbtime desc";
		List<TxwxGl> t = xwxGlDao.find(sql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return t;
	}


	@Override
	public void saveVisit(TxwxGl txwxGl) throws Exception {
		TxwxGl u = xwxGlDao.get(TxwxGl.class, txwxGl.getId());
		u.setVisitCount(txwxGl.getVisitCount());
		xwxGlDao.update(u);
	}

	

}
