package com.admin.service.impl;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.SendGiftDao;
import com.admin.dao.SendGiftRankDao;
import com.admin.model.LoginUser;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.GiftService;
import com.admin.service.HostMainService;
import com.admin.service.JfxhjlfServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.SendGiftRankService;
import com.admin.service.SendGiftService;
import com.web.entity.Gift;
import com.web.entity.HostMain;
import com.web.entity.SendGift;
import com.web.entity.SendGiftRank;
import com.web.entity.SendRank;

@Service
public class SendGiftServiceImpl implements SendGiftService {
	
	@Autowired
	private SendGiftDao sendGiftDao;
	
	@Autowired
	private GiftService giftService;
	
	@Autowired
	private LoginUserServiceI loginUserServiceI;
	
	@Autowired
	private HostMainService hostMainService;
	
	@Autowired
	private JfxhjlfServiceI jfxhjlfServiceI;
	
	@Autowired
	private SendGiftRankDao sendGiftRankDao;
	
	@Autowired
	private SendGiftRankService sendGiftRankService;
	
	@Override
	public void add(SendGift sendGift) throws Exception {
		sendGiftDao.save(sendGift);

	}

	@Override
	public DataGrid dataGrid(SendGift sendGift, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<SendGift> lhm = new ArrayList<SendGift>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from SendGift t ";
		List<SendGift> l = sendGiftDao.find(hql + whereHql(sendGift, params) + orderHql(ph),
				params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (SendGift t : l) {
				SendGift u = new SendGift();
				HostMain hostMain;
				LoginUser loginUser;
				Gift gift;
				try {
					
					gift=giftService.get(t.getGiftId());
					if (gift != null) {
						if (StringUtils.isNotBlank(gift.getGiftName())) {
							t.setGiftName(gift.getGiftName());
						}
						if (gift.getGiftPrice()!=null && gift.getGiftPrice()>0) {
							t.setGiftPrice(gift.getGiftPrice());
						}
						
					}else{
						t.setGiftName("");
						t.setGiftPrice(new Double(""));
					}
					hostMain = hostMainService.get(t.getReceivedUserId());
					if (hostMain != null ) {
						if (StringUtils.isNotBlank(hostMain.getHostNickname())) {
							t.setReceivedUserName(hostMain.getHostNickname());
						}
						
					} else {
						t.setReceivedUserName("");
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (StringUtils.isNotBlank(t.getSendUserID())) {
					
					loginUser=loginUserServiceI.getUser(t.getSendUserID());
					if (loginUser != null) {
						if (StringUtils.isNotBlank(loginUser.getNickname())) {
							
							t.setSendUserNmae(loginUser.getNickname());
						}
						
					}else{
						t.setSendUserNmae("");
					}
				}
				BeanUtils.copyProperties(t, u);
				lhm.add(u);
			}
		}
		dg.setRows(lhm);
		dg.setTotal(sendGiftDao.count("select count(*) " + hql + whereHql(sendGift, params),
				params));
		return dg;
	}
	
	/**
	 * where条件封装
	 * @param SendGift
	 * @param params
	 * @return
	 */
	private String whereHql(SendGift sendGift, Map<String, Object> params) {
		String hql = "";
		if (sendGift != null) {
			hql += " where 1=1 ";
			
			if (StringUtils.isNotBlank(sendGift.getGiftName())) {//礼物名称
				hql += " and t.giftName like = :giftName";
				params.put("giftName", "%%" +sendGift.getGiftName()+ "%%");
			}
			if (StringUtils.isNotBlank(sendGift.getSendUserNmae())) {//送礼者昵称
				hql += " and t.sendUserNmae like = :sendUserNmae";
				params.put("sendUserNmae", "%%" +sendGift.getSendUserNmae()+ "%%");
			}
			if (StringUtils.isNotBlank(sendGift.getReceivedUserName())) {//受礼者昵称
				hql += " and t.receivedUserName like = :receivedUserName";
				params.put("receivedUserName", "%%" +sendGift.getReceivedUserName()+ "%%");
			}
			
			

		}
		return hql;
	}

	/**
	 * order封装
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void delete(String sendGiftId) throws Exception {
		sendGiftDao.delete(sendGiftDao.get(SendGift.class, sendGiftId));

	}

	@Override
	public void update(SendGift sendGift) throws Exception {
		sendGiftDao.update(sendGift);

	}

	@Override
	public SendGift get(String sendGiftId) throws Exception {
		return sendGiftDao.get(SendGift.class, sendGiftId);
	}

	@Override
	public SendRank addGetList(String receivedUserId,String row,String page) {
		if (StringUtils.isBlank(page)) {
			page="1";
		}
		if (StringUtils.isBlank(row)) {
			row="10";
		}
		List<SendGift> listSend=new ArrayList<SendGift>();
		List<SendGiftRank> listRank=new ArrayList<SendGiftRank>();
		SendRank rank=new SendRank();
		String hql="select sum(giftNum) as sum from SendGift where receivedUserId='"+receivedUserId+"' ";
		Long l=sendGiftDao.count(hql);
		if (l != null) {
			rank.setCount(Integer.parseInt(l.toString()));
		}
		String hql1=" from SendGift where receivedUserId='"+receivedUserId+"' group by sendUserID ";
		listSend=sendGiftDao.find(hql1);
		if (listSend != null && (listSend.size() > 0)) {
			for (SendGift sendGift : listSend) {
				SendGiftRank sendRank=new SendGiftRank();
				//sendRank.setId(UUID.randomUUID().toString());
				String hql2=" select sum(giftNum) as sum  from SendGift where receivedUserId='"+sendGift.getReceivedUserId()+"' and sendUserID='"+sendGift.getSendUserID()+"' ";
				String hql3=" select sum(allPrice) as sum1 from SendGift where receivedUserId='"+sendGift.getReceivedUserId()+"' and sendUserID='"+sendGift.getSendUserID()+"' ";
				long l2=sendGiftDao.count(hql2);
				Double l3=sendGiftDao.countDouble(hql3);
					sendRank.setGiftAllNum(Integer.parseInt(l2+""));
					sendRank.setGiftAllPrice(l3);
				if (StringUtils.isNotBlank(sendGift.getReceivedUserId())) {
					sendRank.setHostID(sendGift.getReceivedUserId());
				}
				if (StringUtils.isNotBlank(sendGift.getSendUserID())) {
					sendRank.setSendUserID(sendGift.getSendUserID());
				}
				if (StringUtils.isNotBlank(sendGift.getSendUserImage())) {
					sendRank.setSendUserImage(sendGift.getSendUserImage());
				}else{
					sendRank.setSendUserImage("");
				}
				if (StringUtils.isNotBlank(sendGift.getSendUserNmae())) {
					sendRank.setSendUserNmae(sendGift.getSendUserNmae());
				}else{
					sendRank.setSendUserNmae("");
				}
				//sendGiftRankDao.save(sendRank);
				sendGiftRankService.add(sendRank);
			}
			//listRank=sendGiftRankDao.find(" from SendGiftRank where hostID='"+receivedUserId +"' order by giftAllNum desc");
			listRank=sendGiftRankDao.find(" from SendGiftRank where hostID='"+receivedUserId +"' order by giftAllNum desc", Integer.parseInt(page), Integer.parseInt(row));
			if (listRank != null && listRank.size() >0) {
				rank.setList(listRank);
			}
		}
		
		return rank;
	}

	@Override
	public List<SendGift> getByHostId(String receivedUserId, String row,
			String page) {
		if (StringUtils.isBlank(page)) {
			page="1";
		}
		if (StringUtils.isBlank(row)) {
			row="10";
		}
		List<SendGift> listSend=new ArrayList<SendGift>();
		String hql=" from SendGift ";
		if (StringUtils.isNotBlank(receivedUserId)) {
			hql+=" where receivedUserId='"+receivedUserId+"' order by sendTime desc ";
			listSend=sendGiftDao.find(hql, Integer.parseInt(page), Integer.parseInt(row));
		}
		if (listSend != null && listSend.size() > 0) {
			return listSend;
		}
		return null;
	}

	@Override
	public List<SendGift> getByUserId(String sendUserID, String row, String page) {
		if (StringUtils.isBlank(page)) {
			page="1";
		}
		if (StringUtils.isBlank(row)) {
			row="10";
		}
		List<SendGift> listSend=new ArrayList<SendGift>();
		String hql=" from SendGift ";
		if (StringUtils.isNotBlank(sendUserID)) {
			hql+=" where sendUserID='"+sendUserID+"' order by sendTime desc ";
			listSend=sendGiftDao.find(hql, Integer.parseInt(page), Integer.parseInt(row));
		}
		if (listSend != null && listSend.size() > 0) {
			return listSend;
		}
		return null;
	}

	@Override
	public List<SendGift> getByUserIdAndHostId(String receivedUserId,
			String sendUserID, String row, String page) {
		if (StringUtils.isBlank(page)) {
			page="1";
		}
		if (StringUtils.isBlank(row)) {
			row="10";
		}
		List<SendGift> listSend=new ArrayList<SendGift>();
		String hql=" from SendGift ";
		if (StringUtils.isNotBlank(receivedUserId) && StringUtils.isNotBlank(sendUserID)) {
			hql+=" where receivedUserId='"+receivedUserId+"' and sendUserID='"+sendUserID+"' order by sendTime desc ";
			listSend=sendGiftDao.find(hql, Integer.parseInt(page), Integer.parseInt(row));
		}
		if (listSend != null && listSend.size() > 0) {
			return listSend;
		}
		return null;
	}

}
