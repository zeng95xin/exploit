package com.admin.service.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.net.URL;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.tools.ant.Project;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.MmTjDaoI;
import com.admin.dao.MncpDaoI;
import com.admin.model.IntegralConfig;
import com.admin.model.LoginUser;
import com.admin.model.MmTj;
import com.admin.model.MnSjBm;
import com.admin.model.MnSjZd;
import com.admin.model.Mncp;
import com.admin.model.Monitor;
import com.admin.model.UserJbxfInfo;
import com.admin.model.gpsy;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.GpsyServiceI;
import com.admin.service.IntegralConfigServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.MnSjBmServiceI;
import com.admin.service.MnSjZdServiceI;
import com.admin.service.MncpServiceI;
import com.admin.service.MrzcjsServiceI;
import com.admin.service.SystemMonitorServiceI;
import com.admin.service.UserJbxfInfoServiceI;
import com.admin.service.baseImpl.BaseServiceImpl;
import com.admin.util.DateUtils;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.log.ProjectConfig;
import com.web.util.TimeUtils;

@Service
public class MncpServiceImpl extends BaseServiceImpl<Mncp> implements MncpServiceI {
	
	private static final Logger logger=LoggerFactory.getLogger(MncpServiceImpl.class);

	@Autowired
	private MncpDaoI mncpDao;

	@Autowired
	private MmTjDaoI mmTjDao;

	@Autowired
	private LoginUserServiceI loginUserService;

	@Autowired
	private MnSjBmServiceI mnSjBmServiceI;

	@Autowired
	private GpsyServiceI gpsyServiceI;

	@Autowired
	private MnSjZdServiceI mnSjZdServiceI;
	@Autowired
	private IntegralConfigServiceI integralConfigServiceI;

	@Autowired
	private UserJbxfInfoServiceI userJbxfInfoServiceI;
	@Autowired
	private MrzcjsServiceI mrzcjsServiceI;
	@Autowired
	private SystemMonitorServiceI serviceI;

	@Override
	public DataGrid dataGridForOne(Mncp g, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Mncp> ul = new ArrayList<Mncp>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Mncp t ";
		List<Mncp> l = mncpDao.find(hql + whereHqlForOne(g, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Mncp t : l) {
				Mncp u = new Mncp();
				LoginUser loginuser = loginUserService.getUser(t.getUserid());
				if (StringUtils.isNotBlank(loginuser.getName())) {
					t.setUsername(loginuser.getName());
				}
				String sjname = "";
				if (StringUtils.isNotBlank(t.getSjsId())) {
					String sjid = t.getSjsId();
					MnSjZd mnsjzd = mnSjZdServiceI.get(sjid);
					if (mnsjzd != null) {
						sjname = mnsjzd.getSjName();
					} else {
						sjname = "已删除赛季";
					}
					t.setSjname(sjname);
				}
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(mncpDao.count(
				"select count(*) " + hql + whereHqlForOne(g, params), params));
		return dg;
	}

	/**
	 * where 条件封装
	 * 
	 * @param p
	 * @param params
	 * @return
	 */
	private String whereHqlForOne(Mncp g, Map<String, Object> params) {
		String hql = "";
		if (g != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNoneBlank(g.getUsername())) {
				LoginUser loginuser = loginUserService.getUserByName(g
						.getUsername());
				if (loginuser != null) {
					String userid = loginuser.getId();
					hql += " and t.userid = :userid";
					params.put("userid", userid);
				}

			}
			if (StringUtils.isNoneBlank(g.getNickname())) {
				LoginUser loginuser = loginUserService.getUserByNickName(g
						.getNickname());
				if (loginuser != null) {
					String userid = loginuser.getId();
					hql += " and t.userid = :userid";
					params.put("userid", userid);
				}

			}
			if (StringUtils.isNoneBlank(g.getMrlx())) {
				hql += " and t.mrlx =:mrlx";
				params.put("mrlx", g.getMrlx());
			}
			if (StringUtils.isNoneBlank(g.getCz())) {
				hql += " and t.cz =:cz";
				params.put("cz", g.getCz());
			}

		}
		return hql;
	}

	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	/**
	 * 股票买入操作
	 */
	@Override
	public void add(Mncp mncp) throws Exception {

		Mncp u = new Mncp();
		BeanUtils.copyProperties(mncp, u);
		mncp.setId(UUID.randomUUID().toString());
		mncp.setWttime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		mncp.setHtbh(UUID.randomUUID().toString());
		mncpDao.save(mncp);

	}

	/**
	 * 股票买入操作
	 */
	@Override
	public void gpmcAdd(Mncp mncp) throws Exception {
		Mncp u = new Mncp();
		String yhs = ""; // 印花税
		String sxf = ""; // 手续费
		BeanUtils.copyProperties(mncp, u);
		mncp.setId(UUID.randomUUID().toString());
		mncp.setWttime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		mncp.setHtbh(UUID.randomUUID().toString());
		Double mcjg = Double.parseDouble(mncp.getWtjg()); // 获取买入价格
		Double wtsl = Double.parseDouble(mncp.getWtsl());// 获取委托数量
		String mczj = String.valueOf(mcjg * wtsl); // 计算出买入总价
		mncp.setMczj(mczj);
		mncp.setYhs(yhs);
		mncp.setSxf(sxf);
		mncpDao.save(mncp);
	}

	@Override
	public Mncp get() {
		Mncp t = mncpDao.get("select distinct t from t_mncp t");
		return t;
	}

	@Override
	synchronized public void edit(Mncp p) throws Exception {
		p.setCjzqtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		mncpDao.update(p);
	}

	String[] excelHeader = { "标题", "分类", "发布者", "发布时间" };

	@Override
	public HSSFWorkbook export(List<Mncp> list) {
		HSSFWorkbook wb = new HSSFWorkbook();
		HSSFSheet sheet = wb.createSheet("Tgxt");
		HSSFRow row = sheet.createRow((int) 0);
		HSSFCellStyle style = wb.createCellStyle();
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);

		for (int i = 0; i < excelHeader.length; i++) {
			HSSFCell cell = row.createCell(i);
			cell.setCellValue(excelHeader[i]);
			cell.setCellStyle(style);
			sheet.autoSizeColumn(i);
		}

		for (int i = 0; i < list.size(); i++) {
			row = sheet.createRow(i + 1);
			Mncp p = list.get(i);
			/*
			 * row.createCell(0).setCellValue(p.getGxttitel());
			 * row.createCell(1).setCellValue(p.getGxtfbz());
			 * row.createCell(2).setCellValue(p.getGxtfl());
			 * row.createCell(3).setCellValue(p.getGxtfbtime());
			 */

		}
		return wb;
	}

	@Override
	public DataGrid dataGrid(Mncp mncp, PageHelper ph) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void delete(String id) {
		// TODO Auto-generated method stub

	}

	@Override
	public List<Mncp> getwcjList() {
		// TODO Auto-generated method stub
		// 检索出操作为买入卖出，未成交的数据
		String sff = "from Mncp where 1=1 and bz = '0' ";
		List<Mncp> list = mncpDao.getList(sff);
		return list;
	}

	@Override
	public List<Mncp> getWtList(String userid, String mrlx, String startTime,
			String endTime, String page, String rows) {
		// TODO Auto-generated method stub
		// 检索出操作为买入卖出委托数据
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String hql = "";

		if (StringUtils.isNotBlank(startTime)
				&& StringUtils.isNotBlank(endTime)) {
			hql = "from Mncp where 1=1 and cz <>'2' and userid='" + userid
					+ "' and mrlx='" + mrlx + "' and wttime>='" + startTime
					+ "' and wttime <='" + endTime + "' order by wttime desc";
		} else {
			hql = "from Mncp where 1=1 and cz <>'2' and userid='" + userid
					+ "' and mrlx='" + mrlx + "' order by wttime desc";
		}

		List<Mncp> list = mncpDao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public JSONObject mmLb(String userid) throws IOException {
		// TODO Auto-generated method stub
		Mncp p = new Mncp();
		JSONObject json = new JSONObject();
		JSONArray arr = new JSONArray();
		String nowToday = TimeUtils.getTime("yyyy-MM-dd");
		Date today = TimeUtils.getTime("yyyy-MM-dd HH:mm:ss", nowToday
				+ " 00:00:00"); // 获取当前日期
		// String sff01 =
		// "select sum(cjsl) as cjsls,zqdm ,avg(wtjg) as pjjg from t_mncp where 1=1 and cz='0' and  userid='"+userid+"' and wttime < '"+today+"' group by zqdm";
		String sff01 = "select sum(cjsl) as cjsls,zqdm ,sum(mrzj) as mrzj from t_mncp where 1=1 and cz='0' and bz='1' userid='"
				+ userid + "' and wttime < '" + today + "' group by zqdm";

		List<Object[]> mrObjList = mmTjDao.findBySql(sff01); // 获取买入数据
		List<MmTj> mrList = new ArrayList<MmTj>();
		for (int m = 0; m < mrObjList.size(); m++) {
			Object[] mmTj01 = mrObjList.get(m);
			MmTj entity01 = new MmTj();
			entity01.setCjsls(mmTj01[0].toString());
			entity01.setZqdm(mmTj01[1].toString());
			entity01.setMrzj(mmTj01[2].toString());
			mrList.add(entity01);
		}

		String sff02 = "select sum(cjsl) as cjsls,zqdm from t_mncp where 1=1 and cz='1' and bz='1' and  userid='"
				+ userid + "' group by zqdm";
		List<Object[]> mcObjList = mmTjDao.findBySql(sff02);// 获取已卖数据
		List<MmTj> mcList = new ArrayList<MmTj>();
		for (int m = 0; m < mcObjList.size(); m++) {
			Object[] mmTj02 = mcObjList.get(m);
			MmTj entity02 = new MmTj();
			entity02.setCjsls(mmTj02[0].toString());
			entity02.setZqdm(mmTj02[1].toString());
			entity02.setPjjg("0");
			entity02.setMrzj("0");
			mcList.add(entity02);
		}

		MmTj mrTj = new MmTj();
		MmTj mcTj = new MmTj();
		if (mrList.size() > 0) {
			for (int i = 0; i < mrList.size(); i++) {
				JSONObject json01 = new JSONObject();
				mrTj = mrList.get(i);
				String mrZqdm = mrTj.getZqdm();
				Double mrzs = Double.parseDouble(mrTj.getCjsls());// 获取可交易买入总数
				Double mrzj = Double.parseDouble(mrTj.getMrzj()); // 获取可交易买入总价
				Double jrmrzs; // 今日买入总数
				Double jrmrzj;// 今日买入总价
				// 获取对应 股票今日购买数据
				String sff04 = "select sum(cjsl) as jrmrzs,sum(mrzj) as jrmrzj  from t_mncp "
						+ "where 1=1 and cz='0' and bz='1' and zqdm ='"
						+ mrZqdm
						+ "' and  "
						+ "userid='"
						+ userid
						+ "' and wttime > '" + today + "' group by zqdm";
				List<Object[]> todayMrObjList = mmTjDao.findBySql(sff04);// 获取今日买入数据
				if (todayMrObjList.size() > 0) {
					Object[] mmTj03 = todayMrObjList.get(0);
					jrmrzs = Double.parseDouble(mmTj03[0].toString());
					jrmrzj = Double.parseDouble(mmTj03[1].toString());

				} else {
					jrmrzs = 0.0;
					jrmrzj = 0.0;
				}
				// 计算平均价格
				Double zj = mrzj + jrmrzj;
				Double zs = mrzs + jrmrzs;
				Double jg = zj / zs; // 平均价格
				BigDecimal bd = new BigDecimal(jg);
				double pjjg_d = bd.setScale(2, BigDecimal.ROUND_HALF_UP)
						.doubleValue();
				String pjjg = String.valueOf(pjjg_d);

				Double kyye = 0.0; // 定义可用余额
				Double zqye = 0.0; // 定义证券余额

				if (mcList.size() > 0) { // 卖出数据非空的情况下
					for (int j = 0; j < mcList.size(); j++) {

						mcTj = mcList.get(j);
						String mcZqdm = mcTj.getZqdm();
						Double mczs = Double.parseDouble(mcTj.getCjsls());
						if (mcZqdm.equals(mrZqdm) && mczs <= mrzs) {
							kyye = mrzs - mczs; // 可用余额
							zqye = kyye + jrmrzs; // 证券余额
							if (zqye > 0) {
								json01.put("zqye", zqye);
								json01.put("kyye", kyye);
								json01.put("djsl", jrmrzs); // 冻结数量
								json01.put("pjjg", pjjg); // 平均价格
								json01.put("zqdm", mrZqdm); // 证券代码
							} else {
								json01.put("msg", "无可交易数据");
							}
						} else {
							zqye = mrzs + jrmrzs; // 证券余额
							if (zqye > 0) {
								json01.put("kyye", mrzs);
								json01.put("zqye", zqye);
								json01.put("djsl", jrmrzs);
								json01.put("pjjg", pjjg);
								json01.put("zqdm", mrZqdm);
							} else {
								json01.put("msg", "无可交易数据");
							}
						}
					}

				} else {
					zqye = mrzs + jrmrzs; // 证券余额
					json01.put("kyye", mrzs);
					json01.put("zqye", zqye);
					json01.put("djsl", jrmrzs);
					json01.put("pjjg", pjjg);
					json01.put("zqdm", mrZqdm);
				}
				// 调用接口获取股票实时价格
				String timeTp = TimeUtils.getTime("yyyyMMddHHmmss");
				String nowPrice = null;
				String zqName = null;

				URL u = new URL(
						"http://route.showapi.com/131-44?showapi_appid=6127"
								+ "&showapi_timestamp="
								+ timeTp
								+ "&code="
								+ mrZqdm
								+ "&need_k_pic=0&needIndex=&showapi_sign=a28416fd6ff14246b4783026128a6f83");
				InputStream in = u.openStream();
				ByteArrayOutputStream out = new ByteArrayOutputStream();
				try {
					byte buf[] = new byte[1024];
					int read = 0;
					while ((read = in.read(buf)) > 0) {
						out.write(buf, 0, read);
					}
				} finally {
					if (in != null) {
						in.close();
					}
				}
				byte b[] = out.toByteArray();
				JSONObject jsonggJg = JSON.parseObject(new String(b, "utf-8")); // 将json结果转换成jsonObject
				if ("0".equals(jsonggJg.getString("showapi_res_code"))) {
					JSONObject showBody = jsonggJg
							.getJSONObject("showapi_res_body"); // 获取接口showapi_res_body中数据
					JSONObject stockMarket = showBody
							.getJSONObject("stockMarket"); // 从showapi_res_body中获取stockMarket数据
					nowPrice = stockMarket.getString("nowPrice"); // 从stockMarket获取股票实时数据：价格
					zqName = stockMarket.getString("name");// 从stockMarket获取股票实时数据:证券名称
				}
				json01.put("zqName", zqName); // 证券代码名称
				json01.put("nowPrice", nowPrice);// 证券代码现在实时价格

				arr.add(json01);
				/***
				 * 1、在有可交易数据时，数据项：证券代码、证券名称、证券余额、可用余额、冻结数量、平均价格（未加手续费）
				 * 2、无可交易数据时，数据项：证券代码、证券名称、msg
				 * 
				 */
			}

			json.put("errorCode", "0");
			json.put("rows", arr);
			json.put("total", mrList.size());

		} else {
			json.put("errorCode", "1");
			json.put("errorMsg", "无买入记录！");

		}

		return json;
	}

	@Override
	public List<Mncp> getRmgp(String page, String rows) throws Exception {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String hql = "SELECT DISTINCT a.zqdm,b.zqname,a.t FROM (select zqdm,count(*) as t from t_mncp group by zqdm ORDER BY t DESC LIMIT 10) as a LEFT JOIN t_mncp b on b.zqdm=a.zqdm ORDER BY a.t DESC";
		// String hql
		// ="select zqdm,zqname,count(id) as jysl,sum(wtsl+0) as wtsl from t_mncp where bz='1' GROUP BY zqdm,zqname ORDER BY  jysl desc";
		List<Object[]> list = mncpDao.findBySql(hql, Integer.valueOf(page),
				Integer.valueOf(rows));

		List<Mncp> list_1 = new ArrayList<Mncp>();
		for (int i = 0; i < list.size(); i++) {
			Object[] o = list.get(i);
			Mncp mn = new Mncp();
			if (o[0] != null) {
				mn.setZqdm(o[0].toString());
			} else {
				mn.setZqdm("");
			}

			if (o[1] != null) {
				mn.setZqname(o[1].toString());
			} else {
				mn.setZqname("");
			}

			list_1.add(mn);
		}
		return list_1;
	}

	@Override
	public List<Mncp> getTgpts(String userid, String page, String rows)
			throws Exception {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String hql = "from Mncp where mrlx='0' ";
		if (StringUtils.isNotBlank(userid)) {
			hql += " and userid='" + userid + "'";
		}
		hql += " order by wttime";
		List<Mncp> list = mncpDao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public int getTgPtsCount(String userid) throws Exception {
		String hql = "select count(*) from Mncp where mrlx='0' ";
		if (StringUtils.isNotBlank(userid)) {
			hql += " and userid='" + userid + "'";
		}
		return mncpDao.count(hql).intValue();
	}

	@Override
	public List<Mncp> getTgsjs(String userid, String page, String rows)
			throws Exception {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String hql = "from Mncp where mrlx='1' and cz <> '2'";
		if (StringUtils.isNotBlank(userid)) {
			hql += " and userid='" + userid + "'";
		}
		hql += " order by wttime desc";
		List<Mncp> list = mncpDao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public int getTgsjsCount(String userid, String page, String rows)
			throws Exception {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String hql = " select count(*) from Mncp where mrlx='1' and cz <> '2'";
		if (StringUtils.isNotBlank(userid)) {
			hql += " and userid='" + userid + "'";
		}
		hql += " order by wttime desc";
		return mncpDao.count(hql).intValue();
	}

	@Override
	public int getTgSjsCount(String userid) throws Exception {
		String hql = "select count(*) from Mncp where mrlx='1' ";
		if (StringUtils.isNotBlank(userid)) {
			hql += " and userid='" + userid + "'";
		}
		return mncpDao.count(hql).intValue();
	}

	@Override
	public Mncp getMncpById(String id) {
		Mncp n = mncpDao.get(Mncp.class, id);
		return n;
	}

	@Override
	public List<Mncp> getCjList(String userid, String mrlx) {
		// TODO Auto-generated method stub
		// 检索出操作为买入卖出委托数据
		String sff = "from Mncp where 1=1 and userid='" + userid
				+ "' and mrlx='" + mrlx + "' and bz='1' order by cjtime desc";
		List<Mncp> list = mncpDao.getList(sff);
		return list;
	}

	@Override
	public List<Mncp> getjydtList(String gpdm) {

		String sff = "from Mncp where 1=1 and zqdm like '%" + gpdm
				+ "' and bz='1' order by wttime desc";
		List<Mncp> list = mncpDao.getList(sff);
		return list;
	}

	@Override
	public JSONObject gpMmCjUpdate(Mncp p, JSONObject gg_m, String zqdm, String subcode,String pduserid,String pdSjid,String pswttime,
			boolean flag) throws Exception{
		JSONObject j = new JSONObject();
		
		String cz,wtjg;
		String sell01 = null;
		String sell02 = null;
		String sell03 = null;
		String sell04 = null;
		String sell05 = null;
		String selln = null;
		String buy01 = null;
		String buy02 = null;
		String buy03 = null;
		String buy04 = null;
		String buy05 = null;
		String buyn = null;
		
		
		cz = p.getCz(); // bz证券备注： 0：未成交，1：成交，2：平台撤销； cz 操作 0：买入；1：卖出；2 个人撤销
		wtjg = p.getWtjg();// 委托价格
		BigDecimal t_wtjg = new BigDecimal(wtjg);
		
		if ("0".equals(cz)) { // 若委托股票代码与返回行情股票代码相等，且为“买入”操作
			sell01 = gg_m.getString("sell1_m"); // 获取该股票卖一的价格
			sell02 = gg_m.getString("sell2_m"); // 获取该股票卖二的价格
			sell03 = gg_m.getString("sell3_m"); // 获取该股票卖三的价格
			sell04 = gg_m.getString("sell4_m"); // 获取该股票卖四的价格
			sell05 = gg_m.getString("sell5_m"); // 获取该股票卖五的价格

			selln = gg_m.getString("sell1_n"); // 获取该股票卖出数量

			BigDecimal t_sell1 = new BigDecimal(sell01);
			BigDecimal t_sell2 = new BigDecimal(sell02);
			BigDecimal t_sell3 = new BigDecimal(sell03);
			BigDecimal t_sell4 = new BigDecimal(sell04);
			BigDecimal t_sell5 = new BigDecimal(sell05);
			BigDecimal t_selln = new BigDecimal(selln);

			if ((t_wtjg.compareTo(t_sell1) == 0
					|| t_wtjg.compareTo(t_sell2) == 0
					|| t_wtjg.compareTo(t_sell3) == 0
					|| t_wtjg.compareTo(t_sell4) == 0
					|| t_wtjg.compareTo(t_sell5) == 0 
					|| t_wtjg.compareTo(t_sell1) > 0)
					&& !(t_sell1.compareTo(BigDecimal.ZERO) ==0)
					&& !(t_selln.compareTo(BigDecimal.ZERO) ==0)){

			

//			if ((wtjg.equals(sell05) || wtjg.equals(sell04)
//					|| wtjg.equals(sell03)
//					|| wtjg.equals(sell02)
//					|| wtjg.equals(sell01) || Double
//					.parseDouble(wtjg) > Double
//					.parseDouble(sell01))
//					&& !sell01.equals("0.000")
//					&& !selln.equals("0")) {
				p.setCjsl(Integer.parseInt(p.getWtsl())); // 成交数据为委托数量
				// p.setCjtime(
				// TimeUtils.getTime("yyyy-MM-dd "));
				p.setCjtime(TimeUtils
						.getTime("yyyy-MM-dd HH:mm:ss"));
				p.setHtbh(UUID.randomUUID().toString()); // 生成合同编号
				p.setBz("1");// 更新状态为“成交”

				// String nowcz = p.getCz();
				// 查询最近的更新
				// String mmmhql =
				// "from Mncp as mncp where userid='"+p.getUserid()+"' and mrlx ='"+p.getMrlx()+"' "
				// +
				// " and zqdm='"+p.getZqdm()+"' and wttime='"+p.getWttime()+"'";
				// Mncp pdmm = mncpDao.get(mmmhql);
				// if("1".equals(pdmm.getCxcgFlag())){ //
				// 判断该记录是否刚在结算期间撤销
				// continue;
				// }

				/**
				 * 计算出此次购买总价
				 * 
				 */
			/*	Double cjjg = 0.0;
				Double wtcj = 0.0; // 委托差价
				Double wtbczj = 0.0; // 委托补差总价
*/		
				BigDecimal cjjg=new BigDecimal("0");
				BigDecimal wtcj=new BigDecimal("0");
				BigDecimal wtbczj=new BigDecimal("0");
				if (t_wtjg.compareTo(t_sell1)>0) {
					cjjg=t_sell1;
					wtcj=t_wtjg.subtract(cjjg);
				} else {
					cjjg=t_wtjg;
				}
				/*if (Double.parseDouble(wtjg) > Double
						.parseDouble(sell01)) {
					cjjg = Double.parseDouble(sell01); // 成交价格
					//System.out.println("匹配价格：" + cjjg);
					wtcj = Double.parseDouble(wtjg) - cjjg;
				} else {
					//System.out.println("匹配价格：" + cjjg);
					cjjg = Double.parseDouble(wtjg);
				}*/
				// cjjg = Double.parseDouble(wtjg); //zhushi
				/*wtbczj = wtcj
						* Double.parseDouble(p.getWtsl());
				Double cjzj = cjjg
						* Double.parseDouble(p.getWtsl()); // 成交总价
				Double sxf = cjzj * sxfl; // 手续费
				Double mrzj = cjzj + sxf;*/
				wtbczj=wtcj.multiply(new BigDecimal(p.getWtsl()));
				BigDecimal cjzj=cjjg.multiply(new BigDecimal(p.getWtsl()));// 成交总价
				BigDecimal sxf=cjzj.multiply(ProjectConfig.getSxfl());//手续费
				//BigDecimal mrzj=cjjg.add(sxf);
				BigDecimal mrzj=cjzj.add(sxf);
				p.setMrzj(mrzj.toString());
				p.setNickname(cjjg.toString());

				// synchronized (this) {
				LoginUser lg = loginUserService.getUser(p.getUserid());
				//System.out.println("11111"+ TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
				if (lg != null) {
					if (p.getMrlx().equals("0")) {
						BigDecimal yyptsjb=new BigDecimal(lg.getPtsjb());
						BigDecimal nowptsjb=yyptsjb.subtract(sxf).add(wtbczj);
						/*Double yyptsjb = Double
								.parseDouble(lg.getPtsjb());
						Double nowptsjb = yyptsjb - sxf
								+ wtbczj;*/
						if (nowptsjb.compareTo(BigDecimal.ZERO)<0) {
							return null;
						}
						lg.setPtsjb(nowptsjb.toString());
						loginUserService.update(lg);
						p.setCjzqtime(TimeUtils
								.getTime("yyyy-MM-dd HH:mm:ss")); // 成交准确时间
						//System.out.println(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
						try {
							mncpDao.update(p); // 更新模拟买入数据
						} catch (Exception e) {
							insertExceptionMessage(e, p.getUserid());
							throw e;
						}

					} else if (p.getMrlx().equals("1")
							&& flag) { // （改）多赛季时：判断赛季是否进行中flag值，如果是则进行赛季赛金币结算更新；若不是则不进行结算
						BigDecimal yysjsjb=new BigDecimal(lg.getSjsjb());
						BigDecimal nowsjsjb=yysjsjb.subtract(sxf).add(wtbczj);
						/*Double yysjsjb = Double
								.parseDouble(lg.getSjsjb());
						Double nowsjsjb = yysjsjb - sxf
								+ wtbczj;*/
						if (nowsjsjb.compareTo(BigDecimal.ZERO)<0) {
							return null;
						}
						lg.setSjsjb(nowsjsjb.toString());
						loginUserService.update(lg);
						p.setCjzqtime(TimeUtils
								.getTime("yyyy-MM-dd HH:mm:ss"));// 成交准确时间
						//System.out.println(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
						try {
							mncpDao.update(p); // 更新模拟买入数据
						} catch (Exception e) {
							insertExceptionMessage(e, p.getUserid());
							throw e;
						}
						//System.out.println("数据id值：" + p.getId() + "---------------" + p.getBz());
					}
				}
				// }
				/*
				 * ------------------------------
				 * 新增股票收益持仓：gpsy
				 * ------------------------------
				 */
				String mrlx = p.getMrlx(); // 买入类型
											// 0：普通赛；1：赛季赛、
				String sjid = null;
				if (StringUtils.isBlank(p.getSjsId())) { // 判断赛季赛委托记录表ID为null时
					sjid = "111";
				} else if (flag) {// 注：多赛季添加后需要改。。。
					sjid = p.getSjsId();
					// 增加sql判断，判断委托赛季id是否为正在进行的赛季： flag
					// 1、true：进行赛季委托股票结算；2、false：赛季结算时走不结算判断语句
				}
				String gpname = p.getZqname();
				gpsy gp = gpsyServiceI.getGpsy(
						p.getUserid(), zqdm, mrlx, sjid); // 通过userid和zqdm、mrlx、sjid获取股票收益记录
				if (gp != null) {// 判断该用户存有持仓记录
					String id = gp.getId();
					BigDecimal yycbj=new BigDecimal(gp.getZgcbjg());// 原有持仓成本价
					BigDecimal yycczs=new BigDecimal(gp.getCgsl());// 原有持仓数量
					BigDecimal yycczj=yycbj.multiply(yycczs);// 原有持仓总价
					BigDecimal newcczj=yycczj.add(mrzj);// 现有持仓总总价
					BigDecimal newcczs=yycczs.add(new BigDecimal(p.getWtsl()));// 现有持仓总数
					/*Double yycbj = Double.parseDouble(gp
							.getZgcbjg()); // 原有持仓成本价
					Double yycczs = Double.parseDouble(gp
							.getCgsl());// 原有持仓数量
					Double yycczj = yycbj * yycczs; // 原有持仓总价
					Double newcczj = yycczj + mrzj; // 现有持仓总总价
					Double newcczs = yycczs
							+ Double.parseDouble(p
									.getWtsl()); // 现有持仓总数
*/					if (newcczs.compareTo(BigDecimal.ZERO) == 0) {
						return null;
					}
					BigDecimal zgcbjg=newcczj.divide(newcczs,3,BigDecimal.ROUND_DOWN);// 现有持仓成本价格
					//Double zgcbjg = newcczj / newcczs; // 现有持仓成本价格
					BigDecimal zgcbjg02 =zgcbjg;
					zgcbjg02.setScale(2,
							BigDecimal.ROUND_HALF_UP)
							.doubleValue(); // 四舍五入
					// gpsy newgp = new gpsy();
					gp.setJstime(TimeUtils
							.getTime("yyyy-MM-dd HH:mm:ss"));
					gp.setCgsl(newcczs.toString());
					gp.setMrlx(mrlx);
					if (mrlx.equals("0")) {// 普通赛买入
						gp.setSjid("111");
					} else if (mrlx.equals("1")) {// 赛季赛买入
						gp.setSjid(p.getSjsId());
					}
					gp.setUserid(p.getUserid());
					gp.setZgcbjg(ProjectConfig.df_default.format(zgcbjg02));
					gp.setZqdm(zqdm);
					gp.setZqname(gpname);
					try {
						gpsyServiceI.edit(gp);
					} catch (Exception e) {
						insertExceptionMessage(e, p.getUserid());
						throw e;
					}
				} else { // 当数据为新的持仓股票数据时 （增加一条数据）
					BigDecimal newcczj02=mrzj;// 现有持仓总总价
					BigDecimal newcczs02=new BigDecimal(p.getWtsl());//  现有持仓总数
					BigDecimal zgcbjg02=newcczj02.divide(newcczs02,3,BigDecimal.ROUND_DOWN);//现有持仓成本价格
					
					/*Double newcczj02 = mrzj; // 现有持仓总总价
					Double newcczs02 = Double.parseDouble(p
							.getWtsl()); // 现有持仓总数
					Double zgcbjg02 = newcczj02 / newcczs02; // 现有持仓成本价格
*/										gpsy newgp02 = new gpsy();
					newgp02.setJstime(TimeUtils
							.getTime("yyyy-MM-dd HH:mm:ss"));
					newgp02.setMrlx(mrlx);
					if (mrlx.equals("0")) {// 普通赛买入
						newgp02.setSjid("111");
						newgp02.setCgsl(newcczs02
								.toString());
						newgp02.setUserid(p.getUserid());
						newgp02.setZgcbjg(zgcbjg02
								.toString());
						newgp02.setZqdm(zqdm);
						newgp02.setZqname(gpname);
						try {
							gpsyServiceI.add(newgp02);
						} catch (Exception e) {
							insertExceptionMessage(e, p.getUserid());
							throw e;
						}
						// }else if(mrlx.equals("1") &&
						// sjid.equals(zxSjid)) { //赛季赛买入时：
						// sjid.equals(zxSjid)（取消）；是当前最新赛季赛（多赛季时：判断flag标志为true时）
					} else if (mrlx.equals("1") && flag) {
						newgp02.setSjid(pdSjid);
						newgp02.setCgsl(newcczs02
								.toString());
						newgp02.setUserid(p.getUserid());
						newgp02.setZgcbjg(zgcbjg02
								.toString());
						newgp02.setZqdm(zqdm);
						newgp02.setZqname(gpname);
						try {
							gpsyServiceI.add(newgp02);
						} catch (Exception e) {
							insertExceptionMessage(e,p.getUserid());
							throw e;
						}
						// }else if(mrlx.equals("1") &&
						// !sjid.equals(zxSjid))
						// {//赛季赛买入时且非进行中的赛季赛：判断flag标志为false时
					} else if (mrlx.equals("1") && !flag) {
						// 不做持仓数据操作
						return null;
					}
				}
				j.put("userid", p.getUserid());
				j.put("sjid", p.getId()); // 操作的数据id（唯一）
				j.put("cz", cz);
				j.put("bz", "1"); // 成交
				//System.out.println("----------------------------------chengjiao-----------------");
			} else {
				j.put("userid", p.getUserid());
				j.put("cz", cz);
				j.put("sjid", p.getId()); // 操作的数据id（唯一）
				j.put("bz", "0"); // 未成交
			}

		} else if ("1".equals(cz)) {// 若委托股票代码与返回行情股票代码相等，且为“卖出”操作
			buy01 = gg_m.getString("buy1_m"); // 获取该股票买一的价格
			buy02 = gg_m.getString("buy2_m"); // 获取该股票买二的价格
			buy03 = gg_m.getString("buy3_m"); // 获取该股票买三的价格
			buy04 = gg_m.getString("buy4_m"); // 获取该股票买四的价格
			buy05 = gg_m.getString("buy5_m"); // 获取该股票买五的价格
			buyn = gg_m.getString("buy1_n");
			BigDecimal t_buy01=new BigDecimal(buy01);
			BigDecimal t_buy02=new BigDecimal(buy02);
			BigDecimal t_buy03=new BigDecimal(buy03);
			BigDecimal t_buy04=new BigDecimal(buy04);
			BigDecimal t_buy05=new BigDecimal(buy05);
			BigDecimal t_buyn=new BigDecimal(buyn);
			//System.out.println("22222" + TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
			/*if ((wtjg.equals(buy05) || wtjg.equals(buy04)
					|| wtjg.equals(buy03)
					|| wtjg.equals(buy02)
					|| wtjg.equals(buy01) || Double
					.parseDouble(wtjg) < Double
					.parseDouble(buy01))
					&& !buy01.equals("0.000")
					&& !buyn.equals("0")) {*/
			if (	(
					t_wtjg.compareTo(t_buy05)==0
					||t_wtjg.compareTo(t_buy04)==0
					||t_wtjg.compareTo(t_buy03)==0
					||t_wtjg.compareTo(t_buy02)==0
					||t_wtjg.compareTo(t_buy01)==0 
					|| t_wtjg.compareTo(t_buy01)<0
					)
					&& !(t_buy01.compareTo(BigDecimal.ZERO)==0) 
					&& !(t_buyn.compareTo(BigDecimal.ZERO)==0)
				) {
				
			
				p.setCjsl(Integer.parseInt(p.getWtsl()));// 成交数据为委托数量
				p.setHtbh(UUID.randomUUID().toString()); // 生成合同编号

				
				BigDecimal cjjg=BigDecimal.ZERO;
				/*Double cjjg = 0.0;
				if (Double.parseDouble(wtjg) < Double
						.parseDouble(buy01)) {
					cjjg = Double.parseDouble(buy01); // 成交价格
				} else {
					cjjg = Double.parseDouble(wtjg);
				}*/
				if (t_wtjg.compareTo(t_buy01) <0) {
					cjjg=t_buy01;
				} else {
					cjjg=t_wtjg;
				}
				// cjjg = Double.parseDouble(wtjg); //zhushi
				BigDecimal cjzj=cjjg.multiply(new BigDecimal(p.getWtsl())); // 成交总价
				BigDecimal sxf=cjzj.multiply(ProjectConfig.getSxfl()); // 手续费
				BigDecimal yhs=cjzj.multiply(ProjectConfig.getYhfl());// 印花税
				BigDecimal mczj=cjjg.multiply(new BigDecimal(p.getWtsl()));// 获取卖出总价
				//Double cjzj = cjjg
					//	* Double.parseDouble(p.getWtsl()); // 成交总价
				/*Double sxf = cjzj * sxfl; // 手续费
				Double yhs = cjzj * yhsl; // 印花税
*/
				//Double mczj = Double.parseDouble(p
					//	.getWtsl()) * cjjg; // 获取卖出总价
				p.setMczj(String.valueOf(mczj));
				// p.setCjtime(
				// TimeUtils.getTime("yyyy-MM-dd"));
				p.setCjtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
				// p.setWtjg(cjjg.toString());
				p.setNickname(cjjg.toString());
				String userid = p.getUserid();
				// synchronized (this) {
				UserJbxfInfo jbxh = new UserJbxfInfo(); // 金币消费记录
				LoginUser loginUser = loginUserService.getLoginUser(userid); // 获取当前用户信息
				BigDecimal nowPtsJb=new BigDecimal(loginUser.getPtsjb());// 获取当前用户普通赛金币
				BigDecimal nowSjJb=new BigDecimal(loginUser.getSjsjb());// 获取当前用户赛季赛金币
			/*	Double nowPtsJb = Double.parseDouble(loginUser.getPtsjb());// 获取当前用户普通赛金币
				Double nowSjJb = Double.parseDouble(loginUser.getSjsjb());// 获取当前用户赛季赛金币
*/
				if ("0".equals(p.getMrlx())) { // 当为普通赛买入时
					jbxh.setCz("1");
					jbxh.setUserid(userid);
					jbxh.setZqdm(zqdm);
					jbxh.setMrlx(p.getMrlx());
					/*jbxh.setXhjbsl("+"
							+ String.valueOf(mczj - yhs
									- sxf));*/
					jbxh.setXhjbsl("+"
							+ mczj.subtract(yhs).subtract(sxf).toString());

					p.setBz("1");// 更新状态为“成交”
					try {
						mncpDao.update(p);
					} catch (Exception e) {
						insertExceptionMessage(e,p.getUserid());
						throw e;
					}
					//System.out.println(p.getId());
					jbxh.setNowye(mczj.add(nowPtsJb).subtract(yhs).subtract(sxf).toString()
							); // 金币记录当前交易后普通赛金币余额
/*										jbxh.setNowye(String.valueOf(mczj
							+ nowPtsJb - yhs - sxf)); // 金币记录当前交易后普通赛金币余额
*/										userJbxfInfoServiceI.add(jbxh);

					loginUser.setPtsjb(mczj.add(nowPtsJb).subtract(yhs).subtract(sxf).toString()
							);
/*										loginUser.setPtsjb(String.valueOf(mczj
							+ nowPtsJb - yhs - sxf));
*/										loginUserService.update(loginUser);
				} else if ("1".equals(p.getMrlx()) && flag) {// 当为赛季赛买入时（判断flag值）

					jbxh.setCz("1");
					jbxh.setUserid(userid);
					jbxh.setZqdm(zqdm);
					jbxh.setMrlx(p.getMrlx());
					jbxh.setXhjbsl("+"
							+ mczj.subtract(yhs).subtract(sxf).toString()
									);
/*										jbxh.setXhjbsl("+"
							+ String.valueOf(mczj - yhs
									- sxf));
*/
					p.setBz("1");// 更新状态为“成交”
					p.setCjzqtime(TimeUtils
							.getTime("yyyy-MM-dd HH:mm:ss"));// 成交准确时间
					try {
						mncpDao.update(p);
					} catch (Exception e) {
						insertExceptionMessage(e, p.getUserid());
						throw e;
					}
					loginUser.setSjsjb(mczj.add(nowSjJb).subtract(yhs).subtract(sxf).toString()
							);
/*										loginUser.setSjsjb(String.valueOf(mczj
							+ nowSjJb - yhs - sxf));
*/										loginUserService.update(loginUser);
					//System.out.println(p.getId());
					jbxh.setNowye(mczj.add(nowSjJb).subtract(yhs).subtract(sxf).toString());// 金币记录当前交易后赛季赛金币余额
					userJbxfInfoServiceI.add(jbxh);

					loginUser.setSjsjb(mczj.add(nowSjJb).subtract(yhs).subtract(sxf).toString()
							);
					loginUserService.update(loginUser);

					if (StringUtils
							.isNotBlank(p.getSjsId())) {
						MnSjBm mnSjBm = mnSjBmServiceI
								.findByUserIdAndSjId(
										p.getUserid(),
										p.getSjsId());
						if (mnSjBm != null) {
							mnSjBm.setDqsd(nowSjJb
									.toString());
							// 检查是否有操作数据库异常
							try {
								mnSjBmServiceI.edit(mnSjBm);
							} catch (Exception e) {
								insertExceptionMessage(e,p.getUserid());
								throw e;
							}

						}
					}
				}

				/*
				 * ---------------------- 持仓数减少
				 * ----------------------
				 */
				String mrlx = p.getMrlx(); // 买入类型
											// 0：普通赛；1：赛季赛
				String gpname = p.getZqname();
				String sjid = null;
				if (StringUtils.isBlank(p.getSjsId())) { // 判断赛季赛委托记录表ID为null时
					sjid = "111";
				} else if (flag) {
					sjid = p.getSjsId();
				}
				gpsy mcgp = gpsyServiceI.getGpsy(
						p.getUserid(), zqdm, mrlx, sjid); // 通过userid和zqdm、mrlx获取股票持仓记录
				if (mcgp != null) {// 判断该用户存有持仓记录
					BigDecimal bgCgsl=new BigDecimal(mcgp.getCgsl());
					BigDecimal nowCbj=BigDecimal.ZERO;
					BigDecimal yycbj=new BigDecimal(mcgp.getZgcbjg());// 原有持仓成本价
					BigDecimal yycczs=new BigDecimal(p.getWtsl()).add(bgCgsl);// 原有持仓数量
					BigDecimal yycczj=yycbj.multiply(yycczs);// 原有持仓总价
					BigDecimal nowCbzj=yycczj.subtract(mczj);
					BigDecimal mcyke=BigDecimal.ZERO;
					BigDecimal mcsl=new BigDecimal(p.getWtsl());
					BigDecimal mccbj=yycbj;// 卖出时成本价格
					/*Double bgCgsl = Double.parseDouble(mcgp
							.getCgsl());
					// Double newcczs = 0.0;
					Double nowCbj = 0.0;
					Double yycbj = Double.parseDouble(mcgp
							.getZgcbjg()); // 原有持仓成本价
					Double yycczs = bgCgsl
							+ Double.parseDouble(p
									.getWtsl());// 原有持仓数量

					Double yycczj = yycbj * yycczs; // 原有持仓总价
					Double nowCbzj = yycczj - mczj; // 现有成本总价
													// =
													// 原有成本总价
													// -
													// 当前卖出股票总价

					Double mcyke = 0.0;
					Double mcsl = Double.parseDouble(p
							.getWtsl()); // 卖出时卖出成交数量
					Double mccbj = yycbj; // 卖出时成本价格
*/
					if (bgCgsl.compareTo(BigDecimal.ZERO) > 0) {
						mcyke =cjjg.subtract(yycbj).multiply(new BigDecimal(p.getWtsl()));
						BigDecimal dqzj=bgCgsl.multiply(yycbj).subtract(mcyke);
						/*Double dqzj = bgCgsl * yycbj
								- mcyke; */// 当前持股数*有持仓成本
											// -卖出后盈亏额
/*											mcyke = Double.parseDouble(p
								.getWtsl())
								* (cjjg - yycbj);
						Double dqzj = bgCgsl * yycbj
								- mcyke; // 当前持股数*有持仓成本
						// -卖出后盈亏额
*/											//nowCbj = dqzj.divide(bgCgsl); // 获取现有成本价
						nowCbj = dqzj.divide(bgCgsl,3,BigDecimal.ROUND_DOWN); // 获取现有成本价

					} else {
						nowCbj = BigDecimal.ZERO;
						/*mcyke = Double.parseDouble(p
								.getWtsl())
								* (cjjg - yycbj);*/
						mcyke=cjjg.subtract(yycbj).multiply(new BigDecimal(p.getWtsl()));
					}
					BigDecimal nowCbj02 =nowCbj;
/*										BigDecimal nowCbj02 = new BigDecimal(
							nowCbj);
*/										nowCbj02.setScale(2,
							BigDecimal.ROUND_HALF_UP)
							.doubleValue(); // 四舍五入
					mcgp.setJstime(TimeUtils
							.getTime("yyyy-MM-dd HH:mm:ss"));

					mcgp.setMrlx(mrlx);
					mcgp.setSjid(sjid);
					mcgp.setUserid(p.getUserid());
					mcgp.setZgcbjg(ProjectConfig.df_default.format(nowCbj02));
					mcgp.setZqdm(zqdm);
					mcgp.setZqname(gpname);
					BigDecimal mcdqyyzj = yycbj.multiply(mcsl); // 计算出当前原有成本价卖出数量的总价
					//Double mcdqyyzj = yycbj * mcsl; // 计算出当前原有成本价卖出数量的总价

					mcgp.setMcsl(mcsl.toString()); // 卖出数量

					BigDecimal mccbjbd = mccbj;
/*										BigDecimal mccbjbd = new BigDecimal(
							mccbj);
*/										mccbjbd.setScale(2,
							BigDecimal.ROUND_HALF_UP)
							.doubleValue(); // 四舍五入
					mcgp.setMccbj(ProjectConfig.df_default.format(mccbjbd)); // 卖出时成本价

					BigDecimal mcykebd =mcyke;
/*										BigDecimal mcykebd = new BigDecimal(
							mcyke);
*/										mcykebd.setScale(2,
							BigDecimal.ROUND_HALF_UP)
							.doubleValue(); // 四舍五入
					mcgp.setMcyke(ProjectConfig.df_default.format(mcykebd)); // 卖出时盈亏额
					mcgp.setWtmccj("1");
					try {
						gpsyServiceI.edit(mcgp);
					} catch (Exception e) {
						// 记录异常操作异常
						insertExceptionMessage(e,p.getUserid());
						throw e;
					}
					return null;
				}
				// }
				j.put("userid", p.getUserid());
				j.put("cz", cz);
				j.put("bz", "1"); // 成交
			} else {
				j.put("userid", p.getUserid());
				j.put("sjid", p.getId()); // 操作的数据id（唯一）
				j.put("cz", cz);
				j.put("bz", "0"); // 未成交
			}
		}
		return j;
	}
	
	/**
	 * 
	 * 模拟操盘委托数据自动成交结算gpMmCjUpdate
	 * 
	 */
	@Override
	// @Transactional(rollbackFor=Exception.class)
	public synchronized JSONObject gpMmCjUpdate() throws Exception {

		JSONObject json = new JSONObject();
		JSONArray arr = new JSONArray();
		DecimalFormat df = new DecimalFormat("0.00");

		// 获取配置信息实体类
		IntegralConfig integralConfig = integralConfigServiceI.get();
		// Double yhsl = Double.parseDouble(integralConfig.getGpmmyhs()) ;//印花税率
		// Double sxfl = Double.parseDouble(integralConfig.getGpmmsxf());
		// //手续费税率
		BigDecimal yhsl = new BigDecimal(integralConfig.getGpmmyhs());
		BigDecimal sxfl = new BigDecimal(integralConfig.getGpmmsxf());
		Mncp p = new Mncp();

		// 获取委托记录表未成交且非撤销记录
		String sff = "from Mncp where bz = '0' and cz in ('0','1')";
		List<Mncp> list = mncpDao.getList(sff);
		if (list.size() > 0) {
			
			// bz证券备注： 0：未成交，1：成交，2：平台撤销； cz 操作 0：买入；1：卖出；2 个人撤销
			String hql_1 = " select DISTINCT zqdm from t_mncp where bz = '0' and cz in ('0','1')";
			List<Object[]> ccdmList = mncpDao.findBySql(hql_1); // 获取持股数据zqdm

			int cs = 0;
			Integer count0001 = ccdmList.size();
			Integer bs = count0001 / 100;
			Integer ys = count0001 % 100;
			if (ys > 0 && bs >= 1) {
				cs = bs + 1; // 请求次数
			} else if (ys == 0 && bs >= 1) {
				cs = bs;
			} else if (ys == 0 && bs == 0) {
				cs = 1;
			} else if (ys > 0 && bs == 0) {
				cs = 1;
			}

			for (int mm = 0; mm < cs; mm++) {
				StringBuffer sb = new StringBuffer();
				String timeTp = TimeUtils.getTime("yyyyMMddHHmmss");
				for (int jj = mm * 100; jj < (mm + 1) * 100 && jj < count0001; jj++) {
					Object cgdm01 = ccdmList.get(jj);
					String cgdm = (String) cgdm01;
					sb.append(cgdm).append(",");
				}
				String stocks = sb.toString();
				if (stocks.length() > 0) {
					stocks = stocks.substring(0, stocks.length() - 1); // 去除拼装StringBuffer的最后一个逗号
				}

				// 统一请求接口数据
				URL u = new URL(
						"http://route.showapi.com/131-46?showapi_appid=15094"
								+ "&showapi_timestamp="
								+ timeTp
								+ "&stocks="
								+ stocks
								+ "&needIndex=1&showapi_sign=288557843a564302bcaab02569355b40");
				InputStream in = u.openStream();
				ByteArrayOutputStream out = new ByteArrayOutputStream();
				//System.out.println(u);
				try {
					byte buf[] = new byte[1024];
					int read = 0;
					while ((read = in.read(buf)) > 0) {
						out.write(buf, 0, read);
					}
				} finally {
					if (in != null) {
						in.close();
					}
				}
				byte b[] = out.toByteArray();
				JSONObject jsonJg = JSON.parseObject(new String(b, "utf-8")); // 将json结果转换成jsonObject
				JSONObject showBody = jsonJg.getJSONObject("showapi_res_body"); // 获取到大盘指数结果集
				JSONArray jsList = showBody.getJSONArray("list"); // 获取实时个股数组数据
				JSONObject gg_m = new JSONObject();
				String sell01 = null;
				String sell02 = null;
				String sell03 = null;
				String sell04 = null;
				String sell05 = null;
				String selln = null;
				String buy01 = null;
				String buy02 = null;
				String buy03 = null;
				String buy04 = null;
				String buy05 = null;
				String buyn = null;

				for (int k = 0; k < list.size(); k++) { // 委托数据
					JSONObject j = new JSONObject(); // 返回结果
					p = list.get(k);
					String cz = p.getCz(); // 获取未成交记录操作状态 ：0 买入；1 卖出
					String wtjg = p.getWtjg(); // 委托价格
					String zqdm = p.getZqdm(); // 委托代码
					if (p.getUserid().equals(
							"f117f4ef-22f3-4b9d-b04e-406adefedbb9")) {
						//System.out.println("ssssssssssssss");
					}

					// add by zs
					BigDecimal t_wtjg = new BigDecimal(wtjg);

					/**
					 * 判断委托记录sjid是否在正在进行的赛季中
					 */
					Boolean flag = null;
					String pdSjid = p.getSjsId();
					String pswttime = p.getWttime();
					String pduserid = p.getUserid();

					if (StringUtils.isNotBlank(pdSjid)) {
						MnSjZd pdmnsjzd = mnSjZdServiceI.getDqJxSjs(pdSjid,
								pswttime);
						String bm = mnSjBmServiceI.pdbm(pduserid, pdSjid);
						if (pdmnsjzd != null && "1".equals(bm)) {
							flag = true;
						} else {
							flag = false;
						}

					}

					if (jsList != null && jsList.size() > 0) {

						for (int m = 0; m < jsList.size(); m++) { // 获取实时数据
							gg_m = jsList.getJSONObject(m);// 获取个股实时数据
							String code = gg_m.getString("code");// 返回代码
							//System.out.println("返回代码" + code);
							// stocks.substring(0, stocks.length()-1);
							String subcode = zqdm.substring(2, zqdm.length());

							if (code.equals(subcode) && "0".equals(cz)) { // 若委托股票代码与返回行情股票代码相等，且为“买入”操作
								sell01 = gg_m.getString("sell1_m"); // 获取该股票卖一的价格
								sell02 = gg_m.getString("sell2_m"); // 获取该股票卖二的价格
								sell03 = gg_m.getString("sell3_m"); // 获取该股票卖三的价格
								sell04 = gg_m.getString("sell4_m"); // 获取该股票卖四的价格
								sell05 = gg_m.getString("sell5_m"); // 获取该股票卖五的价格

								selln = gg_m.getString("sell1_n"); // 获取该股票卖出数量

								BigDecimal t_sell1 = new BigDecimal(sell01);
								BigDecimal t_sell2 = new BigDecimal(sell02);
								BigDecimal t_sell3 = new BigDecimal(sell03);
								BigDecimal t_sell4 = new BigDecimal(sell04);
								BigDecimal t_sell5 = new BigDecimal(sell05);
								BigDecimal t_selln = new BigDecimal(selln);

								if ((t_wtjg.compareTo(t_sell1) == 0
										|| t_wtjg.compareTo(t_sell2) == 0
										|| t_wtjg.compareTo(t_sell3) == 0
										|| t_wtjg.compareTo(t_sell4) == 0
										|| t_wtjg.compareTo(t_sell5) == 0 || t_wtjg
										.compareTo(t_sell1) > 0) && !(t_sell1.compareTo(BigDecimal.ZERO) ==0) && !(t_selln.compareTo(BigDecimal.ZERO) ==0)) {

								

//								if ((wtjg.equals(sell05) || wtjg.equals(sell04)
//										|| wtjg.equals(sell03)
//										|| wtjg.equals(sell02)
//										|| wtjg.equals(sell01) || Double
//										.parseDouble(wtjg) > Double
//										.parseDouble(sell01))
//										&& !sell01.equals("0.000")
//										&& !selln.equals("0")) {
									p.setCjsl(Integer.parseInt(p.getWtsl())); // 成交数据为委托数量
									// p.setCjtime(
									// TimeUtils.getTime("yyyy-MM-dd "));
									p.setCjtime(TimeUtils
											.getTime("yyyy-MM-dd HH:mm:ss"));
									p.setHtbh(UUID.randomUUID().toString()); // 生成合同编号
									p.setBz("1");// 更新状态为“成交”

									// String nowcz = p.getCz();
									// 查询最近的更新
									// String mmmhql =
									// "from Mncp as mncp where userid='"+p.getUserid()+"' and mrlx ='"+p.getMrlx()+"' "
									// +
									// " and zqdm='"+p.getZqdm()+"' and wttime='"+p.getWttime()+"'";
									// Mncp pdmm = mncpDao.get(mmmhql);
									// if("1".equals(pdmm.getCxcgFlag())){ //
									// 判断该记录是否刚在结算期间撤销
									// continue;
									// }

									/**
									 * 计算出此次购买总价
									 * 
									 */
								/*	Double cjjg = 0.0;
									Double wtcj = 0.0; // 委托差价
									Double wtbczj = 0.0; // 委托补差总价
*/		
									BigDecimal cjjg=new BigDecimal("0");
									BigDecimal wtcj=new BigDecimal("0");
									BigDecimal wtbczj=new BigDecimal("0");
									if (t_wtjg.compareTo(t_sell1)>0) {
										cjjg=t_sell1;
										wtcj=t_wtjg.subtract(cjjg);
									} else {
										cjjg=t_wtjg;
									}
									/*if (Double.parseDouble(wtjg) > Double
											.parseDouble(sell01)) {
										cjjg = Double.parseDouble(sell01); // 成交价格
										//System.out.println("匹配价格：" + cjjg);
										wtcj = Double.parseDouble(wtjg) - cjjg;
									} else {
										//System.out.println("匹配价格：" + cjjg);
										cjjg = Double.parseDouble(wtjg);
									}*/
									// cjjg = Double.parseDouble(wtjg); //zhushi
									/*wtbczj = wtcj
											* Double.parseDouble(p.getWtsl());
									Double cjzj = cjjg
											* Double.parseDouble(p.getWtsl()); // 成交总价
									Double sxf = cjzj * sxfl; // 手续费
									Double mrzj = cjzj + sxf;*/
									wtbczj=wtcj.multiply(new BigDecimal(p.getWtsl()));
									BigDecimal cjzj=cjjg.multiply(new BigDecimal(p.getWtsl()));// 成交总价
									BigDecimal sxf=cjzj.multiply(sxfl);//手续费
									//BigDecimal mrzj=cjjg.add(sxf);
									BigDecimal mrzj=cjzj.add(sxf);
									p.setMrzj(mrzj.toString());
									p.setNickname(cjjg.toString());

									// synchronized (this) {
									LoginUser lg = loginUserService.getUser(p
											.getUserid());
									//System.out.println("11111" + TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
									if (lg != null) {
										if (p.getMrlx().equals("0")) {
											BigDecimal yyptsjb=new BigDecimal(lg.getPtsjb());
											BigDecimal nowptsjb=yyptsjb.subtract(sxf).add(wtbczj);
											/*Double yyptsjb = Double
													.parseDouble(lg.getPtsjb());
											Double nowptsjb = yyptsjb - sxf
													+ wtbczj;*/
											if (nowptsjb.compareTo(BigDecimal.ZERO)<0) {
												continue;
											}
											lg.setPtsjb(nowptsjb.toString());
											loginUserService.update(lg);
											p.setCjzqtime(TimeUtils
													.getTime("yyyy-MM-dd HH:mm:ss")); // 成交准确时间
											//System.out.println(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
											try {
												mncpDao.update(p); // 更新模拟买入数据
											} catch (Exception e) {
												insertExceptionMessage(e,
														p.getUserid());
												continue;
											}

										} else if (p.getMrlx().equals("1")
												&& flag) { // （改）多赛季时：判断赛季是否进行中flag值，如果是则进行赛季赛金币结算更新；若不是则不进行结算
											BigDecimal yysjsjb=new BigDecimal(lg.getSjsjb());
											BigDecimal nowsjsjb=yysjsjb.subtract(sxf).add(wtbczj);
											/*Double yysjsjb = Double
													.parseDouble(lg.getSjsjb());
											Double nowsjsjb = yysjsjb - sxf
													+ wtbczj;*/
											if (nowsjsjb.compareTo(BigDecimal.ZERO)<0) {
												continue;
											}
											lg.setSjsjb(nowsjsjb.toString());
											loginUserService.update(lg);
											p.setCjzqtime(TimeUtils
													.getTime("yyyy-MM-dd HH:mm:ss"));// 成交准确时间
											//System.out.println(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
											try {
												mncpDao.update(p); // 更新模拟买入数据
											} catch (Exception e) {
												insertExceptionMessage(e,
														p.getUserid());
												continue;
											}
											//System.out.println("数据id值：" + p.getId() + "---------------" + p.getBz());
										}
									}
									// }
									/*
									 * ------------------------------
									 * 新增股票收益持仓：gpsy
									 * ------------------------------
									 */
									String mrlx = p.getMrlx(); // 买入类型
																// 0：普通赛；1：赛季赛、
									String sjid = null;
									if (StringUtils.isBlank(p.getSjsId())) { // 判断赛季赛委托记录表ID为null时
										sjid = "111";
									} else if (flag) {// 注：多赛季添加后需要改。。。
										sjid = p.getSjsId();
										// 增加sql判断，判断委托赛季id是否为正在进行的赛季： flag
										// 1、true：进行赛季委托股票结算；2、false：赛季结算时走不结算判断语句
									}
									String gpname = p.getZqname();
									gpsy gp = gpsyServiceI.getGpsy(
											p.getUserid(), zqdm, mrlx, sjid); // 通过userid和zqdm、mrlx、sjid获取股票收益记录
									if (gp != null) {// 判断该用户存有持仓记录
										String id = gp.getId();
										BigDecimal yycbj=new BigDecimal(gp.getZgcbjg());// 原有持仓成本价
										BigDecimal yycczs=new BigDecimal(gp.getCgsl());// 原有持仓数量
										BigDecimal yycczj=yycbj.multiply(yycczs);// 原有持仓总价
										BigDecimal newcczj=yycczj.add(mrzj);// 现有持仓总总价
										BigDecimal newcczs=yycczs.add(new BigDecimal(p.getWtsl()));// 现有持仓总数
										/*Double yycbj = Double.parseDouble(gp
												.getZgcbjg()); // 原有持仓成本价
										Double yycczs = Double.parseDouble(gp
												.getCgsl());// 原有持仓数量
										Double yycczj = yycbj * yycczs; // 原有持仓总价
										Double newcczj = yycczj + mrzj; // 现有持仓总总价
										Double newcczs = yycczs
												+ Double.parseDouble(p
														.getWtsl()); // 现有持仓总数
*/										if (newcczs.compareTo(BigDecimal.ZERO) == 0) {
											continue;
										}
										BigDecimal zgcbjg=newcczj.divide(newcczs,3,BigDecimal.ROUND_DOWN);// 现有持仓成本价格
										//Double zgcbjg = newcczj / newcczs; // 现有持仓成本价格
										BigDecimal zgcbjg02 =zgcbjg;
										zgcbjg02.setScale(2,
												BigDecimal.ROUND_HALF_UP)
												.doubleValue(); // 四舍五入
										// gpsy newgp = new gpsy();
										gp.setJstime(TimeUtils
												.getTime("yyyy-MM-dd HH:mm:ss"));
										gp.setCgsl(newcczs.toString());
										gp.setMrlx(mrlx);
										if (mrlx.equals("0")) {// 普通赛买入
											gp.setSjid("111");
										} else if (mrlx.equals("1")) {// 赛季赛买入
											gp.setSjid(p.getSjsId());
										}
										gp.setUserid(p.getUserid());
										gp.setZgcbjg(df.format(zgcbjg02));
										gp.setZqdm(zqdm);
										gp.setZqname(gpname);
										try {
											gpsyServiceI.edit(gp);
										} catch (Exception e) {
											insertExceptionMessage(e,
													p.getUserid());
										}
										continue;
									} else { // 当数据为新的持仓股票数据时 （增加一条数据）
										BigDecimal newcczj02=mrzj;// 现有持仓总总价
										BigDecimal newcczs02=new BigDecimal(p.getWtsl());//  现有持仓总数
										BigDecimal zgcbjg02=newcczj02.divide(newcczs02,3,BigDecimal.ROUND_DOWN);//现有持仓成本价格
										
										/*Double newcczj02 = mrzj; // 现有持仓总总价
										Double newcczs02 = Double.parseDouble(p
												.getWtsl()); // 现有持仓总数
										Double zgcbjg02 = newcczj02 / newcczs02; // 现有持仓成本价格
*/										gpsy newgp02 = new gpsy();
										newgp02.setJstime(TimeUtils
												.getTime("yyyy-MM-dd HH:mm:ss"));
										newgp02.setMrlx(mrlx);
										if (mrlx.equals("0")) {// 普通赛买入
											newgp02.setSjid("111");
											newgp02.setCgsl(newcczs02
													.toString());
											newgp02.setUserid(p.getUserid());
											newgp02.setZgcbjg(zgcbjg02
													.toString());
											newgp02.setZqdm(zqdm);
											newgp02.setZqname(gpname);
											try {
												gpsyServiceI.add(newgp02);
											} catch (Exception e) {
												insertExceptionMessage(e,
														p.getUserid());
											}
											continue;
											// }else if(mrlx.equals("1") &&
											// sjid.equals(zxSjid)) { //赛季赛买入时：
											// sjid.equals(zxSjid)（取消）；是当前最新赛季赛（多赛季时：判断flag标志为true时）
										} else if (mrlx.equals("1") && flag) {
											newgp02.setSjid(pdSjid);
											newgp02.setCgsl(newcczs02
													.toString());
											newgp02.setUserid(p.getUserid());
											newgp02.setZgcbjg(zgcbjg02
													.toString());
											newgp02.setZqdm(zqdm);
											newgp02.setZqname(gpname);
											try {
												gpsyServiceI.add(newgp02);
											} catch (Exception e) {
												insertExceptionMessage(e,
														p.getUserid());
											}

											continue;
											// }else if(mrlx.equals("1") &&
											// !sjid.equals(zxSjid))
											// {//赛季赛买入时且非进行中的赛季赛：判断flag标志为false时
										} else if (mrlx.equals("1") && !flag) {
											// 不做持仓数据操作
											continue;
										}
									}
									j.put("userid", p.getUserid());
									j.put("sjid", p.getId()); // 操作的数据id（唯一）
									j.put("cz", cz);
									j.put("bz", "1"); // 成交
									//System.out.println("----------------------------------chengjiao-----------------");
									arr.add(j);
								} else {
									j.put("userid", p.getUserid());
									j.put("cz", cz);
									j.put("sjid", p.getId()); // 操作的数据id（唯一）
									j.put("bz", "0"); // 未成交
									arr.add(j);
								}

							} else if (code.equals(subcode) && "1".equals(cz)) {// 若委托股票代码与返回行情股票代码相等，且为“卖出”操作
								buy01 = gg_m.getString("buy1_m"); // 获取该股票买一的价格
								buy02 = gg_m.getString("buy2_m"); // 获取该股票买二的价格
								buy03 = gg_m.getString("buy3_m"); // 获取该股票买三的价格
								buy04 = gg_m.getString("buy4_m"); // 获取该股票买四的价格
								buy05 = gg_m.getString("buy5_m"); // 获取该股票买五的价格
								buyn = gg_m.getString("buy1_n");
								BigDecimal t_buy01=new BigDecimal(buy01);
								BigDecimal t_buy02=new BigDecimal(buy02);
								BigDecimal t_buy03=new BigDecimal(buy03);
								BigDecimal t_buy04=new BigDecimal(buy04);
								BigDecimal t_buy05=new BigDecimal(buy05);
								BigDecimal t_buyn=new BigDecimal(buyn);
								//System.out.println("22222" + TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
								/*if ((wtjg.equals(buy05) || wtjg.equals(buy04)
										|| wtjg.equals(buy03)
										|| wtjg.equals(buy02)
										|| wtjg.equals(buy01) || Double
										.parseDouble(wtjg) < Double
										.parseDouble(buy01))
										&& !buy01.equals("0.000")
										&& !buyn.equals("0")) {*/
								if ((t_wtjg.compareTo(t_buy05)==0||t_wtjg.compareTo(t_buy04)==0||t_wtjg.compareTo(t_buy03)==0||t_wtjg.compareTo(t_buy02)==0||t_wtjg.compareTo(t_buy01)==0 || t_wtjg.compareTo(t_buy01)<0)
										&& !(t_buy01.compareTo(BigDecimal.ZERO)==0) && !(t_buyn.compareTo(BigDecimal.ZERO)==0)
										) {
									
								
									p.setCjsl(Integer.parseInt(p.getWtsl()));// 成交数据为委托数量
									p.setHtbh(UUID.randomUUID().toString()); // 生成合同编号

									
									BigDecimal cjjg=BigDecimal.ZERO;
									/*Double cjjg = 0.0;
									if (Double.parseDouble(wtjg) < Double
											.parseDouble(buy01)) {
										cjjg = Double.parseDouble(buy01); // 成交价格
									} else {
										cjjg = Double.parseDouble(wtjg);
									}*/
									if (t_wtjg.compareTo(t_buy01) <0) {
										cjjg=t_buy01;
									} else {
										cjjg=t_wtjg;
									}
									// cjjg = Double.parseDouble(wtjg); //zhushi
									BigDecimal cjzj=cjjg.multiply(new BigDecimal(p.getWtsl())); // 成交总价
									BigDecimal sxf=cjzj.multiply(sxfl); // 手续费
									BigDecimal yhs=cjzj.multiply(yhsl);// 印花税
									BigDecimal mczj=cjjg.multiply(new BigDecimal(p.getWtsl()));// 获取卖出总价
									//Double cjzj = cjjg
										//	* Double.parseDouble(p.getWtsl()); // 成交总价
									/*Double sxf = cjzj * sxfl; // 手续费
									Double yhs = cjzj * yhsl; // 印花税
*/
									//Double mczj = Double.parseDouble(p
										//	.getWtsl()) * cjjg; // 获取卖出总价
									p.setMczj(String.valueOf(mczj));
									// p.setCjtime(
									// TimeUtils.getTime("yyyy-MM-dd"));
									p.setCjtime(TimeUtils
											.getTime("yyyy-MM-dd HH:mm:ss"));
									// p.setWtjg(cjjg.toString());
									p.setNickname(cjjg.toString());
									String userid = p.getUserid();
									// synchronized (this) {
									UserJbxfInfo jbxh = new UserJbxfInfo(); // 金币消费记录
									LoginUser loginUser = loginUserService
											.getLoginUser(userid); // 获取当前用户信息
									BigDecimal nowPtsJb=new BigDecimal(loginUser.getPtsjb());// 获取当前用户普通赛金币
									BigDecimal nowSjJb=new BigDecimal(loginUser.getSjsjb());// 获取当前用户赛季赛金币
								/*	Double nowPtsJb = Double
											.parseDouble(loginUser.getPtsjb());// 获取当前用户普通赛金币
									Double nowSjJb = Double
											.parseDouble(loginUser.getSjsjb());// 获取当前用户赛季赛金币
*/
									if ("0".equals(p.getMrlx())) { // 当为普通赛买入时

										jbxh.setCz("1");
										jbxh.setUserid(userid);
										jbxh.setZqdm(zqdm);
										jbxh.setMrlx(p.getMrlx());
										/*jbxh.setXhjbsl("+"
												+ String.valueOf(mczj - yhs
														- sxf));*/
										jbxh.setXhjbsl("+"
												+ mczj.subtract(yhs).subtract(sxf).toString());

										p.setBz("1");// 更新状态为“成交”
										try {
											mncpDao.update(p);
										} catch (Exception e) {
											insertExceptionMessage(e,
													p.getUserid());
											continue;
										}

										//System.out.println(p.getId());
										jbxh.setNowye(mczj.add(nowPtsJb).subtract(yhs).subtract(sxf).toString()
												); // 金币记录当前交易后普通赛金币余额
/*										jbxh.setNowye(String.valueOf(mczj
												+ nowPtsJb - yhs - sxf)); // 金币记录当前交易后普通赛金币余额
*/										userJbxfInfoServiceI.add(jbxh);

										loginUser.setPtsjb(mczj.add(nowPtsJb).subtract(yhs).subtract(sxf).toString()
												);
/*										loginUser.setPtsjb(String.valueOf(mczj
												+ nowPtsJb - yhs - sxf));
*/										loginUserService.update(loginUser);
									} else if ("1".equals(p.getMrlx()) && flag) {// 当为赛季赛买入时（判断flag值）

										jbxh.setCz("1");
										jbxh.setUserid(userid);
										jbxh.setZqdm(zqdm);
										jbxh.setMrlx(p.getMrlx());
										jbxh.setXhjbsl("+"
												+ mczj.subtract(yhs).subtract(sxf).toString()
														);
/*										jbxh.setXhjbsl("+"
												+ String.valueOf(mczj - yhs
														- sxf));
*/
										p.setBz("1");// 更新状态为“成交”
										p.setCjzqtime(TimeUtils
												.getTime("yyyy-MM-dd HH:mm:ss"));// 成交准确时间
										try {
											mncpDao.update(p);
										} catch (Exception e) {
											insertExceptionMessage(e,
													p.getUserid());
											continue;
										}
										loginUser.setSjsjb(mczj.add(nowSjJb).subtract(yhs).subtract(sxf).toString()
												);
/*										loginUser.setSjsjb(String.valueOf(mczj
												+ nowSjJb - yhs - sxf));
*/										loginUserService.update(loginUser);
										//System.out.println(p.getId());
										jbxh.setNowye(mczj.add(nowSjJb).subtract(yhs).subtract(sxf).toString());// 金币记录当前交易后赛季赛金币余额
										userJbxfInfoServiceI.add(jbxh);

										loginUser.setSjsjb(mczj.add(nowSjJb).subtract(yhs).subtract(sxf).toString()
												);
										loginUserService.update(loginUser);

										if (StringUtils
												.isNotBlank(p.getSjsId())) {
											MnSjBm mnSjBm = mnSjBmServiceI
													.findByUserIdAndSjId(
															p.getUserid(),
															p.getSjsId());
											if (mnSjBm != null) {
												mnSjBm.setDqsd(nowSjJb
														.toString());
												// 检查是否有操作数据库异常
												try {
													mnSjBmServiceI.edit(mnSjBm);
												} catch (Exception e) {
													insertExceptionMessage(e,
															p.getUserid());
												}

											}
										}
									}

									/*
									 * ---------------------- 持仓数减少
									 * ----------------------
									 */
									String mrlx = p.getMrlx(); // 买入类型
																// 0：普通赛；1：赛季赛
									String gpname = p.getZqname();
									String sjid = null;
									if (StringUtils.isBlank(p.getSjsId())) { // 判断赛季赛委托记录表ID为null时
										sjid = "111";
									} else if (flag) {
										sjid = p.getSjsId();
									}
									gpsy mcgp = gpsyServiceI.getGpsy(
											p.getUserid(), zqdm, mrlx, sjid); // 通过userid和zqdm、mrlx获取股票持仓记录
									if (mcgp != null) {// 判断该用户存有持仓记录
										BigDecimal bgCgsl=new BigDecimal(mcgp.getCgsl());
										BigDecimal nowCbj=BigDecimal.ZERO;
										BigDecimal yycbj=new BigDecimal(mcgp.getZgcbjg());// 原有持仓成本价
										BigDecimal yycczs=new BigDecimal(p.getWtsl()).add(bgCgsl);// 原有持仓数量
										BigDecimal yycczj=yycbj.multiply(yycczs);// 原有持仓总价
										BigDecimal nowCbzj=yycczj.subtract(mczj);
										BigDecimal mcyke=BigDecimal.ZERO;
										BigDecimal mcsl=new BigDecimal(p.getWtsl());
										BigDecimal mccbj=yycbj;// 卖出时成本价格
										/*Double bgCgsl = Double.parseDouble(mcgp
												.getCgsl());
										// Double newcczs = 0.0;
										Double nowCbj = 0.0;
										Double yycbj = Double.parseDouble(mcgp
												.getZgcbjg()); // 原有持仓成本价
										Double yycczs = bgCgsl
												+ Double.parseDouble(p
														.getWtsl());// 原有持仓数量

										Double yycczj = yycbj * yycczs; // 原有持仓总价
										Double nowCbzj = yycczj - mczj; // 现有成本总价
																		// =
																		// 原有成本总价
																		// -
																		// 当前卖出股票总价

										Double mcyke = 0.0;
										Double mcsl = Double.parseDouble(p
												.getWtsl()); // 卖出时卖出成交数量
										Double mccbj = yycbj; // 卖出时成本价格
*/
										if (bgCgsl.compareTo(BigDecimal.ZERO) > 0) {
											mcyke =cjjg.subtract(yycbj).multiply(new BigDecimal(p.getWtsl()));
											BigDecimal dqzj=bgCgsl.multiply(yycbj).subtract(mcyke);
											/*Double dqzj = bgCgsl * yycbj
													- mcyke; */// 当前持股数*有持仓成本
																// -卖出后盈亏额
/*											mcyke = Double.parseDouble(p
													.getWtsl())
													* (cjjg - yycbj);
											Double dqzj = bgCgsl * yycbj
													- mcyke; // 当前持股数*有持仓成本
											// -卖出后盈亏额
*/											//nowCbj = dqzj.divide(bgCgsl); // 获取现有成本价
											nowCbj = dqzj.divide(bgCgsl,3,BigDecimal.ROUND_DOWN); // 获取现有成本价

										} else {
											nowCbj = BigDecimal.ZERO;
											/*mcyke = Double.parseDouble(p
													.getWtsl())
													* (cjjg - yycbj);*/
											mcyke=cjjg.subtract(yycbj).multiply(new BigDecimal(p.getWtsl()));
										}
										BigDecimal nowCbj02 =nowCbj;
/*										BigDecimal nowCbj02 = new BigDecimal(
												nowCbj);
*/										nowCbj02.setScale(2,
												BigDecimal.ROUND_HALF_UP)
												.doubleValue(); // 四舍五入
										mcgp.setJstime(TimeUtils
												.getTime("yyyy-MM-dd HH:mm:ss"));

										mcgp.setMrlx(mrlx);
										mcgp.setSjid(sjid);
										mcgp.setUserid(p.getUserid());
										mcgp.setZgcbjg(df.format(nowCbj02));
										mcgp.setZqdm(zqdm);
										mcgp.setZqname(gpname);
										BigDecimal mcdqyyzj = yycbj.multiply(mcsl); // 计算出当前原有成本价卖出数量的总价
										//Double mcdqyyzj = yycbj * mcsl; // 计算出当前原有成本价卖出数量的总价

										mcgp.setMcsl(mcsl.toString()); // 卖出数量

										BigDecimal mccbjbd = mccbj;
/*										BigDecimal mccbjbd = new BigDecimal(
												mccbj);
*/										mccbjbd.setScale(2,
												BigDecimal.ROUND_HALF_UP)
												.doubleValue(); // 四舍五入
										mcgp.setMccbj(df.format(mccbjbd)); // 卖出时成本价

										BigDecimal mcykebd =mcyke;
/*										BigDecimal mcykebd = new BigDecimal(
												mcyke);
*/										mcykebd.setScale(2,
												BigDecimal.ROUND_HALF_UP)
												.doubleValue(); // 四舍五入
										mcgp.setMcyke(df.format(mcykebd)); // 卖出时盈亏额
										mcgp.setWtmccj("1");
										try {
											gpsyServiceI.edit(mcgp);
										} catch (Exception e) {
											// 记录异常操作异常
											insertExceptionMessage(e,
													p.getUserid());
										}

										continue;
									}
									// }

									j.put("userid", p.getUserid());
									j.put("cz", cz);
									j.put("bz", "1"); // 成交
									arr.add(j);
								} else {
									j.put("userid", p.getUserid());
									j.put("sjid", p.getId()); // 操作的数据id（唯一）
									j.put("cz", cz);
									j.put("bz", "0"); // 未成交
									arr.add(j);
								}
							}
						}

					}

				}

			}

			json.put("errorCode", "0");
			json.put("errorMsg", "操作成功");
			json.put("total", list.size());
			json.put("rows", arr);

		} else {
			json.put("errorCode", "1");
			json.put("errorMsg", "无委托记录");
		}

		// }
		return json;
	}

	@Override
	public JSONObject gpsyInsert() throws Exception {
		JSONObject json = new JSONObject();
		Mncp p = new Mncp();
		String sff = "from Mncp where 1=1 and bz = '0' and cz='0' group by userid,zqdm ";
		List<Mncp> list = mncpDao.getList(sff);// 获取委托数据中未成交的数据

		return null;
	}

	@Override
	public Mncp getmncp(String userid, String zqdm, String mrlx, String wttime) {
		/*
		 * String sql =
		 * "update t_mncp set cz='2' where 1=1 and userid ='"+userid
		 * +"' and zqdm='"
		 * +zqdm+"' and mrlx='"+mrlx+"' and wttime='"+wttime+"' and bz='0' ";
		 * mncpDao.executeSql(sql);
		 */

		String hql = "from Mncp where 1=1 and userid ='" + userid
				+ "' and zqdm='" + zqdm + "' and mrlx='" + mrlx
				+ "' and wttime='" + wttime + "' and bz='0' and cxcgFlag='1' ";
		Mncp mncp = mncpDao.get(hql);
		return mncp;
	}

	/*
	 * //检索出操作为买入卖出委托数据
	 * 
	 * @see com.admin.service.MncpServiceI#getCxList(java.lang.String,
	 * java.lang.String)
	 */
	@Override
	public List<Mncp> getCxList(String userid, String mrlx, String page,
			String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String hql = "from Mncp where 1=1 and userid='" + userid
				+ "' and mrlx='" + mrlx + "' and cz='2' order by wttime";
		List<Mncp> list = mncpDao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public List<Mncp> getJrcgList(String userid, String zqdm, String mrlx) {
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String nowday = sdf.format(date);
		String hql = "from Mncp where 1=1 and userid='" + userid
				+ "' and mrlx='" + mrlx + "' " + "and zqdm ='" + zqdm
				+ "' and cz='0' and bz='1' and cjtime like '%" + nowday + "%'";
		List<Mncp> list = mncpDao.find(hql);
		return list;
	}

	/**
	 * 每日下午三点过5分自动删除委托未成交记录 updateWcjjl
	 * 
	 * @throws Exception
	 */
	@Override
	public void updateWcjjl() {
		// TODO Auto-generated method stub
		// 获取当日未成交记录
		try {
			DecimalFormat df = new DecimalFormat("#.##");
			String hql = " from Mncp where 1=1 and bz='0' and cz in ('0','1')";
			List<Mncp> list = mncpDao.find(hql);
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Mncp mn = list.get(i);
					String cz = mn.getCz();
					// bz证券备注： 0：未成交，1：成交，2：平台撤销； cz 操作 0：买入；1：卖出；2 个人撤销
					if (cz.equals("0")) {
						mn.setCz("2");
						mncpDao.update(mn);
						String mrlx = mn.getMrlx();// 获取买入类型
						String mrzj = mn.getMrzj();// 获取买入总价
						String userid = mn.getUserid();
						LoginUser loginUser = loginUserService.getUser(userid);
						String yyptsjb = loginUser.getPtsjb();
						String yysjsjb = loginUser.getSjsjb();

						if (cz.equals("0") && mrlx.equals("0")) {// 如果为买入委托且买入类型为普通赛
							Double dqptsjb = Double.parseDouble(yyptsjb)
									+ Double.parseDouble(mrzj);
							loginUser.setPtsjb(df.format(dqptsjb));
							loginUserService.update(loginUser);
						} else if (cz.equals("0") && mrlx.equals("1")) {
							Double dqsjsjb = Double.parseDouble(yysjsjb)
									+ Double.parseDouble(mrzj);
							loginUser.setSjsjb(df.format(dqsjsjb));
							loginUserService.update(loginUser);
						}
					} else if (cz.equals("1")) {
						Double dqwtsl = Double.parseDouble(mn.getWtsl());
						String mrlx = mn.getMrlx();// 获取买入类型
						String userid = mn.getUserid();
						String zqdm = mn.getZqdm();
						gpsy dqgpsy = gpsyServiceI.getNowGpsy(userid, zqdm, mrlx);
						Double xycgsl = Double.parseDouble(dqgpsy.getCgsl());
						Double cxCgsl = xycgsl + dqwtsl;
						dqgpsy.setCgsl(cxCgsl.toString());
						gpsyServiceI.edit(dqgpsy);
						mn.setCz("2");
						mncpDao.update(mn);
					}
				}
			}
		} catch (NumberFormatException n) {
			n.printStackTrace();
			logger.error("**************删除未成交委托数字异常", n);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("****************删除未成交委托异常", e);
		}

	}

	@Override
	public void deleteDqwt(String userid, String sjsid) {
		// TODO Auto-generated method stub
		// String hql =
		// " from Mncp where 1=1 and userid='"+userid+"' and sjsId='"+sjsid+"' and mrlx = '1'";
		String hql = " from Mncp where 1=1 and userid='" + userid
				+ "'  and mrlx = '1'";
		List<Mncp> list = mncpDao.find(hql);
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				Mncp mncp = list.get(i);
				mncpDao.delete(mncp);
			}
		}

	}

	@Override
	public List<Mncp> getTgzcList(String sjid) {
		// TODO Auto-generated method stub
		String hql = " from Mncp where 1=1 and sjsId='" + sjid + "'";
		List<Mncp> list = mncpDao.find(hql);

		return list;
	}

	@Override
	public Double getwtmcList(String userid, String zqdm, String mrlx) {

		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String nowday = sdf.format(date);
		String hql = "from Mncp where 1=1 and userid='" + userid
				+ "' and mrlx='" + mrlx + "' " + "and zqdm ='" + zqdm
				+ "' and cz='1' and bz='0' and wttime like '" + nowday + " %%'";
		List<Mncp> list = mncpDao.find(hql);
		Double count = 0.0;
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				Mncp wtmc = list.get(i);
				count = count + Double.parseDouble(wtmc.getWtsl());
			}
		}
		return count;

	}

	/*
	 * 买入股票判断 (non-Javadoc)
	 * 
	 * @see com.admin.service.MncpServiceI#pdWtTime(java.lang.String,
	 * java.lang.String, java.lang.String, java.lang.String, java.lang.String)
	 */
	@Override
	public String pdWtTime(String sjid, String wtsl, String userid,
			String mrlx, String wtjg) {
		// TODO Auto-generated method stub
		String i = "0";
		Boolean sjFlag = false;
		Boolean zsFlag = false;
		Boolean sjBmFlag = false;
		Boolean sxfFlag = false;
		IntegralConfig integra = integralConfigServiceI.get();

		String san = DateUtils.DateToStr("yyyy-MM-dd 15:00:00", new Date());
		//String san = DateUtils.DateToStr("yyyy-MM-dd 20:00:00", new Date());
		String one = DateUtils.DateToStr("yyyy-MM-dd 13:00:03", new Date());
		//System.out.println(san);

		// 当日9点
		String shiyi = DateUtils.DateToStr("yyyy-MM-dd 11:29:50", new Date());
		String jiu = DateUtils.DateToStr("yyyy-MM-dd 09:00:00", new Date());
		//System.out.println(jiu);
		// 判断时间9点-15点可委托
		if ((DateUtils.strToDate(san, DateUtils.YYYY_MM_DD_HH_MM_SS).getTime() > new Date()
				.getTime() && new Date().getTime() > DateUtils.strToDate(one,
				DateUtils.YYYY_MM_DD_HH_MM_SS).getTime())// 下午1点到三点
				|| (DateUtils.strToDate(shiyi, DateUtils.YYYY_MM_DD_HH_MM_SS)
						.getTime() > new Date().getTime() && new Date()
						.getTime() > DateUtils.strToDate(jiu,
						DateUtils.YYYY_MM_DD_HH_MM_SS).getTime())) {// 上午9点到11:30
			sjFlag = true;
		} else {
			i = "1";
		}
		// 委托数量为整数 且必须大于100，可委托
		Double ys = Double.parseDouble(wtsl) % 100;
		if (ys == 0) {
			zsFlag = true;
		} else {
			i = "2";
		}
		Double bs = Double.parseDouble(wtsl) / 100; // 倍数
		if (bs > 0) {
			zsFlag = true;
		} else {
			i = "2";
		}

		if ("1".equals(mrlx)) { // 赛季委托时判断
			// 判断此人报名赛季是否与委托数据一致
			String zxbmsjId = null;
			List<MnSjBm> list = mnSjBmServiceI.getMybmsj(userid);
			if (list.size() > 0) {
				MnSjBm bm = list.get(0);
				zxbmsjId = bm.getSjId();
				if (sjid.equals(zxbmsjId)) {
					sjBmFlag = true;
				} else {
					i = "3";
				}
			}
		} else if ("0".equals(mrlx)) {
			sjBmFlag = true;
		}

		Double wtzj = Double.parseDouble(wtjg) * Double.parseDouble(wtsl);
		Double sxf = Double.parseDouble(integra.getGpmmsxf()) * wtzj;
		// 余额
		Double ye = 0.0;
		LoginUser loginUser = loginUserService.getUser(userid);
		// 手续费扣除计算

		if (loginUser != null) {
			if ("1".equals(mrlx)) {
				Double sjsjb = Double.parseDouble(loginUser.getSjsjb());
				ye = sjsjb - wtzj - sxf;
			} else if ("0".equals(mrlx)) {
				Double ptsjb = Double.parseDouble(loginUser.getPtsjb());
				ye = ptsjb - wtzj - sxf;
			}
		}

		if (ye >= 0) { // 余额》0时可委托
			sxfFlag = true;
		} else {
			i = "4";
		}

		if (sjFlag && zsFlag && sjBmFlag && sxfFlag) { // 当4个条件均为真的时候，可委托
			i = "0";
		}
		return i;
	}

	@Override
	public Double getMrwtwcj(String userid, String mrlx) {
		// TODO Auto-generated method stub
		String hql = " from Mncp where 1=1 and userid='" + userid
				+ "' and mrlx='" + mrlx + "' and cz ='0' and bz='0'";
		List<Mncp> list = mncpDao.find(hql);
		Double djzc = 0.0;
		for (int i = 0; i < list.size(); i++) {
			Mncp m = list.get(i);
			Double wtzj = Double.parseDouble(m.getWtjg())
					* Double.parseDouble(m.getWtsl());
			djzc = djzc + wtzj;
		}
		return djzc;
	}

	@Override
	public void tcbsMethod(String userid, String sjsid) {
		// 删除委托记录数据
		String hql = " from Mncp where 1=1 and userid='" + userid
				+ "'  and mrlx = '1'";
		List<Mncp> list = mncpDao.find(hql);
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				Mncp mncp = list.get(i);
				mncpDao.delete(mncp);
			}
		}
		gpsyServiceI.deleteDqsy(userid, sjsid); // 删除当前赛季赛持仓信息
		mrzcjsServiceI.deleteDqmrzc(userid, sjsid);// 删除当前赛季赛每日结算记录
		mnSjBmServiceI.deleteDqbm(userid, sjsid);// 删除当前赛季赛报名信息

	}

	@Override
	public String pdmcWtTime(String sjid, String wtsl, String userid,
			String mrlx, String wtjg) {
		String i = "0";
		Boolean sjFlag = false;
		Boolean zsFlag = false;
		Boolean sjBmFlag = false;
		Boolean sxfFlag = true;
		IntegralConfig integra = integralConfigServiceI.get();

		/*
		 * String san=DateUtils.DateToStr("yyyy-MM-dd 15:00:00", new Date());
		 * String one=DateUtils.DateToStr("yyyy-MM-dd 23:59:59", new Date());
		 * //System.out.println(san);
		 * 
		 * // 当日9点 String jiu = DateUtils.DateToStr("yyyy-MM-dd 09:00:00", new
		 * Date()); //System.out.println(jiu); // 判断时间9点-15点可委托 if
		 * (DateUtils.strToDate(san, DateUtils.YYYY_MM_DD_HH_MM_SS).getTime() >
		 * new Date() .getTime() && new Date().getTime() >
		 * DateUtils.strToDate(jiu, DateUtils.YYYY_MM_DD_HH_MM_SS).getTime()) {
		 * sjFlag = true; } else { i = "1"; }
		 */
		String san = DateUtils.DateToStr("yyyy-MM-dd 15:00:00", new Date());
		//String san = DateUtils.DateToStr("yyyy-MM-dd 20:00:00", new Date());
		String one = DateUtils.DateToStr("yyyy-MM-dd 13:00:03", new Date());
		//System.out.println(san);
		// 当日9点
		String shiyi = DateUtils.DateToStr("yyyy-MM-dd 11:29:50", new Date());
		String jiu = DateUtils.DateToStr("yyyy-MM-dd 09:00:00", new Date());
		//System.out.println(jiu);
		// 判断时间9点-15点可委托
		if ((DateUtils.strToDate(san, DateUtils.YYYY_MM_DD_HH_MM_SS).getTime() > new Date()
				.getTime() && new Date().getTime() > DateUtils.strToDate(one,
				DateUtils.YYYY_MM_DD_HH_MM_SS).getTime())// 下午1点到三点
				|| (DateUtils.strToDate(shiyi, DateUtils.YYYY_MM_DD_HH_MM_SS)
						.getTime() > new Date().getTime() && new Date()
						.getTime() > DateUtils.strToDate(jiu,
						DateUtils.YYYY_MM_DD_HH_MM_SS).getTime())) {// 上午9点到11:30
			sjFlag = true;
		} else {
			i = "1";
		}
		// 委托数量为整数，可委托
		Double ys = Double.parseDouble(wtsl) % 100;
		if (ys == 0) {
			zsFlag = true;
		} else {
			i = "2";
		}
		Double bs = Double.parseDouble(wtsl) / 100;
		if (bs > 0) {
			zsFlag = true;
		} else {
			i = "2";
		}

		if ("1".equals(mrlx)) { // 赛季委托时判断
			// 判断此人报名赛季是否与委托数据一致
			String zxbmsjId = null;
			List<MnSjBm> list = mnSjBmServiceI.getMybmsj(userid);
			if (list.size() > 0) {
				MnSjBm bm = list.get(0);
				zxbmsjId = bm.getSjId();
				if (sjid.equals(zxbmsjId)) {
					sjBmFlag = true;
				} else {
					i = "3";
				}
			}
		} else if ("0".equals(mrlx)) {
			sjBmFlag = true;
		}

		/*
		 * Double wtzj = Double.parseDouble(wtjg)*Double.parseDouble(wtsl);
		 * Double sxf = Double.parseDouble(integra.getGpmmsxf()) * wtzj; Double
		 * ye = 0.0; LoginUser loginUser = loginUserService.getUser(userid);
		 * //手续费扣除计算
		 * 
		 * if(loginUser != null){ if("1".equals(mrlx)){ Double sjsjb =
		 * Double.parseDouble(loginUser.getSjsjb()); ye = sjsjb-wtzj-sxf; }else
		 * if("0".equals(mrlx)){ Double ptsjb =
		 * Double.parseDouble(loginUser.getPtsjb()); ye = ptsjb-wtzj-sxf; } }
		 * 
		 * if(ye>=0){ //余额》0时可委托 sxfFlag = true; }
		 */

		if (sjFlag && zsFlag && sjBmFlag && sxfFlag) { // 当4个条件均为真的时候，可委托
			i = "0";
		}
		return i;
	}

	@Override
	public void updateCxjl(String userid, String zqdm, String mrlx,
			String wttime) {
		// TODO Auto-generated method stub
		String sql = "update t_mncp set cxcgFlag='1' where 1=1 and userid ='"
				+ userid + "' and zqdm='" + zqdm + "' and mrlx='" + mrlx
				+ "' and wttime='" + wttime
				+ "' and bz='0' and cxcgFlag is null";
		mncpDao.executeSql(sql);
	}

	@Override
	public List<Mncp> getKcxList(String userid, String mrlx, String page,
			String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String hql = "from Mncp where 1=1 and userid='" + userid
				+ "' and mrlx='" + mrlx
				+ "' and cz <> '2' and bz='0' order by wttime";
		List<Mncp> list = mncpDao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public Mncp getLastTrade(String userid) {
		// TODO Auto-generated method stub
		String hql = " from Mncp where 1=1 and userid='" + userid
				+ "' and bz='1' order by cjzqtime desc";
		List<Mncp> list = mncpDao.find(hql);

		if (list.size() > 0) {
			Mncp mn = list.get(0);
			return mn;
		} else {
			return null;
		}

	}

	@Override
	public List<Mncp> getGPJYList(String hql) throws Exception {
		List<Mncp> ul = new ArrayList<Mncp>();
		List<Mncp> mList = mncpDao.find(hql);
		if (mList != null && mList.size() > 0) {
			for (Mncp t : mList) {
				Mncp u = new Mncp();
				LoginUser loginuser = loginUserService.getUser(t.getUserid());
				if (StringUtils.isNotBlank(loginuser.getName())) {
					t.setUsername(loginuser.getName());
				}
				/*
				 * String sjname = ""; if(StringUtils.isNotBlank(t.getSjsId())){
				 * String sjid = t.getSjsId(); MnSjZd mnsjzd =
				 * mnSjZdServiceI.get(sjid); if(mnsjzd != null){ sjname =
				 * mnsjzd.getSjName(); }else{ sjname ="已删除赛季"; }
				 * t.setSjname(sjname); }
				 */
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		return ul;
	}
	
	
	

	private void insertExceptionMessage(Throwable throwable, String uersId) {
		Monitor monitor = new Monitor();
		monitor.setUserid(uersId);
		StackTraceElement[] elements = throwable.getStackTrace();
		StringBuffer buffer = new StringBuffer();
		int count = 0;
		for (StackTraceElement element : elements) {
			if (count == 0) {
				buffer.append("在类名是" + element.getClassName() + ",");
				buffer.append(element.getLineNumber() + "行,");
				buffer.append("方法是" + element.getMethodName());
			}
			count++;
		}
		buffer.append("错误信息是:" + throwable.getMessage());
		monitor.setExceptionMessage(buffer.toString());
		try {
			serviceI.add(monitor);
		} catch (Exception e1) {
			e1.printStackTrace();
		}
	}

}
