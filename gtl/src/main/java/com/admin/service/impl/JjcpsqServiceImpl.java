package com.admin.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.AdDaoI;
import com.admin.dao.JjcpDaoI;
import com.admin.dao.JjcpsqDaoI;
import com.admin.dao.LoginUserDaoI;
import com.admin.dao.RoleDaoI;
import com.admin.dao.UserDaoI;
import com.admin.model.Ad;
import com.admin.model.Jjcp;
import com.admin.model.Jjcpsq;
import com.admin.model.LoginUser;
import com.admin.model.Tresource;
import com.admin.model.Trole;
import com.admin.model.Tuser;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.service.AdServiceI;
import com.admin.service.JjcpServiceI;
import com.admin.service.JjcpsqServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.UserServiceI;
import com.admin.util.MD5Util;
import com.web.entity.Person;
import com.web.util.PageModel;
import com.web.util.TimeUtils;

@Service
public class JjcpsqServiceImpl implements JjcpsqServiceI {

	@Autowired
	private JjcpsqDaoI dao;

	public DataGrid dataGrid(Jjcpsq jjcpsq, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Jjcpsq> ul = new ArrayList<Jjcpsq>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Jjcpsq t ";
		List<Jjcpsq> l = dao.find(
				hql + whereHql(jjcpsq, params) + orderHql(ph), params,
				ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Jjcpsq t : l) {
				Jjcpsq u = new Jjcpsq();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count(
				"select count(*) " + hql + whereHql(jjcpsq, params), params));
		return dg;
	}

	/**
	 * where条件封装
	 * 
	 * @param ad
	 * @param params
	 * @return
	 */
	private String whereHql(Jjcpsq jjcp, Map<String, Object> params) {
		String hql = "";
		if (jjcp != null) {
			hql += " where 1=1 ";
			if (jjcp.getJjname() != null) {
				hql += " and t.jjname like :jjname";
				params.put("jjname", "%%" + jjcp.getJjname() + "%%");
			}
			if (StringUtils.isNotBlank(jjcp.getStatus())) {
				hql += " and t.status =:status";
				params.put("status", jjcp.getStatus());
			}
		}
		return hql;
	}

	/**
	 * order封装
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	/**
	 * 新增
	 */
	public void add(Jjcpsq jjcpsq) throws Exception {
		jjcpsq.setId(UUID.randomUUID().toString());
		jjcpsq.setLasttime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		jjcpsq.setStatus("1");// 1报名申购、2已经汇款等待确认、3已确认等待收益、4正常进行中
		jjcpsq.setAddtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		dao.save(jjcpsq);
	}

	/**
	 * 删除
	 */
	public void delete(String id) throws Exception {
		Jjcpsq ad = dao.get(Jjcpsq.class, id);
		dao.delete(ad);
	}

	/**
	 * 汇款凭证提交
	 */
	public void update(Jjcpsq jjcp) throws Exception {
		jjcp.setLasttime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		jjcp.setStatus("2");
		dao.update(jjcp);
	}

	public void update1(Jjcpsq jjcp) throws Exception {
		Jjcpsq j = dao.get(Jjcpsq.class, jjcp.getId());
		j.setLasttime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		j.setStatus(jjcp.getStatus());
		dao.update(j);
	}

	/**
	 * 得到对象
	 */
	public Jjcpsq get(String id) throws Exception {
		return dao.get(Jjcpsq.class, id);
	}

	public List<Jjcpsq> getList(String userid, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ").append(Jjcpsq.class.getSimpleName())
				.append(" a ");
		sff.append(" where 1=1 ");
		if (StringUtils.isNotBlank(userid)) {
			sff.append(" and userid='" + userid + "'");
		}
		sff.append(" order by lasttime desc");
		List<Jjcpsq> list = dao.find(sff.toString(), Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	public int getCount(String userid) {
		String hql = "select count(*) from Jjcpsq where 1=1";
		if (StringUtils.isNotBlank(userid)) {
			hql += " and userid='" + userid + "'";
		}
		return dao.count(hql).intValue();
	}

}
