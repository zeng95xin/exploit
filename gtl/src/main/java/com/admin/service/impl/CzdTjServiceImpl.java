package com.admin.service.impl;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.math.BigDecimal;
import java.net.URL;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.CzdTjDaoI;
import com.admin.dao.GpsyDaoI;
import com.admin.dao.GqbdzDaoI;
import com.admin.dao.RoleDaoI;
import com.admin.dao.UserDaoI;
import com.admin.dao.GgxwDaoI;
import com.admin.dao.WebDaoI;
import com.admin.model.CzdTj;
import com.admin.model.LoginUser;
import com.admin.model.TczdXz;
import com.admin.model.Tgdj;
import com.admin.model.Tgsdz;
import com.admin.model.Tgxt;
import com.admin.model.Tresource;
import com.admin.model.Trole;
import com.admin.model.Tuser;
import com.admin.model.Ggxw;
import com.admin.model.gpsy;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.service.CzdTjServiceI;
import com.admin.service.GgxwServiceI;
import com.admin.service.GpsyServiceI;
import com.admin.service.GqbServiceI;
import com.admin.service.GxtServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.UserServiceI;
import com.admin.service.GgxwServiceI;
import com.admin.service.WebServiceI;
import com.admin.util.MD5Util;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.web.entity.Person;
import com.web.util.PageModel;
import com.web.util.TimeUtils;

@Service
public class CzdTjServiceImpl implements CzdTjServiceI {

	@Autowired
	private CzdTjDaoI dao;

	@Autowired
	private LoginUserServiceI loginUserServiceI;

	@Override
	public DataGrid dataGridForOne(CzdTj g, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<CzdTj> ul = new ArrayList<CzdTj>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from CzdTj t ";
		List<CzdTj> l = dao.find(
				hql + whereHqlForOne(g, params) + orderHql(ph), params,
				ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (CzdTj t : l) {
				CzdTj u = new CzdTj();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count(
				"select count(*) " + hql + whereHqlForOne(g, params), params));
		return dg;
	}

	/**
	 * where 条件封装
	 * 
	 * @param p
	 * @param params
	 * @return
	 */
	private String whereHqlForOne(CzdTj g, Map<String, Object> params) {
		String hql = "";
		/*
		 * if (g != null) { hql += " where 1=1 "; if (g.getTitle() != null) {
		 * hql += " and t.dztitel like :dztitel"; params.put("title", "%%" +
		 * g.getTitle() + "%%"); }
		 * 
		 * 
		 * }
		 */
		return hql;
	}

	/**
	 * 排序条件
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void delete(String id) {
		dao.delete(dao.get(CzdTj.class, id));
	}

	@Override
	synchronized public void add(CzdTj p) throws Exception {
		p.setId(UUID.randomUUID().toString());
		p.setGxtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		dao.save(p);
	}

	/**
	 * 通过id获取段子实体类
	 */
	@Override
	public CzdTj get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		CzdTj t = dao.get("select distinct t from CzdTj t  where t.id = :id",
				params);
		CzdTj u = new CzdTj();
		BeanUtils.copyProperties(t, u);
		return u;
	}

	String[] excelHeader = { "标题", "分类", "发布者", "发布时间" };

	@Override
	public void edit(CzdTj p) throws Exception {
		CzdTj u = dao.get(CzdTj.class, p.getId());
		u.setGgnr(p.getGgnr());
		dao.update(u);
	}

	@Override
	public HSSFWorkbook export(List<CzdTj> list) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<CzdTj> getList(String fl, String gplb, String page, String rows) {
		/*
		 * StringBuffer sff = new StringBuffer();
		 * sff.append("select a from ").append
		 * (CzdTj.class.getSimpleName()).append(" a ");
		 * sff.append(" where 1=1 "); if (StringUtils.isNotBlank(fl)){
		 * sff.append(" and lx ='"+fl+"'"); } if(StringUtils.isNotBlank(gplb)){
		 * sff.append("  and gplb ='"+gplb+"'"); }
		 * sff.append(" order by fbtime desc"); List<CzdTj> list =
		 * dao.find(sff.toString());
		 */
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String hql = "from CzdTj where 1=1";
		if (StringUtils.isNotBlank(fl)) {
			hql += " and lx ='" + fl + "'";
		}
		if (StringUtils.isNotBlank(gplb)) {
			hql += "and gplb ='" + gplb + "'";
		}
		hql += " order by fbtime desc";
		List<CzdTj> list = dao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public List<CzdTj> getCzdList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public CzdTj getCzdTj(String userid, String zqdm, String mrlx, String sjid) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("userid", userid);
		params.put("zqdm", zqdm);
		params.put("mrlx", mrlx);
		params.put("sjid", sjid);
		CzdTj t = dao
				.get("select distinct t from CzdTj t  where t.userid = :userid and t.mrlx = :mrlx and t.zqdm = :zqdm and t.sjid = :sjid ",
						params);
		return t;
	}

	/**
	 * 体检股票内容list
	 */
	@Override
	public List<CzdTj> getCzdTjList() {
		String hql = "from CzdTj where 1=1 order by gxtime desc";
		List<CzdTj> list = dao.find(hql);
		return list;
	}

	@Override
	public List<CzdTj> getMyccList(String userid, String mrlx, String page,
			String rows) {
		String hql = "from CzdTj where 1=1 ";
		if (StringUtils.isNotBlank(userid)) {
			hql += " and userid= '" + userid + "'";
		}
		if (StringUtils.isNotBlank(mrlx)) {
			hql += " and mrlx= '" + mrlx + "'";
		}
		hql += " and cgsl <> '0.0' order by jstime desc";
		List<CzdTj> list = null;
		if (StringUtils.isBlank(page) && StringUtils.isBlank(rows)) {
			list = dao.find(hql);
		} else {
			list = dao.find(hql, Integer.valueOf(page), Integer.valueOf(rows));
		}

		return list;
	}

	@Override
	public List<CzdTj> getMyccList02(String userid, String mrlx) {
		String hql = "from CzdTj where 1=1 ";
		if (StringUtils.isNotBlank(userid)) {
			hql += " and userid= '" + userid + "'";
		}
		if (StringUtils.isNotBlank(mrlx)) {
			hql += " and mrlx= '" + mrlx + "'";
		}
		hql += " and cgsl <> '0.0' order by jstime desc";
		List<CzdTj> list = dao.find(hql);
		return list;
	}

	@Override
	public List<CzdTj> getGgccList(String userid, String mrlx, String zqdm) {
		// TODO Auto-generated method stub
		String hql = " from CzdTj  where 1=1 and userid ='" + userid
				+ "' and mrlx='" + mrlx + "' and zqdm ='" + zqdm
				+ "' order by jstime desc";
		List<CzdTj> list = dao.find(hql);
		return list;
	}

	@Override
	public List<CzdTj> getCcinfo(String userid, String mrlx) {
		// TODO Auto-generated method stub
		String hql = " from CzdTj  where 1=1 and userid ='" + userid
				+ "' and mrlx='" + mrlx + "' order by jstime desc";
		List<CzdTj> list = dao.find(hql);
		return list;
	}

	@Override
	public void deleteDqsy(String userid, String sjsid) {
		// TODO Auto-generated method stub
		String hql = " from CzdTj where 1=1 and  userid ='" + userid
				+ "' and sjid='" + sjsid + "' and mrlx = '1' ";
		List<CzdTj> list = dao.find(hql);
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				CzdTj gp = list.get(i);
				dao.delete(gp);
			}
		}
	}

}
