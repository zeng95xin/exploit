package com.admin.service.impl;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.InterfaceDaoI;
import com.admin.dao.MrzcjsDaoI;
import com.admin.dao.PtsMrzcjsDaoI;
import com.admin.model.IntegralConfig;
import com.admin.model.InterfaceData;
import com.admin.model.LoginUser;
import com.admin.model.MnSjZd;
import com.admin.model.Mrzcjs;
import com.admin.model.PtsMrzcjs;
import com.admin.model.gpsy;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.GpsyServiceI;
import com.admin.service.IntegralConfigServiceI;
import com.admin.service.InterfaceDataServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.MnSjBmServiceI;
import com.admin.service.MnSjZdServiceI;
import com.admin.service.MrzcjsServiceI;
import com.admin.service.PtsMrzcjsServiceI;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.log.ProjectConfig;
import com.log.http.StockHttpClientUtil;
import com.web.util.DateUtil;
import com.web.util.TimeUtils;

@Service
public class MrzcjsServiceImpl implements MrzcjsServiceI {
	
	private static final Logger logger = LoggerFactory.getLogger(MrzcjsServiceImpl.class);

	@Autowired
	private MrzcjsDaoI dao;

	@Autowired
	private LoginUserServiceI loginUserServiceI;

	@Autowired
	private GpsyServiceI gpsyServiceI;

	@Autowired
	private MnSjZdServiceI mnSjZdServiceI;

	@Autowired
	private IntegralConfigServiceI integralConfigServiceI;

	@Autowired
	private InterfaceDataServiceI interfaceDataServiceI;
	

	@Autowired
	private MnSjBmServiceI mnSjBmServiceI;

	@Autowired
	private PtsMrzcjsServiceI ptsMrzcjsServiceI;
	
	@Autowired private InterfaceDaoI interfaceDaoI;
	@Autowired private PtsMrzcjsDaoI ptsMrzcjsDaoI;
	
	@Override
	public DataGrid dataGridForOne(Mrzcjs g, PageHelper ph) {
		DecimalFormat df = new DecimalFormat("#.##");
		DataGrid dg = new DataGrid();
		List<Mrzcjs> ul = new ArrayList<Mrzcjs>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Mrzcjs t ";
		List<Mrzcjs> l = dao.find(hql + whereHqlForOne(g, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			Mrzcjs mm0=new Mrzcjs();
			Mrzcjs mm1=new Mrzcjs();
			if (StringUtils.isNotBlank(g.getBeginTime()) && StringUtils.isNotBlank(g.getEndTime()) && StringUtils.isNotBlank(g.getUsername())) {
				 mm0=l.get(0);
				 mm1=l.get(l.size()-1);
				 Double m0=Double.parseDouble(mm0.getSjzczl());
				 Double m1=Double.parseDouble(mm1.getSjzczl());
				//System.out.println("m0="+m0);
				//System.out.println("-------------------------");
				//System.out.println("m1="+m1);
				 for (int i = 0; i < l.size(); i++) {
						Mrzcjs u = new Mrzcjs();
						u=l.get(i);
						u.setSjzczl(df.format(Double.parseDouble(String.format("%.2f", Double.parseDouble(u.getSjzczl())))));
						String sjid=u.getSjid();
						if (StringUtils.isNotBlank(sjid)) {
							MnSjZd md=mnSjZdServiceI.get(sjid);
							if (md != null) {
								u.setSjname(md.getSjName());
							}
						}
						/*if (mo == 0) {
							
						} else {

						}*/
						 if (m0 > m1) {
							 u.setTimesyl(df.format((m0-m1)*100/m1));	
						 }else if(m1 == m0){
							 u.setTimesyl("0");
						 }else{
							 u.setTimesyl(df.format((m0-m1)*100/m1));
						 }
						//u.setTimesyl();
						 ul.add(u);
					}
			}else{
				for (Mrzcjs t : l) {
					Mrzcjs u = new Mrzcjs();
					String sjid=t.getSjid();
					if (StringUtils.isNotBlank(sjid)) {
						MnSjZd md=mnSjZdServiceI.get(sjid);
						if (md != null) {
							t.setSjname(md.getSjName());
						}
					}
					t.setSjzczl(df.format(Double.parseDouble(String.format("%.2f", Double.parseDouble(t.getSjzczl())))));
					BeanUtils.copyProperties(t, u);
					ul.add(u);
				}
				
			}
			
			
		}
		dg.setRows(ul);
		dg.setTotal(dao.count(
				"select count(*) " + hql + whereHqlForOne(g, params), params));
		return dg;
	}

	/**
	 * where 条件封装
	 * 
	 * @param p
	 * @param params
	 * @return
	 */
	private String whereHqlForOne(Mrzcjs g, Map<String, Object> params) {
		String hql = "";
		
		  if (g != null) { 
			  hql += " where 1=1 and t.sjid != 'null' AND t.sjid <> ' '";
			  if (StringUtils.isNotBlank(g.getUsername())) {
				  hql += " and t.username like :username";
				  params.put("username", "%%" +g.getUsername() + "%%"); 
			  }
			  if (StringUtils.isNotBlank(g.getBeginTime())) {
					hql += " and t.jstime >= :beginTime";
					params.put("beginTime", g.getBeginTime());
			  }
			  if (StringUtils.isNotBlank(g.getEndTime())) {
				hql += " and t.jstime <= :endTime";
				params.put("endTime", g.getEndTime());
			  }
			  if (StringUtils.isNotBlank(g.getSjid())) {
				  hql += " and t.sjid = :sjid";
				  params.put("sjid", g.getSjid());
			  }
		  
		  
		  }
		 
		return hql;
	}

	/**
	 * 排序条件
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			if (ph.getSort().equals("sjbrsy")||ph.getSort().equals("sjzsy")) {
				
				orderString = " order by t." + ph.getSort() + "+0 " + ph.getOrder();
			} else {
				orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
			}
		}
		return orderString;
	}

	@Override
	public void delete(String id) {
		dao.delete(dao.get(Mrzcjs.class, id));
	}

	@Override
	synchronized public void add(Mrzcjs p) throws Exception {
		p.setId(UUID.randomUUID().toString());
		p.setJstime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		dao.save(p);
	}

	/**
	 * 通过id获取实体类
	 */
	@Override
	public Mrzcjs get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		Mrzcjs t = dao.get("select distinct t from Mrzcjs t  where t.id = :id",
				params);
		Mrzcjs u = new Mrzcjs();
		BeanUtils.copyProperties(t, u);
		return u;
	}

	String[] excelHeader = { "标题", "分类", "发布者", "发布时间" };

	@Override
	public void edit(Mrzcjs p) throws Exception {
		dao.update(p);
	}

	@Override
	public HSSFWorkbook export(List<Mrzcjs> list) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Mrzcjs> getList(String fl, String gplb, String page, String rows) {
		/*
		 * StringBuffer sff = new StringBuffer();
		 * sff.append("select a from ").append
		 * (Mrzcjs.class.getSimpleName()).append(" a ");
		 * sff.append(" where 1=1 "); if (StringUtils.isNotBlank(fl)){
		 * sff.append(" and lx ='"+fl+"'"); } if(StringUtils.isNotBlank(gplb)){
		 * sff.append("  and gplb ='"+gplb+"'"); }
		 * sff.append(" order by fbtime desc"); List<Mrzcjs> list =
		 * dao.find(sff.toString());
		 */
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String hql = "from Mrzcjs where 1=1";
		if (StringUtils.isNotBlank(fl)) {
			hql += " and lx ='" + fl + "'";
		}
		if (StringUtils.isNotBlank(gplb)) {
			hql += "and gplb ='" + gplb + "'";
		}
		hql += " order by fbtime desc";
		List<Mrzcjs> list = dao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public List<Mrzcjs> getCzdList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Mrzcjs getMrzcjs(String userid, String zqdm, String mrlx) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", userid);
		params.put("zqdm", zqdm);
		Mrzcjs t = dao
				.get("select distinct t from Mrzcjs t  where t.id = :userid and t.mrlx = :mrlx and t.zqdm = :zqdm",
						params);
		return t;
	}

	/**
	 * 
	 * 每日资产结算自动更新方法 mrzcjs
	 * 
	 * @throws MalformedURLException
	 */
	@Override
	public synchronized void mrzcjs() throws Exception {
		JSONObject json = new JSONObject();
		DecimalFormat df = new DecimalFormat("#.##");
		/**
		 * 获取配置文件基本参数信息
		 */
		IntegralConfig integralConfig = integralConfigServiceI.get();
		String ptsbj = integralConfig.getPtsjb(); // 普通赛本金
		/**
		 * 获取赛季赛最新一次数据
		 */
		List<MnSjZd> mnsjList = mnSjZdServiceI.getMnsjList();

		Date date = new Date();
		DateUtil mydate = new DateUtil();
		Date syLastDay = mydate.getLastDayOfLastMonth(date); // 上个月最后一天
		Date szLastDay = mydate.getLastDayOfLastWeek(date);// 上周最后一天
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String syld = sdf.format(syLastDay);
		String szld = sdf.format(szLastDay);
		List<gpsy> gpsyList = gpsyServiceI.getGpsyList();
		String today = sdf.format(date); // 今天日期

		Calendar calendar = new GregorianCalendar();
		calendar.setTime(date);
		calendar.add(calendar.DATE, -1);// 把日期往后增加一天.整数往后推,负数往前移动
		date = calendar.getTime(); // 这个时间就是日期往后推一天的结果
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		String dateString = formatter.format(date); // 昨天

		int cs = 0;
		String hql_1 = " select DISTINCT zqdm from t_gpsy ";
		List<Object[]> ccdmList = dao.findBySql(hql_1); // 获取持股数据zqdm

		Integer count0001 = ccdmList.size();
		Integer bs = count0001 / 100;
		Integer ys = count0001 % 100;
		if (ys > 0 && bs >= 1) {
			cs = bs + 1; // 请求次数
		} else if (ys == 0 && bs >= 1) {
			cs = bs;
		} else if (ys == 0 && bs == 0) {
			cs = 1;
		}
		for (int mm = 0; mm < cs; mm++) {
			// 获取收益列表中股票代码
			StringBuffer sb = new StringBuffer();
			String timeTp = TimeUtils.getTime("yyyyMMddHHmmss");
			for (int jj = mm * 100; jj < (mm + 1) * 100 && jj < count0001; jj++) {
				Object cgdm01 = ccdmList.get(jj);
				String cgdm = (String) cgdm01;
				sb.append(cgdm).append(",");
			}

			String stocks = sb.toString();
			if (stocks.length() > 0) {
				stocks = stocks.substring(0, stocks.length() - 1); // 去除拼装StringBuffer的最后一个逗号
			}
			// 统一请求接口数据
			URL u = new URL(
					"http://route.showapi.com/131-46?showapi_appid=15094"
							+ "&showapi_timestamp="
							+ timeTp
							+ "&stocks="
							+ stocks
							+ "&needIndex=1&showapi_sign=288557843a564302bcaab02569355b40");
			InputStream in = u.openStream();
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			try {
				byte buf[] = new byte[1024];
				int read = 0;
				while ((read = in.read(buf)) > 0) {
					out.write(buf, 0, read);
				}
			} finally {
				if (in != null) {
					in.close();
				}
			}
			byte b[] = out.toByteArray();

			// 临时东西
			// String
			// jsonTest=readFile("E:/work/gtl/src/main/webapp/attached/json2.txt");
			JSONObject jsonJg = JSON.parseObject(new String(b, "utf-8")); // 将json结果转换成jsonObject
			// JSONObject jsonJg = JSON.parseObject(jsonTest);
			// //将json结果转换成jsonObject
			JSONObject showBody = jsonJg.getJSONObject("showapi_res_body"); // 获取到大盘指数结果集
			JSONArray jsList = showBody.getJSONArray("list"); // 获取实时个股数组数据

			//System.out.println(jsList.size());
			/**
			 * 老谭外部传入这个值jsList 重点重点重点
			 */
			JSONObject ssgg = new JSONObject(); // 定义实时个股json
			if (gpsyList.size() > 0) {// 持股数据》0
				//System.out.println("list------------------------------" + gpsyList.size());
				for (int i = 0; i < gpsyList.size(); i++) {
					/*
					 * String hql01 =
					 * "from Mrzcjs where 1=1 and jstime='"+dateString+"'";
					 * //昨日结算数据 String hql02 =
					 * "from Mrzcjs where 1=1 and jstime = '"
					 * +szld+"'";//上周最后一天收益 String hql03 =
					 * "from Mrzcjs where 1=1 and jstime = '"+syld+"'";//上月最后一天收
					 */
					gpsy gp = gpsyList.get(i);
					String userid = gp.getUserid();
					LoginUser loginUser = loginUserServiceI.getUser(userid);// 获取现有用户
					if (loginUser != null) {

						String ptsjb = loginUser.getPtsjb();// 普通赛金币
						String sjsjb = loginUser.getSjsjb();// 赛季赛金币
						String zqdm = gp.getZqdm(); // 获取持仓证券代码
						String subcode = zqdm.substring(2, zqdm.length());
						/*
						 * if(userid.equals("ac0f7329-5af7-47dc-b285-8f111cfe3d5d"
						 * )){
						 * if(userid.equals("ac0f7329-5af7-47dc-b285-8f111cfe3d5d"
						 * ) && zqdm.equals("sz000697") ){
						 * //System.out.println("sssssssss"+userid
						 * +"------------------"+zqdm); } }
						 */

						/**
						 * 判断委托记录sjid是否在正在进行的赛季中
						 */
						Boolean flag = null; // 判断赛季赛进行中flag
						String pdSjid = gp.getSjid();
						if (StringUtils.isNotBlank(pdSjid)) {
							MnSjZd pdmnsjzd = mnSjZdServiceI.getDqJxSjs(pdSjid,
									today);
							if (pdmnsjzd != null) {
								flag = true;
							} else {
								flag = false;
							}

						}
						/**
						 * 获取当前股票实时价格；结算其当前资产
						 */

						if (jsList.size() > 0) {

							for (int g = 0; g < jsList.size(); g++) {
								ssgg = jsList.getJSONObject(g);// 获取个股实时数据
								String code = ssgg.getString("code");// 返回当前代码
								Double ssjg = Double.parseDouble(ssgg
										.getString("nowPrice")); // 获取实时个股价格
								if (ssjg == 0) { // 判断如果该股票为停盘股票，则股票市价为昨日收盘价
									ssjg = Double.parseDouble(ssgg
											.getString("closePrice"));
								}
								// if(code.equals("000697")){
								if (subcode.equals(code)) {
									Double cbjg = ssjg;
									Double cczs = Double.parseDouble(gp
											.getCgsl());
									// zengjia
									Double gpzc = cbjg * cczs;// 持有股票资产
									String sjid = gp.getSjid(); // 持仓赛季赛id
									String mrlx = gp.getMrlx(); // 获取买入股票类型
									Map<String, Object> params = new HashMap<String, Object>();
									params.put("userid", userid);
									params.put("jstime",
											TimeUtils.getTime("yyyy-MM-dd"));
									String hql = "select distinct t from Mrzcjs t where t.userid = :userid and t.jstime = :jstime ";
									Mrzcjs mrjs = dao.get(hql, params);
									if (mrjs != null && mrlx.equals("0")) { // 普通赛
										Double yyzcze = Double.parseDouble(mrjs
												.getZczl());// 原有资产总额
										Double dqzcze = yyzcze + gpzc; // 当前资产总额
										mrjs.setZczl(dqzcze.toString());

										dao.update(mrjs);
										json.put("errorCode", "0");
										json.put("errorMsg", "更新今日资产数据成功！");
										// }else if(mrjs != null &&
										// mrlx.equals("1") &&
										// sjid.equals(zxSjid) ){//赛季赛
									} else if (mrjs != null && mrlx.equals("1")
											&& flag) {// 赛季赛
										Double yysjzcze = Double
												.parseDouble(mrjs.getSjzczl());
										Double dqsjzcze = yysjzcze + gpzc; // 当前赛季赛总额
										mrjs.setSjzczl(dqsjzcze.toString());
										mrjs.setSjid(sjid);
										dao.update(mrjs); // 更新赛季赛每日结算资产
										json.put("errorCode", "0");
										json.put("errorMsg", "更新今日资产数据成功！");
									} else if (mrjs == null && mrlx.equals("0")) { // 当前日期没有资产结算且
																					// 持仓数据为普通赛股票
										Mrzcjs newMrjs = new Mrzcjs();
										newMrjs.setUserid(userid);
										newMrjs.setUsername(loginUser.getName());
										Double zcze = Double.parseDouble(ptsjb)
												+ gpzc;
										newMrjs.setZczl(zcze.toString());
										newMrjs.setSjzczl(sjsjb.toString());
										newMrjs.setId(UUID.randomUUID()
												.toString());
										newMrjs.setJstime(TimeUtils
												.getTime("yyyy-MM-dd"));

										dao.save(newMrjs);
										json.put("errorCode", "0");
										json.put("errorMsg", "添加今日资产数据成功！");
										// }else if(mrjs == null &&
										// mrlx.equals("1") &&
										// sjid.equals(zxSjid) ){ //当前日期没有资产结算 且
										// 持仓数据为当前赛季赛股票
									} else if (mrjs == null && mrlx.equals("1")
											&& flag) {
										Mrzcjs newMrjs = new Mrzcjs();
										newMrjs.setUserid(userid);
										newMrjs.setUsername(loginUser.getName());
										Double sjzcze = Double
												.parseDouble(sjsjb) + gpzc;
										newMrjs.setZczl(ptsjb.toString());
										newMrjs.setSjzczl(sjzcze.toString());
										newMrjs.setSjid(sjid);
										newMrjs.setId(UUID.randomUUID()
												.toString());
										newMrjs.setJstime(TimeUtils
												.getTime("yyyy-MM-dd"));

										dao.save(newMrjs);
										json.put("errorCode", "0");
										json.put("errorMsg", "添加今日资产数据成功！");
									}
								}
								// }
							}
						}

					}
				}

			} else {// 没有持股记录
				json.put("errorCode", "1");
				json.put("errorMsg", "无持仓数据！");
			}

		}

	}

	@Override
	public Mrzcjs getMrzc(String userid, String timePoint, String sjid) {
		Date date = new Date();
		DateUtil mydate = new DateUtil();
		Date syLastDay = mydate.getLastDayOfLastMonth(date); // 上个月最后一天
		Date szLastDay = mydate.getLastDayOfLastWeek(date);// 上周最后一天
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String syld = sdf.format(syLastDay);
		String szld = sdf.format(szLastDay);

		String hql = " from Mrzcjs where 1=1";
		if (StringUtils.isNotBlank(timePoint)) {
			if (timePoint.equals("01")) { // 当前
				hql += " and TO_DAYS(now())-TO_DAYS(jstime)<=1"; // 前天数据
			} else if (timePoint.equals("02")) {// 本周
				hql += " and jstime = '" + szld + "'"; // 上周最后一天数据
			} else if (timePoint.equals("03")) {// 本月
				hql += " and jstime = '" + syld + "'"; // 上一个最后一天
			}
		}
		if (StringUtils.isNotBlank(userid)) {
			hql += " and userid = '" + userid + "'";
		}
		if (StringUtils.isNotBlank(sjid)) {
			hql += " and sjid = '" + sjid + "'";
		} else {
			hql += " and sjid ='111'";
		}
		Mrzcjs mrzc = dao.get(hql);

		return mrzc;
	}

	@Override
	public Mrzcjs getNowMrzc(String userid, String sjid, String jstime) {
		String hql = " from Mrzcjs where 1=1 and  jstime = '" + jstime + "'";
		if (StringUtils.isNotBlank(userid)) {
			hql += " and userid = '" + userid + "'";
		}
		if (StringUtils.isNotBlank(sjid)) {
			hql += " and sjid = '" + sjid + "'";
		} else {
			hql += " and sjid ='111'";
		}
		Mrzcjs mrzc = dao.get(hql);

		return mrzc;
	}

	@Override
	public List<Mrzcjs> brList(String lx, String page, String rows, String sjid) {
		/**
		 * 获取赛季赛最新一次数据
		 */

		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		String today = formatter.format(date);
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(date);
		calendar.add(calendar.DATE, -1);// 把日期往后增加一天.整数往后推,负数往前移动
		date = calendar.getTime(); // 这个时间就是日期往后推一天的结果
		String ztdate = formatter.format(date); // 昨天
		String dateString = ""; // 昨天
		/**
		 * 判定请求数据日期方法
		 */
		String drqsql = "select count(1) from t_mrzcjs where 1=1  and jstime ='"
				+ today + "'"; // 设定定日期sql
		BigInteger drql = dao.countBySql(drqsql);
		if (drql.equals(BigInteger.ZERO)) { // 今天收益资产未结算，数据请求日期设置为昨天
			dateString = ztdate;
		} else { // 今天收益资产结算后，数据请求日期设置为今天
			dateString = today;
		}

		String hql = "from Mrzcjs t where 1 = 1";
		if (StringUtils.isNotBlank(lx)) {
			// if(lx.equals("1")&&StringUtils.isNotBlank(sjid) && sjid != null){
			if (lx.equals("1") && StringUtils.isNotBlank(sjid)) {
				hql += "  and  jstime='" + dateString
						+ "' and sjbrsy is not null and sjid ='" + sjid
						+ "' order by t.sjbrsy+0 desc ";
				// }else if(lx.equals("1")&&((StringUtils.isBlank(sjid) && sjid
				// == null)|| sjid=="")){
			} else if (lx.equals("1") && StringUtils.isBlank(sjid)) {
				hql += "  and  jstime='"
						+ dateString
						+ "' and sjbrsy is not null and sjid is not null  order by t.sjid, t.sjbrsy+0 desc ";
			} else {
				hql += "  and  jstime='" + dateString
						+ "' and brsy is not null order by t.brsy+0 desc ";
			}
		}
		List<Mrzcjs> list = dao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public List<Mrzcjs> bzList(String lx, String page, String rows, String sjid) {
		/**
		 * 获取赛季赛最新一次数据
		 */

		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		String today = formatter.format(date);
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(date);
		calendar.add(calendar.DATE, -1);// 把日期往后增加一天.整数往后推,负数往前移动
		date = calendar.getTime(); // 这个时间就是日期往后推一天的结果
		String ztdate = formatter.format(date); // 昨天
		String dateString = ""; // 昨天
		/**
		 * 判定请求数据日期方法
		 */
		String drqsql = "select count(1) from t_mrzcjs where 1=1  and jstime ='"
				+ today + "'"; // 设定定日期sql
		BigInteger drql = dao.countBySql(drqsql);
		if (drql.equals(BigInteger.ZERO)) { // 今天收益资产未结算，数据请求日期设置为昨天
			dateString = ztdate;
		} else { // 今天收益资产结算后，数据请求日期设置为今天
			dateString = today;
		}

		String hql = "from Mrzcjs t where 1 = 1";
		if (StringUtils.isNotBlank(lx)) {
			if (lx.equals("1") && StringUtils.isNotBlank(sjid) && sjid != null) {
				hql += " and jstime='" + dateString
						+ "' and sjbzsy is not null and sjid='" + sjid
						+ "' order by t.sjbzsy+0 desc ";
			} else if (lx.equals("1")
					&& ((StringUtils.isBlank(sjid) && sjid == null) || sjid == "")) {
				hql += "  and  jstime='"
						+ dateString
						+ "' and sjbzsy is not null and sjid is not null  order by t.sjid, t.sjbzsy+0 desc ";
			} else {
				hql += " and jstime='" + dateString
						+ "' and bzsy is not null order by t.bzsy+0 desc ";
			}
		}
		List<Mrzcjs> list = dao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public List<Mrzcjs> byList(String lx, String page, String rows, String sjid) {
		/**
		 * 获取赛季赛最新一次数据
		 */

		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		String today = formatter.format(date);
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(date);
		calendar.add(calendar.DATE, -1);// 把日期往后增加一天.整数往后推,负数往前移动
		date = calendar.getTime(); // 这个时间就是日期往后推一天的结果
		String ztdate = formatter.format(date); // 昨天
		String dateString = ""; // 昨天
		/**
		 * 判定请求数据日期方法
		 */
		String drqsql = "select count(1) from t_mrzcjs where 1=1  and jstime ='"
				+ today + "'"; // 设定定日期sql
		BigInteger drql = dao.countBySql(drqsql);
		if (drql.equals(BigInteger.ZERO)) { // 今天收益资产未结算，数据请求日期设置为昨天
			dateString = ztdate;
		} else { // 今天收益资产结算后，数据请求日期设置为今天
			dateString = today;
		}

		String hql = "from Mrzcjs t where 1 = 1";
		if (StringUtils.isNotBlank(lx)) {
			if (lx.equals("1") && StringUtils.isNotBlank(sjid) && sjid != null) {
				hql += " and jstime='" + dateString
						+ "' and sjbysy is not null and sjid='" + sjid
						+ "'  order by t.sjbysy+0 desc ";
			} else if (lx.equals("1")
					&& ((StringUtils.isBlank(sjid) && sjid == null) || sjid == "")) {
				hql += "  and  jstime='"
						+ dateString
						+ "' and sjbysy is not null and sjid is not null  order by t.sjid, t.sjbysy+0 desc ";
			} else {
				hql += " and jstime='" + dateString
						+ "' and bysy is not null order by t.bysy+0 desc ";
			}
		}
		List<Mrzcjs> list = dao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public List<Mrzcjs> zsyList(String lx, String page, String rows, String sjid) {
		/**
		 * 获取赛季赛最新一次数据
		 */

		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		String today = formatter.format(date);
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(date);
		calendar.add(calendar.DATE, -1);// 把日期往后增加一天.整数往后推,负数往前移动
		date = calendar.getTime(); // 这个时间就是日期往后推一天的结果
		String ztdate = formatter.format(date); // 昨天
		String dateString = ""; // 昨天
		/**
		 * 判定请求数据日期方法
		 */
		String drqsql = "select count(1) from t_mrzcjs where 1=1  and jstime ='"
				+ today + "'"; // 设定定日期sql
		BigInteger drql = dao.countBySql(drqsql);
		if (drql.equals(BigInteger.ZERO)) { // 今天收益资产未结算，数据请求日期设置为昨天
			dateString = ztdate;
		} else { // 今天收益资产结算后，数据请求日期设置为今天
			dateString = today;
		}

		String hql = "from Mrzcjs t where 1 = 1";
		if (StringUtils.isNotBlank(lx)) {
			if (lx.equals("1") && StringUtils.isNotBlank(sjid) && sjid != null) {
				hql += " and jstime='" + dateString
						+ "'and sjzsy is not null and sjid='" + sjid
						+ "'  order by t.sjzsy+0 desc ";
			} else if (lx.equals("1")
					&& ((StringUtils.isBlank(sjid) && sjid == null) || sjid == "")) {
				hql += "  and  jstime='"
						+ dateString
						+ "' and sjzsy is not null and sjid is not null  order by t.sjid, t.sjzsy+0 desc ";
			} else {
				hql += " and jstime='" + dateString
						+ "' and zsy is not null order by t.zsy+0 desc ";
			}
		}
		List<Mrzcjs> list = dao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public Mrzcjs getMyzc(String userid, String mrlx, String sjid) {
		// TODO Auto-generated method stub
		Date date = new Date();
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(date);
		calendar.add(calendar.DATE, -1);// 把日期往后增加一天.整数往后推,负数往前移动
		date = calendar.getTime(); // 这个时间就是日期往后推一天的结果
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		String dateString = formatter.format(date); // 昨天
		/*	 *//**
		 * 获取赛季赛最新一次数据
		 */
		/*
		 * List<MnSjZd> mnsjList = mnSjZdServiceI.getMnsjList(); String zxSjid =
		 * ""; String sjzcbj = ""; if(mnsjList.size()>0){ MnSjZd mnsjzd =
		 * mnsjList.get(0); zxSjid = mnsjzd.getId(); sjzcbj =
		 * mnsjzd.getChuShi(); //赛季赛本金 }
		 */
		String hql = "";
		if (mrlx.equals("0")) {
			hql = " from Mrzcjs where 1=1 and userid='" + userid
					+ "' and jstime>='" + dateString + "' order by jstime desc";
		} else if (mrlx.equals("1")) {
			hql = " from Mrzcjs where 1=1 and userid='" + userid
					+ "' and jstime>='" + dateString + "' and sjid='" + sjid
					+ "' order by jstime desc";
		}
		Mrzcjs myzc = null;
		List<Mrzcjs> list = dao.find(hql);
		if (list.size() > 0) {
			myzc = list.get(0);
		}
		return myzc;
	}
	
	@Override
	public void zsyUpdate(Mrzcjs dqmrzc, DecimalFormat df, String today, double ptsbj) {
		/**
		 * 判断委托记录sjid是否在正在进行的赛季中
		 */
		Boolean flag = null;
		String pdSjid = dqmrzc.getSjid();
		String sjzcbj = "";
		if (StringUtils.isNotBlank(pdSjid)) {
			MnSjZd pdmnsjzd = mnSjZdServiceI.getDqJxSjs(pdSjid, today); // 判断是否为进行中的赛季
			if (pdmnsjzd != null) {
				sjzcbj = pdmnsjzd.getChuShi(); // 赛季赛本金
				flag = true;
			} else {
				flag = false;
			}

		} else {
			flag = false;
		}

		// 普通赛
		Double zsy = Double.parseDouble(dqmrzc.getZczl())
				- ptsbj;
		Double zsyl = zsy * 100 / ptsbj;
		BigDecimal zsylbd = new BigDecimal(zsyl);
		zsylbd.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();
		dqmrzc.setZsy(df.format(zsylbd));
		// 赛季赛
		if (Double.parseDouble(dqmrzc.getSjzczl()) > 0 && flag) {
			Double sjzsy = Double.parseDouble(dqmrzc.getSjzczl())
					- Double.parseDouble(sjzcbj);
			Double sjzsyl = sjzsy * 100 / Double.parseDouble(sjzcbj);

			BigDecimal sjzsylbd = new BigDecimal(sjzsyl);
			sjzsylbd.setScale(3, BigDecimal.ROUND_HALF_UP)
					.doubleValue();
			dqmrzc.setSjzsy(df.format(sjzsylbd));
		}
		dao.update(dqmrzc);
	}

	@Override
	public void zsyUpdate() {
		try {
			// TODO Auto-generated method stub
			DecimalFormat df = new DecimalFormat("#.###");
			/**
			 * 获取配置文件基本参数信息
			 */
			IntegralConfig integralConfig = integralConfigServiceI.get();
			String ptsbj = integralConfig.getPtsjb(); // 普通赛本金
			//System.out.println("zsyupdate Start ------------------------");
			/*	*//**
			 * 获取赛季赛最新一次数据
			 */
			/*
			 * List<MnSjZd> mnsjList = mnSjZdServiceI.getMnsjList(); String zxSjid =
			 * ""; String sjzcbj = ""; if(mnsjList.size()>0){ MnSjZd mnsjzd =
			 * mnsjList.get(0); zxSjid = mnsjzd.getId(); sjzcbj =
			 * mnsjzd.getChuShi(); //赛季赛本金 }
			 */
			Date date = new Date();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			String nowday = sdf.format(date);
			// String nowday = "2015-12-28";
			String hql = "from Mrzcjs t where 1 = 1 and jstime ='" + nowday + "'";
			List<Mrzcjs> list = dao.find(hql);
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Mrzcjs dqmrzc = list.get(i);

					/**
					 * 判断委托记录sjid是否在正在进行的赛季中
					 */
					Boolean flag = null;
					String pdSjid = dqmrzc.getSjid();
					String sjzcbj = "";
					if (StringUtils.isNotBlank(pdSjid)) {
						MnSjZd pdmnsjzd = mnSjZdServiceI.getDqJxSjs(pdSjid, nowday); // 判断是否为进行中的赛季
						if (pdmnsjzd != null) {
							sjzcbj = pdmnsjzd.getChuShi(); // 赛季赛本金
							flag = true;
						} else {
							flag = false;
						}

					} else {
						flag = false;
					}

					// 普通赛
					Double zsy = Double.parseDouble(dqmrzc.getZczl())
							- Double.parseDouble(ptsbj);
					Double zsyl = zsy * 100 / Double.parseDouble(ptsbj);
					BigDecimal zsylbd = new BigDecimal(zsyl);
					zsylbd.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();
					dqmrzc.setZsy(df.format(zsylbd));
					// 赛季赛
					if (Double.parseDouble(dqmrzc.getSjzczl()) > 0 && flag) {
						Double sjzsy = Double.parseDouble(dqmrzc.getSjzczl())
								- Double.parseDouble(sjzcbj);
						Double sjzsyl = sjzsy * 100 / Double.parseDouble(sjzcbj);

						BigDecimal sjzsylbd = new BigDecimal(sjzsyl);
						sjzsylbd.setScale(3, BigDecimal.ROUND_HALF_UP)
								.doubleValue();
						dqmrzc.setSjzsy(df.format(sjzsylbd));
					}
					dao.update(dqmrzc);
					//System.out.println("zsyupdate end ------------------------");
				}
			} else {
				//System.out.println("wushuju!!!");
			}
		} catch (NumberFormatException e) {
			e.printStackTrace();
			logger.error("################总收益结算数字格式化异常", e);
			throw e;
		}

	}

	@Override
	public List<Mrzcjs> getListByUserid(String userid, String page, String rows) {
		// TODO Auto-generated method stub
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String hql = "from Mrzcjs t where 1 = 1 and userid='" + userid
				+ "' order by jstime desc";

		List<Mrzcjs> list = dao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public String getPmCount(String userid, String mrlx, String sjid) {
		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		String today = formatter.format(date); // 今天日期
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(date);
		calendar.add(calendar.DATE, -1);// 把日期往后增加一天.整数往后推,负数往前移动
		date = calendar.getTime(); // 这个时间就是日期往后推一天的结果
		String ztDate = formatter.format(date); // 昨天日期
		String dateString = "";// 运算日期
		/**
		 * 判定请求数据日期方法
		 */
		String drqsql = "select count(1) from t_mrzcjs where 1=1  and jstime ='"
				+ today + "'"; // 设定定日期sql
		BigInteger drql = dao.countBySql(drqsql);
		if (drql.equals(BigInteger.ZERO)) { // 今天收益资产未结算，数据请求日期设置为昨天
			dateString = ztDate;
		} else { // 今天收益资产结算后，数据请求日期设置为今天
			dateString = today;
		}

		String dqzsy = null;
		String dqsjzsy = null;
		String sql = "";
		String hql02 = " from Mrzcjs where userid ='" + userid
				+ "' and jstime='" + dateString + "'";
		Mrzcjs mrzcjs = dao.get(hql02);
		if (mrzcjs != null) {
			if (mrlx.equals("0")) {
				dqzsy = mrzcjs.getZsy();
			} else if (mrlx.equals("1")) {
				dqsjzsy = mrzcjs.getSjzsy();
			}
		} else {
			dqzsy = "0";
			dqsjzsy = "0";
		}
		if (mrlx.equals("0")) {
			sql = "select count(1) from t_mrzcjs where 1=1  and zsy + 0 > '"
					+ dqzsy + "'+ 0  and jstime='" + dateString + "'";
		} else if (mrlx.equals("1")) {
			sql = "select count(1) from t_mrzcjs where 1=1  and sjzsy + 0 > '"
					+ dqsjzsy + "'+ 0  and jstime='" + dateString
					+ "' and sjid='" + sjid + "'";
		}
		BigInteger l = dao.countBySql(sql);
		// Integer count = Integer.parseInt(dao.count(hql01).toString());
		return l.toString();

	}

	@Override
	public void deleteDqmrzc(String userid, String sjsid) {
		// TODO Auto-generated method stub
		String hql = " from Mrzcjs where 1=1 and  userid ='" + userid + "' ";
		List<Mrzcjs> list = dao.find(hql);
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				Mrzcjs mr = list.get(i);
				mr.setSjbrsy("0.00");
				mr.setSjbzsy("0.00");
				mr.setSjbysy("0.00");
				mr.setSjzsy("0.00");
				mr.setSjzczl("200000");
				mr.setSjid("");
				dao.update(mr);
			}
		}

	}
	
	@Override
	public void rzyUpdate(Mrzcjs mrzc, DecimalFormat df, String today,
			String yesterday, String szld, String syld, double ptsbj
			) throws Exception{
		
		boolean flag = false;
		String pdSjid = mrzc.getSjid();
		String sjzcbj = "";
		if (StringUtils.isNotBlank(pdSjid)) {
			MnSjZd pdmnsjzd = mnSjZdServiceI.getDqJxSjs(pdSjid, today); // 判断是否为进行中的赛季
			if (pdmnsjzd != null) {
				sjzcbj = pdmnsjzd.getChuShi(); // 赛季赛本金
				flag = true;
			} else {
				flag = false;
			}

		}

		String userid = mrzc.getUserid(); // 获取当前数据userid
		String jrzcze = mrzc.getZczl(); // 获取当前数据今日普通赛资产总额
		String jrsjzcze = mrzc.getSjzczl(); // 获取当前数据今日赛季赛资产总额
		String hql01 = "from Mrzcjs where 1=1 and jstime='"
				+ yesterday + "' and userid = '" + userid + "'"; // 昨日结算数据
		String hql02 = "from Mrzcjs where 1=1 and jstime = '" + szld
				+ "' and userid = '" + userid + "'";// 上周最后一天收益
		String hql03 = "from Mrzcjs where 1=1 and jstime = '" + syld
				+ "' and userid = '" + userid + "'";// 上月最后一天收益

		Mrzcjs zrzc01 = dao.get(hql01); // 获取昨日收益总额数据
		Mrzcjs zrzc02 = dao.get(hql02); // 获取上周收益总额数据
		Mrzcjs zrzc03 = dao.get(hql03); // 获取上月收益总额数据
		/*
		 * Mrzcjs sjzrzc01 = dao.get(hql01+" and sjid='"+zxSjid+"'");
		 * //获取昨日收益总额数据 Mrzcjs sjzrzc02 =
		 * dao.get(hql02+" and sjid='"+zxSjid+"'"); //获取上周收益总额数据 Mrzcjs
		 * sjzrzc03 = dao.get(hql03+" and sjid='"+zxSjid+"'");
		 * //获取上月收益总额数据
		 */
		// 普通赛
		Double brsy = null;
		Double bzsy = null;
		Double bysy = null;
		Double brsyl = null;
		Double bzsyl = null;
		Double bysyl = null;
		// 赛季赛
		Double sjbrsy = null;
		Double sjbzsy = null;
		Double sjbysy = null;
		Double sjbrsyl = null;
		Double sjbzsyl = null;
		Double sjbysyl = null;

		// 本日收益结算
		if (zrzc01 != null) {
			// 普通赛收益计算
			//System.out.println(zrzc01.getUserid());
			Double zrzc = Double.parseDouble(zrzc01.getZczl()); // 昨日资产总额
			brsy = Double.parseDouble(jrzcze) - zrzc;
			if (zrzc == 0) {
				brsyl = 0.0;
			} else {
				brsyl = brsy * 100 / zrzc;
			}
			if(brsyl > 10){
				brsyl = 0d;
			}

			// 赛季赛收益计算
			if (StringUtils.isNotBlank(mrzc.getSjid()) && flag) {
				Double sjzrzc = Double.parseDouble(zrzc01.getSjzczl()); // 赛季昨日资产总额
				if (sjzrzc == 0.0) {
					sjzrzc = Double.parseDouble(sjzcbj);
				}
				sjbrsy = Double.parseDouble(jrsjzcze) - sjzrzc;
				sjbrsyl = sjbrsy * 100 / sjzrzc;
				if(sjbrsyl > 10){
					sjbrsyl = 0d;
				}
			} else {
				sjbrsyl = 0.0;
			}
		} else {
			// 第一天普通赛收益计算
			brsy = Double.parseDouble(jrzcze)
					- ptsbj;
			if (ptsbj == 0) {
				brsyl = 0.0;
			} else {
				brsyl = brsy * 100 / ptsbj;
			}

			// 第一天赛季赛收益计算
			if (StringUtils.isNotBlank(mrzc.getSjid()) && flag) {
				sjbrsy = Double.parseDouble(jrsjzcze)
						- Double.parseDouble(sjzcbj);
				sjbrsyl = sjbrsy * 100 / Double.parseDouble(sjzcbj);
			} else {
				sjbrsyl = 0.0;
			}

		}

		// 本周收益结算
		if (zrzc02 != null) {
			Double szzc = Double.parseDouble(zrzc02.getZczl()); // 上周资产总额
			bzsy = Double.parseDouble(jrzcze) - szzc;
			if (szzc == 0) {
				bzsyl = 0.0;
			} else {
				bzsyl = bzsy * 100 / szzc;
				if(bzsyl > 95){
					bzsyl = 0d;
				}
			}

			// 赛季赛收益计算
			if (StringUtils.isNotBlank(mrzc.getSjid()) && flag) {
				Double sjszzc = Double.parseDouble(zrzc02.getSjzczl()); // 上周资产总额
				if (sjszzc == 0.0) {
					sjszzc = Double.parseDouble(sjzcbj);
				}
				sjbzsy = Double.parseDouble(jrsjzcze) - sjszzc;
				sjbzsyl = sjbzsy * 100 / sjszzc;
				if(sjbzsyl > 95){
					sjbzsyl = 0d;
				}
			} else {
				sjbzsyl = 0.0;
			}
		} else {
			bzsy = Double.parseDouble(jrzcze)
					- ptsbj;
			bzsyl = bzsy * 100 / ptsbj;
			// 赛季赛收益计算
			if (StringUtils.isNotBlank(mrzc.getSjid()) && flag) {
				sjbzsy = Double.parseDouble(jrsjzcze)
						- Double.parseDouble(sjzcbj);
				sjbzsyl = sjbzsy * 100 / Double.parseDouble(sjzcbj);
			} else {
				sjbzsyl = 0.0;
			}

		}

		// 本月收益结算
		if (zrzc03 != null) {
			Double syzc = Double.parseDouble(zrzc03.getZczl());
			bysy = Double.parseDouble(jrzcze) - syzc;
			if (syzc == 0) {
				bysyl = 0.0;
			} else {
				bysyl = bysy * 100 / syzc;
				Calendar c = Calendar.getInstance();
				int mothDayCount = c.get(Calendar.DAY_OF_MONTH);
				if(bysyl > (Math.pow(1.1d, mothDayCount) - 1)){
					bysyl = 0d;
				}
			}

			// 赛季赛收益计算
			if (StringUtils.isNotBlank(mrzc.getSjid()) && flag) {
				Double sjsyzc = Double.parseDouble(zrzc03.getSjzczl()); // 上月资产总额
				if (sjsyzc == 0.0) {
					sjsyzc = Double.parseDouble(sjzcbj);
				}
				sjbysy = Double.parseDouble(jrsjzcze) - sjsyzc;
				sjbysyl = sjbysy * 100 / sjsyzc;
				Calendar c = Calendar.getInstance();
				int mothDayCount = c.get(Calendar.DAY_OF_MONTH);
				if(sjbysyl > (Math.pow(1.1d, mothDayCount) - 1)){
					sjbysyl = 0d;
				}
			} else {
				sjbysyl = 0.0;
			}

		} else {
			bysy = Double.parseDouble(jrzcze)
					- ptsbj;
			bysyl = bysy * 100 / ptsbj;

			if (StringUtils.isNotBlank(mrzc.getSjid()) && flag) {
				sjbysy = Double.parseDouble(jrsjzcze)
						- Double.parseDouble(sjzcbj);
				sjbysyl = sjbysy * 100 / Double.parseDouble(sjzcbj);
			} else {
				sjbysyl = 0.0;
			}
		}
		// 更新每日资产结算数据
		BigDecimal brsylbd = new BigDecimal(brsyl);
		brsylbd.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();
		mrzc.setBrsy(df.format(brsylbd)); // 本日收益

		BigDecimal bzsylbd = new BigDecimal(bzsyl);
		bzsylbd.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();
		mrzc.setBzsy(df.format(bzsylbd));// 本周收益

		BigDecimal bysylbd = new BigDecimal(bysyl);
		bysylbd.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();
		mrzc.setBysy(df.format(bysylbd));// 本月收益

		BigDecimal sjbrsylbd = new BigDecimal(sjbrsyl);
		sjbrsylbd.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();
		mrzc.setSjbrsy(df.format(sjbrsylbd));// 赛季本日收益

		BigDecimal sjbzsylbd = new BigDecimal(sjbzsyl);
		sjbzsylbd.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();
		mrzc.setSjbzsy(df.format(sjbzsylbd));// 赛季本周收益

		BigDecimal sjbysylbd = new BigDecimal(sjbysyl);
		sjbysylbd.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();
		mrzc.setSjbysy(df.format(sjbysylbd));// 赛季本月收益
		
		dao.update(mrzc); // 更新每日结算资产数据
	}
	
	/**
	 * 日周月资产收益结算更新
	 * @throws Exception 
	 */
	@Override
	public void rzyUpdate() throws Exception{
		try {
			DecimalFormat df = new DecimalFormat("#.###");
			/**
			 * 获取配置文件基本参数信息
			 */
			IntegralConfig integralConfig = integralConfigServiceI.get();
			String ptsbj = integralConfig.getPtsjb(); // 普通赛本金
			//System.out.println("rzyupdate Start ------------------------");

			/**
			 * 获取赛季赛最新一次数据
			 */
			/*
			 * List<MnSjZd> mnsjList = mnSjZdServiceI.getMnsjList(); String zxSjid =
			 * ""; String sjzcbj = ""; if(mnsjList.size()>0){ MnSjZd mnsjzd =
			 * mnsjList.get(0); zxSjid = mnsjzd.getId(); sjzcbj =
			 * mnsjzd.getChuShi(); //赛季赛本金 }
			 */

			/**
			 * 获取上周日期，上月日期，昨日日期
			 */
			Date date = new Date();
			Calendar cal_now = Calendar.getInstance();
//			cal_now.set(2017, 1, 13);
			date = cal_now.getTime();
			/*SimpleDateFormat sdf0 = new SimpleDateFormat("yyyy-MM-dd");
			String s="2016-07-18";
			Date date = sdf0.parse(s);*/
			DateUtil mydate = new DateUtil();
			Date syLastDay = mydate.getLastDayOfLastMonth(date); // 上个月最后一天
			Date szLastDay = mydate.getLastDayOfLastWeek(date);// 上周最后一天
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			String nowday = sdf.format(date); // 今天
			String syld = sdf.format(syLastDay);// 上个月最后一天
			String szld = sdf.format(szLastDay);// 上周最后一天
			Calendar calendar = new GregorianCalendar();
			calendar.setTime(date);
			calendar.add(Calendar.DATE, -1);// 把日期往后增加一天.整数往后推,负数往前移动
			date = calendar.getTime(); // 这个时间就是日期往后推一天的结果
			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
			String dateString = formatter.format(date); // 昨天

			String hql = "from Mrzcjs t where 1 = 1 and jstime ='" + nowday + "'";
			List<Mrzcjs> list = dao.find(hql);
			logger.error("一共" + list.size() + "条");
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					logger.error("开始结算第" + i + "条");
					Mrzcjs mrzc = list.get(i);

					/**
					 * 判断委托记录sjid是否在正在进行的赛季中
					 */
					Boolean flag = null;
					String pdSjid = mrzc.getSjid();
					String sjzcbj = "";
					if (StringUtils.isNotBlank(pdSjid)) {
						MnSjZd pdmnsjzd = mnSjZdServiceI.getDqJxSjs(pdSjid, nowday); // 判断是否为进行中的赛季
						if (pdmnsjzd != null) {
							sjzcbj = pdmnsjzd.getChuShi(); // 赛季赛本金
							flag = true;
						} else {
							flag = false;
						}

					}

					String userid = mrzc.getUserid(); // 获取当前数据userid
					String jrzcze = mrzc.getZczl(); // 获取当前数据今日普通赛资产总额
					String jrsjzcze = mrzc.getSjzczl(); // 获取当前数据今日赛季赛资产总额
					String hql01 = "from Mrzcjs where 1=1 and jstime='"
							+ dateString + "' and userid = '" + userid + "'"; // 昨日结算数据
					String hql02 = "from Mrzcjs where 1=1 and jstime = '" + szld
							+ "' and userid = '" + userid + "'";// 上周最后一天收益
					String hql03 = "from Mrzcjs where 1=1 and jstime = '" + syld
							+ "' and userid = '" + userid + "'";// 上月最后一天收益

					Mrzcjs zrzc01 = dao.get(hql01); // 获取昨日收益总额数据
					Mrzcjs zrzc02 = dao.get(hql02); // 获取上周收益总额数据
					Mrzcjs zrzc03 = dao.get(hql03); // 获取上月收益总额数据
					/*
					 * Mrzcjs sjzrzc01 = dao.get(hql01+" and sjid='"+zxSjid+"'");
					 * //获取昨日收益总额数据 Mrzcjs sjzrzc02 =
					 * dao.get(hql02+" and sjid='"+zxSjid+"'"); //获取上周收益总额数据 Mrzcjs
					 * sjzrzc03 = dao.get(hql03+" and sjid='"+zxSjid+"'");
					 * //获取上月收益总额数据
					 */
					// 普通赛
					Double brsy = null;
					Double bzsy = null;
					Double bysy = null;
					Double brsyl = null;
					Double bzsyl = null;
					Double bysyl = null;
					// 赛季赛
					Double sjbrsy = null;
					Double sjbzsy = null;
					Double sjbysy = null;
					Double sjbrsyl = null;
					Double sjbzsyl = null;
					Double sjbysyl = null;

					// 本日收益结算
					if (zrzc01 != null) {
						// 普通赛收益计算
						//System.out.println(zrzc01.getUserid());
						Double zrzc = Double.parseDouble(zrzc01.getZczl()); // 昨日资产总额
						brsy = Double.parseDouble(jrzcze) - zrzc;
						if (zrzc == 0) {
							brsyl = 0.0;
						} else {
							brsyl = brsy * 100 / zrzc;
						}

						// 赛季赛收益计算
						if (StringUtils.isNotBlank(mrzc.getSjid()) && flag) {
							Double sjzrzc = Double.parseDouble(zrzc01.getSjzczl()); // 赛季昨日资产总额
							if (sjzrzc == 0.0) {
								sjzrzc = Double.parseDouble(sjzcbj);
							}
							sjbrsy = Double.parseDouble(jrsjzcze) - sjzrzc;
							sjbrsyl = sjbrsy * 100 / sjzrzc;
						} else {
							sjbrsyl = 0.0;
						}
					} else {
						// 第一天普通赛收益计算
						brsy = Double.parseDouble(jrzcze)
								- Double.parseDouble(ptsbj);
						if (Double.parseDouble(ptsbj) == 0) {
							brsyl = 0.0;
						} else {
							brsyl = brsy * 100 / Double.parseDouble(ptsbj);
						}

						// 第一天赛季赛收益计算
						if (StringUtils.isNotBlank(mrzc.getSjid()) && flag) {
							sjbrsy = Double.parseDouble(jrsjzcze)
									- Double.parseDouble(sjzcbj);
							sjbrsyl = sjbrsy * 100 / Double.parseDouble(sjzcbj);
						} else {
							sjbrsyl = 0.0;
						}

					}

					// 本周收益结算
					if (zrzc02 != null) {
						Double szzc = Double.parseDouble(zrzc02.getZczl()); // 上周资产总额
						bzsy = Double.parseDouble(jrzcze) - szzc;
						if (szzc == 0) {
							bzsyl = 0.0;
						} else {
							bzsyl = bzsy * 100 / szzc;
						}

						// 赛季赛收益计算
						if (StringUtils.isNotBlank(mrzc.getSjid()) && flag) {
							Double sjszzc = Double.parseDouble(zrzc02.getSjzczl()); // 上周资产总额
							if (sjszzc == 0.0) {
								sjszzc = Double.parseDouble(sjzcbj);
							}
							sjbzsy = Double.parseDouble(jrsjzcze) - sjszzc;
							sjbzsyl = sjbzsy * 100 / sjszzc;
						} else {
							sjbzsyl = 0.0;
						}
					} else {
						bzsy = Double.parseDouble(jrzcze)
								- Double.parseDouble(ptsbj);
						bzsyl = bzsy * 100 / Double.parseDouble(ptsbj);
						// 赛季赛收益计算
						if (StringUtils.isNotBlank(mrzc.getSjid()) && flag) {
							sjbzsy = Double.parseDouble(jrsjzcze)
									- Double.parseDouble(sjzcbj);
							sjbzsyl = sjbzsy * 100 / Double.parseDouble(sjzcbj);
						} else {
							sjbzsyl = 0.0;
						}

					}

					// 本月收益结算
					if (zrzc03 != null) {
						Double syzc = Double.parseDouble(zrzc03.getZczl());
						bysy = Double.parseDouble(jrzcze) - syzc;
						if (syzc == 0) {
							bysyl = 0.0;
						} else {
							bysyl = bysy * 100 / syzc;
						}

						// 赛季赛收益计算
						if (StringUtils.isNotBlank(mrzc.getSjid()) && flag) {
							Double sjsyzc = Double.parseDouble(zrzc03.getSjzczl()); // 上月资产总额
							if (sjsyzc == 0.0) {
								sjsyzc = Double.parseDouble(sjzcbj);
							}
							sjbysy = Double.parseDouble(jrsjzcze) - sjsyzc;
							sjbysyl = sjbysy * 100 / sjsyzc;
						} else {
							sjbysyl = 0.0;
						}

					} else {
						bysy = Double.parseDouble(jrzcze)
								- Double.parseDouble(ptsbj);
						bysyl = bysy * 100 / Double.parseDouble(ptsbj);

						if (StringUtils.isNotBlank(mrzc.getSjid()) && flag) {
							sjbysy = Double.parseDouble(jrsjzcze)
									- Double.parseDouble(sjzcbj);
							sjbysyl = sjbysy * 100 / Double.parseDouble(sjzcbj);
						} else {
							sjbysyl = 0.0;
						}
					}
					// 更新每日资产结算数据
					BigDecimal brsylbd = new BigDecimal(brsyl);
					brsylbd.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();
					mrzc.setBrsy(df.format(brsylbd)); // 本日收益

					BigDecimal bzsylbd = new BigDecimal(bzsyl);
					bzsylbd.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();
					mrzc.setBzsy(df.format(bzsylbd));// 本周收益

					BigDecimal bysylbd = new BigDecimal(bysyl);
					bysylbd.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();
					mrzc.setBysy(df.format(bysylbd));// 本月收益

					BigDecimal sjbrsylbd = new BigDecimal(sjbrsyl);
					sjbrsylbd.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();
					mrzc.setSjbrsy(df.format(sjbrsylbd));// 赛季本日收益

					BigDecimal sjbzsylbd = new BigDecimal(sjbzsyl);
					sjbzsylbd.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();
					mrzc.setSjbzsy(df.format(sjbzsylbd));// 赛季本周收益

					BigDecimal sjbysylbd = new BigDecimal(sjbysyl);
					sjbysylbd.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();
					mrzc.setSjbysy(df.format(sjbysylbd));// 赛季本月收益
					
					dao.update(mrzc); // 更新每日结算资产数据
					//System.out.println("rzyupdate end ------------------------");
				}
			}
		} catch (Exception e) {
			logger.error("-----------------------日月周收益结算错误：", e);
			throw e;
		}
		

	}

	@Override
	public List<Mrzcjs> getTgzcList(String userid) {
		// TODO Auto-generated method stub
		String hql = " from Mrzcjs where 1=1 and userid='" + userid + "'";
		List<Mrzcjs> list = dao.find(hql);
		return list;
	}

	@Override
	public void fjyDateUpdate(Mrzcjs ztMrzc, String nowday) {
		Mrzcjs todayMrzc = new Mrzcjs();
		BeanUtils.copyProperties(ztMrzc, todayMrzc);
		todayMrzc.setId(UUID.randomUUID().toString());
		todayMrzc.setJstime(nowday);
		dao.save(todayMrzc);
	}
	@Override
	public void fjyDateUpdate() throws ParseException {
		// TODO Auto-generated method stub
		Date date = new Date();
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		String nowday = format.format(date); // 今天
		Calendar c = Calendar.getInstance();
		c.setTime(format.parse(nowday));
		int dayForWeek = 0;
		if (c.get(Calendar.DAY_OF_WEEK) == 1) {
			dayForWeek = 7;
		} else {
			dayForWeek = c.get(Calendar.DAY_OF_WEEK) - 1;
		}
		if (dayForWeek > 5) {
			c.add(Calendar.DATE, -1);// 把日期往后增加一天.整数往后推,负数往前移动
			// Date ztDate=c.getTime(); //这个时间就是日期往后推一天的结果
			String zt = format.format(c.getTime());// 这个时间就是日期往后推一天的结果
			String hql = "from Mrzcjs where 1=1 and jstime='" + zt + "'";
			List<Mrzcjs> list = dao.find(hql);
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Mrzcjs ztMrzc = list.get(i);
					Mrzcjs todayMrzc = new Mrzcjs();
					BeanUtils.copyProperties(ztMrzc, todayMrzc);
					todayMrzc.setId(UUID.randomUUID().toString());
					todayMrzc.setJstime(nowday);
					dao.save(todayMrzc);
				}
			}
		}
	}

	/**
	 * 将文本文件中的内容读入到buffer中
	 * 
	 * @param buffer
	 *            buffer
	 * @param filePath
	 *            文件路径
	 * @throws IOException
	 *             异常
	 * @author cn.outofmemory
	 * @date 2013-1-7
	 */
	public static void readToBuffer(StringBuffer buffer, String filePath)
			throws IOException {
		InputStream is = new FileInputStream(filePath);
		String line; // 用来保存每行读取的内容
		BufferedReader reader = new BufferedReader(new InputStreamReader(is));
		line = reader.readLine(); // 读取第一行
		while (line != null) { // 如果 line 为空说明读完了
			buffer.append(line); // 将读到的内容添加到 buffer 中
			buffer.append("\n"); // 添加换行符
			line = reader.readLine(); // 读取下一行
		}
		reader.close();
		is.close();
	}

	/**
	 * 读取文本文件内容
	 * 
	 * @param filePath
	 *            文件所在路径
	 * @return 文本内容
	 * @throws IOException
	 *             异常
	 * @author cn.outofmemory
	 * @date 2013-1-7
	 */
	public static String readFile(String filePath) throws IOException {
		StringBuffer sb = new StringBuffer();
		readToBuffer(sb, filePath);
		return sb.toString();
	}

	@Override
	public Mrzcjs getTgInfozc(String userid) {
		// TODO Auto-generated method stub
		String jstime = TimeUtils.getTime("yyyy-MM-dd");
		String hql = " from Mrzcjs where 1=1 and jstime='" + jstime
				+ "' and userid='" + userid + "'";
		// String hql =
		// " from Mrzcjs where 1=1 and jstime='2016-01-17' and userid='"+userid+"'";
		// Mrzcjs m = dao.get(hql);
		List<Mrzcjs> list = dao.find(hql);
		if (list.size() > 0) {
			Mrzcjs mm = list.get(0);
			return mm;
		} else {
			return null;
		}

	}

	@Override
	public String getTgPmCount(String userid, String mrlx) {
		// TODO Auto-generated method stub
		String jstime = TimeUtils.getTime("yyyy-MM-dd");
		String dqzsy = null;
		String dqsjzsy = null;
		String sql = "";
		String hql02 = " from Mrzcjs where userid ='" + userid
				+ "' and jstime='" + jstime + "'";
		Mrzcjs mrzcjs = dao.get(hql02);
		if (mrzcjs != null) {
			if (mrlx.equals("0")) {
				if (StringUtils.isBlank(mrzcjs.getZsy())
						|| "".equals(mrzcjs.getZsy())) {
					dqzsy = "-999999999999";
				} else {
					dqzsy = mrzcjs.getZsy();
				}

			} else if (mrlx.equals("1")) {
				if (StringUtils.isBlank(mrzcjs.getSjzsy())
						|| "".equals(mrzcjs.getSjzsy())) {
					dqzsy = "-999999999999";
				} else {
					dqsjzsy = mrzcjs.getSjzsy();
				}
			}
		} else {
			dqzsy = "-999999999999";
			dqsjzsy = "-999999999999";
		}
		if (mrlx.equals("0")) {
			sql = "select count(a.id) from t_mrzcjs a,loginuser b  where 1=1  and a.userid = b.id  and b.usertype='2'"
					+ "and a.zsy + 0 > '"
					+ dqzsy
					+ "'+ 0  and a.jstime='"
					+ jstime + "'";
		} else if (mrlx.equals("1")) {
			sql = "select count(a.id) from t_mrzcjs a,loginuser b where 1=1 and a.userid = b.id  and b.usertype='2'"
					+ " and sjzsy + 0 > '"
					+ dqsjzsy
					+ "'+ 0  and jstime='"
					+ jstime + "'";
		}
		BigInteger l = dao.countBySql(sql);
		// Integer count = Integer.parseInt(dao.count(hql01).toString());
		return l.toString();

	}

	@Override
	public List<Mrzcjs> getNblist() { // 获取当前每日收益最高三个人数据
		// TODO Auto-generated method stub
		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		String today = formatter.format(date); // 今天日期
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(date);
		calendar.add(calendar.DATE, -1);// 把日期往后增加一天.整数往后推,负数往前移动
		date = calendar.getTime(); // 这个时间就是日期往后推一天的结果
		String ztDate = formatter.format(date); // 昨天日期
		String dateString = "";// 运算日期
		/**
		 * 判定请求数据日期方法
		 */
		String drqsql = "select count(1) from t_mrzcjs where 1=1  and jstime ='"
				+ today + "'"; // 设定定日期sql
		BigInteger drql = dao.countBySql(drqsql);
		if (drql.equals(BigInteger.ZERO)) { // 今天收益资产未结算，数据请求日期设置为昨天
			dateString = ztDate;
		} else { // 今天收益资产结算后，数据请求日期设置为今天
			dateString = today;
		}

		String hql = " from Mrzcjs where 1=1 and jstime='" + dateString
				+ "' order by sjbrsy desc";
		List<Mrzcjs> list = dao.find(hql, 1, 3);
		return list;
	}

	@Override
	public Mrzcjs getNewZc(String userid) {
		// TODO Auto-generated method stub

		String hql = " from Mrzcjs where 1=1 and userid='"
				+ userid
				+ "' and sjid is not null and sjbrsy is not null order by jstime desc";
		List<Mrzcjs> list = dao.find(hql);
		if (list.size() > 0) {
			Mrzcjs mm = list.get(0);
			return mm;
		} else {
			return null;
		}

	}

	@Override
	public void mrzcjsNo2(Object[] ob) throws Exception {
		
		String userid = ob[0].toString();
		String sjid = ob[1].toString();
		String sjzczl = ob[2].toString();
		String zczl = ob[3].toString();
		String jstime = ob[4].toString();
		String username = ob[5].toString();

		// 判断sjid是否为参赛正在进行的赛季
		// 1.判断报名赛季为结算赛季
		String isbm = mnSjBmServiceI.pdbm(userid, sjid);// 1：报名赛季；0：未报名
		// 2.判断结算赛季是否结束
		MnSjZd isend = mnSjZdServiceI.getDqJxSjs(sjid, jstime);
		int pdsjjs = 0;
		if (isend != null) {
			pdsjjs = 1; // 正在进行的赛季
		} else {
			pdsjjs = 0;
		}
		// 判断结算
		int isjs = Integer.parseInt(isbm) + pdsjjs;
		
		String hql_ptsmr = "from Mrzcjs where userid = '"+userid+"' and sjid = '"
				+ sjid
				+ "' and jstime = '"
				+ jstime
				+ "'";
		
		if ("111".equals(sjid)) { // 插入数据到赛季结算临时表中
			PtsMrzcjs ptsmr = ptsMrzcjsDaoI.get(hql_ptsmr);
			if(null == ptsmr){
				ptsmr = new PtsMrzcjs();
				ptsmr.setId(UUID.randomUUID().toString());
			}
			ptsmr.setUserid(userid);
			ptsmr.setSjid(sjid);
			ptsmr.setZczl(zczl);
			ptsmr.setJstime(jstime);
			ptsmr.setUsername(username);
			ptsMrzcjsDaoI.saveOrUpdate(ptsmr);
		} else if (isjs == 2) {
			String hql_mr = "from Mrzcjs where userid = '"+userid+"' and sjid = '"
					+ ("111".equals(sjid) ? "" : sjid)
					+ "' and jstime = '"
					+ jstime
					+ "'";
			Mrzcjs mr = dao.get(hql_mr);
			// 赛季结算数据
			if(null == mr){
				mr = new Mrzcjs();
				mr.setId(UUID.randomUUID().toString());
			}
			mr.setUserid(userid);
			mr.setSjid(sjid);
			mr.setSjzczl(sjzczl);
			mr.setZczl(zczl);
			mr.setJstime(jstime);
			mr.setUsername(username);
			dao.saveOrUpdate(mr);
		}
		
	}
	@Override
	public void mrzcjsNo2() throws Exception {

		// TODO Auto-generated method stub
		//System.out.println("mrzcjsNo2开始了");
		try {
			String sql = "select a.userid,a.sjid,"
					+ "IFNULL(SUM(case a.mrlx when '1' then (a.cgsl+0)*(b.jsprice+0) else 0 end )+c.sjsjb+0,0)  sjzczl,"
					+ "IFNULL(SUM(case a.mrlx when '0' then (a.cgsl+0)*(b.jsprice+0) else 0 end )+c.ptsjb+0,0) zczl,"
					+ "DATE_FORMAT(now(),'%Y-%m-%d') as jstime,"
					+ "c.`name`"
					+ "from t_gpsy a left join loginuser c on a.userid=c.id left JOIN t_interfacedata b on a.zqdm=b.zqdm group by a.userid,a.sjid,c.`name`";
			List<Object[]> list = dao.findBySql(sql);

			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					//System.out.println("mrzcjsNo2()执行" + i);
					Object[] ob = list.get(i);
					String userid = ob[0].toString();
					String sjid = ob[1].toString();
					String sjzczl = ob[2].toString();
					String zczl = ob[3].toString();
					String jstime = ob[4].toString();
					String username = ob[5].toString();

					// 判断sjid是否为参赛正在进行的赛季
					// 1.判断报名赛季为结算赛季
					String isbm = mnSjBmServiceI.pdbm(userid, sjid);// 1：报名赛季；0：未报名
					// 2.判断结算赛季是否结束
					MnSjZd isend = mnSjZdServiceI.getDqJxSjs(sjid, jstime);
					int pdsjjs = 0;
					if (isend != null) {
						pdsjjs = 1; // 正在进行的赛季
					} else {
						pdsjjs = 0;
					}
					// 判断结算
					int isjs = Integer.parseInt(isbm) + pdsjjs;
					Mrzcjs mr = new Mrzcjs(); // 赛季结算数据
					PtsMrzcjs ptsmr = new PtsMrzcjs(); // 普通赛结算数据

					if ("111".equals(sjid)) { // 插入数据到赛季结算临时表中
						ptsmr.setId(UUID.randomUUID().toString());
						ptsmr.setUserid(userid);
						ptsmr.setSjid(sjid);
						ptsmr.setZczl(zczl);
						ptsmr.setJstime(jstime);
						ptsmr.setUsername(username);
						ptsMrzcjsServiceI.add(ptsmr);

					} else if (isjs == 2) {
						mr.setId(UUID.randomUUID().toString());
						mr.setUserid(userid);
						mr.setSjid(sjid);
						mr.setSjzczl(sjzczl);
						mr.setZczl("200000");
						mr.setJstime(jstime);
						mr.setUsername(username);
						dao.save(mr);
					} else {
						continue;
					}

				}

			} // for循环结束end

			//this.updateMrizcjsData();
		} catch (NumberFormatException e) {
			e.printStackTrace();
			logger.error("！！！！！！！！！！！！！！！计算总资产数字格式化异常", e);
			throw e;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("！！！！！！！！！！！！！！计算总资产异常", e);
			throw e;
		}
		//System.out.println("mrzcjsNo2结束了");
	}

	@Override
	public void insertInterfaceData() throws Exception{
		String sql_1 = "select distinct zqdm from (select distinct zqdm from t_gpsy union select distinct(zqdm) from t_lcjh_cj) t";
		List<Object[]> ccdmList = dao.findBySql(sql_1); // 获取持股数据zqdm
		List<JSONObject> result = new ArrayList<JSONObject>(ccdmList.size());
		StringBuilder sb = new StringBuilder();
		int size = ccdmList.size();
		int j;
		int zqdmCount = 0;
		int zqdmLocalCount = 0;
		logger.info("开始获取持股数据zqdm,一共--{}--条", ccdmList.size());
		for (int i = 0; i < size; i++) {
			Object obj = ccdmList.get(i);
			zqdmLocalCount++;
			if((i+1) % 190 != 0 && i < size - 1){
				sb.append(obj);
				sb.append(",");
				continue;
			}
			sb.append(obj);
			j = 0;
			do{
				try {
					JSONArray jsList = StockHttpClientUtil.getStocks(sb.toString());
					for (int m = 0; m < jsList.size(); m++) { // 获取实时数据
						JSONObject gg_m = jsList.getJSONObject(m);// 获取个股实时数据
						result.add(gg_m);
					}
					zqdmCount += jsList.size();
					logger.info("查询zqdm,一共加载--{}--条,传入zqdm数量--{}--,返回数量--{}--", zqdmCount, zqdmLocalCount, jsList.size());
					zqdmLocalCount = 0;
					break;
				} catch (Exception e) {
//					j++;
					logger.warn("获取showapi接口股票信息出错,{}", e);
					Thread.sleep(500);
					continue;
				}
			}while(j <= ProjectConfig.interfaceDataRetryTimes);
			sb.setLength(0);	
		}
		for (JSONObject ssgg : result) {
			saveOrUpdateInsertInterfaceData(ssgg);
		}
			
	}
	
	@Override
	public void insertInterfaceData2() throws Exception{
		String sql_1 = " select zqdm from(select distinct zqdm from (select distinct zqdm from t_gpsy union select distinct(zqdm) from t_lcjh_cj) tt) t where t.zqdm not in(select zqdm from t_interfacedata) ";
		List<Object[]> ccdmList = dao.findBySql(sql_1); // 获取持股数据zqdm
		List<JSONObject> result = new ArrayList<JSONObject>(ccdmList.size());
		int size = ccdmList.size();
		int index = 1;
		int rows = 100;
		logger.info("开始获取停牌zqdm,一共--{}--条", ccdmList.size());
		List<String> stocks;
		if(size < rows){
			stocks = new ArrayList<>(size);
		}else{
			stocks = new ArrayList<>(rows);
		}
		for (int i = 0; i < size; i++) {
			Object obj = ccdmList.get(i);
//			String stockCode = obj.toString().substring(2);
			String stockCode = obj.toString();
			stocks.add(stockCode);
			if(index % rows == 0 || index >= size){
				result.addAll(StockHttpClientUtil.getStopStockBySina(stocks.toArray(new String[]{})));
				if(size - index < rows){
					stocks = new ArrayList<>(size - index);
				}else{
					stocks = new ArrayList<>(rows);
				}
			}
			index++;
		}
		for (JSONObject ssgg : result) {
			saveOrUpdateInsertInterfaceData(ssgg);
		}
		try {
			insertInterfaceData3();
		} catch (Exception e) {
			logger.info("开始获取停牌第三步zqdm,出错", e);
		}
	}
	
	private void insertInterfaceData3() throws Exception{
		String sql_1 = " select zqdm from t_interfacedata where jsprice is null "
					   +" union "
					   +" select zqdm from t_interfacedata where jsprice <= 0 ";
		List<Object[]> ccdmList = dao.findBySql(sql_1); // 获取持股数据zqdm
		List<JSONObject> result = new ArrayList<JSONObject>(ccdmList.size());
		int size = ccdmList.size();
		int index = 1;
		int rows = 100;
		logger.info("开始获取停牌第三步zqdm,一共--{}--条", ccdmList.size());
		List<String> stocks;
		if(size < rows){
			stocks = new ArrayList<>(size);
		}else{
			stocks = new ArrayList<>(rows);
		}
		for (int i = 0; i < size; i++) {
			Object obj = ccdmList.get(i);
			String stockCode = obj.toString();
			stocks.add(stockCode);
			if(index % rows == 0 || index >= size){
				result.addAll(StockHttpClientUtil.getStopStockBySina(stocks.toArray(new String[]{})));
				if(index >= size){
					continue;
				}
				if(size - index < rows){
					stocks = new ArrayList<>(size - index);
				}else{
					stocks = new ArrayList<>(rows);
				}
			}
			index++;
		}
		for (JSONObject ssgg : result) {
			saveOrUpdateInsertInterfaceData(ssgg);
		}
	}
	
//	@Override
//	public void insertInterfaceData2() throws Exception{
//		String sql_1 = " select zqdm from(select distinct zqdm from (select distinct zqdm from t_gpsy union select distinct(zqdm) from t_lcjh_cj) tt) t where t.zqdm not in(select zqdm from t_interfacedata) ";
//		List<Object[]> ccdmList = dao.findBySql(sql_1); // 获取持股数据zqdm
//		List<JSONObject> result = new ArrayList<JSONObject>(ccdmList.size());
//		int size = ccdmList.size();
//		int j;
//		logger.info("开始获取停牌zqdm,一共--{}--条", ccdmList.size());
//		for (int i = 0; i < size; i++) {
//			Object obj = ccdmList.get(i);
//			String stockCode = obj.toString().substring(2);
//			j = 0;
//			do{
//				try {
//					JSONObject stockJsonInfo = StockHttpClientUtil.getStockStopInfo(stockCode);
//					result.add(stockJsonInfo);
//					logger.info("获取停牌zqdm,一共加载--{}--条,已加载--{}--条", size, (i+1));
//					break;
//				} catch (Exception e) {
//					j++;
//					logger.warn("获取showapi接口股票信息出错,{}", e);
//					Thread.sleep(500);
//					continue;
//				}
//			}while(j <= ProjectConfig.interfaceDataRetryTimes2);
//		}
//		for (JSONObject ssgg : result) {
//			saveOrUpdateInsertInterfaceData(ssgg);
//		}
//			
//	}
	
	private void saveOrUpdateInsertInterfaceData(JSONObject ssgg){
		String code = ssgg.getString("code");// 返回当前代码
		String zqname = ssgg.getString("name"); // 返回当前证券名
		String market = ssgg.getString("market");// 返回证券市场
		String date = ssgg.getString("date");
		String zqdm = market + code;
		Double ssjg = Double.parseDouble(ssgg.getString("nowPrice")); // 获取实时个股价格
		if (ssjg <= 0) { // 判断如果该股票为停盘股票，则股票市价为昨日收盘价
			ssjg = Double.parseDouble(ssgg.getString("closePrice"));
		}
		if(ssjg <= 0){
			return;
		}
		String hql = "from InterfaceData where zqdm = '"+zqdm+"'";
		InterfaceData intData = interfaceDaoI.get(hql);
		if(null == intData){
			intData = new InterfaceData();
			intData.setId(UUID.randomUUID().toString());
		}
		intData.setJsprice(ssjg.toString());
		intData.setZqdm(zqdm); // 拼接出本平台证券代码：市场+编号
		intData.setZqname(zqname);
		intData.setJstime(date);
		interfaceDaoI.saveOrUpdate(intData);
	}
	
	
	
	protected Boolean getThrGPXX(String timeTp,String stocks) throws Exception {
		// 统一请求接口数据
		URL u = new URL(
				"http://route.showapi.com/131-46?showapi_appid=15094"
						+ "&showapi_timestamp="
						+ timeTp
						+ "&stocks="
						+ stocks
						+ "&needIndex=1&showapi_sign=288557843a564302bcaab02569355b40");
		//System.out.println(u);
		InputStream in = u.openStream();
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		try {
			byte buf[] = new byte[1024];
			int read = 0;
			while ((read = in.read(buf)) > 0) {
				out.write(buf, 0, read);
			}
		} finally {
			if (in != null) {
				in.close();
			}
		}
		byte b[] = out.toByteArray();

		// 临时东西
		// String
		// jsonTest=readFile("E:/work/gtl/src/main/webapp/attached/json2.txt");
		JSONObject jsonJg = JSON.parseObject(new String(b, "utf-8")); // 将json结果转换成jsonObject
		// JSONObject jsonJg = JSON.parseObject(jsonTest);
		// //将json结果转换成jsonObject
		JSONObject showBody = jsonJg.getJSONObject("showapi_res_body"); // 获取到大盘指数结果集
		JSONArray jsList = showBody.getJSONArray("list"); // 获取实时个股数组数据
		JSONObject ssgg = new JSONObject(); // 定义实时个股json
		if (jsList != null && jsList.size() > 0) {
			for (int i = 0; i < jsList.size(); i++) {
				ssgg = jsList.getJSONObject(i);// 获取个股实时数据
				String code = ssgg.getString("code");// 返回当前代码
				String zqname = ssgg.getString("name"); // 返回当前证券名
				String market = ssgg.getString("market");// 返回证券市场
				Double ssjg = Double
						.parseDouble(ssgg.getString("nowPrice")); // 获取实时个股价格
				if (ssjg == 0) { // 判断如果该股票为停盘股票，则股票市价为昨日收盘价
					ssjg = Double.parseDouble(ssgg.getString("closePrice"));
				}
				InterfaceData intData = new InterfaceData();
				intData.setJsprice(ssjg.toString());
				intData.setZqdm(market + code); // 拼接出本平台证券代码：市场+编号
				intData.setZqname(zqname);
				intData.setJstime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));

				interfaceDataServiceI.add(intData);

			}
		}
		return false;
	}
	
	@Override
	public void updateMrzcjsPts(String today){
		String sql = " update t_mrzcjs a,t_ptsmrzcjs b set a.zczl = b.zczl where a.userid = b.userid and a.jstime ='"
				+ today + "'";
		int a = dao.executeSql(sql);
		//System.out.println("普通赛、赛季赛均操作用户数据量:" + a); // 普通赛、赛季赛均操作用户数据量
	}
	
	@Override
	public void updateMrizcjsData2(String today){
		List<PtsMrzcjs> noSjsDataList = ptsMrzcjsServiceI.nosjsList(today);
		if (noSjsDataList.size() > 0) {
			for (int i = 0; i < noSjsDataList.size(); i++) {
				//System.out.println("updateMrizcjsData执行" + i);
				PtsMrzcjs ptsmr = noSjsDataList.get(i);
				ptsmr.setSjid("");
				ptsmr.setSjzczl("0.0");
				Mrzcjs u = new Mrzcjs();
				BeanUtils.copyProperties(ptsmr, u);
				dao.save(u);
			}
			//System.out.println("nosjsdata insert end!!!");
		}
	}
	
	/**
	 * 更新t_mrzcjs数据
	 */
	@Override
	public void updateMrizcjsData(){
		try {
			//System.out.println("----开始执行updateMrizcjsData---");
			Date date = new Date();
			
			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
			String today = formatter.format(date); // 今天日期
			String hql = " from Mrzcjs where 1=1 and jstime='" + today + "'";
			List<Mrzcjs> list01 = dao.find(hql);
			if (list01.size() > 0) {
				// 更新t_mrzcjs中赛季赛与普通赛都在操盘的数据
				String sql = " update t_mrzcjs a,t_ptsmrzcjs b set a.zczl = b.zczl where a.userid = b.userid and a.jstime ='"
						+ today + "'";
				int a = dao.executeSql(sql);
				//System.out.println("普通赛、赛季赛均操作用户数据量:" + a); // 普通赛、赛季赛均操作用户数据量
				// 插入t_mrzcjs没有报名赛季赛的数据
				List<PtsMrzcjs> noSjsDataList = ptsMrzcjsServiceI.nosjsList(today);
				if (noSjsDataList.size() > 0) {
					for (int i = 0; i < noSjsDataList.size(); i++) {
						//System.out.println("updateMrizcjsData执行" + i);
						PtsMrzcjs ptsmr = noSjsDataList.get(i);
						ptsmr.setSjid("");
						ptsmr.setSjzczl("0.0");
						Mrzcjs u = new Mrzcjs();
						BeanUtils.copyProperties(ptsmr, u);
						dao.save(u);
					}
					//System.out.println("nosjsdata insert end!!!");
				}

			}
		} catch (BeansException e) {
			e.printStackTrace();
			logger.error("@@@@@@@@@@@@@@@@@@@@@@@更新结算数据异常", e);
			throw e;
		}
		//System.out.println("----结束执行updateMrizcjsData---");
	}

	@Override
	public List<Mrzcjs> getsjbmlist() {
		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		String today = formatter.format(date); // 今天日期
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(date);
		calendar.add(calendar.DATE, -1);// 把日期往后增加一天.整数往后推,负数往前移动
		date = calendar.getTime(); // 这个时间就是日期往后推一天的结果
		String ztDate = formatter.format(date); // 昨天日期
		String dateString = "";// 运算日期
		/**
		 * 判定请求数据日期方法
		 */
		String drqsql = "select count(1) from t_mrzcjs where 1=1  and jstime ='"
				+ today + "'"; // 设定定日期sql
		BigInteger drql = dao.countBySql(drqsql);
		if (drql.equals(BigInteger.ZERO)) { // 今天收益资产未结算，数据请求日期设置为昨天
			dateString = ztDate;
		} else { // 今天收益资产结算后，数据请求日期设置为今天
			dateString = today;
		}

		String hql = " from Mrzcjs where 1=1 and jstime='" + dateString
				+ "' order by sjbrsy+0 desc ";
		List<Mrzcjs> list = dao.find(hql);
		return list;
	}

	@Override
	public List<Mrzcjs> getsjzbmlist() {
		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		String today = formatter.format(date); // 今天日期
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(date);
		calendar.add(calendar.DATE, -1);// 把日期往后增加一天.整数往后推,负数往前移动
		date = calendar.getTime(); // 这个时间就是日期往后推一天的结果
		String ztDate = formatter.format(date); // 昨天日期
		String dateString = "";// 运算日期
		/**
		 * 判定请求数据日期方法
		 */
		String drqsql = "select count(1) from t_mrzcjs where 1=1  and jstime ='"
				+ today + "'"; // 设定定日期sql
		BigInteger drql = dao.countBySql(drqsql);
		if (drql.equals(BigInteger.ZERO)) { // 今天收益资产未结算，数据请求日期设置为昨天
			dateString = ztDate;
		} else { // 今天收益资产结算后，数据请求日期设置为今天
			dateString = today;
		}

		String hql = " from Mrzcjs where 1=1 and jstime='" + dateString
				+ "' order by sjzsy+0 desc ";
		List<Mrzcjs> list = dao.find(hql);
		return list;
	}
	
	@Override
	public List<Mrzcjs> find(String hql, int page, int rows){
		return dao.find(hql, page, rows);
	}
	@Override
	public int count(String hql){
		return dao.count(hql).intValue();
	}
	@Override
	public int countBySql(String sql){
		return dao.countBySql(sql).intValue();
	}
	@Override
	public List<Object[]> findBySql(String sql, int page, int rows){
		return dao.findBySql(sql, page, rows);
	}

}
