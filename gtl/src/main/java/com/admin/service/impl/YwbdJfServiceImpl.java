package com.admin.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.YwbdJfDaoI;
import com.admin.model.YwbdJf;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.YwbdJfServiceI;

@Service
public class YwbdJfServiceImpl implements YwbdJfServiceI {

	@Autowired
	private YwbdJfDaoI ywbdJfDao;

	@Override
	public DataGrid dataGrid(YwbdJf ywbdJf, PageHelper ph) {
		DataGrid dg = new DataGrid();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from YwbdJf t ";
		List<YwbdJf> l = ywbdJfDao.find(hql + whereHql(ywbdJf, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		dg.setRows(l);
		dg.setTotal(ywbdJfDao.count(
				"select count(*) " + hql + whereHql(ywbdJf, params), params));
		return dg;
	}

	private String whereHql(YwbdJf ywbdJf, Map<String, Object> params) {
		String hql = "";
		if (ywbdJf != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(ywbdJf.getJfS())) {
				hql += " and t.jfS like :jfS";
				params.put("jfS", ywbdJf.getJfS());
			}
			if (StringUtils.isNotBlank(ywbdJf.getUserId())) {
				hql += " and t.userId = :userId";
				params.put("userId", ywbdJf.getUserId());
			}
			if (StringUtils.isNotBlank(ywbdJf.getTzgwId())) {
				hql += " and t.tzgwId = :tzgwId";
				params.put("tzgwId", ywbdJf.getTzgwId());
			}
			if (StringUtils.isNotBlank(ywbdJf.getMyd())) {
				hql += " and t.myd = :myd";
				params.put("myd", ywbdJf.getMyd());
			}
			if (StringUtils.isNotBlank(ywbdJf.getWzId())) {
				hql += " and t.wzId = :wzId";
				params.put("wzId", ywbdJf.getWzId());
			}
		}
		return hql;
	}

	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void add(YwbdJf ywbdJf) throws Exception {
		YwbdJf u = new YwbdJf();
		BeanUtils.copyProperties(ywbdJf, u);
		ywbdJfDao.save(ywbdJf);
	}

	@Override
	public YwbdJf get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		YwbdJf t = ywbdJfDao.get(
				"select distinct t from YwbdJf t where t.id = :id", params);
		return t;
	}

	@Override
	public YwbdJf getByReplyId(String wzId) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("wzId", wzId);
		YwbdJf t = ywbdJfDao.get(
				"select distinct t from YwbdJf t where t.wzId = :wzId", params);
		return t;
	}

	@Override
	public void edit(YwbdJf ywbdJf) throws Exception {
		ywbdJfDao.update(ywbdJf);
	}

	@Override
	public void delete(String id) {
		ywbdJfDao.delete(ywbdJfDao.get(YwbdJf.class, id));
	}

	@Override
	public List<YwbdJf> ywbdJfList() {
		List<YwbdJf> t = ywbdJfDao.find("from YwbdJf t ");
		return t;
	}

	@Override
	public List<YwbdJf> ywbdJfList(YwbdJf ywbdJf, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from YwbdJf t ";
		List<YwbdJf> l = ywbdJfDao.find(hql + whereHql(ywbdJf, params), params,
				Integer.valueOf(page), Integer.valueOf(rows));
		return l;
	}

	@Override
	public int getCount(YwbdJf ywbdJf) {
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = "select count(*) from YwbdJf t "
				+ whereHql(ywbdJf, params);
		return ywbdJfDao.count(hql, params).intValue();
	}

}
