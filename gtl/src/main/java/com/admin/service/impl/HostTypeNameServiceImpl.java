package com.admin.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.admin.dao.HostTypeDao;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.HostTypeNameService;
import com.web.entity.HostType;

@Service
public class HostTypeNameServiceImpl implements HostTypeNameService{

	@Autowired
	private HostTypeDao htd;
	
	@Override
	public void add(HostType hostType) throws Exception {
		htd.save(hostType);
		
	}

	@Override
	public DataGrid dataGrid(HostType hostType, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<HostType> lhm = new ArrayList<HostType>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from HostType t ";
		List<HostType> l = htd.find(hql + whereHql(hostType, params) + orderHql(ph),
				params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (HostType t : l) {
				HostType u = new HostType();
				BeanUtils.copyProperties(t, u);
				lhm.add(u);
			}
		}
		dg.setRows(lhm);
		dg.setTotal(htd.count("select count(*) " + hql + whereHql(hostType, params),
				params));
		return dg;
	}

	/**
	 * where条件封装
	 * @param hostType
	 * @param params
	 * @return
	 */
	private String whereHql(HostType hostType, Map<String, Object> params) {
		String hql = "";
		if (hostType != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(hostType.getHostTypeName())) {//直播间名称
				hql += " and t.hostTypeName like = :hostTypeName";
				params.put("hostTypeName", "%%" +hostType.getHostTypeName()+ "%%");
			}
			
			

		}
		return hql;
	}

	/**
	 * order封装
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void delete(String hostTypeId) throws Exception {
		htd.delete(htd.get(HostType.class, hostTypeId));
	}

	@Override
	public void update(HostType hostType) throws Exception {
		htd.update(hostType);
		
	}

	@Override
	public HostType get(String hostTypeId) throws Exception {
		return htd.get(HostType.class, hostTypeId);
	}

	@Override
	public List<HostType> getAllType() {
		String hql = " from HostType t ";
		List<HostType> list=new ArrayList<HostType>();
		list=htd.find(hql);
		if ((list != null )&& (list.size()>0)) {
			return list;
		}else{
		
			return null;
		}
	}

}
