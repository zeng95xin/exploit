package com.admin.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.WcpTcDaoI;
import com.admin.model.WcpTc;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.WcpTcServiceI;

@Service
public class WcpTcServiceImpl implements WcpTcServiceI {

	@Autowired
	private WcpTcDaoI wcpTcDao;

	@Override
	public DataGrid dataGrid(WcpTc wcpTc, PageHelper ph) {
		DataGrid dg = new DataGrid();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from WcpTc t ";
		List<WcpTc> l = wcpTcDao.find(hql + whereHql(wcpTc, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		dg.setRows(l);
		dg.setTotal(wcpTcDao.count(
				"select count(*) " + hql + whereHql(wcpTc, params), params));
		return dg;
	}

	private String whereHql(WcpTc wcpTc, Map<String, Object> params) {
		String hql = "";
		if (wcpTc != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(wcpTc.getGlfSq())) {
				hql += " and t.glfSq like :glfSq";
				params.put("glfSq", "%%" + wcpTc.getGlfSq() + "%%");
			}

			if (StringUtils.isNotBlank(wcpTc.getJyxz())) {
				hql += " and t.jyxz like :jyxz";
				params.put("jyxz", "%%" + wcpTc.getJyxz() + "%%");
			}

			if (StringUtils.isNotBlank(wcpTc.getTcBzj())) {
				hql += " and t.tcBzj = :tcBzj";
				params.put("tcBzj", wcpTc.getTcBzj());
			}
			if (StringUtils.isNotBlank(wcpTc.getTcKsJjx())) {
				hql += " and t.tcKsJjx like :tcKsJjx";
				params.put("tcKsJjx", "%%" + wcpTc.getTcKsJjx() + "%%");
			}
			if (StringUtils.isNotBlank(wcpTc.getTcKsPcx())) {
				hql += " and t.tcKsPcx like :tcKsPcx";
				params.put("tcKsPcx", "%%" + wcpTc.getTcKsPcx() + "%%");
			}

			if (StringUtils.isNotBlank(wcpTc.getTcName())) {
				hql += " and t.tcName like :tcName";
				params.put("tcName", "%%" + wcpTc.getTcName() + "%%");
			}

			if (StringUtils.isNotBlank(wcpTc.getTcNum())) {
				hql += " and t.tcNum like :tcNum";
				params.put("tcNum", "%%" + wcpTc.getTcNum() + "%%");
			}

			if (StringUtils.isNotBlank(wcpTc.getTcspje())) {
				hql += " and t.tcspje like :tcspje";
				params.put("tcspje", "%%" + wcpTc.getTcspje() + "%%");
			}

			if (StringUtils.isNotBlank(wcpTc.getZcKtSj())) {
				hql += " and t.zcKtSj like :zcKtSj";
				params.put("zcKtSj", "%%" + wcpTc.getZcKtSj() + "%%");
			}

			if (StringUtils.isNotBlank(wcpTc.getZjSyQx())) {
				hql += " and t.zjSyQx like :zjSyQx";
				params.put("zjSyQx", "%%" + wcpTc.getZjSyQx() + "%%");
			}
		}
		return hql;
	}

	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void add(WcpTc wcpTc) throws Exception {
		WcpTc u = new WcpTc();
		BeanUtils.copyProperties(wcpTc, u);
		wcpTcDao.save(wcpTc);
	}

	@Override
	public WcpTc get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		WcpTc t = wcpTcDao.get(
				"select distinct t from WcpTc t where t.id = :id", params);
		return t;
	}

	@Override
	public void edit(WcpTc wcpTc) throws Exception {
		wcpTcDao.update(wcpTc);
	}

	@Override
	public void delete(String id) {
		wcpTcDao.delete(wcpTcDao.get(WcpTc.class, id));
	}

	@Override
	public List<WcpTc> wcpTcList(String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		List<WcpTc> t = wcpTcDao.find("from WcpTc t ", Integer.valueOf(page),
				Integer.valueOf(rows));
		return t;
	}

	@Override
	public int getCount() {
		String hql = "select count(*) from WcpTc t";
		return wcpTcDao.count(hql).intValue();
	}

	@Override
	public List<WcpTc> wdwcpTcList(String userid, String page, String rows) {

		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		List<WcpTc> t = wcpTcDao.find("from WcpTc t where userid='" + userid
				+ "' ", Integer.valueOf(page), Integer.valueOf(rows));
		return t;
	}

}
