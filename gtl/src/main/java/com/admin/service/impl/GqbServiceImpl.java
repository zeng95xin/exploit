package com.admin.service.impl;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.GqbdzDaoI;
import com.admin.dao.RoleDaoI;
import com.admin.dao.UserDaoI;
import com.admin.dao.WebDaoI;
import com.admin.model.Jfxhjl;
import com.admin.model.LoginUser;
import com.admin.model.TczdXz;
import com.admin.model.Tgsdz;
import com.admin.model.Tgxt;
import com.admin.model.Tresource;
import com.admin.model.Trole;
import com.admin.model.Tuser;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.service.CzdServiceI;
import com.admin.service.GqbServiceI;
import com.admin.service.GxtServiceI;
import com.admin.service.JfxhjlfServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.UserServiceI;
import com.admin.service.WebServiceI;
import com.admin.util.MD5Util;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.web.entity.Person;
import com.web.util.PageModel;
import com.web.util.TimeUtils;

@Service
public class GqbServiceImpl implements GqbServiceI {

	@Autowired
	private GqbdzDaoI dao;

	@Autowired
	private LoginUserServiceI loginUserServiceI;

	@Autowired
	private CzdServiceI czdServiceI;

	@Autowired
	private JfxhjlfServiceI jfxhjlServiceI;

	@Override
	public DataGrid dataGridForOne(Tgsdz g, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Tgsdz> ul = new ArrayList<Tgsdz>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Tgsdz t ";
		List<Tgsdz> l = dao.findGqbdzOne(hql + whereHqlForOne(g, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Tgsdz t : l) {
				Tgsdz u = new Tgsdz();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count(
				"select count(*) " + hql + whereHqlForOne(g, params), params));
		return dg;
	}
	
	@Override
	public DataGrid dataGridForTwo(Tgsdz g, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Tgsdz> ul = new ArrayList<Tgsdz>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Tgsdz t where t.gqbzd = '1' or t.gqbzhuy = '2'";
		List<Tgsdz> l = dao.findGqbdzOne(hql + whereHqlForTwo(g, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Tgsdz t : l) {
				Tgsdz u = new Tgsdz();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count(
				"select count(*) " + hql + whereHqlForTwo(g, params), params));
		return dg;
	}


	@Override
	public DataGrid czdDataGridForOne(TczdXz g, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<TczdXz> ul = new ArrayList<TczdXz>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from TczdXz t ";
		List<TczdXz> l = dao.findGqbCzdOne(hql + whereCzdHqlForOne(g, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (TczdXz t : l) {
				TczdXz u = new TczdXz();
				String userid = t.getCzdxzid();
				LoginUser login = loginUserServiceI.getLoginUser(userid); // 用户信息
				if (login != null) {
					t.setUsername(login.getName());
					if (!login.getNickname().equals("")
							&& StringUtils.isNotBlank(login.getNickname())) {
						t.setNickname(login.getNickname());
					} else {
						t.setNickname("");
					}
					t.setUserType(login.getUsertype());
					t.setGrzjf(login.getJifen().toString());
				}
				// 猜涨跌平台积分累计情况
				String hql002 = "select SUM(xzjf+0) as xzjf,sum(IFNULL(fhjf,0)+0) as fhjf from t_czdxz t";
				Double ptjf = 0.0;
				String xzjf = "0";
				String fhjf = "0";
				List<Object[]> list = dao.findBySql(hql002);
				for (int i = 0; i < list.size(); i++) {
					Object[] ob = list.get(0);
					xzjf = ob[0].toString();
					fhjf = ob[1].toString();
				}

				ptjf = Double.parseDouble(xzjf) - Double.parseDouble(fhjf);
				if (ptjf < 0) {
					t.setPtzjf("-" + ptjf.toString());
				} else {
					t.setPtzjf("+" + ptjf.toString());
				}
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao
				.count("select count(*) " + hql + whereCzdHqlForOne(g, params),
						params));
		return dg;
	}

	/**
	 * where 条件封装
	 * 
	 * @param p
	 * @param params
	 * @return
	 */
	private String whereHqlForOne(Tgsdz g, Map<String, Object> params) {
		String hql = "";
		if (g != null) {
			hql += " where 1=1 and t.qublb = '" + g.getQublb() + "'";
			if (g.getDztitel() != null) {
				hql += " and t.dztitel like :dztitel";
				params.put("dztitel", "%%" + g.getDztitel() + "%%");
			}
			if (g.getTgname() != null) {
				hql += " and t.tgname =:tgname";
				params.put("tgname", g.getTgname());
			}

		}
		return hql;
	}
	
	private String whereHqlForTwo(Tgsdz g, Map<String, Object> params) {
		String hql = "";
		if (g != null) {
			
			if (g.getDztitel() != null) {
				hql += " and t.dztitel like :dztitel";
				params.put("dztitel", "%%" + g.getDztitel() + "%%");
			}
			if (g.getTgname() != null) {
				hql += " and t.tgname =:tgname";
				params.put("tgname", g.getTgname());
			}

		}
		return hql;
	}

	/**
	 * where 条件封装
	 * 
	 * @param p
	 * @param params
	 * @return
	 */
	private String whereCzdHqlForOne(TczdXz g, Map<String, Object> params) {
		String hql = "";
		String xzlx = "";
		if (g != null) {
			hql += " where 1=1 ";
			if (g.getCzdxzlx() != null) {
				if ("01".equals(g.getCzdxzlx())) {
					xzlx = "01";
				} else {
					xzlx = "02";
				}
				hql += " and t.czdxzlx like :czdxzlx";
				params.put("czdxzlx", "%%" + xzlx + "%%");
			}

		}
		return hql;
	}

	/**
	 * 排序条件
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void delete(String id) {
		dao.delete(dao.get(Tgsdz.class, id));
	}
	
	@Override
	public void deleteZY(String id) {
		Tgsdz tgs=dao.get(Tgsdz.class, id);
		if (tgs != null) {
			if (StringUtils.isNotBlank(tgs.getGqbzd()) && tgs.getGqbzd().equals("1")) {
				tgs.setGqbzd("");
			}
			if (StringUtils.isNotBlank(tgs.getGqbzhuy()) && tgs.getGqbzhuy().equals("2")) {
				tgs.setGqbzhuy("");
			}
			dao.update(tgs);
		}
		
	}

	@Override
	synchronized public void add(Tgsdz p) throws Exception {
		/*
		 * Map<String, Object> params = new HashMap<String, Object>();
		 * params.put("gxttitel", p.getGxttitel());
		 * 
		 * Tgsdz u = new Tgsdz(); BeanUtils.copyProperties(p, u);
		 * u.setGxttitel(p.getGxttitel()); u.setGxtfbz(p.getGxtfbz());
		 * u.setGxtfl(p.getGxtfl()); u.setGxtfbtime(p.getGxtfbtime());
		 * u.setGxtnr(p.getGxtnr());
		 */
		p.setId(UUID.randomUUID().toString());
		String tgid = p.getTgid();
		LoginUser tg = loginUserServiceI.getLoginUser(tgid);
		if (tg != null) {
			p.setTgname(tg.getNickname());
		} else {
			p.setTgname("");
		}
		p.setDzbzcs("0");
		p.setDzgmcs("0");
		p.setDzbtccs("0");
		p.setCztime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		dao.save(p);

	}

	/**
	 * 通过id获取段子实体类
	 */
	@Override
	public Tgsdz get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		Tgsdz t = dao.get("select distinct t from Tgsdz t  where t.id = :id",
				params);
		Tgsdz u = new Tgsdz();
		BeanUtils.copyProperties(t, u);
		return u;
	}

	@Override
	public Tgsdz getGqbdz(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		Tgsdz t = dao.get("select distinct t from Tgsdz t  where t.id = :id",
				params);
		/*
		 * Tgsdz u = new Tgsdz(); BeanUtils.copyProperties(t, u);
		 */
		return t;
	}

	@Override
	public List<Tgsdz> getList(String fl, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String hql = "from Tgsdz where 1=1 ";
		if (StringUtils.isNotBlank(fl)) {
			hql += " and qublb='" + fl + "' ";
		}
		hql += " order by gqbzd desc,dzfbtime desc";
		List<Tgsdz> list = dao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public void edit(Tgsdz p) throws Exception {
		if (StringUtils.isBlank(p.getId())) {
			p.setId(UUID.randomUUID().toString());
			p.setDzbzcs("0");
			p.setDzgmcs("0");
			p.setDzbtccs("0");
			p.setCztime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
			dao.save(p);
		} else {
			Tgsdz t = dao.get(Tgsdz.class, p.getId());
			t.setDztitel(p.getDztitel());
			t.setQublb(p.getQublb());
			t.setTgname(p.getTgname());
			t.setDzfbtime(p.getDzfbtime());
			t.setDzsqdj(p.getDzsqdj());
			t.setDzjfxh(p.getDzjfxh());
			t.setImages(p.getImages());
			t.setDznr(p.getDznr());
			t.setGqbzy(p.getGqbzy());
			t.setGqbzd(p.getGqbzd());
			t.setGqbzhuy(p.getGqbzhuy());
			dao.update(t);
		}
	}

	String[] excelHeader = { "标题", "分类", "内容", "发布者", "发布时间" };

	@Override
	public HSSFWorkbook export(List<Tgsdz> list) {
		HSSFWorkbook wb = new HSSFWorkbook();
		HSSFSheet sheet = wb.createSheet("Tgsdz");
		HSSFRow row = sheet.createRow((int) 0);
		HSSFCellStyle style = wb.createCellStyle();
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);

		for (int i = 0; i < excelHeader.length; i++) {
			HSSFCell cell = row.createCell(i);
			cell.setCellValue(excelHeader[i]);
			cell.setCellStyle(style);
			sheet.autoSizeColumn(i);
		}

		for (int i = 0; i < list.size(); i++) {
			row = sheet.createRow(i + 1);
			Tgsdz p = list.get(i);
			row.createCell(0).setCellValue(p.getDztitel());
			row.createCell(1).setCellValue(p.getTgname());
			row.createCell(2).setCellValue(p.getQublb());
			row.createCell(3).setCellValue(p.getDznr());
			row.createCell(4).setCellValue(p.getDzfbtime());

		}
		return wb;
	}

	@Override
	public List<TczdXz> getCzdList() {
		List<TczdXz> list = dao.getCzdList();
		return list;
	}

	@Override
	public void update(Tgsdz p) throws Exception {
		dao.update(p);
	}

	@Override
	public int getCount(String fl) {
		String hql = "select count(*) from Tgsdz where 1=1 ";
		if (StringUtils.isNotBlank(fl)) {
			hql += " and qublb='" + fl + "'";
		}
		return dao.count(hql).intValue();
	}

	/**
	 * 猜涨跌自动结算
	 */

	@Override
	public JSONObject czdjs() throws Exception {
		JSONObject json = new JSONObject();
		JSONArray arr = new JSONArray();
		// String timeTp = TimeUtils.getTime("yyyyMMdd")+"152900";
		String timeTp = TimeUtils.getTime("yyyyMMddHHmmss");
		TczdXz tczdXz = null;
		LoginUser loginUser = null;

		// List<TczdXz> czdList = gqbServiceI.getCzdList(); //获取猜涨跌下注list
		List<TczdXz> czdList = dao.getCzdList();// 获取猜涨跌下注list
		StringBuffer sb = new StringBuffer();
		if (czdList.size() > 0) {
			String timeTp02 = TimeUtils.getTime("yyyy-MM-dd") + " 09:00:00";
			String hql_1 = " select DISTINCT czdxzdm from t_czdXz where cdzt ='03' and xztime <='"
					+ timeTp02 + "'";
			List<Object[]> ccdmList = dao.findBySql(hql_1); // 获取持股数据zqdm
			if (ccdmList.size() > 0) {
				for (int m = 0; m < ccdmList.size(); m++) {
					Object cgdm01 = ccdmList.get(m);
					String cgdm = (String) cgdm01;
					sb.append(cgdm).append(",");
				}
			}
			String stocks = sb.toString();
			if (stocks.length() > 0) {
				stocks = stocks.substring(0, stocks.length() - 1); // 去除拼装StringBuffer的最后一个逗号
			}

			// 统一请求接口数据
			URL u = new URL(
					"http://route.showapi.com/131-46?showapi_appid=6127"
							+ "&showapi_timestamp="
							+ timeTp
							+ "&stocks="
							+ stocks
							+ "&needIndex=1&showapi_sign=a28416fd6ff14246b4783026128a6f83");
			InputStream in = u.openStream();
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			try {
				byte buf[] = new byte[1024];
				int read = 0;
				while ((read = in.read(buf)) > 0) {
					out.write(buf, 0, read);
				}
			} finally {
				if (in != null) {
					in.close();
				}
			}
			byte b[] = out.toByteArray();

			JSONObject jsonJg = JSON.parseObject(new String(b, "utf-8")); // 将json结果转换成jsonObject
			for (int k = 0; k < czdList.size(); k++) {
				JSONObject j = new JSONObject();
				tczdXz = (TczdXz) czdList.get(k);
				String xzlx = tczdXz.getCzdxzlx(); // 猜涨跌下注类型
				String ccd = tczdXz.getCcd(); // 猜涨点
				Integer xzjf = Integer.parseInt(tczdXz.getXzjf());
				String userid = tczdXz.getUserid();
				String code = tczdXz.getCzdxzdm(); // 下注代码
				loginUser = loginUserServiceI.getLoginUser(userid);
				Integer nowJf = loginUser.getJifen(); // 用户现有积分
				JSONObject showBody = jsonJg.getJSONObject("showapi_res_body"); // 获取到大盘指数结果集
				if ("01".equals(xzlx)) {// 猜测为大盘
					JSONArray indexList = showBody.getJSONArray("indexList"); // 获取大盘数组数据
					if (indexList.size() > 0) {
						for (int n = 0; n < indexList.size(); n++) {
							JSONObject jg_k = indexList.getJSONObject(n);
							if (jg_k.getString("code").equals(code)) {
								// String yestodayClosePrice =
								// jg_k.getString("yestodayClosePrice"); //
								// 昨天收盘价
								Double jrClosePrice = Double.parseDouble(jg_k
										.getString("nowPrice")); // 今日收盘价
								Double yestodayClosePrice = Double
										.parseDouble(jg_k
												.getString("yestodayClosePrice"));// 昨天收盘价
								Double czdf = jrClosePrice / yestodayClosePrice
										- 1; // 猜涨跌幅
								Double czdsx = czdf + 0.001; // 猜涨跌上线
								Double czdxx = czdf - 0.001; // 猜涨跌下线
								Double ds = Double.parseDouble(ccd) / 100; // 猜测点
								// Float wcz = ds-jrClosePrice; //误差值
								// if(Math.abs(wcz) >=0 ||Math.abs(wcz) <= 10){
								// //如果误差值在10个点之内算猜中
								if (ds >= czdxx && ds <= czdsx) { // 如果猜涨跌在涨跌幅正负1%之内算猜中
									// 更新猜涨跌数据（积分、状态）
									String jljf = String.valueOf(xzjf * 2);// 奖励积分
									tczdXz.setFhjf(jljf);
									tczdXz.setCdzt("01");// 猜测状态：//01 猜中，02
															// 未猜中，03 未结算
									czdServiceI.edit(tczdXz); // 更新猜涨跌列表

									Integer jsjf = nowJf
											+ Integer.parseInt(jljf); // 结算后积分
									loginUser.setJifen(jsjf);
									loginUserServiceI.saveScore(loginUser, "猜涨跌", null, "猜涨跌结算");
									loginUserServiceI.update(loginUser); // 更新用户积分
									
									Jfxhjl newJl = new Jfxhjl();
									newJl.setSl(jljf);// 积分消耗记录增加积分数量
									newJl.setUserid(userid);// //积分消耗记录userid
									newJl.setResaon("猜涨跌获取奖励");
									jfxhjlServiceI.add(newJl);
								} else {
									tczdXz.setFhjf("0");
									tczdXz.setCdzt("02");// 猜测状态：//01 猜中，02
															// 未猜中，03 未结算
									czdServiceI.edit(tczdXz);
								}
							}

						}
						j.put("userid", tczdXz.getId());
						j.put("username", loginUser.getName());
						j.put("code", code);
						arr.add(j);
					}

				} else if ("02".equals(xzlx)) {
					JSONArray list = showBody.getJSONArray("list"); // 获取个股数组数据
					if (list.size() > 0) {
						for (int m = 0; m < list.size(); m++) {
							JSONObject jg_m = list.getJSONObject(m);
							String subcode = code.substring(2, code.length());
							if (jg_m.getString("code").equals(subcode)) {
								/*
								 * String nowPrice =
								 * jg_m.getString("nowPrice");// 当前价格 String
								 * yestodayClosePrice =
								 * jg_m.getString("closePrice");// 昨日收盘价 Double
								 * newSpPrice = Double.parseDouble(nowPrice);
								 * Double yesSpPrice =
								 * Double.parseDouble(yestodayClosePrice);
								 * Double gwcz = (newSpPrice / yesSpPrice) - 1 ;
								 */
								Double gwcz = Double.parseDouble(jg_m
										.getString("diff_rate")) / 100;// 个股涨跌幅
								Double czdsx = gwcz + 0.001; // 猜涨跌上线
								Double czdxx = gwcz - 0.001; // 猜涨跌下线
								Double ds = Double.parseDouble(ccd) / 100; // 猜测点

								// if(Math.abs(gwcz)<=0.005 &&
								// Math.abs(gwcz)>=0){// 如果个股猜测涨幅指数在范围内
								if (ds >= czdxx && ds <= czdsx) {
									String jljf = String.valueOf(xzjf * 2);// 奖励积分
									tczdXz.setFhjf(jljf);
									tczdXz.setCdzt("01");// 猜测状态：//01 猜中，02
															// 未猜中，03 未结算
									czdServiceI.edit(tczdXz);
									Integer jsjf = nowJf
											+ Integer.parseInt(jljf); // 结算后积分
									loginUser.setJifen(jsjf);
									loginUserServiceI.saveScore(loginUser, "猜涨跌", null, "猜涨跌结算");
									loginUserServiceI.update(loginUser); // 更新用户积分
									Jfxhjl newJl = new Jfxhjl();
									newJl.setSl("+" + jljf);// 积分消耗记录增加积分数量
									newJl.setUserid(userid);// //积分消耗记录userid
									newJl.setResaon("猜涨跌获取奖励");
									jfxhjlServiceI.add(newJl);
								} else {
									tczdXz.setFhjf("0");
									tczdXz.setCdzt("02");// 猜测状态：//01 猜中，02
															// 未猜中，03 未结算
									czdServiceI.edit(tczdXz);
								}
							}
						}
						j.put("userid", tczdXz.getId());
						j.put("username", loginUser.getName());
						j.put("code", code);
						arr.add(j);
					}
				} else {
					j.put("errorMsg", "非法猜测选项");
					j.put("userid", tczdXz.getId());
					j.put("username", loginUser.getName());
					j.put("code", code);
					arr.add(j);

				}

			}
		}
		json.put("errorCode", "0");
		json.put("rows", arr);
		json.put("total", czdList.size());
		return json;
	}

	@Override
	public List<Tgsdz> getTop2() {
		String hql = "from Tgsdz where 1=1 ";
		hql += " order by dzfbtime desc";
		List<Tgsdz> list = dao.find(hql, 1, 2);
		return list;
	}

	@Override
	public List<Tgsdz> getZdList(String page, String rows) {
		// TODO Auto-generated method stub
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String hql = "from Tgsdz where 1=1 and gqbzd='zd' order by dzfbtime desc";

		List<Tgsdz> list = dao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public List<Tgsdz> getZhuyList(String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String hql = "from Tgsdz where 1=1 and gqbzhuy='zy' order by dzfbtime desc";

		List<Tgsdz> list = dao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}



	@Override
	public void saveVisit(Tgsdz p) throws Exception {
			Tgsdz t=dao.get(Tgsdz.class, p.getId());
			t.setVisitCount(p.getVisitCount());
			dao.update(t);
	}

	

	

	}

	
	



