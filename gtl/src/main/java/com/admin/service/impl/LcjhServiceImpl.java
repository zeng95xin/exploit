package com.admin.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.Column;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.LcjhDaoI;
import com.admin.model.Lcjh;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.LcjhServiceI;

@Service
public class LcjhServiceImpl implements LcjhServiceI {

	@Autowired
	private LcjhDaoI lcjhDao;

	@Override
	public DataGrid dataGrid(Lcjh lcjh, PageHelper ph) {
		DataGrid dg = new DataGrid();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Lcjh t ";
		List<Lcjh> l = lcjhDao.find(
				hql + whereHql(lcjh, params) + orderHql(ph), params,
				ph.getPage(), ph.getRows());
		dg.setRows(l);
		dg.setTotal(lcjhDao.count(
				"select count(*) " + hql + whereHql(lcjh, params), params));
		return dg;
	}

	private String whereHql(Lcjh lcjh, Map<String, Object> params) {
		String hql = "";
		if (lcjh != null) {
			hql += " where 1=1 ";
			// 计划标题 理财计划的名称
			if (StringUtils.isNotBlank(lcjh.getJhbt())) {
				hql += " and t.jhbt like :jhbt";
				params.put("jhbt", "%%" + lcjh.getJhbt() + "%%");
			}
			// 预计收益率 预计收益率百分比
			if (StringUtils.isNotBlank(lcjh.getYjsyl())) {
				hql += " and t.yjsyl like :yjsyl";
				params.put("yjsyl", "%%" + lcjh.getYjsyl() + "%%");
			}
			// 预计止损线 计划的预计最高损失度百分比
			if (StringUtils.isNotBlank(lcjh.getYjzsx())) {
				hql += " and t.yjzsx like :yjzsx";
				params.put("yjzsx", "%%" + lcjh.getYjzsx() + "%%");
			}
			// 服务费 理财顾问收取的服务费
			if (StringUtils.isNotBlank(lcjh.getFwf())) {
				hql += " and t.fwf like :fwf";
				params.put("fwf", "%%" + lcjh.getFwf() + "%%");
			}
			// 发售时间 理财计划预计开始销售的时间
			if (StringUtils.isNotBlank(lcjh.getFssj())) {
				hql += " and t.fssj like :fssj";
				params.put("fssj", "%%" + lcjh.getFssj() + "%%");
			}
			// 截止销售时间 理财计划预计截止销售的时间
			if (StringUtils.isNotBlank(lcjh.getJzsssj())) {
				hql += " and t.jzsssj like :jzsssj";
				params.put("jzsssj", "%%" + lcjh.getJzsssj() + "%%");
			}
			// 计划简介 理财计划的详细介绍
			if (StringUtils.isNotBlank(lcjh.getJhjj())) {
				hql += " and t.jhjj like :jhjj";
				params.put("jhjj", "%%" + lcjh.getJhjj() + "%%");
			}
			// 发起人ID 投资顾问的ID号
			if (StringUtils.isNotBlank(lcjh.getUserId())) {
				hql += " and t.userId like :userId";
				params.put("userId", "%%" + lcjh.getJhjj() + "%%");
			}
			// 发起人昵称 投资顾问的昵称
			if (StringUtils.isNotBlank(lcjh.getUserName())) {
				hql += " and t.userName like :userName";
				params.put("userName", "%%" + lcjh.getUserName() + "%%");
			}
			// 申请单据状态 等待审核、等待发售、售完执行、完结
			if (StringUtils.isNotBlank(lcjh.getState())) {
				hql += " and t.state like :state";
				params.put("state", "%%" + lcjh.getState() + "%%");
			}
			// 申请单结束状态 成功、失败
			if (StringUtils.isNotBlank(lcjh.getStatus())) {
				hql += " and t.status like :status";
				params.put("status", "%%" + lcjh.getStatus() + "%%");
			}
			// 计划完结日期
			if (StringUtils.isNotBlank(lcjh.getJhwjrq())) {
				hql += " and t.jhwjrq like :jhwjrq";
				params.put("jhwjrq", "%%" + lcjh.getJhwjrq() + "%%");
			}
			// 计划启动时间
			if (StringUtils.isNotBlank(lcjh.getJhwjrq())) {
				hql += " and t.jhqdsj like :jhqdsj";
				params.put("jhqdsj", "%%" + lcjh.getJhwjrq() + "%%");
			}
		}
		return hql;
	}

	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void add(Lcjh lcjh) throws Exception {
		Lcjh u = new Lcjh();
		BeanUtils.copyProperties(lcjh, u);
		lcjhDao.save(lcjh);
	}

	@Override
	public Lcjh get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		Lcjh t = lcjhDao.get("select distinct t from Lcjh t where t.id = :id",
				params);
		return t;
	}

	@Override
	public void edit(Lcjh lcjh) throws Exception {
		lcjhDao.update(lcjh);
	}

	@Override
	public void delete(String id) {
		lcjhDao.delete(lcjhDao.get(Lcjh.class, id));
	}

	@Override
	public List<Lcjh> lcjhList() {
		List<Lcjh> t = lcjhDao.find("from Lcjh t ");
		return t;
	}

	@Override
	public List<Lcjh> lcjhList(Lcjh lcjh, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Lcjh t ";
		List<Lcjh> l = lcjhDao.find(hql + whereHql(lcjh, params)
				+ " order by t.fssj desc", params, Integer.valueOf(page),
				Integer.valueOf(rows));
		return l;
	}

	@Override
	public int getCount(Lcjh lcjh) {
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = "select count(*) from Lcjh t " + whereHql(lcjh, params);
		return lcjhDao.count(hql, params).intValue();
	}

}
