package com.admin.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.AdDaoI;
import com.admin.dao.LoginUserDaoI;
import com.admin.dao.PinglunDaoI;
import com.admin.dao.PinglunbDaoI;
import com.admin.dao.RoleDaoI;
import com.admin.dao.UserDaoI;
import com.admin.dao.WarnDaoI;
import com.admin.model.Ad;
import com.admin.model.LoginUser;
import com.admin.model.Tpinglunb;
import com.admin.model.Tresource;
import com.admin.model.Trole;
import com.admin.model.Tuser;
import com.admin.model.Warn;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.service.AdServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.PinglunServiceI;
import com.admin.service.PinglunbServiceI;
import com.admin.service.UserServiceI;
import com.admin.util.MD5Util;
import com.web.entity.Person;
import com.web.util.PageModel;
import com.web.util.TimeUtils;

@Service
public class PinglunbServiceImpl implements PinglunbServiceI {

	@Autowired
	private PinglunbDaoI dao;

	@Autowired
	private LoginUserDaoI loginUserDaoI;

	@Autowired
	private WarnDaoI warnDaoI;

	/**
	 * 获取被举报的评论
	 */
	@Override
	public DataGrid dataGrid(Tpinglunb tpl, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Tpinglunb> ul = new ArrayList<Tpinglunb>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Tpinglunb t ";
		List<Tpinglunb> l = dao.find(
				hql + whereHql(tpl, params) + orderHql(ph), params,
				ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Tpinglunb t : l) {
				Tpinglunb u = new Tpinglunb();
				BeanUtils.copyProperties(t, u);
				String userid = u.getUserid();
				String nickname = loginUserDaoI.get(LoginUser.class, userid)
						.getNickname();
				u.setUserid(nickname);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count("select count(*) " + hql + whereHql(tpl, params),
				params));
		return dg;
	}

	/**
	 * where条件封装
	 * 
	 * @param ad
	 * @param params
	 * @return
	 */
	private String whereHql(Tpinglunb tpl, Map<String, Object> params) {
		String hql = "";
		if (tpl != null) {
			hql += " where t.status='1' ";
			if (tpl.getContent() != null) {
				hql += " and t.content = :content";
				params.put("content", tpl.getContent());
			}

		}
		return hql;
	}

	/**
	 * order封装
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	/**
	 * 新增评论
	 */
	@Override
	public void add(Tpinglunb tpl) throws Exception {
		tpl.setId(UUID.randomUUID().toString());
		tpl.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		tpl.setStatus("0");
		tpl.setZan("0");
		tpl.setTucao("0");
		dao.save(tpl);
	}

	/**
	 * 删除评论
	 */
	@Override
	public void delete(String id) throws Exception {
		Tpinglunb tpl = dao.get(Tpinglunb.class, id);
		dao.delete(tpl);
	}

	@Override
	public List<Tpinglunb> getList(String plid, String page, String rows)
			throws Exception {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		/*String hql = " from Tpinglunb where plid='" + plid
				+ "' order by time asc";*/
		/*2016/6/15 16:46修改的评论数量*/
		String hql = " from Tpinglunb where id='" + plid
				+ "' order by time asc";
		List<Tpinglunb> list = dao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	/**
	 * 举报
	 */
	@Override
	public void update(Tpinglunb t) throws Exception {
		String id = t.getId();
		Tpinglunb tpl = dao.get(Tpinglunb.class, id);
		tpl.setStatus("1");
		/*
		 * String jbr=tpl.getJbr(); if(jbr!=null){
		 * tpl.setJbr(jbr+";"+t.getJbr());
		 * tpl.setJbrid(tpl.getJbrid()+";"+t.getJbrid()); }else{
		 * tpl.setJbr(t.getJbr()); tpl.setJbrid(t.getJbrid()); }
		 */

		dao.update(tpl);
	}

	@Override
	public void update1(Tpinglunb t) throws Exception {
		dao.update(t);
	}

	/**
	 * 跳过
	 */
	@Override
	public void tg(String id) throws Exception {
		Tpinglunb tpl = dao.get(Tpinglunb.class, id);
		tpl.setStatus("0");
		dao.update(tpl);
	}

	@Override
	public Tpinglunb get(String id) throws Exception {
		return dao.get(Tpinglunb.class, id);
	}

	/**
	 * 举报处理记录
	 */
	@Override
	public DataGrid dataGrid1(Tpinglunb tpl, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Tpinglunb> ul = new ArrayList<Tpinglunb>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Tpinglunb t ";
		List<Tpinglunb> l = dao.find(hql + whereHql1(tpl, params)
				+ orderHql1(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Tpinglunb t : l) {
				Tpinglunb u = new Tpinglunb();
				BeanUtils.copyProperties(t, u);
				String userid = u.getUserid();
				String nickname = loginUserDaoI.get(LoginUser.class, userid)
						.getNickname();
				u.setUserid(nickname);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count(
				"select count(*) " + hql + whereHql1(tpl, params), params));
		return dg;
	}

	/**
	 * where条件封装
	 * 
	 * @param ad
	 * @param params
	 * @return
	 */
	private String whereHql1(Tpinglunb tpl, Map<String, Object> params) {
		String hql = "";
		if (tpl != null) {
			hql += " where t.status !='0' ";
			if (StringUtils.isNotBlank(tpl.getStatus())) {
				hql += " and t.status = :status";
				params.put("status", tpl.getStatus());
			}

		}
		return hql;
	}

	/**
	 * order封装
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql1(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	/**
	 * 屏蔽所有的发言
	 */
	@Override
	public void pb(String userid) throws Exception {
		String hql = " from Tpinglunb where userid='" + userid + "'";
		List<Tpinglunb> list = dao.find(hql);
		for (int i = 0; i < list.size(); i++) {
			Tpinglunb t = list.get(i);
			t.setStatus("6");
			dao.update(t);
		}
	}

	/**
	 * 封号
	 */
	@Override
	public void fh(String userid) throws Exception {
		LoginUser user = loginUserDaoI.get(LoginUser.class, userid);
		user.setStatus("0");
		loginUserDaoI.update(user);
	}

	@Override
	public void jg(String userid, String title, String content)
			throws Exception {
		Warn w = new Warn();
		w.setId(UUID.randomUUID().toString());
		w.setTitle(title);
		w.setContent(content);
		w.setUserid(userid);
		w.setStatus("0");
		w.setAddtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		warnDaoI.save(w);
	}

	@Override
	public int getCount(String plid) {
		String hql = "select count(*) from Tpinglunb where plid='" + plid + "'";
		return dao.count(hql).intValue();
	}

}
