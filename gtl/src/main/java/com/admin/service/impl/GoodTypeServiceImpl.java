package com.admin.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.GoodTypeDao;
import com.admin.model.GoodType;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.GoodTypeService;

@Service
public class GoodTypeServiceImpl implements GoodTypeService{
	
	@Autowired
	private GoodTypeDao goodTypeDao;

	@Override
	public void add(GoodType gy) throws Exception {
		goodTypeDao.save(gy);
	}

	@Override
	public GoodType get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		GoodType gy=goodTypeDao.get("select distinct t from GoodType t  where t.id = :id", params);
		return gy;
	}

	@Override
	public void edit(GoodType gy) throws Exception {
		goodTypeDao.update(gy);
		
	}

	@Override
	public List<GoodType> getAllList() {
		List<GoodType> lgy=new ArrayList<GoodType>();
		
		String hql = "from GoodType t where 1 = 1";
		lgy=goodTypeDao.find(hql);
		return lgy;
	}

	@Override
	public DataGrid dataGridForOne(GoodType gy, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<GoodType> pl = new ArrayList<GoodType>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from GoodType t ";
		List<GoodType> l = goodTypeDao.find(hql + whereHql(gy, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());;
		if (l != null && l.size() > 0) {
			for (GoodType t : l) {
				GoodType u = new GoodType();
				BeanUtils.copyProperties(t, u);
				pl.add(u);
			}
		}
		dg.setRows(pl);
		dg.setTotal(goodTypeDao.count(
				"select count(*) " + hql + whereHql(gy, params), params));
		return dg;
	}
	
	/**
	 * order条件封装
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}
	
	/**
	 * where条件封装
	 * 
	 * @param p
	 * @param params
	 * @return
	 */
	private String whereHql(GoodType gy, Map<String, Object> params) {
		String hql = "";
		if (gy != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(gy.getTypeName())) {
				hql += " and t.typeName like :typeName";
				params.put("typeName", "%%" + gy.getTypeName() + "%%");
			}
		}
		return hql;
	}

	@Override
	public void delete(String id) {
		GoodType gy=goodTypeDao.get(GoodType.class, id);
		goodTypeDao.delete(gy);
		
	}

}
