package com.web.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.Log;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.Json;
import com.admin.pageModel.PageHelper;
import com.admin.service.ChestBoxBuyService;
import com.admin.service.ChestBoxService;
import com.admin.service.ChestBoxTypeService;
import com.admin.service.LogServiceI;
import com.admin.util.InfoUtil;
import com.web.entity.ChestBox;
import com.web.entity.ChestBoxIsBuy;
import com.web.entity.ChestBoxType;
import com.web.exception.BusinessDealException;
import com.web.exception.BusinessValidateException;
import com.web.exception.CodeEnum;
import com.web.exception.PatternException;
import com.web.result.BaseListResult;
import com.web.result.BaseObjectResult;
import com.web.util.TimeUtils;

/**
 * 百宝箱分类管理
 * @author Administrator
 *
 */
@Controller
@RequestMapping("/chestBoxType")
public class ChestBoxTypeController {

	private static final Logger logger = LoggerFactory.getLogger(ChestBoxTypeController.class);
	
	@Autowired
	private LogServiceI logService;
	
	@Autowired
	private ChestBoxTypeService chestBoxTypeService;
	
	@Autowired
	private ChestBoxService chestBoxService;
	
	@Autowired
	private ChestBoxBuyService chestBoxBuyService;
	
	/**
	 * 百宝箱分类管理
	 * @return
	 */
	@RequestMapping("/manager")
	public String manager() {
		return "/admin/chestBox/ChestBoxTypeManagement";
	}
	
	/**
	 * 获取百宝箱分类列表
	 * 
	 * @param p
	 * @param ph
	 * @return
	 */
	@RequestMapping("/dataGrid")
	@ResponseBody
	public DataGrid dataGrid(ChestBoxType p, PageHelper ph) {
		return chestBoxTypeService.dataGrid(p, ph);

	}
	
	/**
	 * 跳转到百宝箱分类添加页面
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/addPage")
	public String addPage(HttpServletRequest request) {
		ChestBoxType ppr=new ChestBoxType();
		ppr.setTypeID(UUID.randomUUID().toString());
		request.setAttribute("ChestBoxType", ppr);
		return "/admin/chestBox/ChestBoxTypeAdd";
	}

	/**
	 * 添加百宝箱分类
	 * 
	 * @param partner
	 * @return
	 */
	@RequestMapping("/add")
	@ResponseBody
	public Json add(ChestBoxType gy) {
		Json j = new Json();
		try {
			chestBoxTypeService.add(gy);
		} catch (Exception e) {
			e.printStackTrace();
		}
		j.setSuccess(true);
		j.setMsg("添加成功！");
		return j;
	}

	/**
	 * 跳转到主播分类编辑页面
	 * 
	 * @param request
	 * @param id
	 * @return
	 */
	@RequestMapping("/editPage")
	public String editPage(HttpServletRequest request, String id) {
		ChestBoxType gy;
		try {
			gy = chestBoxTypeService.get(id);
			request.setAttribute("ChestBoxType", gy);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "/admin/chestBox/ChestBoxTypeEdit";
	}

	/**
	 * 百宝箱分类修改
	 * 
	 * @param request
	 * @param session
	 * @param partner
	 * @return
	 */
	@RequestMapping("/edit")
	@ResponseBody
	public Json edit(HttpServletRequest request, HttpSession session,
			ChestBoxType gy) {
		Json j = new Json();
		try {
			chestBoxTypeService.update(gy);;
			Log log = new Log();
			log.setType("update");// 操作描述
			log.setAuthor(InfoUtil.getUser(session));// 操作员
			log.setIp(InfoUtil.getIpAddr(request));// ip
			log.setTteble("ChestBoxType");// 操作的表
			log.setTid(gy.getTypeID());// 操作的ID
			log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
			logService.add(log);
		} catch (Exception e) {
			e.printStackTrace();
		}
		j.setSuccess(true);
		j.setMsg("编辑成功！");
		return j;
	}

	/**
	 * 删除分类
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/delete")
	@ResponseBody
	public Json delete(String id) {
		Json j = new Json();
		try {
			chestBoxTypeService.delete(id);
		} catch (Exception e) {
			e.printStackTrace();
		}
		j.setMsg("删除成功！");
		j.setSuccess(true);
		return j;
	}

	/**
	 * 批量删除
	 * 
	 * @param ids
	 * @param session
	 * @return
	 */
	@RequestMapping("/batchDelete")
	@ResponseBody
	public Json batchDelete(String ids, HttpSession session) {
		Json j = new Json();
		if (ids != null && ids.length() > 0) {
			for (String id : ids.split(",")) {
				if (id != null) {
					this.delete(id);
				}
			}
		}
		j.setMsg("批量删除成功！");
		j.setSuccess(true);
		return j;
	}
	
	/**
	 * 获取百宝箱所有分类
	 * @param req
	 * @return
	 */
	@RequestMapping(value = "/allType", method ={RequestMethod.GET , RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<ChestBoxType> getAllType(HttpServletRequest req,HttpServletResponse res) {

		logger.info("获取全部分类: {}");
		res.setCharacterEncoding("UTF-8");
		BaseListResult<ChestBoxType> baseResult = new BaseListResult<ChestBoxType>();
		List<ChestBoxType> listType=new ArrayList<ChestBoxType>();
		try {
			listType=chestBoxTypeService.getAll();
			if (listType!=null && listType.size()>0) {
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("查询成功");
				baseResult.setResult(listType);
			} else {
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("没有百宝箱分类");
				baseResult.setResult(listType);
			}
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<ChestBoxType>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxType>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxType>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxType>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}
	
	/**
	 * 根据类型ID查询对应的百宝箱
	 * @param req
	 * @param typeId 为空则查询所有百宝箱
	 * @return
	 */
	@RequestMapping(value = "/type", method ={RequestMethod.GET , RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<ChestBoxIsBuy> getByType(HttpServletRequest req,HttpServletResponse res,
			String typeId,String userId) {

		logger.info("根据分类ID获取对应的百宝箱: {}",typeId);
		res.setCharacterEncoding("UTF-8");
		BaseListResult<ChestBoxIsBuy> baseResult = new BaseListResult<ChestBoxIsBuy>();
		List<ChestBoxIsBuy> list=new ArrayList<ChestBoxIsBuy>();
		List<ChestBox> listType=new ArrayList<ChestBox>();
		try {
			if (StringUtils.isBlank(typeId)) {
				throw new PatternException("分类ID不能为空");
			}
			listType=chestBoxTypeService.getByType(typeId);
			if (StringUtils.isNotBlank(userId)) {
				if (listType!=null && listType.size()>0) {
					
					for (ChestBox chestBox : listType) {
						ChestBoxIsBuy cbib=new ChestBoxIsBuy();
						boolean flag=false;
						if (chestBox != null && StringUtils.isNotBlank(chestBox.getBoxID())) {
							BeanUtils.copyProperties(chestBox, cbib);
							flag=chestBoxBuyService.checkBuyer(chestBox.getBoxID(), userId);
							if (flag) {
								cbib.setIsBuy("1");
							} else {
								cbib.setIsBuy("0");
							}
							list.add(cbib);
						} else {
							continue;
						}
					}
				}
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("查询成功");
				baseResult.setResult(list);
			} else {
				if (listType!=null && listType.size()>0) {
					
					for (ChestBox chestBox : listType) {
						ChestBoxIsBuy cbib=new ChestBoxIsBuy();
						if (chestBox != null && StringUtils.isNotBlank(chestBox.getBoxID())) {
							BeanUtils.copyProperties(chestBox, cbib);
							list.add(cbib);
						} else {
							continue;
						}
					}
				}
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("查询成功");
				baseResult.setResult(list);
			}
			
			
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<ChestBoxIsBuy>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxIsBuy>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxIsBuy>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxIsBuy>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}
}
