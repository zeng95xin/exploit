package com.web.controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.controller.BaseController;
import com.admin.model.TPayOrder;
import com.admin.service.AppPayServiceI;
import com.admin.util.InfoUtil;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.lcjh.biz.PayBiz;
import com.pingplusplus.Pingpp;
import com.pingplusplus.model.Charge;
import com.web.entity.WebhooksModel;
import com.web.exception.BusinessDealException;
import com.web.exception.BusinessValidateException;
import com.web.exception.CodeEnum;
import com.web.exception.PatternException;
import com.web.result.BaseObjectResult;
import com.web.result.BaseResult;
import com.web.result.CreateOrder;
import com.web.util.IDUtils;

/**
 * 支付controller
 * 
 * @author Administrator
 */
@Controller
@RequestMapping("/api/pay")
public class AppPayController extends BaseController {
	/*
	 * private static final String pingppAppId = "app_iz1OG84inLq5q1SC"; private
	 * static final String pingppApiKey = "sk_test_LaP8qL4GGqD4mvD0uHmTKavL";
	 */
	private static final String pingppAppId = "app_iz1OG84inLq5q1SC";
	private static final String pingppApiKey = "sk_live_anfzLSbDO8CC0yHuPGyfvvXP";
	
	@Autowired private AppPayServiceI appPayServiceI;
	@Autowired private PayBiz payBiz;

	/**
	 * 创建订单
	 * 
	 * @return
	 */
	@RequestMapping(value = "/creatOrder", method = RequestMethod.POST, produces = { MediaType.APPLICATION_JSON_VALUE })
	public @ResponseBody
	BaseObjectResult<CreateOrder> creatOrder(HttpServletRequest req,
			String userid, Long integralCount, String orderType) {
		BaseObjectResult<CreateOrder> baseResult = new BaseObjectResult<CreateOrder>(
				"SUCCESS", "创建订单成功");
		try {
			// 参数校验
			if (StringUtils.isBlank(userid)) {
				throw new PatternException("用户Id不能为空");
			}
			if (null == integralCount) {
				throw new PatternException("购买数量不能为空");
			}
			if (!("ADD_INTEGRAL".equals(orderType) || "BUY_COMMODITY"
					.equals(orderType))) {
				throw new PatternException("未知的支付类型");
			}
			// 生成订单id
			String orderId = IDUtils.getInstanse().getUID();
			TPayOrder order = new TPayOrder();
			order.setUserid(userid);
			order.setOrderId(orderId);
			order.setOrderType(orderType);
			order.setPayStatus("NOT_PAY");// 创建订单默认未支付
											// ，支付状态(ALREADY_PAY--已支付，NOT_PAY---未支付)
			if ("ADD_INTEGRAL".equals(orderType)) {
				order.setPayDirections("充值积分，数量：" + integralCount);
			}
			if ("BUY_COMMODITY".equals(orderType)) {
				order.setPayDirections("购买商品，数量：" + integralCount);
			}
			order.setIntegralCount(integralCount);
			order.setRawAddTime(new Date());
			appPayServiceI.add(order);
			// 返回值设置
			CreateOrder result = new CreateOrder();
			// Entity转换成Entity
			BeanUtils.copyProperties(order, result);
			baseResult.setResult(result);
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<CreateOrder>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<CreateOrder>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<CreateOrder>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<CreateOrder>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}

	/**
	 * 选择渠道返回凭据
	 * 
	 * @return
	 */
	@RequestMapping(value = "/surePay", method = RequestMethod.POST, produces = { MediaType.APPLICATION_JSON_VALUE })
	public @ResponseBody
	BaseObjectResult<Charge> surePay(HttpServletRequest req, String userid,
			String orderId, Long payMoney, String channel, String result_url) {
		BaseObjectResult<Charge> baseResult = new BaseObjectResult<Charge>(
				"SUCCESS", "返回凭据成功");
		try {
			synchronized (this) {
				// 参数校验
				if (StringUtils.isBlank(userid)) {
					throw new PatternException("用户Id不能为空");
				}
				if (StringUtils.isBlank(orderId)) {
					throw new PatternException("订单ID不能为空");
				}
				TPayOrder order = appPayServiceI.get(orderId);
				if (null == order) {
					throw new PatternException("订单不存在");
				}
				// 判断支付渠道是否为ping++已开通的那些渠道标识
				// if(! ( "alipay".equals(channel) || "wx".equals(channel) ||
				// "upacp".equals(channel) || "upmp".equals(channel) )){
				// throw new BusinessValidateException("未开通的支付渠道");
				// }
				// 查询当前订单是否是属于当前这个人的
				if (!order.getUserid().equals(userid)) {
					throw new BusinessValidateException("这个订单不是你的，异常操作");
				}
				if (null == payMoney) {
					throw new PatternException("支付金额不能为空");
				}
				// 判断该订单是否已经支付过的
				if ("ALREADY_PAY".equals(order.getPayStatus())) {
					throw new BusinessValidateException("该订单已经支付过");
				}
				// 判断是否重复支付(在点击确认支付的时候 数据更新了数据库 chargeid字段的值，
				// 所以可以根据判断这个来确定是否重复点击)
				if (StringUtils.isNotBlank(order.getChargeId())) {
					throw new BusinessValidateException("重复点击支付");
				}
				// 比较传入的金额是否匹配(如果有对应的商品价格表和积分价格表 可以不由前端传金额)
				// 1.为充值积分的比对
				if ("ADD_INTEGRAL".equals(order.getOrderType())) {
					if (!payMoney.equals(order.getIntegralCount())) {
						throw new PatternException("金额与充值积分不符合");
					}
				}
				// 2.为购买商品的比对
				if ("BUY_COMMODITY".equals(order.getOrderType())) {
					// TODO
					// 与 购买数量order.getIntegralCount() * 单个商品价格 比对 ， 订单表加字段商品ID
					// 通过id查询单价
				}
				String clinetIp = InfoUtil.getIpAddr(req);// 客服端IP
				Pingpp.apiKey = pingppApiKey;
				Map<String, Object> chargeParams = new HashMap<String, Object>();
				chargeParams.put("order_no", orderId);
				chargeParams.put("amount", payMoney);
				Map<String, String> app = new HashMap<String, String>();
				app.put("id", pingppAppId);
				chargeParams.put("app", app);
				chargeParams.put("channel", channel);
				chargeParams.put("currency", "cny");
				chargeParams.put("client_ip", clinetIp);
				if ("ADD_INTEGRAL".equals(order.getOrderType())) {
					chargeParams.put("subject",
							"积分充值,数量：" + order.getIntegralCount());
					chargeParams.put("body", "APP积分充值");
				}
				if ("BUY_COMMODITY".equals(order.getOrderType())) {
					chargeParams.put("subject",
							"购买商品,数量：" + order.getIntegralCount());
					chargeParams.put("body", "APP购买商品");
				}
				if (StringUtils.isNotBlank(result_url)) {
					Map<String, String> extra = new HashMap<String, String>();
					extra.put("result_url", result_url);
					chargeParams.put("extra", extra);
				}
				Charge ch = Charge.create(chargeParams);

				// 给该订单 ‘ping++支付查询id‘ 赋值 支付渠道也赋值
				order.setChargeId(ch.getId());
				order.setPayChannel(channel);
				appPayServiceI.update(order);
				baseResult.setResult(ch);
			}
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<Charge>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<Charge>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<Charge>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (com.pingplusplus.exception.InvalidRequestException e) {
			//System.out.println("ping++验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<Charge>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<Charge>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}

	/**
	 * ping++查询订单支付状态--如果支付成功更新积分等操作
	 * 
	 * @return
	 */
	@RequestMapping(value = "/inquirePingddOrder", method = RequestMethod.POST, produces = { MediaType.APPLICATION_JSON_VALUE })
	public @ResponseBody
	BaseResult inquirePingddOrder(HttpServletRequest req, String chId,
			String orderId) {
		BaseResult baseResult = new BaseResult("SUSSEC", "支付成功");
		try {
			// 参数校验
			if (StringUtils.isBlank(chId)) {
				throw new PatternException("chID不能为空");
			}
			Pingpp.apiKey = pingppApiKey;
			Charge ch = Charge.retrieve(chId);
			if (null == ch) {
				throw new BusinessValidateException("订单查询失败");
			}
			//System.out.println("查询ping++结果：" + JSON.toJSONString(ch));
			// 比对订单id符合
			if (!ch.getOrderNo().equals(orderId)) {
				throw new BusinessValidateException("订单id不符合");
			}
			if (!ch.getPaid()) {
				throw new BusinessValidateException("订单支付还未成功");
			}
			// 支付成功的操作

			// 1根据订单id查询订单表订单详情
			TPayOrder order = appPayServiceI.get(orderId);
			if (null == order) {
				throw new BusinessValidateException("订单不存在");
			}
			// 未付款
			if ("NOT_PAY".equals(order.getPayStatus())) {
				// 获取真实支付金额单位分
				order.setPayMoney(Long.valueOf(ch.getAmount()));// 实际支付金额
				appPayServiceI.payProcess(order);
			}
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseResult(CodeEnum.PATTERN_ERROR.getCode(),
					e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseResult(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseResult(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseResult(CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}

	/**
	 * 接收 Webhooks 通知
	 */
	@RequestMapping(value = "/webhooks", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = { MediaType.APPLICATION_JSON_VALUE })
	public void webhooks(HttpServletRequest req, HttpServletResponse response) {
		response.setCharacterEncoding("utf-8");
		try {
			// 获取webhooks通知body JSON数据
			BufferedReader br = req.getReader();
			String inputLine;
			String bodyString = "";
			while ((inputLine = br.readLine()) != null) {
				bodyString += inputLine;
			}
			br.close();
			//System.out.println("webhooks入参数 bodyString：" + bodyString);
			// 将获取到的通知转为实体
			WebhooksModel webhook = JSONObject.parseObject(bodyString,
					WebhooksModel.class);
			String orderId = webhook.getData().getObject().getOrder_no();// 订单id
			String chid = webhook.getData().getObject().getId();// chid
			if ("charge.succeeded".equals(webhook.getType())) {// 如果为支付成功通知
				// 判断是否已经支付
				TPayOrder order = appPayServiceI.get(orderId);
				if (null == order) {
					//System.out.println("平台不存在的订单id ，orderId：" + orderId);
					Map<String, Object> dataMap = new HashMap<String, Object>();
					dataMap.put("data", "不存在的订单");
					dataMap.put("code", "200");
					String callbackJSON = JSON.toJSONString(dataMap).toString();
					response.getWriter().write(callbackJSON);
					return;
				}
				// 已经处理过加积分 返回状态码200
				if ("ALREADY_PAY".equals(order.getPayStatus())) {
					//System.out.println("平台已处理过加积分的订单 ，orderId：" + orderId);
					Map<String, Object> dataMap = new HashMap<String, Object>();
					dataMap.put("data", "已处理过的订单");
					dataMap.put("code", "200");
					String callbackJSON = JSON.toJSONString(dataMap).toString();
					response.getWriter().write(callbackJSON);
					return;
				}
				// 未付款
				if (null != order && "NOT_PAY".equals(order.getPayStatus())) {
					// 内部调用ping++判断是否支付没
					Pingpp.apiKey = pingppApiKey;
					Charge ch = Charge.retrieve(chid);
					//System.out.println("webhooks 查询ping++结果：" + JSON.toJSONString(ch));
					// 如果支付成功了
					if (null != ch && ch.getPaid()) {
						// 获取真实支付金额单位分
						order.setPayMoney(Long.valueOf(ch.getAmount()));// 实际支付金额
						// 执行添加积分等业务
						
						if(StringUtils.isNotBlank(order.getOtherOrderId())){
							payBiz.paySuccess(order);
						}else{
							appPayServiceI.payProcess(order);
						}

						// 返回及其日志
						//System.out.println("平台处理加积分成功  ，orderId：" + orderId);
						Map<String, Object> dataMap = new HashMap<String, Object>();
						dataMap.put("data", "处理成功， 订单id:" + orderId);
						dataMap.put("code", "200");
						String callbackJSON = JSON.toJSONString(dataMap)
								.toString();
						response.getWriter().write(callbackJSON);
						return;
					}
				}
			}
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
		} catch (IOException e) {
			e.printStackTrace();
			//System.out.println("IOException: " + e);
			//System.out.println("通知获取body数据失败");
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
		}
	}
}
