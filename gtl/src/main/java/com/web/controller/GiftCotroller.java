package com.web.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.Log;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.Json;
import com.admin.pageModel.PageHelper;
import com.admin.service.GiftService;
import com.admin.service.LogServiceI;
import com.admin.util.InfoUtil;
import com.web.entity.Gift;
import com.web.exception.BusinessDealException;
import com.web.exception.BusinessValidateException;
import com.web.exception.CodeEnum;
import com.web.exception.PatternException;
import com.web.result.BaseListResult;
import com.web.result.BaseObjectResult;
import com.web.util.TimeUtils;

/**
 * 礼物管理
 * @author Administrator
 *
 */
@Controller
@RequestMapping("/gift")
public class GiftCotroller {
	private static final Logger logger = LoggerFactory.getLogger(GiftCotroller.class);
	
	@Autowired
	private LogServiceI logService;

	@Autowired
	private GiftService giftService;
	
	/**
	 * 礼物管理
	 * @return
	 */
	@RequestMapping("/manager")
	public String manager() {
		return "/admin/gift/GiftManagement";
	}
	
	/**
	 * 获取礼物列表
	 * 
	 * @param p
	 * @param ph
	 * @return
	 */
	@RequestMapping("/dataGrid")
	@ResponseBody
	public DataGrid dataGrid(Gift p, PageHelper ph) {
		return giftService.dataGrid(p, ph);

	}
	
	/**
	 * 跳转到礼物添加页面
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/addPage")
	public String addPage(HttpServletRequest request) {
		Gift ppr=new Gift();
		ppr.setGiftID(UUID.randomUUID().toString());
		request.setAttribute("Gift", ppr);
		return "/admin/gift/GiftAdd";
	}

	/**
	 * 添加礼物
	 * 
	 * @param partner
	 * @return
	 */
	@RequestMapping("/add")
	@ResponseBody
	public Json add(Gift gy) {
		Json j = new Json();
		try {
			giftService.add(gy);
		} catch (Exception e) {
			e.printStackTrace();
		}
		j.setSuccess(true);
		j.setMsg("添加成功！");
		return j;
	}

	/**
	 * 跳转到礼物编辑页面
	 * 
	 * @param request
	 * @param id
	 * @return
	 */
	@RequestMapping("/editPage")
	public String editPage(HttpServletRequest request, String id) {
		Gift gy;
		try {
			gy = giftService.get(id);
			request.setAttribute("Gift", gy);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "/admin/gift/GiftEdit";
	}

	/**
	 * 礼物修改
	 * 
	 * @param request
	 * @param session
	 * @param partner
	 * @return
	 */
	@RequestMapping("/edit")
	@ResponseBody
	public Json edit(HttpServletRequest request, HttpSession session,
			Gift gy) {
		Json j = new Json();
		try {
			giftService.update(gy);;
			Log log = new Log();
			log.setType("update");// 操作描述
			log.setAuthor(InfoUtil.getUser(session));// 操作员
			log.setIp(InfoUtil.getIpAddr(request));// ip
			log.setTteble("Gift");// 操作的表
			log.setTid(gy.getGiftID());// 操作的ID
			log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
			logService.add(log);
		} catch (Exception e) {
			e.printStackTrace();
		}
		j.setSuccess(true);
		j.setMsg("编辑成功！");
		return j;
	}

	/**
	 * 删除礼物
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/delete")
	@ResponseBody
	public Json delete(String id) {
		Json j = new Json();
		try {
			giftService.delete(id);
		} catch (Exception e) {
			e.printStackTrace();
		}
		j.setMsg("删除成功！");
		j.setSuccess(true);
		return j;
	}

	/**
	 * 批量删除
	 * 
	 * @param ids
	 * @param session
	 * @return
	 */
	@RequestMapping("/batchDelete")
	@ResponseBody
	public Json batchDelete(String ids, HttpSession session) {
		Json j = new Json();
		if (ids != null && ids.length() > 0) {
			for (String id : ids.split(",")) {
				if (id != null) {
					this.delete(id);
				}
			}
		}
		j.setMsg("批量删除成功！");
		j.setSuccess(true);
		return j;
	}
	
	/**
	 * 查询所有礼物
	 * @param req
	 * @param res
	 * @return
	 */
	@RequestMapping(value = "/allGift", method ={RequestMethod.GET , RequestMethod.POST}, produces = {MediaType.APPLICATION_JSON_VALUE})
	@ResponseBody
	public BaseListResult<Gift> getByType(HttpServletRequest req,HttpServletResponse res) {

		logger.info("所有礼物: {}");
		res.setCharacterEncoding("UTF-8");
		BaseListResult<Gift> baseResult = new BaseListResult<Gift>();
		List<Gift> listType=new ArrayList<Gift>();
		try {
			
			listType=giftService.getAll();
			//if (listType!=null && listType.size()>0) {
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("查询成功");
				baseResult.setResult(listType);
			/*} else {
				baseResult.setErrorCode("");
				baseResult.setErrorMessage("暂无分类");
			}*/
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<Gift>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<Gift>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<Gift>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<Gift>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}
	/**
	 * 获取单个礼物的信息
	 * @param id
	 * @param res
	 * @return
	 */
	@RequestMapping(value = "/oneGift", method ={RequestMethod.GET , RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseObjectResult<Gift> getByType( String id,HttpServletResponse res) {

		logger.info("根据礼物ID获取对应的信息: {}",id);
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<Gift> baseResult = new BaseObjectResult<Gift>();
		Gift gift=new Gift();
		try {
			if (StringUtils.isBlank(id)) {
				throw new PatternException("礼物ID不能为空");
			}
			gift=giftService.get(id);
			if (gift!=null ) {
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("查询成功");
				baseResult.setResult(gift);
			} else {
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("礼物不存在");
			}
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<Gift>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<Gift>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<Gift>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<Gift>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}
	
	
}
