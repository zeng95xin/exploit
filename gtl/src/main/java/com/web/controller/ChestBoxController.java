package com.web.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.ChestBoxBuyService;
import com.admin.service.ChestBoxService;
import com.admin.service.ChestBoxTypeService;
import com.admin.service.HostMainService;
import com.admin.service.LogServiceI;
import com.admin.service.LoginUserServiceI;
import com.web.entity.ChestBox;
import com.web.entity.ChestBoxIsBuy;
import com.web.entity.ChestBoxType;
import com.web.entity.HostMain;
import com.web.exception.BusinessDealException;
import com.web.exception.BusinessValidateException;
import com.web.exception.CodeEnum;
import com.web.exception.PatternException;
import com.web.result.BaseListResult;
import com.web.result.BaseObjectResult;
import com.web.util.TimeUtils;

/**
 * 百宝箱控制器
 * @author Administrator
 *
 */
@Controller
@RequestMapping("/chestBox")
public class ChestBoxController {

	private static final Logger logger = LoggerFactory.getLogger(ChestBoxController.class);
	
	@Autowired
	private ChestBoxService chestBoxService;
	
	@Autowired
	private LogServiceI logService;
	
	@Autowired
	private ChestBoxTypeService chestBoxTypeService;
	
	@Autowired
	private HostMainService hostMainService;
	
	@Autowired
	private LoginUserServiceI loginUserServiceI;
	
	@Autowired
	private ChestBoxBuyService chestBoxBuyService;
	
	/**
	 * 百宝箱管理
	 * @return
	 */
	@RequestMapping("/manager")
	public String manager(HttpServletRequest request) {
		List<ChestBoxType> list=chestBoxTypeService.getAll();
		request.setAttribute("list", list);
		return "/admin/chestBox/chestBoxManagement";
	}
	
	/**
	 * 获取百宝箱列表
	 * 
	 * @param p
	 * @param ph
	 * @return
	 */
	@RequestMapping("/dataGrid")
	@ResponseBody
	public DataGrid dataGrid(ChestBox p, PageHelper ph) {
		return chestBoxService.dataGrid(p, ph);

	}
	
	/**
	 * 主播发布百宝箱
	 * @param req
	 * @param chestBox
	 * @return
	 */
	//@RequestMapping(value = "/add", method = RequestMethod.POST, produces = { MediaType.APPLICATION_JSON_VALUE })
	@RequestMapping(value = "/add", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	public @ResponseBody
	BaseObjectResult<ChestBox> addNewBox(HttpServletRequest req,HttpServletResponse res,
			ChestBox chestBox) {
		logger.info("发布百宝箱: {}", chestBox);
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<ChestBox> baseResult = new BaseObjectResult<ChestBox>();
		HostMain hm=new HostMain();
		ChestBoxType chestBoxType=new ChestBoxType();
		try {
			// 参数校验
			if (chestBox == null) {
				throw new PatternException("发布信息不能为空");
			}
			if (StringUtils.isBlank(chestBox.getBoxHostID())) {
				throw new PatternException("发布者Id不能为空");
			}
			hm=hostMainService.get(chestBox.getBoxHostID());
			if (hm != null ) {
				chestBoxType=chestBoxTypeService.get(chestBox.getBoxType());
				if (hm.getHostStatus().equals("1")) {
					chestBox.setBoxID(UUID.randomUUID().toString());
					if (chestBoxType != null) {
						if (StringUtils.isNotBlank(chestBoxType.getTypeName())) {
							chestBox.setBoxTypeName(chestBoxType.getTypeName());
						}
					}
					if (StringUtils.isNotBlank(hm.getHostNickname())) {
						chestBox.setHostMainNickname(hm.getHostNickname());
					}
					if (StringUtils.isNotBlank(hm.getHostHomeName())) {
						chestBox.setBoxHome(hm.getHostHomeName());
					}
					chestBox.setIsLate("1");
					chestBox.setReleaseTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
					chestBox.setUpdateTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
					chestBoxService.add(chestBox);
					
					baseResult.setErrorCode("0");
					baseResult.setErrorMessage("发布成功！");
					baseResult.setResult(chestBox);
				}else{
					throw new PatternException("主播未通过审核，不具备发布资格！");
				}
				
			}else{
				throw new PatternException("主播不存在！");
			}
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<ChestBox>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<ChestBox>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<ChestBox>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<ChestBox>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
	
	/**
	 * 更新百宝箱
	 * @param req
	 * @param res
	 * @param chestBox
	 * @return
	 */
	//@RequestMapping(value = "/update", method = RequestMethod.POST, produces = { MediaType.APPLICATION_JSON_VALUE })
	@RequestMapping(value = "/update", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseObjectResult<ChestBox> updateBox(HttpServletRequest req,HttpServletResponse res,
			ChestBox chestBox) {
		logger.info("更新百宝箱: {}", chestBox);
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<ChestBox> baseResult = new BaseObjectResult<ChestBox>();
		HostMain hm=new HostMain();
		ChestBox cb=new ChestBox();
		ChestBox cb1=new ChestBox();
		try {
			// 参数校验
			if (chestBox == null) {
				throw new PatternException("百宝箱信息不能为空");
			}
			if (StringUtils.isBlank(chestBox.getBoxHostID())) {
				throw new PatternException("发布者Id不能为空");
			}
			if (StringUtils.isBlank(chestBox.getBoxID())) {
				throw new PatternException("百宝箱Id不能为空");
			}
			cb=chestBoxService.get(chestBox.getBoxID());
			hm=hostMainService.get(chestBox.getBoxHostID());
			if (hm != null ) {
				if (StringUtils.isNotBlank(hm.getHostNickname())) {
					chestBox.setHostMainNickname(hm.getHostNickname());
				}
			}else{
				throw new PatternException("主播不存在！");
			}
			if (cb!= null) {
				
				chestBox.setUpdateTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
			} else {
				throw new PatternException("百宝箱不存在！");
			}
			chestBoxService.update1(chestBox);
			cb1=chestBoxService.get(chestBox.getBoxID());
			baseResult.setErrorCode("0");
			baseResult.setErrorMessage("修改成功");
			baseResult.setResult(cb1);
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<ChestBox>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<ChestBox>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<ChestBox>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<ChestBox>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
	
	
	
	/**
	 * 根据百宝箱标题查询百宝箱
	 * @param req
	 * @param res
	 * @param chestBox
	 * @return
	 */
	//@RequestMapping(value = "/search", method = RequestMethod.POST, produces = { MediaType.APPLICATION_JSON_VALUE })
	@RequestMapping(value = "/search", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<ChestBoxIsBuy> searchBoxByName(HttpServletRequest req,HttpServletResponse res,
			ChestBox chestBox,String userId) {
		logger.info("查询百宝箱: {}", chestBox);
		res.setCharacterEncoding("UTF-8");
		BaseListResult<ChestBoxIsBuy> baseResult = new BaseListResult<ChestBoxIsBuy>();
		List<ChestBoxIsBuy> listb =new ArrayList<ChestBoxIsBuy>();
		List<ChestBox> list =new ArrayList<ChestBox>();
		try {
			// 参数校验
			if (chestBox == null) {
				throw new PatternException("百宝箱信息不能为空");
			}
			if (StringUtils.isBlank(chestBox.getBoxTitle())) {
				throw new PatternException("标题不能为空");
			}
			
			list=chestBoxService.getByTypeName(chestBox.getBoxTitle());
			if (StringUtils.isNotBlank(userId)) {
				if (list!= null && (list.size() > 0)) {
					for (ChestBox chestBox2 : list) {
						ChestBoxIsBuy cbib=new ChestBoxIsBuy();
						boolean flag=false;
						if (chestBox != null && StringUtils.isNotBlank(chestBox2.getBoxID())) {
							BeanUtils.copyProperties(chestBox2, cbib);
							flag=chestBoxBuyService.checkBuyer(chestBox2.getBoxID(), userId);
							if (flag) {
								cbib.setIsBuy("1");
							} else {
								cbib.setIsBuy("0");
							}
							listb.add(cbib);
						} else {
							continue;
						}
					}
				}
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("查询成功！");
				baseResult.setResult(listb);
			} else {
				if (list!= null && (list.size() > 0)) {
					for (ChestBox chestBox2 : list) {
						ChestBoxIsBuy cbib=new ChestBoxIsBuy();
						if (chestBox != null && StringUtils.isNotBlank(chestBox2.getBoxID())) {
							BeanUtils.copyProperties(chestBox2, cbib);
							listb.add(cbib);
						} else {
							continue;
						}
					}
				}
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("查询成功！");
				baseResult.setResult(listb);
			}
			//if (list!= null && (list.size() > 0)) {
			/*}else{
				
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("百宝箱不存在！");
			}*/
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<ChestBoxIsBuy>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxIsBuy>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxIsBuy>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxIsBuy>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
	
	/**
	 * 根据百宝箱ID获取百宝箱详情
	 * @param req
	 * @param res
	 * @param chestBox
	 * @return
	 */
	@RequestMapping(value = "/oneBox", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseObjectResult<ChestBox> getBox(HttpServletRequest req,HttpServletResponse res,
			ChestBox chestBox) {
		logger.info("根据百宝箱ID查询百宝箱: {}", chestBox);
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<ChestBox> baseResult = new BaseObjectResult<ChestBox>();
		ChestBox cb=new ChestBox();
		try {
			// 参数校验
			if (chestBox == null) {
				throw new PatternException("百宝箱信息不能为空");
			}
			if (StringUtils.isBlank(chestBox.getBoxID())) {
				throw new PatternException("百宝箱Id不能为空");
			}
			
			cb=chestBoxService.get(chestBox.getBoxID());
			if (cb != null) {
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("获取成功！");
				baseResult.setResult(cb);
			} else {
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("百宝箱不存在");
				baseResult.setResult(cb);
			}
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<ChestBox>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<ChestBox>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<ChestBox>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<ChestBox>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
	
	@RequestMapping(value = "/newList", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<ChestBoxIsBuy> newBoxByTime(HttpServletRequest req,HttpServletResponse res,
			String row,String page,String userId) {
		logger.info("首页分页展示最新的百宝箱: {}");
		res.setCharacterEncoding("UTF-8");
		BaseListResult<ChestBoxIsBuy> baseResult = new BaseListResult<ChestBoxIsBuy>();
		List<ChestBoxIsBuy> listb =new ArrayList<ChestBoxIsBuy>();
		List<ChestBox> list =new ArrayList<ChestBox>();
		try {
			// 参数校验
			
			list=chestBoxService.getByTime(row, page);
			if (StringUtils.isNotBlank(userId)) {
				if (list!= null && (list.size() > 0)) {
					for (ChestBox chestBox : list) {
						ChestBoxIsBuy cbib=new ChestBoxIsBuy();
						boolean flag=false;
						if (chestBox != null && StringUtils.isNotBlank(chestBox.getBoxID())) {
							BeanUtils.copyProperties(chestBox, cbib);
							flag=chestBoxBuyService.checkBuyer(chestBox.getBoxID(), userId);
							if (flag) {
								cbib.setIsBuy("1");
							} else {
								cbib.setIsBuy("0");
							}
							listb.add(cbib);
						} else {
							continue;
						}
					}
				}
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("查询成功！");
				baseResult.setResult(listb);
			} else {
				if (list!= null && (list.size() > 0)) {
					for (ChestBox chestBox : list) {
						ChestBoxIsBuy cbib=new ChestBoxIsBuy();
						if (chestBox != null && StringUtils.isNotBlank(chestBox.getBoxID())) {
							BeanUtils.copyProperties(chestBox, cbib);
							listb.add(cbib);
						} else {
							continue;
						}
					}
				}
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("查询成功！");
				baseResult.setResult(listb);
			}
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<ChestBoxIsBuy>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxIsBuy>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxIsBuy>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxIsBuy>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
}
