package com.lcjh.biz;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import com.admin.dao.AppPayDaoI;
import com.admin.model.TPayOrder;
import com.admin.service.baseImpl.BaseServiceImpl;
import com.alibaba.fastjson.JSON;
import com.lcjh.common.LcjhJpushUtil;
import com.lcjh.dao.BowenUserBuyRecordDao;
import com.lcjh.dao.LcjhUserBuyRecordDao;
import com.lcjh.dao.SunSharesUserBuyRecordDao;
import com.lcjh.dao.ZsxyUserBuyRecordDao;
import com.lcjh.entity.BowenUserBuyRecord;
import com.lcjh.entity.LcjhUserBuyRecord;
import com.lcjh.entity.SunSharesUserBuyRecord;
import com.lcjh.entity.ZsxyUserBuyRecord;
import com.lcjh.enummole.PayOrderTypeEnum;
import com.log.ProjectConfig;
import com.pingplusplus.Pingpp;
import com.pingplusplus.model.Charge;
import com.web.util.HttpClientUtil;

@Service
public class PayBiz extends BaseServiceImpl<TPayOrder>{
	
	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Autowired private AppPayDaoI payOrderDao;
	@Autowired private LcjhUserBuyRecordDao lcjhUserBuyRecordDao;
	@Autowired private SunSharesUserBuyRecordDao sunSharesUserBuyRecordDao;
	@Autowired private ZsxyUserBuyRecordDao zsxyUserBuyRecordDao;
	@Autowired private BowenUserBuyRecordDao bowenUserBuyRecordDao;
	@Autowired private LcjhJpushUtil lcjhJpushUtil;
	
	public void paySuccess(TPayOrder order) throws Exception {
		
		PayOrderTypeEnum orderType = PayOrderTypeEnum.getByCode(order.getOrderType());
		if(null == orderType){
			return;
		}
		Pingpp.apiKey = ProjectConfig.pingppApiKey;
		Charge ch = Charge.retrieve(order.getChargeId());
		logger.info("查询ping++结果：{}", JSON.toJSONString(ch));
		Assert.notNull(ch, "订单查询失败");
		Assert.isTrue(ch.getPaid(), "订单支付还未成功");
		
		if ("NOT_PAY".equals(order.getPayStatus())) {
			order.setPayStatus("ALREADY_PAY");
			order.setPayTime(new Date());
			order.setPayMoney(order.getPayMoney());
			payOrderDao.update(order);
		}else if("ALREADY_PAY".equals(order.getPayStatus())){
			return;
		}
		
		if(PayOrderTypeEnum.licjh == orderType){
			LcjhUserBuyRecord buserBuy = new LcjhUserBuyRecord();
			buserBuy.setAddTime(new Date());
			buserBuy.setBuyPrice(new BigDecimal(order.getPayMoney() / 100d));
			buserBuy.setLcjhId(order.getOtherOrderId());
			buserBuy.setUserId(order.getUserid());
			lcjhUserBuyRecordDao.save(buserBuy);
			
			lcjhJpushUtil.pushLcjhOwenUserBuy(order.getOtherOrderId(), order.getUserid());
		}
		else if(PayOrderTypeEnum.sunShares == orderType){
			SunSharesUserBuyRecord buserBuy = new SunSharesUserBuyRecord();
			buserBuy.setAddTime(new Date());
			buserBuy.setBuyPrice(new BigDecimal(order.getPayMoney() / 100d));
			buserBuy.setSunSharesId(order.getOtherOrderId());
			buserBuy.setUserId(order.getUserid());
			sunSharesUserBuyRecordDao.save(buserBuy);
		}
		else if(PayOrderTypeEnum.zsxy == orderType){
			ZsxyUserBuyRecord buserBuy = new ZsxyUserBuyRecord();
			buserBuy.setAddTime(new Date());
			buserBuy.setBuyPrice(new BigDecimal(order.getPayMoney() / 100d));
			buserBuy.setZsxyId(order.getOtherOrderId());
			buserBuy.setUserId(order.getUserid());
			zsxyUserBuyRecordDao.save(buserBuy);
		}
		else if(PayOrderTypeEnum.bowen == orderType){
			BowenUserBuyRecord buserBuy = new BowenUserBuyRecord();
			buserBuy.setAddTime(new Date());
			buserBuy.setBuyPrice(new BigDecimal(order.getPayMoney() / 100d));
			buserBuy.setBowenId(order.getOtherOrderId());
			buserBuy.setUserId(order.getUserid());
			bowenUserBuyRecordDao.save(buserBuy);
		}
		payNoticeOther(orderType, order.getOtherOrderId());
	}
	
	public void payNoticeOther(PayOrderTypeEnum orderType, String orderNo){
		String url;
		if(PayOrderTypeEnum.listen == orderType){
			url = "http://zs.gtl666.com/pay_api/app_charge_mark.aspx";
		}else if(PayOrderTypeEnum.reward == orderType){
			url = "http://zs.gtl666.com/pay_api/app_charge_gave.aspx";
		}else if(PayOrderTypeEnum.problem == orderType){
			url = "http://zs.gtl666.com/pay_api/app_charge_problem.aspx";
		}else{
			return;
		}
		Map<String, String> paramMap = new HashMap<String, String>(1);
		paramMap.put("charge", orderNo);
		String result = HttpClientUtil.post(url, paramMap);
		logger.info("通知gtl参数,charge,{}, 支付类型,orderType,{}, url:{}", orderNo, orderType.getCode(), url);
		logger.info("通知gtl返回值:{}", result);
	}
	
	public static void main(String[] args) {
		PayBiz p = new PayBiz();
		p.payNoticeOther(PayOrderTypeEnum.problem, "20173124013139-9863");
	}
	
	public void payNoticeOther(TPayOrder order){
		String type = order.getOrderType();
		PayOrderTypeEnum orderType = PayOrderTypeEnum.getByCode(type);
		if(null == orderType){
			return;
		}
		String orderNo = order.getOtherOrderId();
		payNoticeOther(orderType, orderNo);
	}
	
}
