package com.lcjh.biz;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import com.admin.dao.LoginUserDaoI;
import com.admin.model.JPushChatModel;
import com.admin.model.LoginUser;
import com.admin.model.TPayOrder;
import com.admin.service.AppPayServiceI;
import com.admin.service.baseImpl.BaseServiceImpl;
import com.alibaba.fastjson.JSONObject;
import com.lcjh.common.DayCountUtil;
import com.lcjh.common.LcjhJpushUtil;
import com.lcjh.dao.Lcjh2Dao;
import com.lcjh.dao.LcjhCjBuySellRecordDao;
import com.lcjh.dao.LcjhCjDao;
import com.lcjh.dao.LcjhMrzcDao;
import com.lcjh.entity.Lcjh2;
import com.lcjh.entity.LcjhCj;
import com.lcjh.entity.LcjhCjBuySellRecord;
import com.lcjh.entity.LcjhMrzc;
import com.lcjh.enummole.LcjhPushEnum;
import com.lcjh.enummole.LcjhStatusEnum;
import com.log.ProjectConfig;
import com.pingplusplus.Pingpp;
import com.pingplusplus.exception.APIConnectionException;
import com.pingplusplus.exception.APIException;
import com.pingplusplus.exception.AuthenticationException;
import com.pingplusplus.exception.InvalidRequestException;
import com.pingplusplus.model.Charge;
import com.pingplusplus.model.Refund;

@Service
public class LcjhCjBuySellRecordBiz extends BaseServiceImpl<LcjhCjBuySellRecord> {

	private static final String pingppApiKey = ProjectConfig.pingppApiKey;
	private static final Logger logger = LoggerFactory.getLogger(LcjhCjBuySellRecordBiz.class);
	@Autowired
	private LcjhCjBuySellRecordDao lcjhCjBuySellRecordDao;
	@Autowired
	private LoginUserDaoI loginUserDaoI;
	@Autowired
	private Lcjh2Dao lcjh2Dao;
	@Autowired
	private LcjhCjDao lcjhCjDao;
	@Autowired
	private LcjhMrzcDao lcjhMrzcDao;
	@Autowired
	private LcjhJpushUtil lcjhJpushUtil;
	@Autowired
	private AppPayServiceI appPayServiceI;
	@Autowired
	private PayBiz payBiz;

	public LcjhCjBuySellRecord buyOrSellLcjh(String userId, String lcjhId, Integer type, String zqdm, String zqname,
			Integer cjsl, BigDecimal wtjg) {
		LoginUser user = loginUserDaoI.get(LoginUser.class, userId);
		Assert.notNull(user, "名家不存在");
		Lcjh2 l = lcjh2Dao.get(Lcjh2.class, lcjhId);
		Assert.notNull(l, "理财计划不存在");
		Assert.isTrue(l.getStatus() == LcjhStatusEnum.authSuccess.ordinal()
				|| (l.getStatus() == LcjhStatusEnum.success.ordinal() && 2 == type), "理财计划不能交易");
		Assert.isTrue(l.getJhqdsj().getTime() <= System.currentTimeMillis()
				&& l.getJhwjrq().getTime() > System.currentTimeMillis(), "计划不在交易时间内");
		String hql_cj = "from LcjhCj where lcjhId=:lcjhId and zqdm=:zqdm";
		Map<String, Object> params = new HashMap<String, Object>(2);
		params.put("lcjhId", lcjhId);
		params.put("zqdm", zqdm);
		LcjhCj cj = lcjhCjDao.get(hql_cj, params);
		LcjhCjBuySellRecord record = null;
		Date now = null;
		if (2 == type) {
			Assert.notNull(cj, "没有该持仓记录");
			Assert.isTrue(cj.getKmsl() >= cjsl.intValue(), "最多只能卖出" + cj.getKmsl());
			record = new LcjhCjBuySellRecord();
			cj.setCjsl(cj.getCjsl() - cjsl);
			cj.setKmsl(cj.getKmsl() - cjsl);
			now = new Date();
			BigDecimal cost = wtjg.multiply(new BigDecimal(cjsl));
			cost = cost.subtract(cost.multiply(ProjectConfig.getSxfl()));
			BigDecimal cw = l.getStartGoldCoins().subtract(l.getGoldCoins())
					.divide(l.getStartGoldCoins(), ProjectConfig.sale, ProjectConfig.roundingMode)
					.multiply(ProjectConfig.bd100);
			record.setCwstart(cw);

			cj.setLastTradeTime(now);
			record.setWtzj(cost);
			record.setAddTime(now);
			record.setCjsl(cjsl);
			record.setWtjg(wtjg);
			record.setLcjhId(lcjhId);
			record.setType(type);
			record.setUserId(userId);
			record.setZqdm(zqdm);
			record.setZqname(zqname);
			record.setStatus(0);
			record.setPjcb(cj.getPjcb());
			lcjhCjBuySellRecordDao.save(record);
			lcjhCjDao.update(cj);
		} else if (1 == type) {
			String hql_zqdm_count = "select count(distinct zqdm) from LcjhCj where lcjhId=:lcjhId and cjsl > 0";
			params.remove("zqdm");
			int maxCj = ProjectConfig.getLcjhConfig(true, null).getMaxCj();
			if (null == cj) {
				Assert.isTrue(lcjhCjDao.count(hql_zqdm_count, params) < maxCj, "最多只能同时持仓" + maxCj + "支股票");
			} else {
				Assert.isTrue(lcjhCjDao.count(hql_zqdm_count, params) < maxCj - 1, "最多只能同时持仓" + maxCj + "支股票");
			}

			BigDecimal cw = l.getStartGoldCoins().subtract(l.getGoldCoins())
					.divide(l.getStartGoldCoins(), ProjectConfig.sale, ProjectConfig.roundingMode)
					.multiply(ProjectConfig.bd100);

			BigDecimal cost = wtjg.multiply(new BigDecimal(cjsl));
			cost = cost.add(cost.multiply(ProjectConfig.getSxfl()));
			Assert.isTrue(l.getGoldCoins().compareTo(cost) > 0, "金币不足");
			l.setGoldCoins(l.getGoldCoins().subtract(cost));
			lcjh2Dao.update(l);
			now = new Date();

			if (null == cj) {
				cj = new LcjhCj();
				cj.setAddTime(now);
				cj.setFistTradeTime(now);
				cj.setLastTradeTime(now);
				cj.setKmsl(0);
				cj.setCjsl(0);
				cj.setType(type);
				cj.setZqdm(zqdm);
				cj.setZqname(zqname);
				cj.setGpsy(BigDecimal.ZERO);
				cj.setLcjhId(lcjhId);
				cj.setCw(cost.divide(l.getGoldCoins(), ProjectConfig.sale, ProjectConfig.roundingMode)
						.multiply(ProjectConfig.bd100));
				lcjhCjDao.save(cj);
			} else {
				cj.setLastTradeTime(now);
				lcjhCjDao.update(cj);
			}
			record = new LcjhCjBuySellRecord();

			record.setCwstart(cw);
			record.setAddTime(now);
			record.setWtjg(wtjg);
			record.setWtzj(cost);
			record.setCjsl(cjsl);
			record.setLcjhId(lcjhId);
			record.setType(type);
			record.setUserId(userId);
			record.setZqdm(zqdm);
			record.setZqname(zqname);
			record.setStatus(0);
			record.setPjcb(cj.getPjcb());
			lcjhCjBuySellRecordDao.save(record);
		}
		return record;
	}

	public void lockJs(LcjhCjBuySellRecord lcjhCjBuySellRecord, LcjhCj cj, Lcjh2 l) {

		String lockSql = "select status from t_lcjh_cj_buy_sell_record where id = '" + lcjhCjBuySellRecord.getId()
				+ "' for update";
		lcjhCjBuySellRecordDao.executeSqlNonUpdate(lockSql, null);

		lockSql = "select type from t_lcjh_cj where id = '" + cj.getId() + "' for update";
		lcjhCjDao.executeSqlNonUpdate(lockSql, null);

		lockSql = "select dayCount from t_lcjh2 where id = '" + l.getId() + "' for update";
		lcjh2Dao.executeSqlNonUpdate(lockSql, null);
	}

	public void updateLcjhTradeJs(LcjhCjBuySellRecord lcjhCjBuySellRecord, JSONObject gg_m) {
		LcjhCj cj = null;
		Lcjh2 l = null;
		if (1 == lcjhCjBuySellRecord.getType()) {
			String sell01 = null;
			String sell02 = null;
			String sell03 = null;
			String sell04 = null;
			String sell05 = null;
			String selln = null;
			sell01 = gg_m.getString("sell1_m"); // 获取该股票卖一的价格
			sell02 = gg_m.getString("sell2_m"); // 获取该股票卖二的价格
			sell03 = gg_m.getString("sell3_m"); // 获取该股票卖三的价格
			sell04 = gg_m.getString("sell4_m"); // 获取该股票卖四的价格
			sell05 = gg_m.getString("sell5_m"); // 获取该股票卖五的价格
			selln = gg_m.getString("sell1_n"); // 获取该股票卖出数量
			BigDecimal t_sell1 = new BigDecimal(sell01);
			BigDecimal t_sell2 = new BigDecimal(sell02);
			BigDecimal t_sell3 = new BigDecimal(sell03);
			BigDecimal t_sell4 = new BigDecimal(sell04);
			BigDecimal t_sell5 = new BigDecimal(sell05);
			BigDecimal t_selln = new BigDecimal(selln);
			BigDecimal t_wtjg = lcjhCjBuySellRecord.getWtjg();
			if ((t_wtjg.compareTo(t_sell1) == 0 || t_wtjg.compareTo(t_sell2) == 0 || t_wtjg.compareTo(t_sell3) == 0
					|| t_wtjg.compareTo(t_sell4) == 0 || t_wtjg.compareTo(t_sell5) == 0
					|| t_wtjg.compareTo(t_sell1) > 0) && !(t_sell1.compareTo(BigDecimal.ZERO) == 0)
					&& !(t_selln.compareTo(BigDecimal.ZERO) == 0)) {

				String hql_cj = "from LcjhCj where lcjhId=:lcjhId and zqdm=:zqdm";
				Map<String, Object> params = new HashMap<String, Object>(2);
				params.put("lcjhId", lcjhCjBuySellRecord.getLcjhId());
				params.put("zqdm", lcjhCjBuySellRecord.getZqdm());
				cj = lcjhCjDao.get(hql_cj, params);
				Assert.notNull(cj, "没有该持仓记录");

				l = lcjh2Dao.get(Lcjh2.class, lcjhCjBuySellRecord.getLcjhId());
				Assert.notNull(l, "没有该理财计划");

				lockJs(lcjhCjBuySellRecord, cj, l);

				if (lcjhCjBuySellRecord.getStatus() != 0) {
					return;
				}

				lcjhCjBuySellRecord.setStatus(1);

				BigDecimal cjjg;// 成交价格
				if (t_wtjg.compareTo(t_sell1) > 0) {
					cjjg = t_sell1;
				} else {
					cjjg = t_wtjg;
				}
				lcjhCjBuySellRecord.setCjjg(cjjg);
				BigDecimal cjzj = cjjg.multiply(new BigDecimal(lcjhCjBuySellRecord.getCjsl()));// 成交总价
				BigDecimal sxf = cjzj.multiply(ProjectConfig.getSxfl());// 手续费
				cjzj = cjzj.add(sxf);
				lcjhCjBuySellRecord.setCjzj(cjzj);
				BigDecimal cjcj = cjzj.subtract(lcjhCjBuySellRecord.getWtzj());
				l.setGoldCoins(l.getGoldCoins().subtract(cjcj));

				BigDecimal syl = l.getGoldCoins().subtract(l.getStartGoldCoins())
						.divide(l.getStartGoldCoins(), ProjectConfig.sale, ProjectConfig.roundingMode)
						.multiply(ProjectConfig.bd100);
				if (syl.compareTo(l.getYjsyl()) >= 0) {
					l.setStatus(LcjhStatusEnum.success.ordinal());
				}
				l.setSyl(syl);
				lcjh2Dao.update(l);

				cj.setLastTradeTime(new Date());

				cj.setMrzs(cj.getMrzs() + lcjhCjBuySellRecord.getCjsl());
				cj.setMrzj(cj.getMrzj().add(lcjhCjBuySellRecord.getCjzj()));
				cj.setPjcb(cj.getMrzj().divide(new BigDecimal(cj.getMrzs()), ProjectConfig.sale,
						ProjectConfig.roundingMode));
				BigDecimal gpsy = cj.getMczj().compareTo(BigDecimal.ZERO) <= 0 ? BigDecimal.ZERO
						: cj.getMczj().subtract(cj.getMrzj())
								.divide(cj.getMrzj(), ProjectConfig.sale, ProjectConfig.roundingMode)
								.multiply(ProjectConfig.bd100);
				cj.setGpsy(gpsy);
				BigDecimal jhsy = cj.getMczj().subtract(cj.getMrzj())
						.divide(l.getStartGoldCoins(), ProjectConfig.sale, ProjectConfig.roundingMode)
						.multiply(ProjectConfig.bd100);
				cj.setJhsy(jhsy);
				if (lcjhCjBuySellRecord.getPjcb().compareTo(BigDecimal.ZERO) <= 0) {
					lcjhCjBuySellRecord.setPjcb(cj.getPjcb());
				}
				cj.setCjsl(cj.getCjsl() + lcjhCjBuySellRecord.getCjsl());
				BigDecimal cjcw = new BigDecimal(cj.getCjsl()).multiply(cj.getPjcb())
						.divide(l.getStartGoldCoins(), ProjectConfig.sale, ProjectConfig.roundingMode)
						.multiply(ProjectConfig.bd100);
				cj.setCw(cjcw);
				BigDecimal cw = l.getStartGoldCoins().subtract(l.getGoldCoins())
						.divide(l.getStartGoldCoins(), ProjectConfig.sale, ProjectConfig.roundingMode)
						.multiply(ProjectConfig.bd100);
				l.setCw(cw);
				BigDecimal dbsy = lcjhCjBuySellRecord.getCjzj()
						.divide(l.getStartGoldCoins(), ProjectConfig.sale, ProjectConfig.roundingMode)
						.multiply(ProjectConfig.bd_100);
				lcjhCjBuySellRecord.setCwend(cw);
				lcjhCjBuySellRecord.setCjsj(new Date());
				lcjhCjBuySellRecord.setDbsy(dbsy);
				lcjhCjBuySellRecord.setJhsy(jhsy);
				lcjhCjBuySellRecord.setStatus(1);
			} else {
				logger.info("lcjhJs买入结算失败，价格不匹配,id:{},zqdm:{}", lcjhCjBuySellRecord.getId(),
						lcjhCjBuySellRecord.getZqdm());
				return;
			}
		} else if (2 == lcjhCjBuySellRecord.getType()) {
			String buy01 = null;
			String buy02 = null;
			String buy03 = null;
			String buy04 = null;
			String buy05 = null;
			String buyn = null;
			buy01 = gg_m.getString("buy1_m"); // 获取该股票买一的价格
			buy02 = gg_m.getString("buy2_m"); // 获取该股票买二的价格
			buy03 = gg_m.getString("buy3_m"); // 获取该股票买三的价格
			buy04 = gg_m.getString("buy4_m"); // 获取该股票买四的价格
			buy05 = gg_m.getString("buy5_m"); // 获取该股票买五的价格
			buyn = gg_m.getString("buy1_n");
			BigDecimal t_buy01 = new BigDecimal(buy01);
			BigDecimal t_buy02 = new BigDecimal(buy02);
			BigDecimal t_buy03 = new BigDecimal(buy03);
			BigDecimal t_buy04 = new BigDecimal(buy04);
			BigDecimal t_buy05 = new BigDecimal(buy05);
			BigDecimal t_buyn = new BigDecimal(buyn);
			BigDecimal t_wtjg = lcjhCjBuySellRecord.getWtjg();
			if ((t_wtjg.compareTo(t_buy05) == 0 || t_wtjg.compareTo(t_buy04) == 0 || t_wtjg.compareTo(t_buy03) == 0
					|| t_wtjg.compareTo(t_buy02) == 0 || t_wtjg.compareTo(t_buy01) == 0
					|| t_wtjg.compareTo(t_buy01) < 0) && !(t_buy01.compareTo(BigDecimal.ZERO) == 0)
					&& !(t_buyn.compareTo(BigDecimal.ZERO) == 0)) {

				String hql_cj = "from LcjhCj where lcjhId=:lcjhId and zqdm=:zqdm";
				Map<String, Object> params = new HashMap<String, Object>(2);
				params.put("lcjhId", lcjhCjBuySellRecord.getLcjhId());
				params.put("zqdm", lcjhCjBuySellRecord.getZqdm());
				cj = lcjhCjDao.get(hql_cj, params);
				Assert.notNull(cj, "没有该持仓记录");

				l = lcjh2Dao.get(Lcjh2.class, lcjhCjBuySellRecord.getLcjhId());
				Assert.notNull(l, "没有该理财计划");

				lockJs(lcjhCjBuySellRecord, cj, l);

				if (lcjhCjBuySellRecord.getStatus() != 0) {
					return;
				}

				BigDecimal cjjg;// 成交价格
				if (t_wtjg.compareTo(t_buy01) < 0) {
					cjjg = t_buy01;
				} else {
					cjjg = t_wtjg;
				}
				lcjhCjBuySellRecord.setCjjg(cjjg);

				BigDecimal cjzj = cjjg.multiply(new BigDecimal(lcjhCjBuySellRecord.getCjsl()));// 成交总价
				BigDecimal sxf = cjzj.multiply(ProjectConfig.getSxfl());// 手续费
				cjzj = cjzj.add(sxf);
				lcjhCjBuySellRecord.setCjzj(cjzj);

				// BigDecimal cjcj =
				// cjzj.subtract(lcjhCjBuySellRecord.getWtzj());

				l.setGoldCoins(l.getGoldCoins().add(cjzj));

				cj.setLastTradeTime(new Date());

				cj.setMczs(cj.getMczs() + lcjhCjBuySellRecord.getCjsl());
				cj.setMczj(cj.getMczj().add(lcjhCjBuySellRecord.getCjzj()));

				BigDecimal gpsy = cj.getMczj().subtract(cj.getMrzj())
						.divide(cj.getMrzj(), ProjectConfig.sale, ProjectConfig.roundingMode)
						.multiply(ProjectConfig.bd100);
				cj.setGpsy(gpsy);
				BigDecimal jhsy = cj.getMczj().subtract(cj.getMrzj())
						.divide(l.getStartGoldCoins(), ProjectConfig.sale, ProjectConfig.roundingMode)
						.multiply(ProjectConfig.bd100);
				cj.setJhsy(jhsy);

				BigDecimal dbsy = lcjhCjBuySellRecord.getCjjg().subtract(cj.getPjcb())
						.multiply(new BigDecimal(lcjhCjBuySellRecord.getCjsl()))
						.divide(l.getStartGoldCoins(), ProjectConfig.sale, ProjectConfig.roundingMode)
						.multiply(ProjectConfig.bd100);

				BigDecimal cjcw = new BigDecimal(cj.getCjsl()).multiply(cj.getPjcb())
						.divide(l.getStartGoldCoins(), ProjectConfig.sale, ProjectConfig.roundingMode)
						.multiply(ProjectConfig.bd100);
				cj.setCw(cjcw);
				BigDecimal cw = l.getStartGoldCoins().subtract(l.getGoldCoins())
						.divide(l.getStartGoldCoins(), ProjectConfig.sale, ProjectConfig.roundingMode)
						.multiply(ProjectConfig.bd100);
				l.setCw(cw);

				lcjhCjBuySellRecord.setCwend(cw);
				lcjhCjBuySellRecord.setIsprofit(cjjg.compareTo(cj.getPjcb()));
				lcjhCjBuySellRecord.setCjsj(new Date());
				lcjhCjBuySellRecord.setDbsy(dbsy);
				lcjhCjBuySellRecord.setJhsy(jhsy);
				lcjhCjBuySellRecord.setStatus(1);

			} else {
				logger.info("lcjhJs卖出结算失败，价格不匹配,id:{},zqdm:{}", lcjhCjBuySellRecord.getId(),
						lcjhCjBuySellRecord.getZqdm());
				return;
			}
		} else {
			return;
		}
		lcjh2Dao.update(l);
		lcjhCjDao.update(cj);
		lcjhCjBuySellRecordDao.update(lcjhCjBuySellRecord);
	}

	public void updateCancelBuyOrSellLcjh(LcjhCjBuySellRecord lcjhCjBuySellRecord) {
		LcjhCj cj = null;
		Lcjh2 l = null;

		String hql_cj = "from LcjhCj where lcjhId=:lcjhId and zqdm=:zqdm";
		Map<String, Object> params = new HashMap<String, Object>(2);
		params.put("lcjhId", lcjhCjBuySellRecord.getLcjhId());
		params.put("zqdm", lcjhCjBuySellRecord.getZqdm());
		cj = lcjhCjDao.get(hql_cj, params);
		Assert.notNull(cj, "没有该持仓记录");

		l = lcjh2Dao.get(Lcjh2.class, lcjhCjBuySellRecord.getLcjhId());
		Assert.notNull(l, "没有该理财计划");

		lockJs(lcjhCjBuySellRecord, cj, l);
		lcjhCjBuySellRecord = lcjhCjBuySellRecordDao.get(LcjhCjBuySellRecord.class, lcjhCjBuySellRecord.getId());
		if (lcjhCjBuySellRecord.getStatus() != 0) {
			return;
		}
		if (1 == lcjhCjBuySellRecord.getType()) {
			l.setGoldCoins(l.getGoldCoins().add(lcjhCjBuySellRecord.getWtzj()));
		} else if (2 == lcjhCjBuySellRecord.getType()) {
			cj.setKmsl(cj.getKmsl() + lcjhCjBuySellRecord.getCjsl());
		}
		lcjhCjBuySellRecord.setStatus(2);
		lcjh2Dao.update(l);
		lcjhCjDao.update(cj);
		lcjhCjBuySellRecordDao.update(lcjhCjBuySellRecord);
	}

	@SuppressWarnings("null")
	public void updateWtwcj(LcjhCjBuySellRecord lcjhCjBuySellRecord) {
		LcjhCj cj = null;
		Lcjh2 l = null;
		lockJs(lcjhCjBuySellRecord, cj, l);
		lcjhCjBuySellRecord = lcjhCjBuySellRecordDao.get(LcjhCjBuySellRecord.class, lcjhCjBuySellRecord.getId());
		if (lcjhCjBuySellRecord.getStatus() != 0) {
			return;
		}
		if (1 == lcjhCjBuySellRecord.getType()) {
			l.setGoldCoins(l.getGoldCoins().add(lcjhCjBuySellRecord.getWtzj()));
		} else if (2 == lcjhCjBuySellRecord.getType()) {
			cj.setKmsl(cj.getKmsl() + lcjhCjBuySellRecord.getCjsl());
		}
		lcjhCjBuySellRecord.setStatus(3);
		lcjh2Dao.update(l);
		lcjhCjDao.update(cj);
		lcjhCjBuySellRecordDao.update(lcjhCjBuySellRecord);
	}

	public void updateJs(Lcjh2 l, Date now, int dayCount, int yesterdayCount, int szLastDayCount, int syLastDayCount) throws AuthenticationException, InvalidRequestException, APIConnectionException, APIException {

		l = lcjh2Dao.get(Lcjh2.class, l.getId());
		String sql = "select sum(ifnull(b.cjsl,0)*ifnull(c.jsprice,0)) cjzj,a.id from t_lcjh2 a "
				+ "left outer join t_lcjh_cj b on a.id = b.lcjhId "
				+ "left outer join t_interfacedata c on b.zqdm = c.zqdm " + "where a.id = '" + l.getId() + "' "
				+ " group by a.id";
		List<Object[]> list = lcjh2Dao.findBySql(sql, null);
		if (list.size() < 1) {
			return;
		}

		String hql_today = "from LcjhMrzc where addTimeDayCount = " + dayCount + " and lcjhId = '" + l.getId() + "'";
		LcjhMrzc mrzc_today = lcjhMrzcDao.get(hql_today);
		if (null == mrzc_today) {
			mrzc_today = new LcjhMrzc();
		}
		String hql_yesterday = "from LcjhMrzc where addTimeDayCount <= " + yesterdayCount + " and lcjhId = '"
				+ l.getId() + "' order by addTimeDayCount desc ";
		String hql_szLastDay = "from LcjhMrzc where addTimeDayCount <= " + szLastDayCount + " and lcjhId = '"
				+ l.getId() + "' order by addTimeDayCount desc ";
		String hql_syLastDay = "from LcjhMrzc where addTimeDayCount <= " + syLastDayCount + " and lcjhId = '"
				+ l.getId() + "' order by addTimeDayCount desc ";
		LcjhMrzc mrzc_yesterday = lcjhMrzcDao.get(hql_yesterday);
		LcjhMrzc mrzc_szLastDay = lcjhMrzcDao.get(hql_szLastDay);
		LcjhMrzc mrzc_syLastDay = lcjhMrzcDao.get(hql_syLastDay);
		Object cjCoin_obj = (null == list.get(0) ? null : list.get(0)[0]);
		BigDecimal cjCoins = (null == cjCoin_obj ? BigDecimal.ZERO : new BigDecimal(cjCoin_obj.toString()));

		BigDecimal allGoldCoins = cjCoins.add(l.getGoldCoins());
		BigDecimal zsy = allGoldCoins.subtract(l.getStartGoldCoins())
				.divide(l.getStartGoldCoins(), ProjectConfig.sale, ProjectConfig.roundingMode)
				.multiply(ProjectConfig.bd100);
		l.setSyl(zsy);
		mrzc_today.setZsy(zsy);

		BigDecimal cw = cjCoins.divide(allGoldCoins, ProjectConfig.sale, ProjectConfig.roundingMode)
				.multiply(ProjectConfig.bd100);
		mrzc_today.setCw(cw);

		mrzc_today.setAddTime(now);
		mrzc_today.setAddTimeDayCount(dayCount);
		mrzc_today.setAllGoldCoins(allGoldCoins);
		mrzc_today.setBuyCount(l.getBuyCount());
		mrzc_today.setBuyMaxCount(l.getBuyMaxCount());
		mrzc_today.setCjCoins(cjCoins);
		mrzc_today.setFwf(l.getFwf());
		mrzc_today.setGoldCoins(l.getGoldCoins());
		mrzc_today.setLcjhId(l.getId());
		mrzc_today.setUserId(l.getUserId());
		mrzc_today.setYjsyl(l.getYjsyl());
		mrzc_today.setYjzsx(l.getYjzsx());
		mrzc_today.setStatus(l.getStatus());
		if (null == mrzc_yesterday) {
			mrzc_today.setBrsy(zsy);
		} else {
			BigDecimal brsy = allGoldCoins.subtract(mrzc_yesterday.getAllGoldCoins())
					.divide(mrzc_yesterday.getAllGoldCoins(), ProjectConfig.sale, ProjectConfig.roundingMode)
					.multiply(ProjectConfig.bd100);
			mrzc_today.setBrsy(brsy);
		}
		if (null == mrzc_szLastDay) {
			mrzc_today.setBzsy(zsy);
		} else {
			BigDecimal bzsy = allGoldCoins.subtract(mrzc_szLastDay.getAllGoldCoins())
					.divide(mrzc_szLastDay.getAllGoldCoins(), ProjectConfig.sale, ProjectConfig.roundingMode)
					.multiply(ProjectConfig.bd100);
			mrzc_today.setBzsy(bzsy);
		}
		if (null == mrzc_syLastDay) {
			mrzc_today.setBysy(zsy);
		} else {
			BigDecimal bysy = allGoldCoins.subtract(mrzc_syLastDay.getAllGoldCoins())
					.divide(mrzc_syLastDay.getAllGoldCoins(), ProjectConfig.sale, ProjectConfig.roundingMode)
					.multiply(ProjectConfig.bd100);
			mrzc_today.setBysy(bysy);
		}

		if (zsy.compareTo(l.getYjsyl()) >= 0) {
			l.setStatus(LcjhStatusEnum.success.ordinal());
			JPushChatModel chat = new JPushChatModel();
			String chattitle = "股天乐信息";
			String chatcontent = "理财计划'" + l.getJhbt() + "',收益率达到预计收益率,成功了!";
			chat.setType(LcjhPushEnum.lcjhSuccess.getCode());
			chat.setTitle(chattitle);
			chat.setContent(chatcontent);
			chat.setDataId(l.getId());
			lcjhJpushUtil.pushLcjhAllUser(chat, l.getId());
		} else if (zsy.compareTo(l.getYjzsx().multiply(ProjectConfig.bd_1)) <= 0) {
			l.setStatus(LcjhStatusEnum.failure.ordinal());
			logger.warn("理财计划id:{},达到止损线,失败", l.getId());

			JPushChatModel chat = new JPushChatModel();
			String chattitle = "股天乐信息";
			String chatcontent = "理财计划'" + l.getJhbt() + "',达到止损线,失败了!";
			chat.setType(LcjhPushEnum.lcjhFailure.getCode());
			chat.setTitle(chattitle);
			chat.setContent(chatcontent);
			chat.setDataId(l.getId());
			lcjhJpushUtil.pushLcjhAllUser(chat, l.getId());
			//ping++ 退款
			Charge ch = Charge.retrieve("ch_id");
			Map<String, Object> refundMap = new HashMap<String, Object>();
			refundMap.put("amount", ch.getAmount());
			refundMap.put("description", "您好!您购买的理财计划失败,已退款"+ch.getAmount()/100+"人民币.");
			Refund re = ch.getRefunds().create(refundMap);
		} else if (DayCountUtil.getDayCount(l.getJhwjrq()) <= dayCount) {
			l.setStatus(LcjhStatusEnum.failure.ordinal());

			JPushChatModel chat = new JPushChatModel();
			String chattitle = "股天乐信息";
			String chatcontent = "理财计划'" + l.getJhbt() + "',时间结束,未达到预计收益,失败了!";
			chat.setType(LcjhPushEnum.lcjhFailure.getCode());
			chat.setTitle(chattitle);
			chat.setContent(chatcontent);
			chat.setDataId(l.getId());
			lcjhJpushUtil.pushLcjhAllUser(chat, l.getId());
			//ping++ 退款
			Charge ch = Charge.retrieve("ch_id");
			Map<String, Object> refundMap = new HashMap<String, Object>();
			refundMap.put("amount", ch.getAmount());
			refundMap.put("description", "您好!您购买的理财计划失败,已退款"+ch.getAmount()/100+"人民币.");
			Refund re = ch.getRefunds().create(refundMap);
		}

		String kmslSql = "update t_lcjh_cj set kmsl = cjsl where lcjhId = '" + l.getId() + "'";
		lcjhCjDao.executeSql(kmslSql);

		lcjhMrzcDao.saveOrUpdate(mrzc_today);
		lcjh2Dao.update(l);
	}

	public void updateJsFjyr(Lcjh2 l, Date now, int dayCount, int yesterdayCount) throws Exception {

		l = lcjh2Dao.get(Lcjh2.class, l.getId());
		if (null == l) {
			return;
		}
		String hql_today = "from LcjhMrzc where addTimeDayCount = " + dayCount + " and lcjhId = '" + l.getId() + "'";
		LcjhMrzc mrzc_today = lcjhMrzcDao.get(hql_today);
		if (null == mrzc_today) {
			mrzc_today = new LcjhMrzc();
			String hql_yesterday = "from LcjhMrzc where addTimeDayCount <= " + yesterdayCount + " and lcjhId = '"
					+ l.getId() + "' order by addTimeDayCount desc ";
			LcjhMrzc mrzc_yesterday = lcjhMrzcDao.get(hql_yesterday);
			if (null == mrzc_yesterday) {
				return;
			}
			BeanUtils.copyProperties(mrzc_yesterday, mrzc_today);
			mrzc_today.setId(null);
			mrzc_today.setAddTime(now);
			mrzc_today.setAddTimeDayCount(dayCount);
		}
		BigDecimal zsy = mrzc_today.getZsy();
		if (zsy.compareTo(l.getYjsyl()) >= 0) {
			l.setStatus(LcjhStatusEnum.success.ordinal());
			JPushChatModel chat = new JPushChatModel();
			String chattitle = "股天乐信息";
			String chatcontent = "理财计划'" + l.getJhbt() + "',收益率达到预计收益率,成功了!";
			chat.setType(LcjhPushEnum.lcjhSuccess.getCode());
			chat.setTitle(chattitle);
			chat.setContent(chatcontent);
			chat.setDataId(l.getId());
			lcjhJpushUtil.pushLcjhAllUser(chat, l.getId());
		} else if (zsy.compareTo(l.getYjzsx().multiply(ProjectConfig.bd_1)) <= 0) {
			l.setStatus(LcjhStatusEnum.failure.ordinal());
			logger.warn("理财计划id:{},达到止损线,失败", l.getId());

			JPushChatModel chat = new JPushChatModel();
			String chattitle = "股天乐信息";
			String chatcontent = "理财计划'" + l.getJhbt() + "',达到止损线,失败了!";
			chat.setType(LcjhPushEnum.lcjhFailure.getCode());
			chat.setTitle(chattitle);
			chat.setContent(chatcontent);
			chat.setDataId(l.getId());
			lcjhJpushUtil.pushLcjhAllUser(chat, l.getId());
			//ping++ 退款
			Charge ch = Charge.retrieve("ch_id");
			Map<String, Object> refundMap = new HashMap<String, Object>();
			refundMap.put("amount", ch.getAmount());
			refundMap.put("description", "您好!您购买的理财计划失败,已退款"+ch.getAmount()/100+"人民币.");
			Refund re = ch.getRefunds().create(refundMap);
		} else if (DayCountUtil.getDayCount(l.getJhwjrq()) <= dayCount) {
			l.setStatus(LcjhStatusEnum.failure.ordinal());

			JPushChatModel chat = new JPushChatModel();
			String chattitle = "股天乐信息";
			String chatcontent = "理财计划'" + l.getJhbt() + "',时间结束,未达到预计收益,失败了!";
			chat.setType(LcjhPushEnum.lcjhFailure.getCode());
			chat.setTitle(chattitle);
			chat.setContent(chatcontent);
			chat.setDataId(l.getId());
			lcjhJpushUtil.pushLcjhAllUser(chat, l.getId());
			//ping++ 退款
			Charge ch = Charge.retrieve("ch_id");
			Map<String, Object> refundMap = new HashMap<String, Object>();
			refundMap.put("amount", ch.getAmount());
			refundMap.put("description", "您好!您购买的理财计划失败,已退款"+ch.getAmount()/100+"人民币.");
			Refund re = ch.getRefunds().create(refundMap);
		}

		String kmslSql = "update t_lcjh_cj set kmsl = cjsl where lcjhId = '" + l.getId() + "'";
		lcjhCjDao.executeSql(kmslSql);
		lcjhMrzcDao.saveOrUpdate(mrzc_today);
		lcjh2Dao.update(l);
	}

}
