package com.lcjh.controller.api;

import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.IntegralConfig;
import com.admin.model.Jfxhjl;
import com.admin.model.LoginUser;
import com.admin.service.IntegralConfigServiceI;
import com.admin.service.JfxhjlfServiceI;
import com.admin.service.LoginUserServiceI;
import com.alibaba.fastjson.JSONObject;
import com.lcjh.result.BooleanBaseResult;
import com.lcjh.result.BooleanObjectResult;
import com.web.exception.CodeEnum;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

@Controller
@RequestMapping("/api/user")
@Validated
@Api(tags = "-api-user-updateinfo", description = "用户,有关接口")
public class UserApiController {
	@Autowired
	private LoginUserServiceI loginUserServiceI;
	@Autowired
	private IntegralConfigServiceI integralConfigServiceI;
	@Autowired
	private JfxhjlfServiceI jfxhjlfServiceI;

	@ApiOperation(value = "修改头像", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/updateTx", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanBaseResult updateTx(HttpServletRequest request,
			@ApiParam(value = "用户id", required = true) @RequestParam(required = false) @NotBlank(message = "用户id不能为空") @Size(min = 1, max = 200, message = "用户id在{min}-{max}个字") String userId,
			@ApiParam(value = "用户头像,为空不会修改", required = false) @RequestParam(required = false) @Size(min = 0, max = 250, message = "tx长度在{min}-{max}") String tx,
			@ApiParam(value = "用户昵称,为空不会修改", required = false) @RequestParam(required = false) @Size(min = 0, max = 250, message = "nickname长度在{min}-{max}") String nickname)
			throws Exception {
		LoginUser user = loginUserServiceI.getLoginUser(userId);
		Assert.notNull(user, "用户不存在");
		if (StringUtils.hasText(tx)) {
			user.setTx(tx);
		}
		if (StringUtils.hasText(nickname)) {
			nickname = nickname.replaceAll("[\\x{10000}-\\x{10FFFF}]", "");
			user.setNickname(nickname);
		}
		loginUserServiceI.update(user);
		return BooleanBaseResult.SUCCESS;
	}

	@ApiOperation(value = "根据手机号获取UID,如果不存在会注册一个新账号,初始密码123456", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/getUserIdByPhone", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanObjectResult<String> getUserIdByPhone(HttpServletRequest request,
			@ApiParam(value = "手机号", required = true) @RequestParam(required = false) @NotBlank(message = "手机号不能为空") @Size(min = 11, max = 20, message = "手机号在{min}-{max}个字") String phone)
			throws Exception {
		JSONObject j = new JSONObject();
		String name = phone; // 用户名
		String userid = ""; // 用户id

		String nickname = phone;// 昵称
		String pwd = "123456"; // 密码
		String gxqm = ""; // 个性签名
		String tjr = "";// 推荐人 ；ps:非必传
		LoginUser lg = new LoginUser();
		if (StringUtils.hasText(userid)) {
			lg.setId(userid);
		} else {
			lg.setId(UUID.randomUUID().toString());
		}
		lg.setName(name);
		lg.setPwd(pwd);
		lg.setPhone(phone);
		lg.setNickname(nickname);
		lg.setGxqm(gxqm);
		IntegralConfig con = integralConfigServiceI.get();
		String zcjf = con.getZcjf();
		lg.setJifen(Integer.valueOf(zcjf));
		IntegralConfig connnnnn = integralConfigServiceI.get();
		lg.setPtsjb(connnnnn.getPtsjb());
		lg.setSjsjb("0.0");
		if (StringUtils.hasText(tjr)) {
			lg.setTjr(tjr);
		}
		int error = loginUserServiceI.add(lg);
		if (error == 1) {
			j.put("errorCode", "2");
			j.put("errorMsg", "该手机或用户名已存在，请核实");
		} else {
			j.put("errorCode", error);
			if (StringUtils.hasText(lg.getTjr())) {
				loginUserServiceI.saveScore(lg, "新增用户", null, "接口注册用户");
				LoginUser lg1 = loginUserServiceI.getUserByName(lg.getTjr());
				if (lg1 != null) {
					Integer integer = new Integer(lg1.getJifen() + 500);
					lg1.setJifen(integer);
					loginUserServiceI.saveScore(lg1, "系统打赏", null, "推荐人奖励");
					j.put("errorMsg", "注册成功");
				} else {
					j.put("errorMsg", "注册成功,推荐人不存在");
				}

			} else {
				j.put("errorMsg", "注册成功");
				loginUserServiceI.saveScore(lg, "新增用户", null, "接口注册用户");
			}
			Jfxhjl jj = new Jfxhjl();
			jj.setResaon("注册");
			jj.setUserid(lg.getId());
			jj.setSl("+" + zcjf);
			jj.setWzid("");
			jfxhjlfServiceI.add(jj);
		}
		BooleanObjectResult<String> result = BooleanObjectResult.getSuccess();
		result.setResult(userid);
		return result;
	}

	@ApiOperation(value = "修改头像(jsonp)", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/updateTxMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void updateTxMore(HttpServletResponse res, HttpServletRequest request,
			@ApiParam(value = "用户id", required = true) @RequestParam(required = false) @NotBlank(message = "用户id不能为空") @Size(min = 1, max = 200, message = "用户id在{min}-{max}个字") String userId,
			@ApiParam(value = "用户头像,为空不会修改", required = false) @RequestParam(required = false) @Size(min = 0, max = 250, message = "tx长度在{min}-{max}") String tx,
			@ApiParam(value = "用户昵称,为空不会修改", required = false) @RequestParam(required = false) @Size(min = 0, max = 250, message = "nickname长度在{min}-{max}") String nickname)
			throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());

		LoginUser user = loginUserServiceI.getLoginUser(userId);
		if (user == null) {
			result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
					CodeEnum.PATTERN_ERROR.getMessage());
			result.setResult("用户不存在");
			String resStr = "";
			String callback = request.getParameter("callback");
			if (null != callback) {
				resStr += callback + "(";
				resStr += JSONObject.toJSONString(result);
				resStr += ")";
			} else {
				resStr = JSONObject.toJSONString(result);
			}
			request.setCharacterEncoding("utf-8");
			res.setContentType("text/html;charset=utf-8");
			res.getWriter().write(resStr);
			res.getWriter().flush();
		} else {
			if (StringUtils.hasText(tx)) {
				user.setTx(tx);
			}
			if (StringUtils.hasText(nickname)) {
				nickname = nickname.replaceAll("[\\x{10000}-\\x{10FFFF}]", "");
				user.setNickname(nickname);
			}
			loginUserServiceI.update(user);
			result.setResult("SUCCESS");
			String resStr = "";
			String callback = request.getParameter("callback");
			if (null != callback) {
				resStr += callback + "(";
				resStr += JSONObject.toJSONString(result);
				resStr += ")";
			} else {
				resStr = JSONObject.toJSONString(result);
			}
			request.setCharacterEncoding("utf-8");
			res.setContentType("text/html;charset=utf-8");
			res.getWriter().write(resStr);
			res.getWriter().flush();
		}
	}

	@ApiOperation(value = "根据手机号获取UID,如果不存在会注册一个新账号,初始密码123456(jsonp)", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/getUserIdByPhoneMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void getUserIdByPhoneMore(HttpServletResponse res, HttpServletRequest request,
			@ApiParam(value = "手机号", required = true) @RequestParam(required = false) @NotBlank(message = "手机号不能为空") @Size(min = 11, max = 20, message = "手机号在{min}-{max}个字") String phone)
			throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());
		JSONObject j = new JSONObject();
		String name = phone; // 用户名
		String userid = ""; // 用户id

		String nickname = phone;// 昵称
		String pwd = "123456"; // 密码
		String gxqm = ""; // 个性签名
		String tjr = "";// 推荐人 ；ps:非必传
		LoginUser lg = new LoginUser();
		if (StringUtils.hasText(userid)) {
			lg.setId(userid);
		} else {
			lg.setId(UUID.randomUUID().toString());
		}
		lg.setName(name);
		lg.setPwd(pwd);
		lg.setPhone(phone);
		lg.setNickname(nickname);
		lg.setGxqm(gxqm);
		IntegralConfig con = integralConfigServiceI.get();
		String zcjf = con.getZcjf();
		lg.setJifen(Integer.valueOf(zcjf));
		IntegralConfig connnnnn = integralConfigServiceI.get();
		lg.setPtsjb(connnnnn.getPtsjb());
		lg.setSjsjb("0.0");
		if (StringUtils.hasText(tjr)) {
			lg.setTjr(tjr);
		}
		int error = loginUserServiceI.add(lg);
		if (error==1) {
			result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
					CodeEnum.PATTERN_ERROR.getMessage());
			result.setResult("该手机或用户名已存在，请核实");
			String resStr = "";
			String callback = request.getParameter("callback");
			if (null != callback) {
				resStr += callback + "(";
				resStr += JSONObject.toJSONString(result);
				resStr += ")";
			} else {
				resStr = JSONObject.toJSONString(result);
			}
			request.setCharacterEncoding("utf-8");
			res.setContentType("text/html;charset=utf-8");
			res.getWriter().write(resStr);
			res.getWriter().flush();
		} else {
			j.put("errorCode", error);
			if (StringUtils.hasText(lg.getTjr())) {
				loginUserServiceI.saveScore(lg, "新增用户", null, "接口注册用户");
				LoginUser lg1 = loginUserServiceI.getUserByName(lg.getTjr());
				if (lg1 != null) {
					Integer integer = new Integer(lg1.getJifen() + 500);
					lg1.setJifen(integer);
					loginUserServiceI.saveScore(lg1, "系统打赏", null, "推荐人奖励");
					result.setResult("注册成功");
					String resStr = "";
					String callback = request.getParameter("callback");
					if (null != callback) {
						resStr += callback + "(";
						resStr += JSONObject.toJSONString(result);
						resStr += ")";
					} else {
						resStr = JSONObject.toJSONString(result);
					}
					request.setCharacterEncoding("utf-8");
					res.setContentType("text/html;charset=utf-8");
					res.getWriter().write(resStr);
					res.getWriter().flush();
					} else {
					result.setResult("注册成功,推荐人不存在");
					String resStr = "";
					String callback = request.getParameter("callback");
					if (null != callback) {
						resStr += callback + "(";
						resStr += JSONObject.toJSONString(result);
						resStr += ")";
					} else {
						resStr = JSONObject.toJSONString(result);
					}
					request.setCharacterEncoding("utf-8");
					res.setContentType("text/html;charset=utf-8");
					res.getWriter().write(resStr);
					res.getWriter().flush();
				}

			} else {
				loginUserServiceI.saveScore(lg, "新增用户", null, "接口注册用户");
				result.setResult("注册成功");
				String resStr = "";
				String callback = request.getParameter("callback");
				if (null != callback) {
					resStr += callback + "(";
					resStr += JSONObject.toJSONString(result);
					resStr += ")";
				} else {
					resStr = JSONObject.toJSONString(result);
				}
				request.setCharacterEncoding("utf-8");
				res.setContentType("text/html;charset=utf-8");
				res.getWriter().write(resStr);
				res.getWriter().flush();
			}
			Jfxhjl jj = new Jfxhjl();
			jj.setResaon("注册");
			jj.setUserid(lg.getId());
			jj.setSl("+" + zcjf);
			jj.setWzid("");
			jfxhjlfServiceI.add(jj);
		}
	}

}
