package com.test.test;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;





import com.admin.model.JPushChatModel;
import com.admin.model.LoginUser;
import com.admin.model.Mncp;
import com.admin.model.Monitor;
import com.admin.model.ReplyQuestions2;
import com.admin.model.Score;
import com.admin.model.ScoreType;
import com.admin.service.InitServiceI;
import com.admin.service.JPushApiClient;
import com.admin.service.LoginUserServiceI;
import com.admin.service.MncpServiceI;
import com.admin.service.ReplyQuestions2ServiceI;
import com.admin.service.ScoreServiceI;
import com.admin.service.ScoreTypeServiceI;
import com.admin.service.SystemMonitorServiceI;
import com.admin.service.UserServiceI;
import com.admin.service.impl.JPushApiClientImpl;
import com.admin.service.impl.ReplyQuestions2ServiceImpl;
import com.admin.service.impl.ReplyQuestionsServiceImpl;
import com.admin.util.InfoUtil;
import com.web.util.TimeUtils;


@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:spring.xml", "classpath:spring-hibernate.xml", "classpath:spring-druid.xml" })
public class Test1 {

	@Autowired
	private InitServiceI initService;
	
	@Autowired
	private UserServiceI userService;
	@Autowired
	private MncpServiceI serviceI;
	@Autowired
	private SystemMonitorServiceI systemMonitorServiceI;
	@Autowired
	private ScoreServiceI scoreServiceI;
	@Autowired
	private LoginUserServiceI loginUserService;
	@Autowired
	private ScoreTypeServiceI scoreTypeServiceI;
	// @Test
	// public void t1() {
	// Tuser u = userService.getById("0");
	// userService.delete(u);
	// }

	// @Test
	// public void t2() {
	// Tuser u = userService.get("from Tuser t join fetch t.troles r where t.id=:id and r.name='超管'", new HashMap<String, Object>() {
	// {
	// put("id", "0");
	// }
	// });
	// if (u != null) {
	// Set<Trole> ts = u.getTroles();
	// for (Trole t : ts) {
	// //System.out.println(t);
	// }
	// }
	// }
	//
	// @Test
	// public void t3() {
	// Tuser u = userService.get("from Tuser t join fetch t.troles r where t.id=:id", new HashMap<String, Object>() {
	// {
	// put("id", "0");
	// }
	// });
	// if (u != null) {
	// Set<Trole> ts = u.getTroles();
	// for (Trole t : ts) {
	// //System.out.println(t);
	// }
	// }
	// }
	//
	// @Test
	// public void t4() {
	// Tuser u = new Tuser();
	// u.setId("1");
	// u.setName("孙宇");
	// u.setPwd("123456");
	// u.setCreatedatetime(new Date());
	// // userService.save(u);
	// }
	//
	// @Test
	// public void t5() {
	// List<Object[]> l = userService.findBySql("select * from tuser");
	// //System.out.println(JSON.toJSONStringWithDateFormat(l, "yyyy-MM-dd hh:mm:ss"));
	// }
	//
	// @Test
	// public void t6() {
	// List<Object[]> l = userService.findBySql("select * from tuser t where t.id = :id", new HashMap<String, Object>() {
	// {
	// put("id", "0");
	// }
	// });
	// //System.out.println(JSON.toJSONStringWithDateFormat(l, "yyyy-MM-dd hh:mm:ss"));
	// }
	//
	// @Test
	// public void t7() {
	// int i = userService.executeSql("update tuser t set t.name='nnn' where t.id='0'");
	// //System.out.println(i);
	// }
	//
	// @Test
	// public void t8() {
	// int i = userService.executeSql("update tuser t set t.name=:name where t.id=:id", new HashMap<String, Object>() {
	// {
	// put("id", "0");
	// put("name", "孙宇");
	// }
	// });
	// //System.out.println(i);
	// }
	//
	// @Test
	// public void t9() {
	// BigInteger i = userService.countBySql("select count(1) from tuser t where t.id=:id", new HashMap<String, Object>() {
	// {
	// put("id", "1");
	// }
	// });
	// //System.out.println(i);
	// }

//	@Test
//	public void test() {
//		// ApplicationContext ac = new ClassPathXmlApplicationContext(new String[]{"classpath:spring.xml", "classpath:spring-hibernate.xml", "classpath:spring-druid.xml" });
//		// //System.out.println(ac);
//		initService.init();
//	}
	
//	@Test
	public void sendmessage(){
		JPushApiClient jPushApiClient=new JPushApiClientImpl();
		String title = "股天乐信息";
		String content = "测试信息";
		List<String> alias=new ArrayList<String>();
//		alias.add("63329700e5114e3d9a27191b4cd066ae");
		alias.add("c052648c50c44964884ed990abbdc9e4");
		
		JPushChatModel jpModel = new JPushChatModel();
		jpModel.setType("1"); // 股票交易
		jpModel.setTitle(title);// 推送题目与内容
		jpModel.setContent(content);
		jpModel.setDataId("222"); // 投顾id
		jPushApiClient.jPush(alias, jpModel);
//		JPushApiClientImpl.buildPushObject_Android_audienceMore_messageWithExtras(alias, jpModel);
	}
	
//	@Test
	public void saveReply() throws Exception{
		ReplyQuestions2ServiceI replyQuestionsServiceI2=new ReplyQuestions2ServiceImpl(); 
		String releaseIp = "127.0.0.1";
		String releaseTime = TimeUtils.getTime("yyyy-MM-dd HH:mm:ss");
		ReplyQuestions2 replyQuestions2 = new ReplyQuestions2();
		String id = UUID.randomUUID().toString(); // 有问必答回复id
		replyQuestions2.setId(id);
		replyQuestions2.setDeleteReason("");
		replyQuestions2.setQuestionId("19e13983-1a28-415e-9fba-c197a4a06e36");
		replyQuestions2.setReleaseContent("这是一个测试");
		replyQuestions2.setReleaseIp(releaseIp);
		replyQuestions2.setReleaseTime(releaseTime);
		replyQuestions2.setState("1");
		replyQuestions2.setUserId("");
		replyQuestions2.setUserName("jack");
		replyQuestions2.setReplyType("1");
		replyQuestions2.setReplyId("");
		replyQuestionsServiceI2.add(replyQuestions2);
	}
	
//	@Test
	public void addTran(){
		try {
			serviceI.add(new Mncp());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
//	@Test
	public void addExceptionMessage(){
		Monitor monitor=null;
		try{
			throw new Exception("test");
		}catch(Exception e){
			
			monitor=new Monitor();
			monitor.setUserid("c052648c-50c4-4964-884e-d990abbdc9e4");
			StackTraceElement[] elements=e.getStackTrace();
			StringBuffer buffer=new StringBuffer();
			int count=0;
			for(StackTraceElement element:elements){
				if(count==0){
					buffer.append("在类名是"+element.getClassName()+",");
					buffer.append(element.getLineNumber()+"行,");
					buffer.append("方法是"+element.getMethodName());
				}
				count++;
			}
			buffer.append("错误信息是:"+e.getMessage());
			monitor.setExceptionMessage(buffer.toString());
			try {
				systemMonitorServiceI.add(monitor);
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
	}
	
	
//	@Test
	public void testSocre(){
		try {
			ScoreType scoreType=new ScoreType();
			scoreType.setTypeName("猜涨跌");
			List<ScoreType> list=scoreTypeServiceI.findScoreTypes(null);
			for(int i=0;i<list.size();i++){
				if(list.get(i).getTypeName().equals(scoreType.getTypeName())){
					scoreType=list.get(i);
				}
			}
			LoginUser loginuser = loginUserService.getUserByName("18502363684");
			Score score=new Score();
			score.setId(UUID.randomUUID().toString());
			score.setLoginUser(loginuser);
			score.setScore("30");
			score.setScoreType(scoreType);
			score.setTime( TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
			scoreServiceI.save(score);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
//	@Test
	public void addScoreTest(){
		ScoreType o=new ScoreType();
		o.setId(UUID.randomUUID().toString());
		o.setTypeName("新增用户");
		scoreTypeServiceI.save(o);
		 o=new ScoreType();
		o.setId(UUID.randomUUID().toString());
		o.setTypeName("充值");
		scoreTypeServiceI.save(o);
		o=new ScoreType();
		o.setId(UUID.randomUUID().toString());
		o.setTypeName("打赏");
		scoreTypeServiceI.save(o);
		o=new ScoreType();
		o.setId(UUID.randomUUID().toString());
		o.setTypeName("猜涨跌");
		scoreTypeServiceI.save(o);
		o=new ScoreType();
		o.setId(UUID.randomUUID().toString());
		o.setTypeName("消费积分");
		scoreTypeServiceI.save(o);
	}
	
//	@Test
	public void getScore(){
		try {
			LoginUser loginuser = loginUserService.getUserByName("18502363684");
			Score score=new Score();
			score.setLoginUser(loginuser);
			List<Score> scores=scoreServiceI.findScore(score);
			for(Score score2:scores){
				Score score3=scoreServiceI.get(Score.class, score2.getId());
				//System.out.println(score3.getScoreType().getTypeName());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
}
