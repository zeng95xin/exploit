package com.test.lock;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Properties;
import java.util.Set;

import org.junit.runner.RunWith;
import org.slf4j.LoggerFactory;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import ch.qos.logback.classic.LoggerContext;
import ch.qos.logback.classic.joran.JoranConfigurator;
import cn.lg.generic.filepath.PathUtil;

@RunWith(SpringJUnit4ClassRunner.class)
@ActiveProfiles("dev")
@ContextConfiguration(locations = { "classpath:spring/*.xml" })
public class TestBase {
	static{
		System.setProperty("spring.profiles.active", "dev");
		PathUtil.logPath = PathUtil.basePath;
		PathUtil.logPath = (PathUtil.logPath + PathUtil.separator + "applog");
        //System.out.println("PathUtil.logPathï¼š" + PathUtil.logPath);
        
		String logbackConfigLocation = "logback.xml";
		
		String resourceName = "config.properties";
		
		String env = "dev_";
		
		InputStream in_pro = TestLock.class.getResourceAsStream("/config/" + env + resourceName);
		
		try {
			Properties props = new Properties();
			props.load(in_pro);
			
			logbackConfigLocation = "/log/" + env + logbackConfigLocation;
			InputStream in = TestLock.class.getResourceAsStream(logbackConfigLocation);
			
			StringBuilder sb = new StringBuilder();
			byte[] b = new byte[1024];
			for(int n;(n = in.read(b)) != -1;){
				sb.append(new String(b,0,n));
			}
			String config = sb.toString();
			
			String regex = "[$][S][{]log.saveDir[}]";
			config = config.replaceAll(regex, PathUtil.logPath.replace("\\", "/"));
			
			Set<Object> set = props.keySet();
			for(Object obj : set){
				regex = "[$][S][{]"+obj.toString()+"[}]";
				config = config.replaceAll(regex, props.getProperty(obj.toString()));
			}
			
			//System.out.println(config);
			
			in = new ByteArrayInputStream(config.getBytes("UTF-8")); 
			
			LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();
			loggerContext.reset();
			JoranConfigurator joranConfigurator = new JoranConfigurator();
			joranConfigurator.setContext(loggerContext);
			joranConfigurator.doConfigure(in);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
