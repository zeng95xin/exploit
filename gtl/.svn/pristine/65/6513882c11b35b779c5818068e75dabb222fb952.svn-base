package com.web.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.LoginUser;
import com.admin.service.AskSharesService;
import com.admin.service.HostMainService;
import com.admin.service.LoginUserServiceI;
import com.admin.service.ReplayAskService;
import com.web.entity.AskShares;
import com.web.entity.HostMain;
import com.web.entity.ReplayAndAsk;
import com.web.entity.ReplayAsk;
import com.web.exception.BusinessDealException;
import com.web.exception.BusinessValidateException;
import com.web.exception.CodeEnum;
import com.web.exception.PatternException;
import com.web.result.BaseListResult;
import com.web.result.BaseObjectResult;
/**
 * 问股控制器
 * @author Administrator
 *
 */
@Controller
@RequestMapping("/askShares")
public class AskSharesController {
	
	private static final Logger logger=org.slf4j.LoggerFactory.getLogger(AskSharesController.class);
	
	@Autowired
	private AskSharesService askSharesService;
	
	@Autowired
	private ReplayAskService replayAskService;
	
	@Autowired
	private HostMainService hostMainService;
	
	@Autowired
	private LoginUserServiceI loginUserServiceI;
	
	/**
	 * 新增
	 * @param req
	 * @param res
	 * @param askShares
	 * @return
	 */
	@RequestMapping(value = "/add", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseObjectResult<AskShares> addAsk(HttpServletRequest req,HttpServletResponse res,
			AskShares askShares) {
		logger.info("问股新增: {}", askShares);
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<AskShares> baseResult = new BaseObjectResult<AskShares>();
		HostMain hm=new HostMain();
		LoginUser lg=new LoginUser();
		try {
			req.setCharacterEncoding("UTF-8");
			// 参数校验
			if (askShares == null) {
				throw new PatternException("申请信息不能为空");
			}
			if (StringUtils.isBlank(askShares.getUserId())) {
				throw new PatternException("用户Id不能为空");
			}
			/*if (StringUtils.isBlank(askShares.getChatHouseId())) {
				throw new PatternException("聊天室Id不能为空");
			}*/
			if (StringUtils.isBlank(askShares.getHostId())) {
				throw new PatternException("主播Id不能为空");
			}
			if (StringUtils.isBlank(askShares.getAskTitle())) {
				throw new PatternException("问股标题不能为空");
			}
			if (StringUtils.isBlank(askShares.getAskDescription())) {
				throw new PatternException("问股详情不能为空");
			}
			hm=hostMainService.get(askShares.getHostId());
			lg=loginUserServiceI.getUser(askShares.getUserId());
			if (lg == null) {
				throw new PatternException("用户不存在");
			} else {
				if (StringUtils.isNotBlank(lg.getNickname())) {
					askShares.setUserNickname(lg.getNickname());
				}
				if (StringUtils.isNotBlank(lg.getTx())) {
					askShares.setUserIamge(lg.getTx());
				}
			}
		  if(hm == null ){
			  throw new PatternException("主播不存在");
			}else {
				if (StringUtils.isNotBlank(hm.getHostNickname())) {
					askShares.setHostNickname(hm.getHostNickname());
				}
			}
		  askShares.setId(UUID.randomUUID().toString());
		  askShares.setAskMark("0");
		  askShares.setAskHMS(new SimpleDateFormat("HH:mm:ss").format(new Date()));
		  askShares.setAskYMD(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
		  askSharesService.add(askShares);
		  hm.setHsotAsk(hm.getHsotAsk()+1);
		  hostMainService.update(hm);
		  
		  baseResult.setErrorCode("0");
		  baseResult.setErrorMessage("问股成功！");
		  baseResult.setResult(askShares);
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<AskShares>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<AskShares>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<AskShares>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<AskShares>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
	
	/**
	 * 直播间问股列表
	 * @param req
	 * @param res
	 * @param replayAndAsk
	 * @return
	 */
	@RequestMapping(value = "/askList", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<ReplayAndAsk> getAsk(HttpServletRequest req,HttpServletResponse res,
			ReplayAndAsk replayAndAsk,String row,String page) {
		logger.info("直播间问股列表: {}", replayAndAsk);
		res.setCharacterEncoding("UTF-8");
		BaseListResult<ReplayAndAsk> baseResult = new BaseListResult<ReplayAndAsk>();
		
		AskShares  as=new AskShares();
		List<ReplayAndAsk> list=new ArrayList<ReplayAndAsk>();
		List<AskShares> listAsk=new ArrayList<AskShares>();
		try {
			req.setCharacterEncoding("UTF-8");
			// 参数校验
			if (replayAndAsk == null) {
				throw new PatternException("查询信息不能为空");
			}
			/*if (StringUtils.isBlank(replayAndAsk.getChatHouseId())) {
				throw new PatternException("聊天室Id不能为空");
			}else{
				as.setChatHouseId(replayAndAsk.getChatHouseId());
			}*/
			if (StringUtils.isBlank(replayAndAsk.getHostId())) {
				throw new PatternException("主播Id不能为空");
			}else{
				as.setHostId(replayAndAsk.getHostId());
			}
			if (StringUtils.isNotBlank(replayAndAsk.getAskYMD())) {
				as.setAskYMD(replayAndAsk.getAskYMD());
			}
			listAsk=askSharesService.getAskListByHostIdAndTimeYMD(as,row,page);
			if (listAsk != null && (listAsk.size() > 0)) {
				for (AskShares askShares : listAsk) {
					ReplayAndAsk raa=new ReplayAndAsk();
					ReplayAsk rak=new ReplayAsk();
					ReplayAsk rak1=new ReplayAsk();
					rak.setAskId(askShares.getId());
					rak1=replayAskService.getReplay(rak);
					
					raa.setAskId(askShares.getId());
					raa.setAskHMS(askShares.getAskHMS());
					raa.setAskYMD(askShares.getAskYMD());
					raa.setAskDescription(askShares.getAskDescription());
					raa.setAskTitle(askShares.getAskTitle());
					raa.setChatHouseId(askShares.getChatHouseId());
					raa.setHostId(askShares.getHostId());
					raa.setHostNickname(askShares.getHostNickname());
					raa.setUserId(askShares.getUserId());
					raa.setUserNickname(askShares.getUserNickname());
					if (rak1 != null) {
						raa.setReplayContent(rak1.getReplayContent());
						raa.setAskMark("1");
						raa.setReplayYMD(rak1.getReplayYMD());
						raa.setReplayHMS(rak1.getReplayHMS());
						if (StringUtils.isNotBlank(rak1.getHostImage())) {
							raa.setHostImage(rak1.getHostImage());
						}
					}else{
						raa.setAskMark("0");
					}
					if (StringUtils.isNotBlank(askShares.getUserIamge())) {
						raa.setUserIamge(askShares.getUserIamge());
					}
					list.add(raa);
				}
			}
			
		  baseResult.setErrorCode("0");
		  baseResult.setErrorMessage("问股查询成功！");
		  baseResult.setResult(list);
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<ReplayAndAsk>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ReplayAndAsk>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ReplayAndAsk>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<ReplayAndAsk>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
	/**
	 * 分页获取用户的问股列表
	 * @param req
	 * @param res
	 * @param replayAndAsk
	 * @param row
	 * @param page
	 * @return
	 */
	@RequestMapping(value = "/userAskList", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<ReplayAndAsk> getUserAsk(HttpServletRequest req,HttpServletResponse res,
			ReplayAndAsk replayAndAsk,String row,String page) {
		logger.info("分页获取用户的问股列表: {}", replayAndAsk);
		res.setCharacterEncoding("UTF-8");
		BaseListResult<ReplayAndAsk> baseResult = new BaseListResult<ReplayAndAsk>();
		
		List<ReplayAndAsk> list=new ArrayList<ReplayAndAsk>();
		List<AskShares> listAsk=new ArrayList<AskShares>();
		try {
			req.setCharacterEncoding("UTF-8");
			// 参数校验
			if (replayAndAsk == null) {
				throw new PatternException("查询信息不能为空");
			}
			if (StringUtils.isBlank(replayAndAsk.getUserId())) {
				throw new PatternException("用户ID不能为空！");
			}
			listAsk=askSharesService.getAskBuyUserId(replayAndAsk.getUserId(), row, page);
			if (listAsk != null && (listAsk.size() > 0)) {
				for (AskShares askShares : listAsk) {
					ReplayAndAsk raa=new ReplayAndAsk();
					ReplayAsk rak=new ReplayAsk();
					ReplayAsk rak1=new ReplayAsk();
					rak.setAskId(askShares.getId());
					rak1=replayAskService.getReplay(rak);
					
					raa.setAskId(askShares.getId());
					raa.setAskHMS(askShares.getAskHMS());
					raa.setAskDescription(askShares.getAskDescription());
					raa.setAskTitle(askShares.getAskTitle());
					raa.setChatHouseId(askShares.getChatHouseId());
					raa.setHostId(askShares.getHostId());
					raa.setHostNickname(askShares.getHostNickname());
					raa.setUserId(askShares.getUserId());
					raa.setUserNickname(askShares.getUserNickname());
					if (rak1 != null) {
						raa.setReplayContent(rak1.getReplayContent());
						raa.setAskMark("1");
						raa.setReplayYMD(rak1.getReplayYMD());
						raa.setReplayHMS(rak1.getReplayHMS());
						if (StringUtils.isNotBlank(rak1.getHostImage())) {
							raa.setHostImage(rak1.getHostImage());
						}
					}else{
						raa.setAskMark("0");
					}
					if (StringUtils.isNotBlank(askShares.getUserIamge())) {
						raa.setUserIamge(askShares.getUserIamge());
					}
					list.add(raa);
				}
			}
			
		  baseResult.setErrorCode("0");
		  baseResult.setErrorMessage("用户问股查询成功！");
		  baseResult.setResult(list);
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<ReplayAndAsk>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ReplayAndAsk>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ReplayAndAsk>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<ReplayAndAsk>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
}
