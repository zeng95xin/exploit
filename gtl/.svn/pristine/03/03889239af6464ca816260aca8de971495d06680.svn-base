package com.web.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.Log;
import com.admin.model.LoginUser;
import com.admin.model.MyCare;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.Json;
import com.admin.pageModel.PageHelper;
import com.admin.service.ChatRoomService;
import com.admin.service.ChestBoxBuyService;
import com.admin.service.ChestBoxService;
import com.admin.service.HostMainService;
import com.admin.service.HostTypeNameService;
import com.admin.service.LogServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.MyCareServiceI;
import com.admin.service.SendGiftRankService;
import com.admin.service.SendGiftService;
import com.admin.util.InfoUtil;
import com.alibaba.fastjson.JSON;
import com.web.entity.ChatHouse;
import com.web.entity.ChestBox;
import com.web.entity.ChestBoxIsBuy;
import com.web.entity.HostMain;
import com.web.entity.HostOnline;
import com.web.entity.HostType;
import com.web.entity.SendRank;
import com.web.exception.BusinessDealException;
import com.web.exception.BusinessValidateException;
import com.web.exception.CodeEnum;
import com.web.exception.PatternException;
import com.web.result.BaseListResult;
import com.web.result.BaseObjectResult;
import com.web.util.IDUtils;
import com.web.util.Pinyin4j;
import com.web.util.TimeUtils;

/**
 * 主播控制器
 * @author Administrator
 *
 */
@Controller
@RequestMapping("/hostMain")
public class HostMainController {
	
private static final Logger logger = LoggerFactory.getLogger(HostMainController.class);
	

	@Autowired
	private HostMainService hostMainService;
	
	@Autowired
	private HostTypeNameService hostTypeNameService;
	
	@Autowired
	private LogServiceI logService;
	
	@Autowired
	private MyCareServiceI myCareServiceI;
	
	@Autowired
	private LoginUserServiceI loginUserServiceI;
	
	@Autowired
	private ChatRoomService chatRoomService;
	
	@Autowired
	private SendGiftService sendGiftService;
	
	@Autowired
	private ChestBoxService chestBoxService;
	
	@Autowired
	private SendGiftRankService sendGiftRankService;
	
	@Autowired
	private ChestBoxBuyService chestBoxBuyService;
	
	/**
	 * 跳转到主播管理页面
	 * 
	 * @return
	 */
	@RequestMapping("/manager")
	public String manager() {
		return "/admin/host/hostMainManagement";
	}

	/**
	 * 获取主播列表
	 * 
	 * @param p
	 * @param ph
	 * @return
	 */
	@RequestMapping("/dataGrid")
	@ResponseBody
	public DataGrid dataGrid(HostMain p, PageHelper ph) {
		return hostMainService.dataGrid(p, ph);

	}
	

	/**
	 * 审核不通过跳转
	 * 
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/btg")
	public String btg(HttpServletRequest request, String id) throws Exception {
		HostMain t = hostMainService.get(id);
		HostType ht=hostTypeNameService.get(t.getHostStype());
		request.setAttribute("t", t);
		request.setAttribute("ht", ht);
		return "/admin/host/hostShbtg";
	}
	
	/**
	 * 审核
	 * @param id
	 * @param type=1
	 * @param request
	 * @param session
	 * @return
	 */
	@RequestMapping("/shenhe")
	@ResponseBody
	public Json shenhe(String id, String type, HttpServletRequest request,
			HttpSession session) {
		Json j = new Json();
		try {
			HostMain t=new HostMain();
			t.setId(id);
			t.setHostStatus(type);
			hostMainService.shenhe(t);

			j.setSuccess(true);
			j.setMsg("审核成功！");

			Log log = new Log();
			log.setType("shnehe");// 操作描述
			log.setAuthor(InfoUtil.getUser(session));// 操作员
			log.setIp(InfoUtil.getIpAddr(request));// ip
			log.setTteble("HostMain");// 操作的表
			log.setTid(id);// 操作的ID
			log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
			logService.add(log);

		} catch (Exception e) {
			j.setMsg(e.getMessage());
		}
		return j;
	}

	/**
	 * 批量审核
	 * 
	 * @param ids
	 *            ('0','1','2')
	 * @return
	 */
	@RequestMapping("/plsh")
	@ResponseBody
	public Json batchDelete(String ids, String type, HttpSession session,
			HttpServletRequest request) {
		Json j = new Json();
		if (ids != null && ids.length() > 0) {
			for (String id : ids.split(",")) {
				if (id != null) {
					this.shenhe(id, type, request, session);
				}
			}
		}
		j.setMsg("批量审核成功！");
		j.setSuccess(true);
		return j;
	}
	
	@RequestMapping("/update1")
	@ResponseBody
	public Json update1(HostMain t, HttpServletRequest request, HttpSession session) {
		Json j = new Json();
		try {
				hostMainService.update1(t);
				j.setSuccess(true);
				j.setMsg("审核成功！");
				j.setObj(t);

				Log log = new Log();
				log.setType("update");// 操作描述
				log.setAuthor(InfoUtil.getUser(session));// 操作员
				log.setIp(InfoUtil.getIpAddr(request));// ip
				log.setTteble("HostMain");// 操作的表
				log.setTid(t.getId());// 操作的ID
				log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
				logService.add(log);

		} catch (Exception e) {
			j.setMsg(e.getMessage());
		}
		return j;
	}
	
	
	/**
	 * 检测直播间名称
	 * @param req
	 * @param res
	 * @param hostMain
	 * @return
	 */
	//@RequestMapping(value = "/check", method = RequestMethod.POST, produces = { MediaType.APPLICATION_JSON_VALUE })
	@RequestMapping(value = "/check", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseObjectResult<String> getHouseName(HttpServletRequest req,HttpServletResponse res,HostMain hostMain) {

		logger.info("检测直播间名称: {}",hostMain);
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<String> baseResult = new BaseObjectResult<String>();
		List<HostMain> list=new ArrayList<HostMain>();
		try {
			if (hostMain == null) {
				throw new PatternException("查询信息不能为空");
			}
			if (StringUtils.isBlank(hostMain.getHostHomeName())) {
				throw new PatternException("直播间名称不能为空！");
			}
			list=hostMainService.getHostName(hostMain.getHostHomeName());
			if (list != null && (list.size() >0)) {
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("该名称已存在！");

			}
			baseResult.setErrorCode("0");
			baseResult.setErrorMessage("该名称可用！");
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<String>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<String>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<String>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<String>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}

	
	/**
	 * 主播申请注册
	 * @param req
	 * @param hostMain
	 * @return
	 */
	
	//@RequestMapping(value = "/add", method = RequestMethod.POST, produces = { MediaType.APPLICATION_JSON_VALUE })
	@RequestMapping(value = "/add", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseObjectResult<HostMain> addHost(HttpServletRequest req,HttpServletResponse res,
			HostMain hostMain) {
		logger.info("主播注册: {}", hostMain);
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<HostMain> baseResult = new BaseObjectResult<HostMain>();
		HostMain hm=new HostMain();
		LoginUser lg=new LoginUser();
		HostType ht=new HostType();
		try {
			// 参数校验
			if (hostMain == null) {
				throw new PatternException("申请信息不能为空");
			}
			if (StringUtils.isBlank(hostMain.getUserId())) {
				throw new PatternException("用户Id不能为空");
			}
			if (StringUtils.isBlank(hostMain.getHostHomeName())) {
				throw new PatternException("直播间名称不能为空");
			}
			if (StringUtils.isBlank(hostMain.getHomeLable())) {
				throw new PatternException("直播间标签不能为空");
			}
			hm=hostMainService.getHost(hostMain.getUserId());
			lg=loginUserServiceI.getUser(hostMain.getUserId());
			ht=hostTypeNameService.get(hostMain.getHostStype());
			if (lg == null) {
				throw new PatternException("用户不存在");
			} else {
				if (StringUtils.isNotBlank(lg.getTx())) {
					hostMain.setHostImage(lg.getTx());
				}
				if (StringUtils.isNotBlank(lg.getIm_username())) {
					hostMain.setHostName(lg.getIm_username());
				}
			}
			if (hm != null && hm.getHostStatus().equals("0")) {
				baseResult.setErrorCode("2");
				baseResult.setErrorMessage("您的申请正在审核中！");
				baseResult.setResult(hm);
			} else if(hm != null && hm.getHostStatus().equals("1")){
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("您已经是主播！");
				baseResult.setResult(hm);
			}else {
				hostMain.setId(IDUtils.getInstanse().getUID());
				//hostMain.setHostEndTime("1");//凌晨1：00结束
				hostMain.setHostEndTime("0");//晚上00：00结束
				hostMain.setHostStartTime("0");//凌晨00：00开始
				hostMain.setHostStatus("0");
				hostMain.setHostCare(0);
				hostMain.setLookNum(0);
				hostMain.setHsotAsk(0);
				hostMain.setHsotReplay(0);
				hostMain.setHostLevel(Pinyin4j.getFirstZM(hostMain.getHostHomeName()));//把直播间收个汉字的字母大写存入
				hostMain.setReigstTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
				if (StringUtils.isNotBlank(ht.getHostTypeName())) {
					hostMain.setHostStypeName(ht.getHostTypeName());
				}
				hostMainService.add(hostMain);
				
				lg.setHostFlag("0");
				loginUserServiceI.update(lg);
				
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("申请成功！");
				baseResult.setResult(hostMain);
			}
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<HostMain>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<HostMain>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<HostMain>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<HostMain>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}

	/**
	 * 编辑主播信息
	 * @param req
	 * @param hostMain
	 * @return
	 */
	//@RequestMapping(value = "/edit", method = RequestMethod.POST, produces = { MediaType.APPLICATION_JSON_VALUE })
	@RequestMapping(value = "/edit", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseObjectResult<HostMain> editHost(HttpServletRequest req,HttpServletResponse res,HostMain hostMain) {

		logger.info("修改主播信息: {}", hostMain);
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<HostMain> baseResult = new BaseObjectResult<HostMain>();
		List<ChatHouse> list=new ArrayList<ChatHouse>();
		HostMain hm=new HostMain();
		HostMain hmn=new HostMain();
		try {
			req.setCharacterEncoding("UTF-8");
			if (hostMain == null) {
				throw new PatternException("主播信息不能为空");
			}
			if (StringUtils.isBlank(hostMain.getId())) {
				throw new PatternException("主播ID不能为空");
			}
			list=chatRoomService.getAllRoomByHostId1(hostMain.getId());
			BeanUtils.copyProperties(hostMain, hm);
			if (StringUtils.isNotBlank(hm.getHostHomeName())) {
				hm.setHostLetter(Pinyin4j.getFirstZM(hm.getHostHomeName()));
				if (list != null && list.size() > 0) {//更改所有聊天室的名称
					for (ChatHouse chatHouse : list) {
						if (StringUtils.isNotBlank(chatHouse.getName())) {
							chatHouse.setName(hm.getHostHomeName());
							chatRoomService.update(chatHouse);
						}
					}
				}
			}
			if (StringUtils.isNotBlank(hm.getHostIntroduction())) {
				if (list != null && list.size() > 0) {//更改所有聊天室的简介
					for (ChatHouse chatHouse : list) {
						if (StringUtils.isNotBlank(chatHouse.getDescription())) {
							chatHouse.setDescription(hm.getHostIntroduction());
							chatRoomService.update(chatHouse);
						}
					}
				}
			}
			hostMainService.update2(hm);
			
			hmn=hostMainService.get(hostMain.getId());
			baseResult.setErrorCode("0");
			baseResult.setErrorMessage("更新成功！");
			baseResult.setResult(hmn);
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<HostMain>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<HostMain>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<HostMain>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<HostMain>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}
	
	/**
	 * 播主按直播间字母排序列表
	 * @param req
	 * @return
	 */
	//@RequestMapping(value = "/allName", method = RequestMethod.POST, produces = { MediaType.APPLICATION_JSON_VALUE })
	@RequestMapping(value = "/allName", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseObjectResult<Map<String, List<String>>> getAllHost(HttpServletRequest req,HttpServletResponse res) {

		logger.info("获取全部主播信息: {}");
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<Map<String, List<String>>> baseResult = new BaseObjectResult<Map<String, List<String>>>();
		Map<String, List<String>> map=new HashMap<String, List<String>>();
		try {
			map=hostMainService.getAllHostName();
			JSON.parseObject(map.toString());
			baseResult.setErrorCode("0");
			baseResult.setErrorMessage("查询成功");
			baseResult.setResult(map);
			
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<Map<String, List<String>>>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<Map<String, List<String>>>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<Map<String, List<String>>>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<Map<String, List<String>>>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}
	
	/**
	 * 新增或取消关注主播
	 * @param req
	 * @param res
	 * @param mycare
	 * @return
	 */
	//@RequestMapping(value = "/care", method = RequestMethod.POST, produces = { MediaType.APPLICATION_JSON_VALUE })
	@RequestMapping(value = "/care", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<MyCare> careHost(HttpServletRequest req,HttpServletResponse res,MyCare mycare) {

		logger.info("获取关注的主播信息: {}");
		res.setCharacterEncoding("UTF-8");
		BaseListResult<MyCare> baseResult = new BaseListResult<MyCare>();
		List<MyCare> listCare = new ArrayList<MyCare>();
		List<MyCare> myCare = new ArrayList<MyCare>();
		HostMain hm=new HostMain();
		try {
			
			if (mycare == null) {
				throw new PatternException("关注信息不能为空");
			}
			if (StringUtils.isBlank(mycare.getUserId())) {
				throw new PatternException("用户ID不能为空");
			}
			if (StringUtils.isBlank(mycare.getConcernedId())) {
				throw new PatternException("主播ID不能为空");
			}
			hm=hostMainService.get(mycare.getConcernedId());
			listCare=myCareServiceI.getCare(mycare);
			if ((listCare != null) && (listCare.size() > 0)) {
				myCareServiceI.delete(listCare.get(0).getId());
				myCare=myCareServiceI.getMyCareByHm(mycare);
				if (hm != null) {
					if (myCare != null) {
						
						hm.setHostCare(myCare.size());//更新主播的关注度
					}
				}
				hostMainService.update(hm);
				
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("您已取消关注该主播!");
				baseResult.setResult(myCare);
			} else {
				myCare=myCareServiceI.getMyCareByHm(mycare);//关注之前的关注list
				
				mycare.setId(UUID.randomUUID().toString());
				mycare.setCareType("3");//关注主播值为3
				myCareServiceI.add(mycare);
				if (myCare != null) {
					
					myCare.add(0, mycare);//在第一个元素插入新增的关注
				} else {
					myCare=myCareServiceI.getMyCare(mycare);//关注之前的关注list
				}
				
				if (hm != null) {
					hm.setHostCare(myCare.size());//更新主播的关注度
				}
				hostMainService.update(hm);
				
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("关注成功!");
				baseResult.setResult(myCare);
			}
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<MyCare>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<MyCare>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<MyCare>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<MyCare>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}
	
	/**
	 * PC端获取我的关注主播
	 * 待定接口
	 * @param req
	 * @param res
	 * @param mycare
	 * @return
	 */
	//@RequestMapping(value = "/myCare", method = RequestMethod.POST, produces = { MediaType.APPLICATION_JSON_VALUE })
	@RequestMapping(value = "/myCare", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<MyCare> getCareHost(HttpServletRequest req,HttpServletResponse res,MyCare mycare,String row,String page) {

		logger.info("获取关注的主播信息: {}");
		res.setCharacterEncoding("UTF-8");
		BaseListResult<MyCare> baseResult = new BaseListResult<MyCare>();
		List<MyCare> listCare = new ArrayList<MyCare>();
		List<MyCare> myCare = new ArrayList<MyCare>();
		try {
			
			if (mycare == null) {
				throw new PatternException("关注信息不能为空");
			}
			/*if (StringUtils.isBlank(mycare.getUserId())) {
				throw new PatternException("用户ID不能为空");
			}
			if (StringUtils.isBlank(mycare.getConcernedId())) {
				throw new PatternException("主播ID不能为空");
			}*/
			
			listCare=myCareServiceI.getCare2(mycare,row,page);
			if ((listCare != null) && (listCare.size() > 0)) {
				myCare=myCareServiceI.getMyCare(mycare);
				for (MyCare myCare2 : myCare) {
					if (myCare2.getId().equals(listCare.get(0).getId())) {
						myCare.remove(myCare2);//删除list里关注对象
					}
				}
				myCare.add(0, listCare.get(0));//在list第一元素插入关注对象
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("查询成功");
				baseResult.setResult(myCare);
			} else {
				myCare=myCareServiceI.getMyCare(mycare);//关注之前的关注list
				
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("查询成功!");
				baseResult.setResult(myCare);
			}
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<MyCare>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<MyCare>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<MyCare>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<MyCare>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}
	/**
	 * 分页获取用户关注的主播列表
	 * @param req
	 * @param res
	 * @param mycare
	 * @param row
	 * @param page
	 * @return
	 */
	@RequestMapping(value = "/myCareHost", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<HostOnline> getMyCareHost(HttpServletRequest req,HttpServletResponse res,MyCare mycare,String row,String page) {

		logger.info("获取该用户关注的主播信息: {}");
		res.setCharacterEncoding("UTF-8");
		BaseListResult<HostOnline> baseResult = new BaseListResult<HostOnline>();
		List<MyCare> listCare = new ArrayList<MyCare>();
		//List<HostMain> myCareHostMain = new ArrayList<HostMain>();
		List<HostOnline> myCareHostOnline = new ArrayList<HostOnline>();
		try {
			
			if (mycare == null) {
				throw new PatternException("关注信息不能为空");
			}
			if (StringUtils.isBlank(mycare.getUserId())) {
				throw new PatternException("用户ID不能为空");
			}
			/*
			if (StringUtils.isBlank(mycare.getConcernedId())) {
				throw new PatternException("主播ID不能为空");
			}*/
			
			listCare=myCareServiceI.getCare2(mycare,row,page);
			if ((listCare != null) && (listCare.size() > 0)) {
				for (MyCare myCare : listCare) {
					HostMain hm=new HostMain();
					HostOnline ho=new HostOnline();
					if (StringUtils.isNotBlank(myCare.getConcernedId())) {
						hm=hostMainService.get(myCare.getConcernedId());
						if (hm != null) {
							//myCareHostMain.add(hm);
							org.springframework.beans.BeanUtils.copyProperties(hm, ho);
							ho.setIsCare("0");
							myCareHostOnline.add(ho);
						}
					}else{
						continue;
					}
				}
			} /*else {
				
				
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("您还未关注!");
				baseResult.setResult(myCareHostOnline);
			}*/
			baseResult.setErrorCode("0");
			baseResult.setErrorMessage("查询成功");
			baseResult.setResult(myCareHostOnline);
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<HostOnline>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<HostOnline>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<HostOnline>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<HostOnline>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}
	/**
	 * 分页获取关注该主播的用户信息
	 * @param req
	 * @param res
	 * @param mycare
	 * @param row
	 * @param page
	 * @return
	 */
	@RequestMapping(value = "/myCareUser", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<LoginUser> getMyCareUser(HttpServletRequest req,HttpServletResponse res,MyCare mycare,String row,String page) {

		logger.info("获取关注该主播的用户信息: {}");
		res.setCharacterEncoding("UTF-8");
		BaseListResult<LoginUser> baseResult = new BaseListResult<LoginUser>();
		List<MyCare> listCare = new ArrayList<MyCare>();
		List<LoginUser> myCareHostMain = new ArrayList<LoginUser>();
		try {
			
			if (mycare == null) {
				throw new PatternException("关注信息不能为空");
			}
			/*if (StringUtils.isBlank(mycare.getUserId())) {
				throw new PatternException("用户ID不能为空");
			}*/
			
			if (StringUtils.isBlank(mycare.getConcernedId())) {
				throw new PatternException("主播ID不能为空");
			}
			
			listCare=myCareServiceI.getCare2(mycare,row,page);
			if ((listCare != null) && (listCare.size() > 0)) {
				for (MyCare myCare : listCare) {
					LoginUser hm=new LoginUser();
					if (StringUtils.isNotBlank(myCare.getUserId())) {
						hm=loginUserServiceI.getUser(myCare.getUserId());
						if (hm != null) {
							myCareHostMain.add(hm);
						}
					}else{
						continue;
					}
				}
			} /*else {
				
				
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("您还未被关注!");
				baseResult.setResult(myCareHostMain);
			}*/
			
			baseResult.setErrorCode("0");
			baseResult.setErrorMessage("查询成功");
			baseResult.setResult(myCareHostMain);
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<LoginUser>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<LoginUser>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<LoginUser>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<LoginUser>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}
	
	/**
	 * 获取人气主播
	 * @param req
	 * @param res
	 * @param host
	 * @param row
	 * @param page
	 * @return
	 */
	//@RequestMapping(value = "/getOnlineHost", method = RequestMethod.POST, produces = { MediaType.APPLICATION_JSON_VALUE })
	@RequestMapping(value = "/getOnlineHost", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<HostOnline> getNumHost(HttpServletRequest req,HttpServletResponse res,HostMain host,String row,String page) {

		logger.info("获取人气主播信息: {}");
		res.setCharacterEncoding("UTF-8");
		
		BaseListResult<HostOnline> baseResult=new BaseListResult<HostOnline>();
		
		List<ChatHouse> lchat=new ArrayList<ChatHouse>();
		
		List<HostOnline> list=new ArrayList<HostOnline>();
		
		try {
			if (host == null ) {
				throw new PatternException("用户信息不能为空！");
			}
			if (StringUtils.isBlank(host.getUserId())) {
				throw new PatternException("用户id不能为空！");
			}
			lchat=chatRoomService.getByCount(row, page);
			
			if ((lchat != null) && (lchat.size() > 0)) {
				
				for (ChatHouse chatHouse : lchat) {
					if ( StringUtils.isBlank(chatHouse.getHostId()) ) {
						continue;
					}
					HostMain hostm=new HostMain();
					hostm=hostMainService.get(chatHouse.getHostId());
					HostOnline ho=new HostOnline();
					org.springframework.beans.BeanUtils.copyProperties(hostm, ho);
					if (StringUtils.isNotBlank(chatHouse.getCreateTime()) && chatHouse.getCreateTime().equals(new SimpleDateFormat("yyyy-MM-dd").format(new Date()))) {
						ho.setIsTodayCreate("1");
					}
					if (StringUtils.isNotBlank(chatHouse.getCreateTime()) && (!chatHouse.getCreateTime().equals(new SimpleDateFormat("yyyy-MM-dd").format(new Date())))) {
						ho.setIsTodayCreate("0");
					}
					
					List<MyCare> listCare=new ArrayList<MyCare>();
					
					MyCare myCare=new MyCare();
					myCare.setCareType("3");
					myCare.setUserId(host.getUserId());
					myCare.setConcernedId(hostm.getId());
					
					listCare=myCareServiceI.getCare(myCare);
					if ((listCare != null) && (listCare.size() > 0)) {
						ho.setIsCare("0");
					}else{
						ho.setIsCare("1");
					}
					if (StringUtils.isNotBlank(chatHouse.getTodayPoint())) {
						ho.setTodayPoint(chatHouse.getTodayPoint());
					}
					if (StringUtils.isNotBlank(chatHouse.getGroupId())) {
						ho.setGroupId(chatHouse.getGroupId());
					}
					if (StringUtils.isNotBlank(chatHouse.getId())) {
						ho.setChatHouseId(chatHouse.getId());
					}
					List<ChatHouse> lchatHouse=new ArrayList<ChatHouse>();
					lchatHouse=chatRoomService.getAllByCreateTime(chatHouse.getCreateTime(), chatHouse.getOwner(), chatHouse.getHostId());
					if (lchatHouse != null && (lchatHouse.size() > 0)) {
						ho.setListChatHouse(lchatHouse);
					}
					list.add(ho);
				}
				
				
			}
			
			baseResult.setErrorCode("0");
			baseResult.setErrorMessage("查询成功！");
			baseResult.setResult(list);
			
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<HostOnline>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<HostOnline>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<HostOnline>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<HostOnline>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}

	/**
	 * 获取送礼排行前三位粉丝
	 * 分页获取送礼排行粉丝，首页由前端截取前三名；
	 * @param req
	 * @param res
	 * @param hostMain
	 * @return
	 */
	@RequestMapping(value = "/fans", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseObjectResult<SendRank> getFans(HttpServletRequest req,HttpServletResponse res,HostMain hostMain,String row,String page) {

		logger.info("获取送礼排行前三位粉丝: {}", hostMain);
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<SendRank> baseResult = new BaseObjectResult<SendRank>();
		SendRank sr=new SendRank();
		try {
			req.setCharacterEncoding("UTF-8");
			if (hostMain == null) {
				throw new PatternException("主播信息不能为空");
			}
			if (StringUtils.isBlank(hostMain.getId())) {
				throw new PatternException("主播id不能为空");
			}
			sendGiftRankService.deleteAll();
			sr=sendGiftService.addGetList(hostMain.getId(),row,page);
			//if (sr !=null) {
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("查询成功");
				baseResult.setResult(sr);
			/*} else {
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("期待你的送礼");
				baseResult.setResult(sr);
			}*/
			
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<SendRank>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<SendRank>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<SendRank>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<SendRank>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}
	
	/**
	 * 根据主播ID分页查询他的百宝箱
	 * @param req
	 * @param res
	 * @param host
	 * @param row
	 * @param page
	 * @return
	 */
	@RequestMapping(value = "/getAllBox", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<ChestBoxIsBuy> getHostAllBox(HttpServletRequest req,HttpServletResponse res,HostMain host,String row
			,String page,String userId) {

		logger.info("根据主播ID分页查询他的百宝箱: {}");
		res.setCharacterEncoding("UTF-8");
		
		BaseListResult<ChestBoxIsBuy> baseResult=new BaseListResult<ChestBoxIsBuy>();
		List<ChestBox> chest=new ArrayList<ChestBox>();
		List<ChestBoxIsBuy> chestBuy=new ArrayList<ChestBoxIsBuy>();
		
		try {
			if (host == null ) {
				throw new PatternException("用户信息不能为空！");
			}
			if (StringUtils.isBlank(host.getId())) {
				throw new PatternException("主播id不能为空！");
			}
			chest=chestBoxService.getByHostId(host.getId(), row, page);
			if (StringUtils.isNotBlank(userId)) {
				if (chest != null && chest.size() > 0) {
					for (ChestBox chestBox : chest) {
						ChestBoxIsBuy cbib=new ChestBoxIsBuy();
						boolean flag=false;
						if (StringUtils.isNotBlank(chestBox.getBoxID())) {
							org.springframework.beans.BeanUtils.copyProperties(chestBox, cbib);
							flag=chestBoxBuyService.checkBuyer(chestBox.getBoxID(), userId);
							if (flag) {
								cbib.setIsBuy("1");
							} else {
								cbib.setIsBuy("0");
							}
							chestBuy.add(cbib);
						} else {
							continue;
						}
					}
				} 
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("查询成功！");
				baseResult.setResult(chestBuy);
				
			} else {
				if (chest != null && chest.size() > 0) {
					for (ChestBox chestBox : chest) {
						ChestBoxIsBuy cbib=new ChestBoxIsBuy();
						if (chestBox != null ) {
							org.springframework.beans.BeanUtils.copyProperties(chestBox, cbib);
							chestBuy.add(cbib);
						} else {
							continue;
						}
						
					}
				}
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("查询成功！");
				baseResult.setResult(chestBuy);
			}
			
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<ChestBoxIsBuy>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxIsBuy>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxIsBuy>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxIsBuy>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}
	
	/**
	 * 分页获取问股达人
	 * @param req
	 * @param res
	 * @param row
	 * @param page
	 * @return
	 */
	@RequestMapping(value = "/AskMost", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<HostMain> getAskMost(HttpServletRequest req,HttpServletResponse res,String row , String page) {

		logger.info("获取问股达人: {}");
		res.setCharacterEncoding("UTF-8");
		BaseListResult<HostMain> baseResult = new BaseListResult<HostMain>();
		List<HostMain> list = new ArrayList<HostMain>();
		
		try {
			list=hostMainService.getByAskNum(row, page);
			if (list != null && (list.size() > 0)) {
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("获取成功!");
				baseResult.setResult(list);
			} else {

				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("未找到问股达人!");
				baseResult.setResult(list);
			}	
			
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<HostMain>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<HostMain>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<HostMain>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<HostMain>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}
	/**
	 * 根据userID获取主播信息
	 * @param req
	 * @param res
	 * @param hostMain
	 * @return
	 */
	@RequestMapping(value = "/getOneHost", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseObjectResult<HostMain> getOneHost(HttpServletRequest req,HttpServletResponse res,
			HostMain hostMain) {
		logger.info("获取主播详情: {}", hostMain);
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<HostMain> baseResult = new BaseObjectResult<HostMain>();
		HostMain hm=new HostMain();
		try {
			// 参数校验
			if (hostMain == null) {
				throw new PatternException("信息不能为空");
			}
			if (StringUtils.isBlank(hostMain.getUserId())) {
				throw new PatternException("用户Id不能为空");
			}
			hm=hostMainService.getHost(hostMain.getUserId());
			if (hm == null) {
				throw new PatternException("主播不存在！");
			} else {
				if ( hm.getHostStatus().equals("0")) {
					baseResult.setErrorCode("1");
					baseResult.setErrorMessage("该主播正在审核中！");
					//baseResult.setResult(hm);
				} else if( hm.getHostStatus().equals("1")){
					baseResult.setErrorCode("0");
					baseResult.setErrorMessage("获取主播详情成功！");
					baseResult.setResult(hm);
				}else {
					baseResult.setErrorCode("2");
					baseResult.setErrorMessage("该主播未通过审核！");
					//baseResult.setResult(hm);
				}
			}
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<HostMain>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<HostMain>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<HostMain>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<HostMain>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
}
