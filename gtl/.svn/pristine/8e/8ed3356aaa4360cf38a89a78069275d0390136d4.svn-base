package com.web.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.LoginUser;
import com.admin.service.BookingService;
import com.admin.service.HostMainService;
import com.admin.service.LoginUserServiceI;
import com.web.entity.Booking;
import com.web.entity.HostMain;
import com.web.exception.BusinessDealException;
import com.web.exception.BusinessValidateException;
import com.web.exception.CodeEnum;
import com.web.exception.PatternException;
import com.web.result.BaseListResult;
import com.web.result.BaseObjectResult;

@Controller
@RequestMapping("/booking")
public class BookingController {

	private static final Logger logger = LoggerFactory.getLogger(BookingController.class);
	
	@Autowired
	private BookingService bookingService;
	
	@Autowired
	private LoginUserServiceI loginUserServiceI;
	
	@Autowired
	private HostMainService hostMainService;
	/**
	 * 新增预约
	 * @param req
	 * @param res
	 * @param booking
	 * @return
	 */
	@RequestMapping(value = "/add", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseObjectResult<Booking> addBooking(HttpServletRequest req,HttpServletResponse res,
			Booking booking) {
		logger.info("新增预约: {}", booking);
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<Booking> baseResult = new BaseObjectResult<Booking>();
		LoginUser lg= new LoginUser();
		HostMain hm=new HostMain();
		try {
			req.setCharacterEncoding("UTF-8");
			// 参数校验
			if (booking == null) {
				throw new PatternException("预约信息不能为空");
			}
			if (StringUtils.isBlank(booking.getHostId())) {
				throw new PatternException("主播ID不能为空");
			}
			if (StringUtils.isBlank(booking.getUserId())) {
				throw new PatternException("预约用户Id不能为空");
			}
			if (StringUtils.isBlank(booking.getBookingContent())) {
				throw new PatternException("预约内容不能为空");
			}
			if (StringUtils.isBlank(booking.getBookingPlace())) {
				throw new PatternException("预约地点不能为空");
			}
			if (StringUtils.isBlank(booking.getUserName())) {
				throw new PatternException("预约用户真实姓名不能为空");
			}
			if (StringUtils.isBlank(booking.getUserPhone())) {
				throw new PatternException("预约用户手机号码不能为空");
			}
			hm=hostMainService.get(booking.getHostId());
			if (hm == null ) {
				throw new PatternException("主播不存在！");
			}else{
				if (StringUtils.isNotBlank(hm.getHostNickname())) {
					booking.setHostNickname(hm.getHostNickname());
				}
				if (StringUtils.isNotBlank(hm.getHostImage())) {
					booking.setHostImage(hm.getHostImage());
				}
			}
			lg=loginUserServiceI.getUser(booking.getUserId()); 
			if (lg == null ) {
				throw new PatternException("用户不存在！");
			}else{
				if (StringUtils.isNotBlank(lg.getNickname())) {
					booking.setUserNickname(lg.getNickname());
				}
				if (StringUtils.isNotBlank(lg.getTx())) {
					booking.setUserImage(lg.getTx());
				}
			}
			booking.setId(UUID.randomUUID().toString());
			bookingService.addBooking(booking);
			
			baseResult.setErrorCode("0");
			baseResult.setErrorMessage("预约成功！");
			baseResult.setResult(booking);
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<Booking>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<Booking>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<Booking>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<Booking>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
	/**
	 *根据ID 获取单个预约详情
	 * @param req
	 * @param res
	 * @param booking
	 * @return
	 */
	@RequestMapping(value = "/oneBooking", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseObjectResult<Booking> getBooking(HttpServletRequest req,HttpServletResponse res,
			Booking booking) {
		logger.info("获取单个预约详情: {}", booking);
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<Booking> baseResult = new BaseObjectResult<Booking>();
		Booking book=new Booking();
		try {
			req.setCharacterEncoding("UTF-8");
			// 参数校验
			if (booking == null) {
				throw new PatternException("预约信息不能为空");
			}
			if (StringUtils.isBlank(booking.getId())) {
				throw new PatternException("预约ID不能为空");
			}
			book=bookingService.getByID(booking.getId());
			if (book != null ) {
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("获取预约详情成功！");
				baseResult.setResult(book);
			} else {
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("预约不存在！");
				baseResult.setResult(book);
			}
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<Booking>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<Booking>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<Booking>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<Booking>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
	
	/**
	 * 根据主播ID分页获取预约列表
	 * @param req
	 * @param res
	 * @param booking
	 * @param row
	 * @param page
	 * @return
	 */
	@RequestMapping(value = "/hostBooking", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<Booking> hostBooking(HttpServletRequest req,HttpServletResponse res,
			Booking booking,String row,String page) {
		logger.info("分页查询主播预约列表: {}", booking);
		res.setCharacterEncoding("UTF-8");
		BaseListResult<Booking> baseResult = new BaseListResult<Booking>();
		List<Booking> list=new ArrayList<Booking>();
		HostMain hm=new HostMain();
		try {
			req.setCharacterEncoding("UTF-8");
			// 参数校验
			if (booking == null) {
				throw new PatternException("预约信息不能为空");
			}
			if (StringUtils.isBlank(booking.getHostId())) {
				throw new PatternException("主播ID不能为空");
			}
			
			hm=hostMainService.get(booking.getHostId());
			if (hm == null ) {
				throw new PatternException("主播不存在！");
			}
			list=bookingService.getByHostId(booking.getHostId(), row, page);
			//if (list != null && list.size() > 0) {
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("获取主播预约成功！");
				baseResult.setResult(list);
			/*} else {
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("该主播暂未有预约！");
				baseResult.setResult(list);
			}*/
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<Booking>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<Booking>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<Booking>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<Booking>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
	/**
	 * 根据用户ID分页获取用户预约列表
	 * @param req
	 * @param res
	 * @param booking
	 * @param row
	 * @param page
	 * @return
	 */
	@RequestMapping(value = "/userBooking", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<Booking> userBooking(HttpServletRequest req,HttpServletResponse res,
			Booking booking,String row,String page) {
		logger.info("分页查询用户预约列表: {}", booking);
		res.setCharacterEncoding("UTF-8");
		BaseListResult<Booking> baseResult = new BaseListResult<Booking>();
		List<Booking> list=new ArrayList<Booking>();
		LoginUser lg= new LoginUser();
		try {
			req.setCharacterEncoding("UTF-8");
			// 参数校验
			if (booking == null) {
				throw new PatternException("预约信息不能为空");
			}
			if (StringUtils.isBlank(booking.getUserId())) {
				throw new PatternException("预约用户Id不能为空");
			}
			lg=loginUserServiceI.getUser(booking.getUserId()); 
			if (lg == null ) {
				throw new PatternException("用户不存在！");
			}
			
			list=bookingService.getByUserId(booking.getUserId(), row, page);
			//if (list != null && list.size() > 0) {
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("获取用户预约成功！");
				baseResult.setResult(list);
			/*} else {
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("该用户暂未有预约！");
				baseResult.setResult(list);
			}*/
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<Booking>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<Booking>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<Booking>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<Booking>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
	
}
