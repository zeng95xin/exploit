package com.admin.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.AdDaoI;
import com.admin.dao.LoginUserDaoI;
import com.admin.dao.RoleDaoI;
import com.admin.dao.UserDaoI;
import com.admin.dao.WordDaoI;
import com.admin.model.Ad;
import com.admin.model.LoginUser;
import com.admin.model.Tresource;
import com.admin.model.Trole;
import com.admin.model.Tuser;
import com.admin.model.Wordbook;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.service.AdServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.UserServiceI;
import com.admin.service.WordServiceI;
import com.admin.util.MD5Util;
import com.web.entity.Person;
import com.web.util.PageModel;
import com.web.util.TimeUtils;

@Service
public class WordServiceImpl implements WordServiceI {

	@Autowired
	private WordDaoI dao;

	@Override
	public DataGrid dataGrid(Wordbook w, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Wordbook> ul = new ArrayList<Wordbook>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Wordbook t ";
		List<Wordbook> l = dao.find(hql + whereHql(w, params) + orderHql(ph),
				params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Wordbook t : l) {
				Wordbook u = new Wordbook();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count("select count(*) " + hql + whereHql(w, params),
				params));
		return dg;
	}

	/**
	 * where条件封装
	 * 
	 * @param ad
	 * @param params
	 * @return
	 */
	private String whereHql(Wordbook w, Map<String, Object> params) {
		String hql = "";
		if (w != null) {
			hql += " where 1=1 ";
			if (w.getWords() != null) {
				hql += " and t.words like :word";
				params.put("word", "%%" + w.getWords() + "%%");
			}

		}
		return hql;
	}

	/**
	 * order封装
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	/**
	 * 新增
	 */
	@Override
	public void add(Wordbook w) throws Exception {
		w.setAddtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		w.setId(UUID.randomUUID().toString());
		dao.save(w);
	}

	/**
	 * 删除
	 */
	@Override
	public void delete(String id) throws Exception {
		Wordbook w = dao.get(Wordbook.class, id);
		dao.delete(w);
	}

	/**
	 * 修改
	 */
	@Override
	public void update(Wordbook w) throws Exception {
		Wordbook a = dao.get(Wordbook.class, w.getId());
		a.setWords(w.getWords());
		dao.update(a);
	}

	/**
	 * 得到对象
	 */
	@Override
	public Wordbook get(String id) throws Exception {
		return dao.get(Wordbook.class, id);
	}

	@Override
	public List<Wordbook> getList() {
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ").append(Wordbook.class.getSimpleName())
				.append(" a ");
		sff.append(" where 1=1");
		List<Wordbook> list = dao.getList(sff.toString());
		return list;
	}

}
