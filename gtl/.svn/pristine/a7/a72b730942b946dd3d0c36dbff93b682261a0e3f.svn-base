package com.web.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.Log;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.Json;
import com.admin.pageModel.PageHelper;
import com.admin.service.HostTypeNameService;
import com.admin.service.LogServiceI;
import com.admin.util.InfoUtil;
import com.web.entity.HostType;
import com.web.exception.BusinessDealException;
import com.web.exception.BusinessValidateException;
import com.web.exception.CodeEnum;
import com.web.exception.PatternException;
import com.web.result.BaseListResult;
import com.web.util.TimeUtils;

/**
 * 主播分类控制器
 * @author Administrator
 *
 */
@Controller
@RequestMapping("/hostType")
public class HostTypeController {
	private static final Logger logger = LoggerFactory.getLogger(HostTypeController.class);
	
	@Autowired
	private HostTypeNameService hostTypeNameService;
	
	@Autowired
	private LogServiceI logService;
	
	/**
	 * 主播分类管理
	 * @return
	 */
	@RequestMapping("/manager")
	public String manager() {
		return "/admin/host/hostTypeManagement";
	}
	
	/**
	 * 获取主播分类列表
	 * 
	 * @param p
	 * @param ph
	 * @return
	 */
	@RequestMapping("/dataGrid")
	@ResponseBody
	public DataGrid dataGrid(HostType p, PageHelper ph) {
		return hostTypeNameService.dataGrid(p, ph);

	}
	
	/**
	 * 跳转到主播分类添加页面
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/addPage")
	public String addPage(HttpServletRequest request) {
		HostType ppr=new HostType();
		ppr.setHostTypeID(UUID.randomUUID().toString());
		request.setAttribute("HostType", ppr);
		return "/admin/host/HostTypeAdd";
	}

	/**
	 * 添加主播分类
	 * 
	 * @param partner
	 * @return
	 */
	@RequestMapping("/add")
	@ResponseBody
	public Json add(HostType gy) {
		Json j = new Json();
		try {
			hostTypeNameService.add(gy);
		} catch (Exception e) {
			e.printStackTrace();
		}
		j.setSuccess(true);
		j.setMsg("添加成功！");
		return j;
	}

	/**
	 * 跳转到主播分类编辑页面
	 * 
	 * @param request
	 * @param id
	 * @return
	 */
	@RequestMapping("/editPage")
	public String editPage(HttpServletRequest request, String id) {
		HostType gy;
		try {
			gy = hostTypeNameService.get(id);
			request.setAttribute("HostType", gy);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "/admin/host/HostTypeEdit";
	}

	/**
	 * 主播分类修改
	 * 
	 * @param request
	 * @param session
	 * @param partner
	 * @return
	 */
	@RequestMapping("/edit")
	@ResponseBody
	public Json edit(HttpServletRequest request, HttpSession session,
			HostType gy) {
		Json j = new Json();
		try {
			hostTypeNameService.update(gy);;
			Log log = new Log();
			log.setType("update");// 操作描述
			log.setAuthor(InfoUtil.getUser(session));// 操作员
			log.setIp(InfoUtil.getIpAddr(request));// ip
			log.setTteble("HostType");// 操作的表
			log.setTid(gy.getHostTypeID());// 操作的ID
			log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
			logService.add(log);
		} catch (Exception e) {
			e.printStackTrace();
		}
		j.setSuccess(true);
		j.setMsg("编辑成功！");
		return j;
	}

	/**
	 * 删除分类
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/delete")
	@ResponseBody
	public Json delete(String id) {
		Json j = new Json();
		try {
			hostTypeNameService.delete(id);
		} catch (Exception e) {
			e.printStackTrace();
		}
		j.setMsg("删除成功！");
		j.setSuccess(true);
		return j;
	}

	/**
	 * 批量删除
	 * 
	 * @param ids
	 * @param session
	 * @return
	 */
	@RequestMapping("/batchDelete")
	@ResponseBody
	public Json batchDelete(String ids, HttpSession session) {
		Json j = new Json();
		if (ids != null && ids.length() > 0) {
			for (String id : ids.split(",")) {
				if (id != null) {
					this.delete(id);
				}
			}
		}
		j.setMsg("批量删除成功！");
		j.setSuccess(true);
		return j;
	}
	
	/**
	 * 获取主播所有分类
	 * @param req
	 * @param res
	 * @return
	 */
	@RequestMapping(value = "/alltype", method ={RequestMethod.GET , RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<HostType> getByType(HttpServletRequest req,HttpServletResponse res) {

		logger.info("主播分类: {}");
		res.setCharacterEncoding("UTF-8");
		BaseListResult<HostType> baseResult = new BaseListResult<HostType>();
		List<HostType> listType=new ArrayList<HostType>();
		try {
			
			listType=hostTypeNameService.getAllType();
			//if (listType!=null && listType.size()>0) {
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("查询成功");
				baseResult.setResult(listType);
			/*} else {
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("暂无分类");
			}*/
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<HostType>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<HostType>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<HostType>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<HostType>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}
	

}
