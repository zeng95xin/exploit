package com.lcjh.controller.api;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.LoginUser;
import com.admin.service.LoginUserServiceI;
import com.alibaba.fastjson.JSONObject;
import com.lcjh.biz.Lcjh2Biz;
import com.lcjh.biz.LcjhCjBiz;
import com.lcjh.biz.LcjhCjBuySellRecordBiz;
import com.lcjh.biz.LcjhMrzcBiz;
import com.lcjh.biz.LcjhRatingBiz;
import com.lcjh.biz.LcjhUserBuyRecordBiz;
import com.lcjh.common.DayCountUtil;
import com.lcjh.entity.Lcjh2;
import com.lcjh.entity.LcjhCj;
import com.lcjh.entity.LcjhCjBuySellRecord;
import com.lcjh.entity.LcjhMrzc;
import com.lcjh.enummole.LcjhStatusEnum;
import com.lcjh.model.LcjhCpfxModel;
import com.lcjh.model.LcjhDetailModel;
import com.lcjh.model.LcjhRatingModel;
import com.lcjh.model.LcjhSyzkModel;
import com.lcjh.result.BooleanObjectResult;
import com.log.ProjectConfig;
import com.web.exception.CodeEnum;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

@Controller
@RequestMapping("/api/lcjh2")
@Validated
@Api(tags="-api-lcjh2-detail", description = "理财计划详情,有关接口")
public class LcjhDetailApiController {
//	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	@Autowired private Lcjh2Biz lcjh2Biz;
	@Autowired private LcjhRatingBiz lcjhRatingBiz;
	@Autowired private LcjhUserBuyRecordBiz lcjhUserBuyRecordBiz;
	@Autowired private LcjhCjBuySellRecordBiz lcjhCjBuySellRecordBiz;
	@Autowired private LcjhCjBiz lcjhCjBiz;
	@Autowired private LcjhMrzcBiz lcjhMrzcBiz;
	@Autowired private LoginUserServiceI loginUserServiceI;

	@ApiOperation(value = "获取理财计划详情", notes="如果未购买该理财计划，只能查看部分持仓，和交易记录,只有审核成功且已经启动还没有结束的计划才能交易,如果已经成功,只能卖不能买", httpMethod="POST")
	@RequestMapping(value = "/getLcjhDetail", method = {RequestMethod.POST, RequestMethod.GET}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanObjectResult<LcjhDetailModel> getLcjhDetail(HttpServletRequest request
	,@RequestParam(required=false) @NotBlank(message="用户id不能为空")
	@Size(min=1,max=200,message="用户id在{min}-{max}个字")
	@ApiParam(value="当前用户id",required=true) 
	String userId
	,@RequestParam(required=false) @NotBlank(message="理财计划id不能为空")
	@Size(min=1,max=200,message="理财计划id在{min}-{max}个字")
	@ApiParam(value="理财计划id",required=true) 
	String lcjhId
		) throws Exception {
		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Lcjh2 l = lcjh2Biz.get(Lcjh2.class, lcjhId);
		Assert.notNull(l, "理财计划不存在");
		BooleanObjectResult<LcjhDetailModel> result = BooleanObjectResult.getSuccess();
		
		Map<String, Object> params = new HashMap<String, Object>(2);
		params.put("lcjhId", lcjhId);
		params.put("userId", userId);
		String buyHql = "select count(1) from LcjhUserBuyRecord where lcjhId = :lcjhId and userId = :userId";
		boolean isBuy = lcjhUserBuyRecordBiz.count(buyHql, params) > 0 || userId.equals(l.getUserId());
		Map<String, Object> params2 = new HashMap<String, Object>(2);
		params2.put("lcjhId", lcjhId);
		String sql = " select a.*,b.`name`,b.nickname,b.tx,"
				+ " (select count(1) from t_lcjh_rating aa where aa.lcjhId = a.id) as ratingCount,"
				+ " (select count(1) from t_lcjh_rating aa where aa.lcjhId = a.id and aa.ratingLevel = 1) as highRatingCount"
				+ " from t_lcjh2 a left outer join loginuser b on a.userId = b.id "
				+ " where a.id = :lcjhId";
//		String sql = " select a.*"
//				+ " from t_lcjh2 a"
//				+ " where a.id = :lcjhId";
		LcjhDetailModel model = lcjhRatingBiz.findBySqlBuildObjectOne(sql, params2, LcjhDetailModel.class);
		BigDecimal hpl = model.getRatingCount().intValue() == 0 ? BigDecimal.ZERO : new BigDecimal(model.getHighRatingCount().doubleValue() * 1d / 100 / model.getRatingCount().doubleValue());
		model.setHpl(hpl);
		Map<String, Object> params3 = new HashMap<String, Object>(2);
		params3.put("userId", userId);
		
		params3.put("authSuccessStatus", LcjhStatusEnum.getAllAuthSuccessStatus());
		List<Lcjh2> lcjhData = lcjh2Biz.find("from Lcjh2 where userId = :userId and status in (:authSuccessStatus) order by addTime desc", params3, 1, 3);
		model.setLcjhData(lcjhData);
		
		if(isBuy){
			
			List<LcjhCjBuySellRecord> lcjhCjBuySellRecordData = lcjhCjBuySellRecordBiz.find("from LcjhCjBuySellRecord where lcjhId = :lcjhId and status = 1 order by cjsj desc", params2, 1, 3);
			model.setLcjhCjBuySellRecordData(lcjhCjBuySellRecordData);
			
			List<LcjhCj> lcjhCjData = lcjhCjBiz.find("from LcjhCj where lcjhId = :lcjhId and cjsl > 0 order by addTime desc", params2, 1, 3);
			model.setLcjhCjData(lcjhCjData);
			
			String ratingSql = "select a.*,b.`name`,b.nickname,b.tx from t_lcjh_rating a left outer join loginuser b on a.userId = b.id where a.lcjhId=:lcjhId ";
			List<LcjhRatingModel> lcjhRatingData = lcjhRatingBiz.findBySqlBuildObject(ratingSql, params2, LcjhRatingModel.class, 1, 3);
			model.setLcjhRatingData(lcjhRatingData);
			
		}
		
		result.setResult(model);
		return result;
	}
	
	@ApiOperation(value = "收益状况", notes="如果未购买该理财计划，不能查看", httpMethod="POST")
	@RequestMapping(value = "/getSyzk", method = {RequestMethod.POST, RequestMethod.GET}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanObjectResult<LcjhSyzkModel> getSyzk(HttpServletRequest request
	,@RequestParam(required=false) @NotBlank(message="用户id不能为空")
	@Size(min=1,max=200,message="用户id在{min}-{max}个字")
	@ApiParam(value="当前用户id",required=true) 
	String userId
	,@RequestParam(required=false) @NotBlank(message="理财计划id不能为空")
	@Size(min=1,max=200,message="理财计划id在{min}-{max}个字")
	@ApiParam(value="理财计划id",required=true) 
	String lcjhId
			) throws Exception {
		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Lcjh2 l = lcjh2Biz.get(Lcjh2.class, lcjhId);
		Assert.notNull(l, "理财计划不存在");
		
		Map<String, Object> params = new HashMap<String, Object>(2);
		params.put("lcjhId", lcjhId);
		params.put("userId", userId);
		String buyHql = "select count(1) from LcjhUserBuyRecord where lcjhId = :lcjhId and userId = :userId";
		boolean isBuy = lcjhUserBuyRecordBiz.count(buyHql, params) > 0 || userId.equals(l.getUserId());
		Assert.isTrue(isBuy, "请先购买该理财计划");
		
		LcjhSyzkModel model = new LcjhSyzkModel();
		BeanUtils.copyProperties(l, model);
		
		Map<String, Object> params2 = new HashMap<String, Object>(2);
		params2.put("lcjhId", lcjhId);
		
		BigDecimal dqcw = model.getGoldCoins().divide(model.getStartGoldCoins(), ProjectConfig.sale, ProjectConfig.roundingMode).multiply(ProjectConfig.bd100);
		model.setDqcw(dqcw);
		
		String hql_pl = "select count(1) from LcjhCjBuySellRecord where lcjhId = :lcjhId and status = 1";
		int count = lcjhCjBuySellRecordBiz.count(hql_pl, params2);
		int tradeDayCount = DayCountUtil.getDayCount(new Date()) - DayCountUtil.getDayCount(model.getJhqdsj());
		String jypl = count + "笔/" + tradeDayCount + "天";
		model.setJypl(jypl);
		
		List<LcjhMrzc> list_mrzc = lcjhMrzcBiz.find("from LcjhMrzc where lcjhId = :lcjhId order by addTime desc", params2, 1, 30);
		model.setListMrzc(list_mrzc);
		
		String sql_sy_max_min = "select max(zsy), min(zsy) from t_lcjh_mrzc where lcjhId = '"
				+l.getId()
				+ "'";
		List<Object[]> list_max_min = lcjhMrzcBiz.findBySql(sql_sy_max_min, null);
		
		BigDecimal zdsy = BigDecimal.ZERO;
		BigDecimal zdks = BigDecimal.ZERO;
		if(list_max_min.size() > 0){
			Object[] objArra_max_min = list_max_min.get(0);
			if(null != objArra_max_min[0]){
				zdsy = new BigDecimal(objArra_max_min[0].toString());
			}
			if(null != objArra_max_min[1]){
				zdks = new BigDecimal(objArra_max_min[1].toString());
				if(zdks.compareTo(BigDecimal.ZERO) >= 0){
					zdks = BigDecimal.ZERO;
				}
			}
		}
		model.setZdks(zdks);
		model.setZdsy(zdsy);;
		
		BooleanObjectResult<LcjhSyzkModel> result = BooleanObjectResult.getSuccess();
		result.setResult(model);
		return result;
	}
	
	@ApiOperation(value = "操盘分析", notes="如果未购买该理财计划，不能查看", httpMethod="POST")
	@RequestMapping(value = "/getCpfx", method = {RequestMethod.POST, RequestMethod.GET}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanObjectResult<LcjhCpfxModel> getCpfx(HttpServletRequest request
	,@RequestParam(required=false) @NotBlank(message="用户id不能为空")
	@Size(min=1,max=200,message="用户id在{min}-{max}个字")
	@ApiParam(value="当前用户id",required=true) 
	String userId
	,@RequestParam(required=false) @NotBlank(message="理财计划id不能为空")
	@Size(min=1,max=200,message="理财计划id在{min}-{max}个字")
	@ApiParam(value="理财计划id",required=true) 
	String lcjhId
			) throws Exception {
		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Lcjh2 l = lcjh2Biz.get(Lcjh2.class, lcjhId);
		Assert.notNull(l, "理财计划不存在");
		
		Map<String, Object> params = new HashMap<String, Object>(2);
		params.put("lcjhId", lcjhId);
		params.put("userId", userId);
		String buyHql = "select count(1) from LcjhUserBuyRecord where lcjhId = :lcjhId and userId = :userId";
		boolean isBuy = lcjhUserBuyRecordBiz.count(buyHql, params) > 0 || userId.equals(l.getUserId());
		Assert.isTrue(isBuy, "请先购买该理财计划");
		
		LcjhCpfxModel model = new LcjhCpfxModel();
		
		Map<String, Object> params2 = new HashMap<String, Object>(2);
		params2.put("lcjhId", lcjhId);
		
		String hql_pl = "select count(1) from LcjhCjBuySellRecord where lcjhId = :lcjhId and status = 1";
		int count = lcjhCjBuySellRecordBiz.count(hql_pl, params2);
		int tradeDayCount = DayCountUtil.getDayCount(new Date()) - DayCountUtil.getDayCount(l.getJhqdsj());
		String jypl = count + "笔/" + tradeDayCount + "天";
		model.setJypl(jypl);
		
		
		BooleanObjectResult<LcjhCpfxModel> result = BooleanObjectResult.getSuccess();
		result.setResult(model);
		return result;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	@ApiOperation(value = "获取理财计划详情(jsonp)", notes="如果未购买该理财计划，只能查看部分持仓，和交易记录,只有审核成功且已经启动还没有结束的计划才能交易,如果已经成功,只能卖不能买", httpMethod="POST")
	@RequestMapping(value = "/getLcjhDetailMore", method = {RequestMethod.POST, RequestMethod.GET}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void getLcjhDetailMore(HttpServletResponse res, HttpServletRequest request
	,@RequestParam(required=false) @NotBlank(message="用户id不能为空")
	@Size(min=1,max=200,message="用户id在{min}-{max}个字")
	@ApiParam(value="当前用户id",required=true) 
	String userId
	,@RequestParam(required=false) @NotBlank(message="理财计划id不能为空")
	@Size(min=1,max=200,message="理财计划id在{min}-{max}个字")
	@ApiParam(value="理财计划id",required=true) 
	String lcjhId
		) throws Exception {
		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Lcjh2 l = lcjh2Biz.get(Lcjh2.class, lcjhId);
		Assert.notNull(l, "理财计划不存在");
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());		
		Map<String, Object> params = new HashMap<String, Object>(2);
		params.put("lcjhId", lcjhId);
		params.put("userId", userId);
		String buyHql = "select count(1) from LcjhUserBuyRecord where lcjhId = :lcjhId and userId = :userId";
		boolean isBuy = lcjhUserBuyRecordBiz.count(buyHql, params) > 0 || userId.equals(l.getUserId());
		Map<String, Object> params2 = new HashMap<String, Object>(2);
		params2.put("lcjhId", lcjhId);
		String sql = " select a.*,b.`name`,b.nickname,b.tx,"
				+ " (select count(1) from t_lcjh_rating aa where aa.lcjhId = a.id) as ratingCount,"
				+ " (select count(1) from t_lcjh_rating aa where aa.lcjhId = a.id and aa.ratingLevel = 1) as highRatingCount"
				+ " from t_lcjh2 a left outer join loginuser b on a.userId = b.id "
				+ " where a.id = :lcjhId";
//		String sql = " select a.*"
//				+ " from t_lcjh2 a"
//				+ " where a.id = :lcjhId";
		LcjhDetailModel model = lcjhRatingBiz.findBySqlBuildObjectOne(sql, params2, LcjhDetailModel.class);
		BigDecimal hpl = model.getRatingCount().intValue() == 0 ? BigDecimal.ZERO : new BigDecimal(model.getHighRatingCount().doubleValue() * 1d / 100 / model.getRatingCount().doubleValue());
		model.setHpl(hpl);
		Map<String, Object> params3 = new HashMap<String, Object>(2);
		params3.put("userId", userId);
		
		params3.put("authSuccessStatus", LcjhStatusEnum.getAllAuthSuccessStatus());
		List<Lcjh2> lcjhData = lcjh2Biz.find("from Lcjh2 where userId = :userId and status in (:authSuccessStatus) order by addTime desc", params3, 1, 3);
		model.setLcjhData(lcjhData);
		
		if(isBuy){
			
			List<LcjhCjBuySellRecord> lcjhCjBuySellRecordData = lcjhCjBuySellRecordBiz.find("from LcjhCjBuySellRecord where lcjhId = :lcjhId and status = 1 order by cjsj desc", params2, 1, 3);
			model.setLcjhCjBuySellRecordData(lcjhCjBuySellRecordData);
			
			List<LcjhCj> lcjhCjData = lcjhCjBiz.find("from LcjhCj where lcjhId = :lcjhId and cjsl > 0 order by addTime desc", params2, 1, 3);
			model.setLcjhCjData(lcjhCjData);
			
			String ratingSql = "select a.*,b.`name`,b.nickname,b.tx from t_lcjh_rating a left outer join loginuser b on a.userId = b.id where a.lcjhId=:lcjhId ";
			List<LcjhRatingModel> lcjhRatingData = lcjhRatingBiz.findBySqlBuildObject(ratingSql, params2, LcjhRatingModel.class, 1, 3);
			model.setLcjhRatingData(lcjhRatingData);
			
		}
		
		result.setResult(model);
		String resStr = "";
		String callback = request.getParameter("callback");
		if (null != callback) {
			resStr += callback + "(";
			resStr += JSONObject.toJSONString(result);
			resStr += ")";
		} else {
			resStr = JSONObject.toJSONString(result);
		}
		request.setCharacterEncoding("utf-8");
		res.setContentType("text/html;charset=utf-8");
		res.getWriter().write(resStr);
		res.getWriter().flush();
	}
	
	@ApiOperation(value = "收益状况(jsonp)", notes="如果未购买该理财计划，不能查看", httpMethod="POST")
	@RequestMapping(value = "/getSyzkMore", method = {RequestMethod.POST, RequestMethod.GET}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void getSyzkMore(HttpServletResponse res, HttpServletRequest request
	,@RequestParam(required=false) @NotBlank(message="用户id不能为空")
	@Size(min=1,max=200,message="用户id在{min}-{max}个字")
	@ApiParam(value="当前用户id",required=true) 
	String userId
	,@RequestParam(required=false) @NotBlank(message="理财计划id不能为空")
	@Size(min=1,max=200,message="理财计划id在{min}-{max}个字")
	@ApiParam(value="理财计划id",required=true) 
	String lcjhId
			) throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());
		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Lcjh2 l = lcjh2Biz.get(Lcjh2.class, lcjhId);
		Assert.notNull(l, "理财计划不存在");
		
		Map<String, Object> params = new HashMap<String, Object>(2);
		params.put("lcjhId", lcjhId);
		params.put("userId", userId);
		String buyHql = "select count(1) from LcjhUserBuyRecord where lcjhId = :lcjhId and userId = :userId";
		boolean isBuy = lcjhUserBuyRecordBiz.count(buyHql, params) > 0 || userId.equals(l.getUserId());
		Assert.isTrue(isBuy, "请先购买该理财计划");
		
		LcjhSyzkModel model = new LcjhSyzkModel();
		BeanUtils.copyProperties(l, model);
		
		Map<String, Object> params2 = new HashMap<String, Object>(2);
		params2.put("lcjhId", lcjhId);
		
		BigDecimal dqcw = model.getGoldCoins().divide(model.getStartGoldCoins(), ProjectConfig.sale, ProjectConfig.roundingMode).multiply(ProjectConfig.bd100);
		model.setDqcw(dqcw);
		
		String hql_pl = "select count(1) from LcjhCjBuySellRecord where lcjhId = :lcjhId and status = 1";
		int count = lcjhCjBuySellRecordBiz.count(hql_pl, params2);
		int tradeDayCount = DayCountUtil.getDayCount(new Date()) - DayCountUtil.getDayCount(model.getJhqdsj());
		String jypl = count + "笔/" + tradeDayCount + "天";
		model.setJypl(jypl);
		
		List<LcjhMrzc> list_mrzc = lcjhMrzcBiz.find("from LcjhMrzc where lcjhId = :lcjhId order by addTime desc", params2, 1, 30);
		model.setListMrzc(list_mrzc);
		
		String sql_sy_max_min = "select max(zsy), min(zsy) from t_lcjh_mrzc where lcjhId = '"
				+l.getId()
				+ "'";
		List<Object[]> list_max_min = lcjhMrzcBiz.findBySql(sql_sy_max_min, null);
		
		BigDecimal zdsy = BigDecimal.ZERO;
		BigDecimal zdks = BigDecimal.ZERO;
		if(list_max_min.size() > 0){
			Object[] objArra_max_min = list_max_min.get(0);
			if(null != objArra_max_min[0]){
				zdsy = new BigDecimal(objArra_max_min[0].toString());
			}
			if(null != objArra_max_min[1]){
				zdks = new BigDecimal(objArra_max_min[1].toString());
				if(zdks.compareTo(BigDecimal.ZERO) >= 0){
					zdks = BigDecimal.ZERO;
				}
			}
		}
		model.setZdks(zdks);
		model.setZdsy(zdsy);;
		result.setResult(model);
		String resStr = "";
		String callback = request.getParameter("callback");
		if (null != callback) {
			resStr += callback + "(";
			resStr += JSONObject.toJSONString(result);
			resStr += ")";
		} else {
			resStr = JSONObject.toJSONString(result);
		}
		request.setCharacterEncoding("utf-8");
		res.setContentType("text/html;charset=utf-8");
		res.getWriter().write(resStr);
		res.getWriter().flush();
	}
	
	@ApiOperation(value = "操盘分析(jsonp)", notes="如果未购买该理财计划，不能查看", httpMethod="POST")
	@RequestMapping(value = "/getCpfxMore", method = {RequestMethod.POST, RequestMethod.GET}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void getCpfxMore(HttpServletResponse res, HttpServletRequest request
	,@RequestParam(required=false) @NotBlank(message="用户id不能为空")
	@Size(min=1,max=200,message="用户id在{min}-{max}个字")
	@ApiParam(value="当前用户id",required=true) 
	String userId
	,@RequestParam(required=false) @NotBlank(message="理财计划id不能为空")
	@Size(min=1,max=200,message="理财计划id在{min}-{max}个字")
	@ApiParam(value="理财计划id",required=true) 
	String lcjhId
			) throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());
		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Lcjh2 l = lcjh2Biz.get(Lcjh2.class, lcjhId);
		Assert.notNull(l, "理财计划不存在");
		
		Map<String, Object> params = new HashMap<String, Object>(2);
		params.put("lcjhId", lcjhId);
		params.put("userId", userId);
		String buyHql = "select count(1) from LcjhUserBuyRecord where lcjhId = :lcjhId and userId = :userId";
		boolean isBuy = lcjhUserBuyRecordBiz.count(buyHql, params) > 0 || userId.equals(l.getUserId());
		Assert.isTrue(isBuy, "请先购买该理财计划");
		
		LcjhCpfxModel model = new LcjhCpfxModel();
		
		Map<String, Object> params2 = new HashMap<String, Object>(2);
		params2.put("lcjhId", lcjhId);
		
		String hql_pl = "select count(1) from LcjhCjBuySellRecord where lcjhId = :lcjhId and status = 1";
		int count = lcjhCjBuySellRecordBiz.count(hql_pl, params2);
		int tradeDayCount = DayCountUtil.getDayCount(new Date()) - DayCountUtil.getDayCount(l.getJhqdsj());
		String jypl = count + "笔/" + tradeDayCount + "天";
		model.setJypl(jypl);
		result.setResult(model);
		String resStr = "";
		String callback = request.getParameter("callback");
		if (null != callback) {
			resStr += callback + "(";
			resStr += JSONObject.toJSONString(result);
			resStr += ")";
		} else {
			resStr = JSONObject.toJSONString(result);
		}
		request.setCharacterEncoding("utf-8");
		res.setContentType("text/html;charset=utf-8");
		res.getWriter().write(resStr);
		res.getWriter().flush();
	}
	
}
