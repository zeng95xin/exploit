package com.web.controller;

import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.service.BookingRuleService;
import com.admin.service.HostMainService;
import com.admin.service.LoginUserServiceI;
import com.web.entity.BookingRule;
import com.web.entity.HostMain;
import com.web.exception.BusinessDealException;
import com.web.exception.BusinessValidateException;
import com.web.exception.CodeEnum;
import com.web.exception.PatternException;
import com.web.result.BaseObjectResult;
import com.web.util.TimeUtils;

@Controller
@RequestMapping("/bookingRule")
public class BookingRuleController {

	private static final Logger logger = LoggerFactory.getLogger(BookingRuleController.class);
	
	@Autowired
	private BookingRuleService bookingRuleService;
	
	@Autowired
	private LoginUserServiceI loginUserServiceI;
	
	@Autowired
	private HostMainService hostMainService;
	/**
	 * 主播新增预约规则
	 * @param req
	 * @param res
	 * @param bookingRule
	 * @return
	 */
	@RequestMapping(value = "/add", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseObjectResult<BookingRule> addBookingRule(HttpServletRequest req,HttpServletResponse res,
			BookingRule bookingRule) {
		logger.info("新增预约规则: {}", bookingRule);
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<BookingRule> baseResult = new BaseObjectResult<BookingRule>();
		BookingRule br=new BookingRule();
		HostMain hm=new HostMain();
		try {
			req.setCharacterEncoding("UTF-8");
			// 参数校验
			if (bookingRule == null) {
				throw new PatternException("预约规则信息不能为空");
			}
			if (StringUtils.isBlank(bookingRule.getHostId())) {
				throw new PatternException("主播ID不能为空");
			}
			if (StringUtils.isBlank(bookingRule.getBookPlace())) {
				throw new PatternException("预约地点不能为空");
			}
			if (StringUtils.isBlank(bookingRule.getBookPrice())) {
				throw new PatternException("预约价格不能为空");
			}
			if (StringUtils.isBlank(bookingRule.getBookTalkRange())) {
				throw new PatternException("预约谈话范围不能为空");
			}
			if (StringUtils.isBlank(bookingRule.getBookTime())) {
				throw new PatternException("预约时间不能为空");
			}
			hm=hostMainService.get(bookingRule.getHostId());
			if (hm == null) {
				throw new PatternException("主播不存在！");
			}
			br=bookingRuleService.getByHostId(bookingRule.getHostId());
			if (br != null) {
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("您已经设置过预约！");
				baseResult.setResult(br);
			} else {
				bookingRule.setId(UUID.randomUUID().toString());
				bookingRule.setMakeTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
				bookingRule.setUpdateTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
				bookingRuleService.addBookingRule(bookingRule);
				
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("设置规则成功！！");
				baseResult.setResult(bookingRule);
			}
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<BookingRule>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<BookingRule>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<BookingRule>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<BookingRule>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
	
	/**
	 * 更新预约规则
	 * @param req
	 * @param res
	 * @param bookingRule
	 * @return
	 */
	@RequestMapping(value = "/update", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseObjectResult<BookingRule> updateBookingRule(HttpServletRequest req,HttpServletResponse res,
			BookingRule bookingRule) {
		logger.info("更新预约规则: {}", bookingRule);
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<BookingRule> baseResult = new BaseObjectResult<BookingRule>();
		BookingRule br1=new BookingRule();
		try {
			req.setCharacterEncoding("UTF-8");
			// 参数校验
			if (bookingRule == null) {
				throw new PatternException("预约规则信息不能为空");
			}
			if (StringUtils.isBlank(bookingRule.getId())) {
				throw new PatternException("预约规则ID不能为空");
			}
			br1=bookingRuleService.getById(bookingRule.getId());
			if (br1 == null) {
				throw new PatternException("预约规则信息不存在!");
			}
			
			if (StringUtils.isNotBlank(bookingRule.getBookPlace())) {
				br1.setBookPlace(bookingRule.getBookPlace());
			}
			if (StringUtils.isNotBlank(bookingRule.getBookPrice())) {
				br1.setBookPrice(bookingRule.getBookPrice());
			}
			if (StringUtils.isNotBlank(bookingRule.getBookTalkRange())) {
				br1.setBookTalkRange(bookingRule.getBookTalkRange());
			}
			if (StringUtils.isNotBlank(bookingRule.getBookTime())) {
				br1.setBookTime(bookingRule.getBookTime());
			}
			br1.setUpdateTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
			bookingRuleService.updateBookingRule(br1);
			
			baseResult.setErrorCode("0");
			baseResult.setErrorMessage("规则更新成功！");
			baseResult.setResult(br1);
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<BookingRule>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<BookingRule>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<BookingRule>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<BookingRule>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
	/**
	 * 根据主播ID查询其设置的预约规则
	 * @param req
	 * @param res
	 * @param bookingRule
	 * @return
	 */
	@RequestMapping(value = "/hostBookingRule", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseObjectResult<BookingRule> getBookingRule(HttpServletRequest req,HttpServletResponse res,
			BookingRule bookingRule) {
		logger.info("更新预约规则: {}", bookingRule);
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<BookingRule> baseResult = new BaseObjectResult<BookingRule>();
		BookingRule br=new BookingRule();
		try {
			req.setCharacterEncoding("UTF-8");
			// 参数校验
			if (bookingRule == null) {
				throw new PatternException("预约规则信息不能为空");
			}
			if (StringUtils.isBlank(bookingRule.getHostId())) {
				throw new PatternException("主播ID能为空");
			}
			
			br=bookingRuleService.getByHostId(bookingRule.getHostId());
			if (br != null) {
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("规则获取成功！");
				baseResult.setResult(br);
			} else {
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("主播还未设置预约规则！");
				baseResult.setResult(br);
			}
			
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<BookingRule>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<BookingRule>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<BookingRule>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<BookingRule>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
}
