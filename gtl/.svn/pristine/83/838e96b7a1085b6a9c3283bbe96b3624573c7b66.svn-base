package com.admin.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.AdDaoI;
import com.admin.dao.JjcpDaoI;
import com.admin.dao.LoginUserDaoI;
import com.admin.dao.RoleDaoI;
import com.admin.dao.UserDaoI;
import com.admin.model.Ad;
import com.admin.model.Jjcp;
import com.admin.model.LoginUser;
import com.admin.model.Tresource;
import com.admin.model.Trole;
import com.admin.model.Tuser;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.service.AdServiceI;
import com.admin.service.JjcpServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.UserServiceI;
import com.admin.util.MD5Util;
import com.web.entity.Person;
import com.web.util.PageModel;
import com.web.util.TimeUtils;

@Service
public class JjcpServiceImpl implements JjcpServiceI {

	@Autowired
	private JjcpDaoI dao;

	@Override
	public DataGrid dataGrid(Jjcp jjcp, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Jjcp> ul = new ArrayList<Jjcp>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Jjcp t ";
		List<Jjcp> l = dao.find(hql + whereHql(jjcp, params) + orderHql(ph),
				params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Jjcp t : l) {
				Jjcp u = new Jjcp();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count(
				"select count(*) " + hql + whereHql(jjcp, params), params));
		return dg;
	}

	/**
	 * where条件封装
	 * 
	 * @param ad
	 * @param params
	 * @return
	 */
	private String whereHql(Jjcp jjcp, Map<String, Object> params) {
		String hql = "";
		if (jjcp != null) {
			hql += " where 1=1 ";
			if (jjcp.getName() != null) {
				hql += " and t.name like :name";
				params.put("name", "%%" + jjcp.getName() + "%%");
			}
			if (jjcp.getStartdate() != null) {
				hql += " and t.startdate = :startdate";
				params.put("startdate", jjcp.getStartdate());
			}
			if (jjcp.getEndate() != null) {
				hql += " and t.enddate = :enddate";
				params.put("enddate", jjcp.getEndate());
			}
		}
		return hql;
	}

	/**
	 * order封装
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	/**
	 * 新增
	 */
	@Override
	public void add(Jjcp jjcp) throws Exception {
		jjcp.setId(UUID.randomUUID().toString());
		jjcp.setFbtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));

		dao.save(jjcp);
	}

	/**
	 * 删除
	 */
	@Override
	public void delete(String id) throws Exception {
		Jjcp ad = dao.get(Jjcp.class, id);
		dao.delete(ad);
	}

	/**
	 * 修改
	 */
	@Override
	public void update(Jjcp jjcp) throws Exception {

		dao.update(jjcp);
	}

	/**
	 * 得到对象
	 */
	@Override
	public Jjcp get(String id) throws Exception {
		return dao.get(Jjcp.class, id);
	}

	@Override
	public List<Jjcp> getList(String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ").append(Jjcp.class.getSimpleName())
				.append(" a ");
		sff.append(" where 1=1 order by fbtime desc");
		List<Jjcp> list = dao.find(sff.toString(), Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public int getCount() {
		String hql = "select count(*) from Jjcp where 1=1";
		return dao.count(hql).intValue();
	}

}
