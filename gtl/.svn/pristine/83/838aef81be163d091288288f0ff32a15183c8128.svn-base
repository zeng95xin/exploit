package com.log.http;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.impl.client.CloseableHttpClient;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.StringUtils;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.web.exception.BusinessDealException;
import com.web.util.TimeUtils;

import cn.lg.generic.http.LiuClientFactory;
import cn.lg.generic.http.LiuExecuteUtil;

public class StockHttpClientUtil {
	private static String host = "http://route.showapi.com";
	private static String hostRealTimeQuotes = "http://route.showapi.com/131-46";
	private static final Logger logger = LoggerFactory.getLogger(StockHttpClientUtil.class);
	private static class clientFactory {
		private static CloseableHttpClient client = LiuClientFactory.getHttpClient(host, false);
	}
	public static CloseableHttpClient getInfoClient() {
		return clientFactory.client;
	}
	
	public static JSONArray getStocks(String stocks) throws Exception{
		Map<String, String> params = new HashMap<String, String>();
		params.put("showapi_appid", "15094");
		params.put("showapi_sign", "288557843a564302bcaab02569355b40");
		params.put("showapi_timestamp", TimeUtils.getTime("yyyyMMddHHmmss"));
		params.put("needIndex", "1");
		params.put("stocks", stocks);
		String resultStr = LiuExecuteUtil.getLiuPostParamsExecute().postParams(hostRealTimeQuotes, clientFactory.client, params, 10000);
		JSONObject jsonggJg = JSON.parseObject(resultStr); // 将json结果转换成jsonObject
		if ("0".equals(jsonggJg.getString("showapi_res_code"))) {
			JSONObject jsonJg = JSON.parseObject(resultStr); // 将json结果转换成jsonObject
			JSONObject showBody = jsonJg.getJSONObject("showapi_res_body"); // 获取到大盘指数结果集
			
			JSONArray jsList = showBody.getJSONArray("list"); // 获取实时个股数组数据
			for (Object object : jsList) {
				if (object.getClass().getName().equals(null)) {
					break;
				}
			}
			return jsList;
		}
		throw new BusinessDealException("获取股票行情失败");
	}
	
	
	
	public static JSONObject getStockStopInfo(String stock) throws Exception{
		Map<String, String> params = new HashMap<String, String>();
		params.put("showapi_appid", "15094");
		params.put("showapi_sign", "288557843a564302bcaab02569355b40");
		params.put("showapi_timestamp", TimeUtils.getTime("yyyyMMddHHmmss"));
		params.put("needIndex", "1");
		params.put("code", stock);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar c = Calendar.getInstance();
		String begin,end;
		do{
			end = sdf.format(c.getTime());
			c.add(Calendar.MONTH, -1);
			begin = sdf.format(c.getTime());
			params.put("begin", begin);
			params.put("end", end);
			String resultStr = LiuExecuteUtil.getLiuPostParamsExecute().postParams("http://route.showapi.com/131-47", clientFactory.client, params, 10000);
			JSONObject jsonggJg = JSON.parseObject(resultStr); // 将json结果转换成jsonObject
			String showapi_res_code = jsonggJg.getString("showapi_res_code");
			if ("0".equals(showapi_res_code)) {
				JSONObject jsonJg = JSON.parseObject(resultStr); // 将json结果转换成jsonObject
				JSONObject showBody = jsonJg.getJSONObject("showapi_res_body"); // 获取到大盘指数结果集
				JSONArray historys = showBody.getJSONArray("list"); // 获取历史交易记录
				if(historys.size() > 0){
					return historys.getJSONObject(0);
				}
				logger.info("获取停牌股票--{}--,开始时间--{}--,结束时间--{}--,返回值--{}--", stock, begin, end, resultStr);
				Thread.sleep(200);
			}else{
				logger.info("获取停牌股票--{}--,开始时间--{}--,结束时间--{}--,出错,错误信息--{}--", stock, begin, end, jsonggJg.getString("showapi_res_error"));
				if("-2".equals(showapi_res_code)){
					throw new BusinessDealException(stock + "----" + jsonggJg.getString("showapi_res_error"));
				}
				else if("-1009".equals(showapi_res_code)){
					logger.info("{}", resultStr);
					Thread.sleep(1100);
				}
				else{
					throw new BusinessDealException(stock + "--出错--" + jsonggJg.getString("showapi_res_error"));
				}
				Thread.sleep(200);
			}
		}while(true);
	}
	
	public static List<JSONObject> getStopStockBySina(String... stocks) throws Exception{
		List<JSONObject> result;
		String codes = "";
		if(null == stocks || stocks.length < 1){
			return Collections.emptyList();
		}else{
			result = new ArrayList<>(stocks.length);
		}
		if(stocks.length > 1){
			for (int i = 0; i < stocks.length; i++) {
				codes += stocks[i];
				if(i<stocks.length -1){
					codes += ",";
				}
			}
		}else{
			codes = stocks[0];
		}
		String resultStr = LiuExecuteUtil.getLiuGetExecute().getNoParams("http://hq.sinajs.cn/list=" + codes, getInfoClient());
		logger.info("获取停牌股票新浪--{}--,返回值--{}--", codes, resultStr);
		String[] vars = resultStr.split(";");
		for (int i = 0; i < vars.length; i++) {
			String var = vars[i];
			if(!StringUtils.hasText(var)){
				continue;
			}
			var = var.replace(" ", "");
			logger.info("获取停牌股票新浪信息{}--,返回值--{}--", i, var);
			int index_ = var.lastIndexOf("_") + 1;
			int index1 = var.indexOf("=");
			String code = var.substring(index_, index1);
			String info = var.substring(index1+2, var.length() -1);
			String[] infos = info.split(",");
			if(infos.length != 33){
				logger.info("获取停牌股票新浪信息{}--,返回数据长度--{}--错误--{}--", i, infos.length, var);
				continue;
			}
			String zqname = infos[0]; // 返回当前证券名
			String market = code.substring(0,2);
			code = code.substring(2);
			String date = infos[30];
			Double ssjg = Double.parseDouble(infos[3]); // 获取实时个股价格
			logger.info("获取停牌股票新浪信息code--{}--,当前价格--{}--", code, ssjg);
			if (ssjg <= 0) {
				ssjg = Double.parseDouble(infos[2]);
			}
			logger.info("获取停牌股票新浪信息code--{}--,昨日收盘价格--{}--", code, ssjg);
			JSONObject stockJson = new JSONObject();
			stockJson.put("zqname", zqname);
			stockJson.put("code", code);
			stockJson.put("market", market);
			stockJson.put("date", date);
			stockJson.put("nowPrice", ssjg);
			stockJson.put("closePrice", ssjg);
			logger.info("获取停牌股票新浪信息code--{}--,json数据--{}--", code, stockJson);
			result.add(stockJson);
		}
		
		return result;
	}
	
	public static void main(String[] args) throws Exception {
//		String stocks = "000558";
//		//System.out.println(stocks.split(",").length);
//		JSONObject json = getStockStopInfo(stocks);
//		//System.out.println(json);
//		String stocks = "sh000550";
//		String stocks = "sz002622";
		//System.out.println(stocks.split(",").length);
//		JSONArray json = getStocks(stocks);
//		JSONObject json = getStockStopInfo(stocks);
		
//		String stocks = "002323";
//		JSONObject json = getSearchStock2(stocks);
//		System.out.println(json);
		List<JSONObject> list = getStopStockBySina("sh500038", "sh204002");
		System.out.println(JSON.toJSONString(list));
		
	}
	
	
	
}
