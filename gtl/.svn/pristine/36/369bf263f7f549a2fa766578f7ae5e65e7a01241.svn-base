package com.admin.service.impl;

import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.MnSjBmDaoI;
import com.admin.dao.MrzcjsDaoI;
import com.admin.model.MnSjBm;
import com.admin.model.MnSjZd;
import com.admin.model.Mrzcjs;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.MnSjBmServiceI;
import com.admin.service.MnSjZdServiceI;
import com.admin.service.MrzcjsServiceI;

@Service
public class MnSjBmServiceImpl implements MnSjBmServiceI {

	@Autowired
	private MnSjBmDaoI mnSjBmDao;
	@Autowired
	private MnSjZdServiceI msz;
	@Autowired
	private MrzcjsServiceI mrzcjsServiceI;
	@Autowired
	private MrzcjsDaoI mrzcjsServiceDaoI;

	@Override
	public DataGrid dataGrid(MnSjBm mnSjBm, PageHelper ph) {
		DataGrid dg = new DataGrid();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from MnSjBm t ";
		List<MnSjBm> l = mnSjBmDao.find(hql + whereHql(mnSjBm, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());

		List<Mrzcjs> mrl = mrzcjsServiceI.getsjbmlist();
		List<Mrzcjs> zpl = mrzcjsServiceI.getsjzbmlist();
		List<MnSjBm> mml = new ArrayList<MnSjBm>();

		for (int i = 0; i < l.size(); i++) {
			for (int j = 0; j < mrl.size(); j++) {
				if (l.get(i).getSjId().equals(mrl.get(j).getSjid())
						&& l.get(i).getUserId().equals(mrl.get(j).getUserid())) {
					String newSjbrsy="0";
					
					if (StringUtils.isBlank(mrl.get(j).getSjbrsy())) {
						l.get(i).setDayRankLv(Double.parseDouble(newSjbrsy));
					}else{
						
						l.get(i).setDayRankLv(Double.parseDouble(mrl.get(j).getSjbrsy()));
						l.get(i).setDayRank((j + 1) + "");
					}
					
					
				}

			}
			
			for (int j = 0; j < zpl.size(); j++) {
				if (l.get(i).getSjId().equals(zpl.get(j).getSjid())
						&& l.get(i).getUserId().equals(zpl.get(j).getUserid())) {
					l.get(i).setRevenues(zpl.get(j).getSjzsy());
					l.get(i).setZpaih(j+1);
					
				}
			}
			mml.add(l.get(i));
		}
		/*
		 * for (int i = 0; i < mrl.size(); i++) { for (int j = 0; j < l.size();
		 * j++) { if (l.get(j).getSjId().equals(mrl.get(i).getSjid()) &&
		 * l.get(j).getUserId().equals(mrl.get(i).getUserid())) {
		 * l.get(j).setDayRank((i+1)+"");
		 * l.get(j).setRevenues(mrl.get(i).getSjzsy()); } mml.add(l.get(j)); } }
		 */

		dg.setRows(mml);
		dg.setTotal(mnSjBmDao.count(
				"select count(*) " + hql + whereHql(mnSjBm, params), params));
		return dg;
	}

	private String whereHql(MnSjBm mnSjBm, Map<String, Object> params) {
		String hql = "";
		if (mnSjBm != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(mnSjBm.getSjName())) {
				hql += " and t.sjName like :sjName";
				params.put("sjName", "%%" + mnSjBm.getSjName() + "%%");
			}

			if (StringUtils.isNotBlank(mnSjBm.getUserId())) {
				hql += " and t.userId like :userId";
				params.put("userId", "%%" + mnSjBm.getUserId() + "%%");
			}

			/*if (StringUtils.isNotBlank(mnSjBm.getUserName())) {
				hql += " and t.userName = :userName";
				params.put("userName", mnSjBm.getUserName());
			}*/
			if (StringUtils.isNotBlank(mnSjBm.getUserName())) {
				hql += " and t.userName like :userName";
				params.put("userName", "%%" + mnSjBm.getUserName() + "%%");
			}
			if (StringUtils.isNotBlank(mnSjBm.getSjId())) {
				hql += " and t.sjId like :sjId";
				params.put("sjId", "%%" + mnSjBm.getSjId() + "%%");
			}
			if (StringUtils.isNotBlank(mnSjBm.getBmSj())) {
				hql += " and t.bmSj like :bmSj";
				params.put("bmSj", "%%" + mnSjBm.getBmSj() + "%%");
			}

			if (StringUtils.isNotBlank(mnSjBm.getSjSxf())) {
				hql += " and t.sjSxf like :sjSxf";
				params.put("sjSxf", "%%" + mnSjBm.getSjSxf() + "%%");
			}

			if (StringUtils.isNotBlank(mnSjBm.getSwGx())) {
				hql += " and t.swGx like :swGx";
				params.put("swGx", "%%" + mnSjBm.getSwGx() + "%%");
			}

			if (StringUtils.isNotBlank(mnSjBm.getJsRq())) {
				hql += " and t.jsRq like :jsRq";
				params.put("jsRq", "%%" + mnSjBm.getJsRq() + "%%");
			}

			if (StringUtils.isNotBlank(mnSjBm.getDqsd())) {
				hql += " and t.dqsd like :dqsd";
				params.put("dqsd", "%%" + mnSjBm.getDqsd() + "%%");
			}

			if (StringUtils.isNotBlank(mnSjBm.getSyl())) {
				hql += " and t.syl like :syl";
				params.put("syl", "%%" + mnSjBm.getSyl() + "%%");
			}

		}
		return hql;

	}

	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			/*2016-6-15号18：12修改，可以点击每日收益和总收益查看排行*/
			if (ph.getSort().equals("dayRankLv")||ph.getSort().equals("revenues")) {
				orderString = " order by t." + ph.getSort() + "+0 " + ph.getOrder();
			} else {

				orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
			}
		} else {
			orderString = " order by t.syl desc";
		}

		return orderString;
	}

	@Override
	public void add(MnSjBm mnSjBm) throws Exception {
		MnSjBm u = new MnSjBm();

		BeanUtils.copyProperties(mnSjBm, u);
		mnSjBmDao.save(mnSjBm);
	}

	@Override
	public MnSjBm get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		MnSjBm t = mnSjBmDao.get(
				"select distinct t from MnSjBm t where t.id = :id", params);
		return t;
	}

	@Override
	public void edit(MnSjBm mnSjBm) throws Exception {
		mnSjBmDao.update(mnSjBm);
	}

	@Override
	public void delete(String id) {
		mnSjBmDao.delete(mnSjBmDao.get(MnSjBm.class, id));
	}

	@Override
	public List<MnSjBm> mnSjBmList(MnSjBm mnSjBm, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		Map<String, Object> params = new HashMap<String, Object>();
		List<MnSjBm> t = mnSjBmDao.find(
				"from MnSjBm t " + whereHql(mnSjBm, params)
						+ " order by t.bmSj desc", params,
				Integer.valueOf(page), Integer.valueOf(rows));
		return t;
	}

	public List<MnSjBm> sjsIds(String userId) {
		StringBuffer sb = new StringBuffer();
		sb.append("select DISTINCT t.sjId from MnSjBm t");
		if (StringUtils.isNotBlank(userId)) {
			sb.append(" where 1=1 and t.userId='" + userId + "'");
		}
		sb.append(" order by t.bmSj desc");
		List<MnSjBm> mnSjBms = mnSjBmDao.find(sb.toString());
		return mnSjBms;
	}

	@Override
	public List<MnSjBm> mnSjBmListODBydqSd(String sjsId, String page,
			String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		List<MnSjBm> t = mnSjBmDao.find("from MnSjBm t where t.sjId ='" + sjsId
				+ "' order by t.dqsd desc", Integer.valueOf(page),
				Integer.valueOf(rows));
		return t;
	}

	@Override
	public int sjpmCount(String sjsId) {
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = "select count(*) from MnSjBm t where t.sjId ='" + sjsId
				+ "'";
		return mnSjBmDao.count(hql, params).intValue();
	}

	@Override
	public int getCount(MnSjBm mnSjBm) {
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = "select count(*)from MnSjBm t " + whereHql(mnSjBm, params);
		return mnSjBmDao.count(hql, params).intValue();
	}

	public MnSjBm findByUserIdAndSjId(String userId, String sjId) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("userId", userId);
		params.put("sjId", sjId);
		MnSjBm t = mnSjBmDao
				.get("select distinct t from MnSjBm t where t.userId = :userId and t.sjId = :sjId",
						params);
		return t;
	}

	@Override
	public List<MnSjBm> getMybmsj(String userid) {
		// TODO Auto-generated method stub
		String hql = "from MnSjBm where 1=1 and userid='" + userid
				+ "' order by bmSj desc";
		List<MnSjBm> list = mnSjBmDao.find(hql);
		return list;
	}

	@Override
	public void deleteDqbm(String userid, String sjsid) {
		// TODO Auto-generated method stub
		String hql = "from MnSjBm where 1=1 and userid='" + userid + "'";
		List<MnSjBm> list = mnSjBmDao.find(hql);
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				MnSjBm bm = list.get(i);
				mnSjBmDao.delete(bm);
			}
		}

	}

	@Override
	public String bmCount(String sjid) {
		String sql = "select count(1) from t_mnSjBm where 1=1 and sjId ='"
				+ sjid + "' ";
		BigInteger l = mnSjBmDao.countBySql(sql);
		return l.toString();
	}

	@Override
	public List<MnSjBm> getTgzcBmList(String sjid) {
		// TODO Auto-generated method stub

		String hql = " from MnSjBm where 1=1 and sjid='" + sjid + "'";
		List<MnSjBm> list = mnSjBmDao.find(hql);
		return list;
	}

	@Override
	public String pdbm(String userid, String sjid) {
		// TODO Auto-generated method stub
		String hql = " from MnSjBm where 1=1 and userid='" + userid
				+ "' and sjId='" + sjid + "'";
		MnSjBm bm = mnSjBmDao.get(hql);
		String isbm = "0";
		if (bm != null) {
			isbm = "1";
		}
		return isbm;
	}

	@Override
	public void updateBmSyl() { // 每天定时更新报名表中报名人员收益率
		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		String today = formatter.format(date);
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(date);
		calendar.add(calendar.DATE, -1);// 把日期往后增加一天.整数往后推,负数往前移动
		date = calendar.getTime(); // 这个时间就是日期往后推一天的结果
		String ztdate = formatter.format(date); // 昨天
		String dateString = "";
		/**
		 * 判定请求数据日期方法
		 */
		String drqsql = "select count(1) from t_mrzcjs where 1=1  and jstime ='"
				+ today + "'"; // 设定定日期sql
		BigInteger drql = mnSjBmDao.countBySql(drqsql);
		if (drql.equals(BigInteger.ZERO)) { // 今天收益资产未结算，数据请求日期设置为昨天
			dateString = ztdate;
		} else { // 今天收益资产结算后，数据请求日期设置为今天
			dateString = today;
		}

		String hql = " from MnSjBm where 1=1";
		List<MnSjBm> list01 = mnSjBmDao.find(hql);
		if (list01.size() > 0) {
			for (int i = 0; i < list01.size(); i++) {
				MnSjBm bm = list01.get(i);
				String userid = bm.getUserId();
				String sjid = bm.getSjId();
				Mrzcjs mrjs = mrzcjsServiceI.getNowMrzc(userid, sjid,
						dateString);// 获取当前最新结算收益
				if (mrjs != null) {
					bm.setSyl(mrjs.getSjbzsy());
				} else {
					bm.setSyl("0.0");
				}
				bm.setJsRq(today);

				mnSjBmDao.update(bm);
			}
		}

	}

	@Override
	public void updatembm(String sjid) {
		String hql="";
		if (StringUtils.isNotBlank(sjid)) {
			MnSjZd msd=msz.get(sjid);
			if (msd != null) {
				
				/*hql ="update t_mnSjBm set SJNAME="+msd.getSjName()+" where SJID="+sjid;*/
				//hql ="update t_mnSjBm set SJNAME='"+msd.getSjName()+"' where SJID='"+sjid+"'";
				hql ="update MnSjBm set sjName='"+msd.getSjName()+"' where sjId='"+sjid+"'";
				int ii=mnSjBmDao.executeHql(hql);
				//System.out.println("修改的报名数据有"+ii+"条");
			}
		}
		
	}

}
