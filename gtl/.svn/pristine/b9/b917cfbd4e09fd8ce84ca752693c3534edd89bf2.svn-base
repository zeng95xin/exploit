package com.admin.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.LoginUserDaoI;
import com.admin.dao.PinglunDaoI;
import com.admin.dao.WarnDaoI;
import com.admin.model.LoginUser;
import com.admin.model.Tpinglun;
import com.admin.model.TxwxGl;
import com.admin.model.Warn;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.LoginUserServiceI;
import com.admin.service.PinglunServiceI;
import com.admin.service.XwxServiceI;
import com.web.util.TimeUtils;

@Service
public class PinglunServiceImpl implements PinglunServiceI {

	@Autowired
	private PinglunDaoI dao;

	@Autowired
	private LoginUserDaoI loginUserDaoI;

	@Autowired
	private LoginUserServiceI loginUserServiceI;

	@Autowired
	private WarnDaoI warnDaoI;

	@Autowired
	private XwxServiceI xwxService;

	/**
	 * 获取评论
	 */
	@Override
	public DataGrid dataGrid(Tpinglun tpl, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Tpinglun> ul = new ArrayList<Tpinglun>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Tpinglun t ";
		List<Tpinglun> l = dao.find(hql + whereHql(tpl, params) + orderHql(ph),
				params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Tpinglun t : l) {
				Tpinglun u = new Tpinglun();
				LoginUser user = loginUserDaoI.get(LoginUser.class,
						t.getUserid());
				if (user != null) {
					t.setPlusername(user.getNickname());
					t.setYhtx(user.getTx());
				}
				TxwxGl txw = xwxService.getTxwxGl(t.getWzid());
				if (txw != null) {
					t.setTitle(txw.getXwtitel());
					t.setLanmu(txw.getXwfbfl());
				}
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count("select count(*) " + hql + whereHql(tpl, params),
				params));
		return dg;
	}

	/**
	 * where条件封装
	 * 
	 * @param ad
	 * @param params
	 * @return
	 */
	private String whereHql(Tpinglun tpl, Map<String, Object> params) {
		String hql = "";
		if (tpl != null) {
			hql += " where t.status='0' ";
			if (StringUtils.isNotBlank(tpl.getLanmu())) {
				hql += " and t.lanmu = :lanmu";
				params.put("lanmu", tpl.getLanmu());
			}
			if (StringUtils.isNotBlank(tpl.getPlusername())) {
				hql += " and t.plusername like :plusername";
				params.put("plusername", "%%" + tpl.getPlusername() + "%%");
			}
			if (StringUtils.isNotBlank(tpl.getTitle())) {
				hql += " and t.title like :title";
				params.put("title", "%%" + tpl.getTitle() + "%%");
			}

		}
		return hql;
	}

	/**
	 * order封装
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	/**
	 * 新增评论
	 */
	@Override
	public void add(Tpinglun tpl) throws Exception {
		tpl.setId(UUID.randomUUID().toString());
		tpl.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		tpl.setStatus("0");
		tpl.setZan("0");
		tpl.setTucao("0");
		dao.save(tpl);
	}

	/**
	 * 删除评论
	 */
	@Override
	public void delete(String id) throws Exception {
		Tpinglun tpl = dao.get(Tpinglun.class, id);
		dao.delete(tpl);
	}

	@Override
	public List<Tpinglun> getList(String wzid, String page, String rows)
			throws Exception {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String hql = " from Tpinglun where wzid='" + wzid
				+ "' order by time desc";
		List<Tpinglun> list = dao.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public List<Tpinglun> getListByWid(String id) throws Exception {
		String hql = " from Tpinglun where wzid='" + id
				+ "' order by time desc";
		List<Tpinglun> newList = new ArrayList<Tpinglun>();
		List<Tpinglun> list = dao.find(hql);
		if (list != null) {
			for (Tpinglun tpinglun : list) {
				Tpinglun tpl = new Tpinglun();
				LoginUser luser = loginUserServiceI.getLoginUser(tpinglun
						.getUserid());
				if (luser != null) {
					tpinglun.setPlusername(luser.getNickname());
					tpinglun.setYhtx(luser.getTx());
				}
				BeanUtils.copyProperties(tpinglun, tpl);
				newList.add(tpl);
			}
		}
		return newList;
	}

	/**
	 * 举报
	 */
	@Override
	public void update(Tpinglun t) throws Exception {
		String id = t.getId();
		Tpinglun tpl = dao.get(Tpinglun.class, id);
		tpl.setStatus("1");
		String jbr = tpl.getJbr();
		if (jbr != null) {
			tpl.setJbr(jbr + ";" + t.getJbr());
			tpl.setJbrid(tpl.getJbrid() + ";" + t.getJbrid());
		} else {
			tpl.setJbr(t.getJbr());
			tpl.setJbrid(t.getJbrid());
		}

		dao.update(tpl);
	}

	@Override
	public void update1(Tpinglun t) throws Exception {
		dao.update(t);
	}

	/**
	 * 跳过
	 */
	@Override
	public void tg(String id) throws Exception {
		Tpinglun tpl = dao.get(Tpinglun.class, id);
		tpl.setStatus("0");
		dao.update(tpl);
	}

	@Override
	public Tpinglun get(String id) throws Exception {
		return dao.get(Tpinglun.class, id);
	}

	/**
	 * 举报处理记录
	 */
	@Override
	public DataGrid dataGrid1(Tpinglun tpl, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Tpinglun> ul = new ArrayList<Tpinglun>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Tpinglun t ";
		List<Tpinglun> l = dao.find(hql + whereHql1(tpl, params)
				+ orderHql1(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Tpinglun t : l) {
				Tpinglun u = new Tpinglun();
				BeanUtils.copyProperties(t, u);
				String userid = u.getUserid();
				LoginUser user = loginUserDaoI.get(LoginUser.class, userid);
				String nickname = "";
				if (user != null) {
					nickname = user.getNickname();
				}

				u.setUserid(nickname);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count(
				"select count(*) " + hql + whereHql1(tpl, params), params));
		return dg;
	}

	/**
	 * where条件封装
	 * 
	 * @param ad
	 * @param params
	 * @return
	 */
	private String whereHql1(Tpinglun tpl, Map<String, Object> params) {
		String hql = "";
		if (tpl != null) {
			hql += " where t.status !='0' ";
			if (StringUtils.isNotBlank(tpl.getStatus())) {
				hql += " and t.status = :status";
				params.put("status", tpl.getStatus());
			}

		}
		return hql;
	}

	/**
	 * order封装
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql1(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	/**
	 * 屏蔽所有的发言
	 */
	@Override
	public void pb(String userid) throws Exception {
		String hql = " from Tpinglun where userid='" + userid + "'";
		List<Tpinglun> list = dao.find(hql);
		for (int i = 0; i < list.size(); i++) {
			Tpinglun t = list.get(i);
			t.setStatus("6");
			dao.update(t);
		}
	}

	/**
	 * 封号
	 */
	@Override
	public void fh(String userid) throws Exception {
		LoginUser user = loginUserDaoI.get(LoginUser.class, userid);
		user.setStatus("0");
		loginUserDaoI.update(user);
	}

	@Override
	public void jg(String userid, String title, String content)
			throws Exception {
		Warn w = new Warn();
		w.setId(UUID.randomUUID().toString());
		w.setTitle(title);
		w.setContent(content);
		w.setUserid(userid);
		w.setStatus("0");
		w.setAddtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		warnDaoI.save(w);
	}

	@Override
	public int getCount(String wzid) {
		String hql = "select count(*) from Tpinglun where wzid='" + wzid + "'";
		return dao.count(hql).intValue();
	}

}
