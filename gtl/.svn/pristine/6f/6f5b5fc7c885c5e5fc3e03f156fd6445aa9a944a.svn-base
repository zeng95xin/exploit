package com.huanxin.util;

import java.net.URLEncoder;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.web.entity.ChatHouse;
import com.web.exception.BusinessDealException;
import com.web.exception.BusinessValidateException;
import com.web.util.HttpClientUtil;
public class ChartUtlis {
	
private final Logger logger = LoggerFactory.getLogger(this.getClass());
	//###########需要的环信的key 我这里只是测试写这儿的  正常 你们应该写配置文件中，古天乐项目去申请一份这些数据##################
	//股天乐的环信key
	private final String huanxinImApiUrl="https://a1.easemob.com/gutianle/gutianle";
	private final String huanxinImClientId ="YXA6zUrPgEijEeaTfO2paaY4ig";
	private final String huanxinImClientSecret ="YXA6guL4sv2vSmyNhJmnP-u_kUp7O4g";
	
	
	//######################使用流程
	//app注册账号时，同时注册一个im账号和app账号关联。可以在app用户表中加两个字段   
		//`im_username` varchar(64) DEFAULT NULL COMMENT 'IM用户名',
		//`im_password` varchar(64) DEFAULT NULL COMMENT 'IM密码',
	//发送消息的时候两种方式
		//1、返回app对方的im账号给app、web。由app、web集成sdk去发送，且处理接收
		//2、服务端代码发送，app、web只处理接收消息
	
	/**
	 * 注册环信账号
	 * 在app注册那个地方 调用这个方法
	 * 下面的 main方法 ，可以看一下，传参map是个什么的格式
	 */
	public void addImUser(List<Map<String, String>> userList) throws Exception {
		//System.out.println("进入了环信方法！000000000000");
		if(userList==null || userList.size()<1){
			throw new BusinessValidateException("无用户录入");
		}
		String token=this.getToke().getToken();
		//System.out.println("环信的token="+token);
		String requestBody=JSON.toJSONString(userList).toString();
		String url=huanxinImApiUrl + "/users";
		String contentType = "application/json";
		Map<String,String> headerMap=new HashMap<String,String>();
		headerMap.put("Content-Type", "application/json");
		headerMap.put("Authorization", "Bearer "+token);
		String message=HttpClientUtil.postHttps(url, requestBody, contentType,headerMap);
		//System.out.println("注册的用户信息"+message);
		logger.info("==>>Im新增注册返回："+message);
		if(StringUtils.isBlank(message)){
			throw new BusinessValidateException("IM服务端异常");
		}
		JSONObject j = JSONObject.parseObject(message);
		if (StringUtils.isNotBlank(j.getString("error"))) {
			logger.info("==>>Im新增注册失败原因：>>>" + j.getString("error_description"));
			throw new BusinessDealException("Im新增注册失败"+j.getString("error_description"));
		}
		logger.info("环信im注册成功");
		//System.out.println("环信方法运行结束");
	}
	
	/**
	 * 发送消息
	 * 如果是采用第一种方式 交给app、web去处理收发消息，服务端就只有做一个注册的事，下面的方法都不用使用了
	 * 服务端发送消息 详见 http://docs.easemob.com/im/100serverintegration/50messages
	 */
	/*Path: /{org_name}/{app_name}/messages
	Request Method: POST
	URL Params: 无
	Request Headers: {“Content-Type”:”application/json”,”Authorization”:”Bearer ${token}”}
	Response Body: 详情参见示例返回值，返回的 JSON 数据中会包含除上述属性之外的一些其他信息，均可以忽略。
	可能的错误码：400（此用户或groupid不存在）、401（未授权[无token、token错误、token过期]）、5xx。详见：服务器端 REST API 常见错误码
	Request Body:
	{
	    "target_type" : "users", // users 给用户发消息。chatgroups: 给群发消息，chatrooms: 给聊天室发消息
	    "target" : ["u1", "u2", "u3"], // 注意这里需要用数组，数组长度建议不大于20，即使只有一个用户，
	                                   // 也要用数组 ['u1']，给用户发送时数组元素是用户名，给群组发送时  
	                                   // 数组元素是groupid
	    "msg" : {
	        "type" : "txt",
	        "msg" : "hello from rest" //消息内容，参考[[start:100serverintegration:30chatlog|聊天记录]]里的bodies内容
	        },
	    "from" : "jma2" //表示消息发送者。无此字段Server会默认设置为"from":"admin"，有from字段但值为空串("")时请求失败
	}*/
	public JSON sendMessage(String requestBody) throws Exception {
		String token=this.getToke().getToken();
		String url=huanxinImApiUrl + "/messages";
		//System.out.println("发送消息的方法的URL="+url);
		
		String contentType = "application/json";
		
		Map<String,String> headerMap=new HashMap<String,String>();
		headerMap.put("Content-Type", "application/json");
		headerMap.put("Authorization", "Bearer "+token);
		
		//requestBody  就是发送的一些消息信息内容，，，上面注释  给了格式的，，可以建一个 相应的实体  用fastjson转为String.
		String message=HttpClientUtil.postHttps(url, requestBody, contentType,headerMap);
		//System.out.println("发送的信息"+message);
		logger.info("==>>发送消息返回："+message);
		if(StringUtils.isBlank(message)){
			throw new BusinessValidateException("IM服务端异常");
		}
		JSONObject j = JSONObject.parseObject(message);
		if (StringUtils.isNotBlank(j.getString("error"))) {
			logger.info("==>>发送失败原因：>>>" + j.getString("error_description"));
			throw new BusinessDealException("发生失败"+j.getString("error_description"));
		}
		logger.info("发送成功");
		return j;
	}
	
	/**
	 * 创建群组
	 * @param requestBody
	 * @return
	 * @throws Exception
	 */
	public String creatGroup(String requestBody) throws Exception {
		String token=this.getToke().getToken();
		String url=huanxinImApiUrl + "/chatgroups";
		//System.out.println("创建聊天室的方法的URL="+url);
		String contentType = "application/json";
		Map<String,String> headerMap=new HashMap<String,String>();
		headerMap.put("Authorization", "Bearer "+token);
		
		//requestBody  就是发送的一些消息信息内容，，，上面注释  给了格式的，，可以建一个 相应的实体  用fastjson转为String.
		String message=HttpClientUtil.postHttps(url, requestBody, contentType, headerMap);
		//System.out.println("聊天室的信息"+message);
		logger.info("==>>创建聊天室的返回："+message);
		if(StringUtils.isBlank(message)){
			throw new BusinessValidateException("IM服务端异常");
		}
		JSONObject j = JSONObject.parseObject(message);
		if (StringUtils.isNotBlank(j.getString("error"))) {
			logger.info("==>>发送失败原因：>>>" + j.getString("error_description"));
			throw new BusinessDealException("发生失败"+j.getString("error_description"));
		}
		logger.info("发送成功");
		return message;
	}
	
	/**
	 * 创建聊天室
	 * @param requestBody
	 * @return
	 * @throws Exception
	 */
	public String creatRoom(String requestBody) throws Exception {
		String token=this.getToke().getToken();
		String url=huanxinImApiUrl + "/chatrooms";
		//System.out.println("创建聊天室的方法的URL="+url);
		
		String contentType = "application/json";
		
		Map<String,String> headerMap=new HashMap<String,String>();
		headerMap.put("Authorization", "Bearer "+token);
		
		//requestBody  就是发送的一些消息信息内容，，，上面注释  给了格式的，，可以建一个 相应的实体  用fastjson转为String.
		String message=HttpClientUtil.postHttps(url, requestBody, contentType,headerMap);
		//System.out.println("聊天室的信息"+message);
		logger.info("==>>创建聊天室的返回："+message);
		if(StringUtils.isBlank(message)){
			throw new BusinessValidateException("IM服务端异常");
		}
		JSONObject j = JSONObject.parseObject(message);
		if (StringUtils.isNotBlank(j.getString("error"))) {
			logger.info("==>>发送失败原因：>>>" + j.getString("error_description"));
			throw new BusinessDealException("发生失败"+j.getString("error_description"));
		}
		logger.info("发送成功");
		return message;
	}
	
	/**
	 * 更新聊天室信息
	 * @param requestBody
	 * @param id
	 * @return
	 * @throws Exception
	 */
	public String updateRoom(String requestBody,String id) throws Exception {
		String token=this.getToke().getToken();
		String url=huanxinImApiUrl + "/chatrooms/"+id;
		//System.out.println("创建聊天室的方法的URL="+url);
		
		String contentType = "application/json";
		
		Map<String,String> headerMap=new HashMap<String,String>();
		headerMap.put("Authorization", "Bearer "+token);
		
		//requestBody  就是发送的一些消息信息内容，，，上面注释  给了格式的，，可以建一个 相应的实体  用fastjson转为String.
		String message=HttpClientUtil.put(url, requestBody, contentType, headerMap);
		//System.out.println("聊天室的信息"+message);
		logger.info("==>>更新聊天室的返回："+message);
		if(StringUtils.isBlank(message)){
			throw new BusinessValidateException("IM服务端异常");
		}
		JSONObject j = JSONObject.parseObject(message);
		if (StringUtils.isNotBlank(j.getString("error"))) {
			logger.info("==>>发送失败原因：>>>" + j.getString("error_description"));
			throw new BusinessDealException("发生失败"+j.getString("error_description"));
		}
		logger.info("更新成功");
		return message;
	}
	
	/**
	 * 根据ID删除聊天室
	 * @param id
	 * @return
	 * @throws Exception
	 */
	public String deleteRoom(String id) throws Exception {
		String token=this.getToke().getToken();
		String url=huanxinImApiUrl + "/chatrooms/"+id;
		//System.out.println("创建聊天室的方法的URL="+url);
		
		Map<String,String> headerMap=new HashMap<String,String>();
		headerMap.put("Authorization", "Bearer "+token);
		
		//requestBody  就是发送的一些消息信息内容，，，上面注释  给了格式的，，可以建一个 相应的实体  用fastjson转为String.
		String message=HttpClientUtil.getHttps(url, null, headerMap);
		//System.out.println("聊天室的信息"+message);
		logger.info("==>>创建聊天室的返回："+message);
		if(StringUtils.isBlank(message)){
			throw new BusinessValidateException("IM服务端异常");
		}
		JSONObject j = JSONObject.parseObject(message);
		if (StringUtils.isNotBlank(j.getString("error"))) {
			logger.info("==>>发送失败原因：>>>" + j.getString("error_description"));
			throw new BusinessDealException("发生失败"+j.getString("error_description"));
		}
		logger.info("发送成功");
		return message;
	}
	
	/**
	 * 获取单个聊天室信息
	 * @param id
	 * @return
	 * @throws Exception
	 */
	public String getRoom(String id) throws Exception {
		String token=this.getToke().getToken();
		String url=huanxinImApiUrl + "/chatrooms/"+id;
		//System.out.println("创建聊天室的方法的URL="+url);
		
		Map<String,String> headerMap=new HashMap<String,String>();
		headerMap.put("Authorization", "Bearer "+token);
		
		//requestBody  就是发送的一些消息信息内容，，，上面注释  给了格式的，，可以建一个 相应的实体  用fastjson转为String.
		String message=HttpClientUtil.getHttps(url, null, headerMap);
		//System.out.println("聊天室的信息"+message);
		logger.info("==>>聊天室的返回："+message);
		if(StringUtils.isBlank(message)){
			throw new BusinessValidateException("IM服务端异常");
		}
		JSONObject j = JSONObject.parseObject(message);
		if (StringUtils.isNotBlank(j.getString("error"))) {
			logger.info("==>>发送失败原因：>>>" + j.getString("error_description"));
			throw new BusinessDealException("发生失败"+j.getString("error_description"));
		}
		logger.info("发送成功");
		return message;
	}
	
	/**
	 * 获取APP所有的聊天室
	 * @return
	 * @throws Exception
	 */
	public String getAllRoom() throws Exception {
		String token=this.getToke().getToken();
		String url=huanxinImApiUrl + "/chatrooms";
		//System.out.println("创建聊天室的方法的URL="+url);
		
		Map<String,String> headerMap=new HashMap<String,String>();
		headerMap.put("Authorization", "Bearer "+token);
		
		//requestBody  就是发送的一些消息信息内容，，，上面注释  给了格式的，，可以建一个 相应的实体  用fastjson转为String.
		String message=HttpClientUtil.getHttps(url, null, headerMap);
		//System.out.println("聊天室的信息"+message);
		logger.info("==>>聊天室的返回："+message);
		if(StringUtils.isBlank(message)){
			throw new BusinessValidateException("IM服务端异常");
		}
		JSONObject j = JSONObject.parseObject(message);
		if (StringUtils.isNotBlank(j.getString("error"))) {
			logger.info("==>>发送失败原因：>>>" + j.getString("error_description"));
			throw new BusinessDealException("发生失败"+j.getString("error_description"));
		}
		logger.info("发送成功");
		return message;
	}
	
	/**
	 * 添加单个用户到聊天室
	 * @param id
	 * @param userName
	 * @return
	 * @throws Exception
	 */
	public String addRoomByUser(String id,String userName) throws Exception {
		String token=this.getToke().getToken();
		String url=huanxinImApiUrl+"/chatrooms/"+id + "/users/"+userName;
		//System.out.println("创建聊天室的方法的URL="+url);
		
		Map<String,String> headerMap=new HashMap<String,String>();
		headerMap.put("Authorization", "Bearer "+token);
		
		//requestBody  就是发送的一些消息信息内容，，，上面注释  给了格式的，，可以建一个 相应的实体  用fastjson转为String.
		String message=HttpClientUtil.postHttps(url, null, headerMap);
		//System.out.println("加入聊天室的用户信息"+message);
		logger.info("==>>加入聊天室的返回："+message);
		if(StringUtils.isBlank(message)){
			throw new BusinessValidateException("IM服务端异常");
		}
		JSONObject j = JSONObject.parseObject(message);
		if (StringUtils.isNotBlank(j.getString("error"))) {
			logger.info("==>>发送失败原因：>>>" + j.getString("error_description"));
			throw new BusinessDealException("发生失败"+j.getString("error_description"));
		}
		logger.info("加入成功");
		return message;
	}
	
	/**
	 * 根据用户名获取他加入的聊天室
	 * @param userName
	 * @return
	 * @throws Exception
	 */
	public String getRoomByUser(String userName) throws Exception {
		String token=this.getToke().getToken();
		String url=huanxinImApiUrl + "/users/"+userName+"/joined_chatrooms";
		//System.out.println("创建聊天室的方法的URL="+url);
		
		Map<String,String> headerMap=new HashMap<String,String>();
		headerMap.put("Authorization", "Bearer "+token);
		
		//requestBody  就是发送的一些消息信息内容，，，上面注释  给了格式的，，可以建一个 相应的实体  用fastjson转为String.
		String message=HttpClientUtil.getHttps(url, null, headerMap);
		//System.out.println("聊天室的信息"+message);
		logger.info("==>>聊天室的返回："+message);
		if(StringUtils.isBlank(message)){
			throw new BusinessValidateException("IM服务端异常");
		}
		JSONObject j = JSONObject.parseObject(message);
		if (StringUtils.isNotBlank(j.getString("error"))) {
			logger.info("==>>发送失败原因：>>>" + j.getString("error_description"));
			throw new BusinessDealException("发生失败"+j.getString("error_description"));
		}
		logger.info("发送成功");
		return message;
	}
	
	/**
	 * 分页时间戳之后获取聊天记录
	 * @param timestamp
	 * @param cursor
	 * @return
	 * @throws Exception
	 */
	public String getRoomMessage(String timestamp,String cursor) throws Exception {
		String token=this.getToke().getToken();
		String url=huanxinImApiUrl + "/chatmessages?";
		//System.out.println("创建聊天室的方法的URL="+url);
		if (StringUtils.isNotBlank(timestamp)) {
			String ss=URLEncoder.encode("ql=select\b*\bwhere\btimestamp>","UTF-8");
			//url+="?ql=select * where timestamp < "+timestamp+" &limit=1000";	
			url+=ss+timestamp+"&limit=1000";
		}
		if (StringUtils.isNotBlank(cursor)) {
			url+="&cursor="+cursor;
		}
		//System.out.println(url);
		Map<String,String> headerMap=new HashMap<String,String>();
		headerMap.put("Content-Type", "application/json");
		headerMap.put("Authorization", "Bearer "+token);
		
		//requestBody  就是发送的一些消息信息内容，，，上面注释  给了格式的，，可以建一个 相应的实体  用fastjson转为String.
		String message=HttpClientUtil.getHttps(url, null, headerMap);
		//System.out.println("聊天记录的信息"+message);
		logger.info("==>>聊天记录的返回："+message);
		if(StringUtils.isBlank(message)){
			throw new BusinessValidateException("IM服务端异常");
		}
		JSONObject j = JSONObject.parseObject(message);
		if (StringUtils.isNotBlank(j.getString("error"))) {
			logger.info("==>>获取聊天记录失败原因：>>>" + j.getString("error_description"));
			throw new BusinessDealException("发生失败"+j.getString("error_description"));
		}
		logger.info("获取聊天记录成功");
		return message;
	}
	/**
	 * 分页获取时间戳之前的聊天记录
	 * @param timestamp
	 * @param cursor
	 * @return
	 * @throws Exception
	 */
	public String getRoomMessageBefor(String timestamp,String cursor) throws Exception {
		String token=this.getToke().getToken();
		String url=huanxinImApiUrl + "/chatmessages?";
		//System.out.println("创建聊天室的方法的URL="+url);
		if (StringUtils.isNotBlank(timestamp)) {
			String ss=URLEncoder.encode("ql=select\b*\bwhere\btimestamp<","UTF-8");
			//url+="?ql=select * where timestamp < "+timestamp+" &limit=1000";	
			url+=ss+timestamp+"&limit=1000";	
		}
		if (StringUtils.isNotBlank(cursor)) {
			url+="&cursor="+cursor;
		}
		//System.out.println(url);
		Map<String,String> headerMap=new HashMap<String,String>();
		headerMap.put("Content-Type", "application/json");
		headerMap.put("Authorization", "Bearer "+token);
		
		//requestBody  就是发送的一些消息信息内容，，，上面注释  给了格式的，，可以建一个 相应的实体  用fastjson转为String.
		String message=HttpClientUtil.getHttps(url, null, headerMap);
		//System.out.println("聊天记录的信息"+message);
		logger.info("==>>聊天记录的返回："+message);
		if(StringUtils.isBlank(message)){
			throw new BusinessValidateException("IM服务端异常");
		}
		JSONObject j = JSONObject.parseObject(message);
		if (StringUtils.isNotBlank(j.getString("error"))) {
			logger.info("==>>获取聊天记录失败原因：>>>" + j.getString("error_description"));
			throw new BusinessDealException("发生失败"+j.getString("error_description"));
		}
		logger.info("获取聊天记录成功");
		return message;
	}
	
	/**
	 * 根据时间戳获取之前的聊天记录
	 * @param timestamp
	 * @return
	 * @throws Exception
	 */
	public String getRoomMessageByTimestamp(String timestamp) throws Exception {
		String token=this.getToke().getToken();
		String url=huanxinImApiUrl + "/chatmessages?";
		//System.out.println("创建聊天室的方法的URL="+url);
		if (StringUtils.isNotBlank(timestamp)) {
			String ss=URLEncoder.encode("ql=select\b*\bwhere\btimestamp<","UTF-8");
			//url+="ql=select\b*\bwhere\btimestamp<"+timestamp;
			url+=ss+timestamp;
		}
		
		Map<String,String> headerMap=new HashMap<String,String>();
		headerMap.put("Content-Type", "application/json");
		headerMap.put("Authorization", "Bearer "+token);
		
		//requestBody  就是发送的一些消息信息内容，，，上面注释  给了格式的，，可以建一个 相应的实体  用fastjson转为String.
		String message=HttpClientUtil.getHttps(url, null, headerMap);
		//System.out.println("聊天记录的信息"+message);
		logger.info("==>>聊天记录的返回："+message);
		if(StringUtils.isBlank(message)){
			throw new BusinessValidateException("IM服务端异常");
		}
		JSONObject j = JSONObject.parseObject(message);
		if (StringUtils.isNotBlank(j.getString("error"))) {
			logger.info("==>>获取聊天记录失败原因：>>>" + j.getString("error_description"));
			throw new BusinessDealException("发生失败"+j.getString("error_description"));
		}
		logger.info("获取聊天记录成功");
		return message;
	}
	
	
	
	
	
	
	
	/**
	 * 获取token 半小时内用同一个，不要频繁的更换
	 * @return
	 * @throws Exception
	 */
	public IMToken getToke() throws Exception {
		IMToken tok=IMToken.getInstance();
		Long cha= new Date().getTime() - tok.getTokenTime().getTime();
		if(cha - tok.getExpiresIn()/2 > 0){//超时了的 重新获取 token
			String url=huanxinImApiUrl + "/token";
			String requestBody="{\"grant_type\": \"client_credentials\",\"client_id\":\"" +huanxinImClientId+"\",\"client_secret\": \""+huanxinImClientSecret+"\"}";
			String contentType = "application/json";
			Map<String,String> headerMap=new HashMap<String,String>();
			headerMap.put("Content-Type", "application/json");
			String message=HttpClientUtil.postHttps(url, requestBody, contentType,headerMap);
			logger.info("==>>获取token返回："+message);
			if(StringUtils.isBlank(message)){
				throw new BusinessValidateException("IM服务端异常");
			}
			JSONObject j = JSONObject.parseObject(message);
			if (StringUtils.isNotBlank(j.getString("error"))) {
				logger.info("==>>获取token失败原因：>>>" + j.getString("error_description"));
				throw new BusinessDealException("获取token失败"+j.getString("error_description"));
			}
			String access_token=j.getString("access_token");
			Long expires_in = j.getLong("expires_in");
			tok.setExpiresIn(expires_in);
			tok.setToken(access_token);
			tok.setTokenTime(new Date());
		}else{//没超时 使用原来
			return tok;
		}
		return tok;
	}
	
	/**
	 * 环信上傳文件和圖片
	 * @param file
	 * @return
	 * @throws Exception
	 */
	public JSON sendFile(String file)throws Exception{
		String token=this.getToke().getToken();
		
		String url=huanxinImApiUrl + "/chatfiles";
		
		Map<String,String> headerMap=new HashMap<String,String>();
		headerMap.put("restrict-access", "true");
		headerMap.put("Authorization", "Bearer "+token);
		
		String message = HttpClientUtil.httpRequestPost(url, null, headerMap, file);
		logger.info("==>>Im上传文件返回："+message);
		JSONObject j = JSONObject.parseObject(message);
		if (StringUtils.isNotBlank(j.getString("error"))) {
			logger.info("==>>发送失败原因：>>>" + j.getString("error_description"));
			throw new BusinessDealException("发生失败"+j.getString("error_description"));
		}
		return j;
	}

	/**
	 * 环信下載語音和圖片方法
	 * @param uuid
	 * @param share
	 * @return
	 * @throws Exception
	 */
	public JSON getFile(String uuid,String share)throws Exception{
		String token=this.getToke().getToken();
		String url=huanxinImApiUrl + "/chatfiles/"+uuid;
		Map<String,String> headerMap=new HashMap<String,String>();
		headerMap.put("Accept", "application/octet-stream");
		headerMap.put("Authorization", "Bearer "+token);
		headerMap.put("share-secret", share);
		
		String message=HttpClientUtil.post(url, null, headerMap);
		JSONObject j = JSONObject.parseObject(message);
		if (StringUtils.isNotBlank(j.getString("error"))) {
			logger.info("==>>发送失败原因：>>>" + j.getString("error_description"));
			throw new BusinessDealException("发生失败"+j.getString("error_description"));
		}
		logger.info("==>>Im上传文件返回："+message);
		return j;
	}
	
	/**
	 * 下载保存图片
	 * @param url
	 * @param share
	 * @return
	 * @throws Exception
	 */
	public String getHXFileImage(String url,String share)throws Exception{
		String token=this.getToke().getToken();
		Map<String,String> headerMap=new HashMap<String,String>();
		headerMap.put("thumbnail", "true");
		headerMap.put("share-secret", share);
		headerMap.put("Authorization", "Bearer "+token);
		headerMap.put("Accept", "application/octet-stream");				
		//String message=HttpClientUtil.post(url, null, headerMap);
		String message=HttpClientUtil.downloadImage(url, headerMap);
		/*JSONObject j = JSONObject.parseObject(message);
		if (StringUtils.isNotBlank(j.getString("error"))) {
			logger.info("==>>发送失败原因：>>>" + j.getString("error_description"));
			throw new BusinessDealException("发生失败"+j.getString("error_description"));
		}*/
		logger.info("==>>Im上传文件返回："+message);
		return message;
	}
	/**
	 * 下载保存语音
	 * @param url
	 * @param share
	 * @return
	 * @throws Exception
	 */
	public String getHXFileAudio(String url,String share)throws Exception{
		String token=this.getToke().getToken();
		Map<String,String> headerMap=new HashMap<String,String>();
		headerMap.put("share-secret", share);
		headerMap.put("Authorization", "Bearer "+token);
		headerMap.put("Accept", "application/octet-stream");				
		//String message=HttpClientUtil.post(url, null, headerMap);
		String message=HttpClientUtil.downloadAudio(url, headerMap);
		/*JSONObject j = JSONObject.parseObject(message);
		if (StringUtils.isNotBlank(j.getString("error"))) {
			logger.info("==>>发送失败原因：>>>" + j.getString("error_description"));
			throw new BusinessDealException("发生失败"+j.getString("error_description"));
		}*/
		logger.info("==>>Im上传文件返回："+message);
		return message;
	}
	
	
	public static void main(String[] args) {
		//IMClientImpl ss=new IMClientImpl();
		/*try {
			//ss.getToke();
			List<Map<String, String>> userList=new ArrayList<Map<String,String>>();
			Map<String, String> map=new HashMap<String, String>();
			map.put("username", "zhangs1");
			map.put("password", "2423wwds");
			userList.add(map);
			//ss.addImUser(userList);
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		//String file="D:/56725c86Nea113c7f.jpg";
		String msg=null;
		ChartUtlis cu=new ChartUtlis();
		try {
			//String url="https://a1.easemob.com/gutianle/gutianle/chatfiles/f28c33d0-5927-11e6-b935-bf6aca50b050";
			//String secret="8owz2lknEea3WA2QXbpsd01Nou_LY2Kq0vAtY9lcSEqocoAk";
			//String url="https://a1.easemob.com/gutianle/gutianle/chatfiles/000ec270-5928-11e6-af5f-eb6f8abc8b34";
			//String secret="AA7CelkoEeabqWVk-00FascCv6tBxKBdN3fb_VKaZH2bn8OL";
			//msg=cu.getHXFileAudio(url, secret);
			//msg=cu.getRoomMessageBefor(new Date().getTime()+"", "");
			msg=cu.getRoomMessage("1470398471735", "");
			
			/*String url="https://a1.easemob.com/gutianle/gutianle/chatfiles/4dfdbcf0-5a10-11e6-bcea-077d70ca905c";
			String secret="Tf28-loQEeafO9nud6QCZTn3YgLn7pa5igyQTPIw8gvRIyF-";
			msg=cu.getHXFileImage(url, secret);*/
			
			/*String temp=new Date().getTime()+"";
			String cus="";
			msg=cu.getRoomMessageBefor(temp, cus);*/
			//msg=cu.getRoomMessageByTimestamp(temp);
			/*msg=cu.sendFile2(file);
			//System.out.println(msg);
			JSONObject json=new JSONObject();
			JSONObject js=json.parseObject(msg);
			String entity=js.getString("entities");
			
			JSONArray ja=json.parseArray(entity);
			//System.out.println(ja.size());
			//System.out.println(ja.toJSONString());
			for (int i = 0; i < ja.size(); i++) {
				JSONObject string = ja.getJSONObject(i);
				//System.out.println(string);
				//System.out.println(string.getString("uuid"));
				
			}*/
			//msg=cu.getFile("d0653490-44e2-11e6-9a83-cf8de21b5012", "0GU0mkTiEeaSJV8bMYnCnw9KGXm9Js-qcGzc6-g88kht-DIZ");
			
			////System.out.println(msg);
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
