package com.admin.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.PartnerDao;
import com.admin.model.Partner;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.PartnerService;

@Service
public class PartnerServiceImpl implements PartnerService {
	@Autowired
	private PartnerDao partnerDao;

	@Override
	public DataGrid dataGridForOne(Partner g, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Partner> pl = new ArrayList<Partner>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Partner t ";
		List<Partner> l = partnerDao.find(hql + whereHql(g, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());// dao.find(hql
																	// +
																	// whereHqlForOne(g,
																	// params) +
																	// orderHql(ph),
																	// params,
																	// ph.getPage(),
																	// ph.getRows());
		if (l != null && l.size() > 0) {
			for (Partner t : l) {
				Partner u = new Partner();
				BeanUtils.copyProperties(t, u);
				pl.add(u);
			}
		}
		dg.setRows(pl);
		dg.setTotal(partnerDao.count(
				"select count(*) " + hql + whereHql(g, params), params));
		return dg;
	}

	/**
	 * where条件封装
	 * 
	 * @param p
	 * @param params
	 * @return
	 */
	private String whereHql(Partner p, Map<String, Object> params) {
		String hql = "";
		if (p != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(p.getCompanyName())) {
				hql += " and t.companyName like :companyName";
				params.put("companyName", "%%" + p.getCompanyName() + "%%");
			}
		}
		return hql;

	}

	/**
	 * order条件封装
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void delete(String id) {
		Partner pt = partnerDao.get(Partner.class, id);
		partnerDao.delete(pt);
	}

	@Override
	synchronized public void add(Partner p) throws Exception {
		// p.setId(UUID.randomUUID().toString());
		partnerDao.save(p);
	}

	@Override
	public Partner get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		Partner pat = partnerDao.get(
				"select distinct t from Partner t  where t.id = :id", params);
		Partner pp = new Partner();
		BeanUtils.copyProperties(pat, pp);
		return pp;
	}

	@Override
	public void edit(Partner p) throws Exception {
		partnerDao.update(p);
	}

	@Override
	public List<Partner> getList(String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page="1";
		}
		if (StringUtils.isBlank(rows)) {
			rows="15";
		}
		String hql = "from Partner t where 1 = 1";
		List<Partner> lp=partnerDao.find(hql,Integer.parseInt(page),Integer.parseInt(rows));
		return lp;
	}

}
