package com.lcjh.task;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.admin.model.MnSjZd;
import com.admin.model.Mncp;
import com.admin.service.MnSjBmServiceI;
import com.admin.service.MnSjZdServiceI;
import com.admin.service.MncpServiceI;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.lcjh.biz.LcjhCjBuySellRecordBiz;
import com.lcjh.entity.LcjhCjBuySellRecord;
import com.log.http.StockHttpClientUtil;

@Component
public class MncpTask {
	private final Logger logger = LoggerFactory.getLogger(MncpTask.class);
	
	@Autowired private MnSjZdServiceI mnSjZdServiceI;
	@Autowired private MnSjBmServiceI mnSjBmServiceI;
	@Autowired private MncpServiceI mncpServiceI;
	@Autowired private LcjhCjBuySellRecordBiz lcjhCjBuySellRecordBiz;
	
	private static String sff = "from Mncp where bz = '0' and cz in ('0','1')";
	private static String lcjhRecordHql = "from LcjhCjBuySellRecord where status = 0";
	public JSONObject gpMmCjUpdate(){
		logger.info("gpMmCjUpdate--------start-----------");
		// bz证券备注： 0：未成交，1：成交，2：平台撤销； cz 操作 0：买入；1：卖出；2 个人撤销
		List<Mncp> list = mncpServiceI.find(sff);
		List<LcjhCjBuySellRecord> list_lcjhRecord = lcjhCjBuySellRecordBiz.find(lcjhRecordHql);
		JSONObject json = new JSONObject();
		if(list.size() < 1 && list_lcjhRecord.size() < 1){
			logger.info("gpMmCjUpdate---------没有数据,结束,模拟操盘委托数据自动成交结算");
			json.put("errorCode", "1");
			json.put("errorMsg", "无委托记录");
			return json;
		}
		Map<String, JSONObject> zqdmsInfos = getZqdmsInfos();

		JSONArray arr = new JSONArray();
		
		String zqdm;
		String subcode;
		JSONObject gg_m;
		String pdSjid;
		String pswttime;
		String pduserid;
		boolean flag;
		for (Mncp p : list) {
			
			zqdm = p.getZqdm(); // 委托代码
			subcode = zqdm.substring(2, zqdm.length());
			gg_m = zqdmsInfos.get(subcode);
			
			if(null == gg_m){
				logger.info("gpMmCjUpdate--------证券代码:{},未获取到相关证券信息,跳过", zqdm);
				continue;
			}
			
			
			flag = false;
			pduserid = p.getUserid();
			pdSjid = p.getSjsId();
			pswttime = p.getWttime();
			if (StringUtils.isNotBlank(pdSjid)) {
				MnSjZd pdmnsjzd = mnSjZdServiceI.getDqJxSjs(pdSjid, pswttime);
				String bm = mnSjBmServiceI.pdbm(pduserid, pdSjid);
				if (pdmnsjzd != null && "1".equals(bm)) {
					flag = true;
				} else {
					flag = false;
				}
			}
			
			JSONObject j;
			int times = 0;
			do{
				try {
					j = mncpServiceI.gpMmCjUpdate(p, gg_m, zqdm, subcode, pduserid, pdSjid, pswttime, flag);
					if(null != j){
						arr.add(j);
					}
					break;
				} catch (Exception e) {
					e.printStackTrace();
					times++;
				}
			}while(times < 3);
			
		}
		json.put("errorCode", "0");
		json.put("errorMsg", "操作成功");
		json.put("total", list.size() + list_lcjhRecord.size());
		json.put("rows", arr);
		
		if(list_lcjhRecord.size() > 0){
			lcjhTradeJs(list_lcjhRecord, zqdmsInfos);
		}
		
		logger.info("gpMmCjUpdate---------操作成功");
		return json;
			
	}
	
	public void lcjhTradeJs(List<LcjhCjBuySellRecord> list_lcjhRecord, Map<String, JSONObject> zqdmsInfos){
		for (LcjhCjBuySellRecord lcjhCjBuySellRecord : list_lcjhRecord) {
			String zqdm = lcjhCjBuySellRecord.getZqdm(); // 委托代码
			String subcode = zqdm.substring(2, zqdm.length());
			JSONObject gg_m = zqdmsInfos.get(subcode);
			if(null == gg_m){
				logger.info("lcjhJs--------证券代码:{},未获取到相关证券信息,跳过", zqdm);
				continue;
			}else{
				lcjhCjBuySellRecordBiz.updateLcjhTradeJs(lcjhCjBuySellRecord, gg_m);
			}
			
		}
	}
	
	private static final String hql_zqdm = "select distinct zqdm from (select DISTINCT zqdm from t_mncp where bz = '0' and cz in ('0','1') union select distinct zqdm from t_lcjh_cj_buy_sell_record where `status` = 0) t";
	public Map<String, JSONObject> getZqdmsInfos(){
		// bz证券备注： 0：未成交，1：成交，2：平台撤销； cz 操作 0：买入；1：卖出；2 个人撤销
		List<Object[]> ccdmList = mncpServiceI.findBySql(hql_zqdm, null); // 获取持股数据zqdm
		Map<String, JSONObject> result = new HashMap<String, JSONObject>(ccdmList.size());
		StringBuilder sb = new StringBuilder();
		int size = ccdmList.size();
		int j;
		for (int i = 0; i < size; i++) {
			Object obj = ccdmList.get(i);
			if((i+1) % 190 != 0 && i < size - 1){
				sb.append(obj);
				sb.append(",");
				continue;
			}
			sb.append(obj);
			j = 1;
			do{
				try {
					JSONArray jsList = StockHttpClientUtil.getStocks(sb.toString());
					for (int m = 0; m < jsList.size(); m++) { // 获取实时数据
						JSONObject gg_m = jsList.getJSONObject(m);// 获取个股实时数据
						String code = gg_m.getString("code");// 返回代码
						result.put(code, gg_m);
					}
					break;
				} catch (Exception e) {
					e.printStackTrace();
					j++;
					logger.warn("获取showapi接口股票信息出错,{}", e);
					continue;
				}
			}while(j < 6);
			sb.setLength(0);	
		}
		return result;
	}
	
	
}
