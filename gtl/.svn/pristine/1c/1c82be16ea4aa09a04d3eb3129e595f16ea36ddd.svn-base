package com.admin.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.PtsBmDaoI;
import com.admin.model.PtsBm;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.PtsBmServiceI;

@Service
public class PtsBmServiceImpl implements PtsBmServiceI {

	@Autowired
	private PtsBmDaoI ptsBmDao;

	@Override
	public DataGrid dataGrid(PtsBm ptsBm, PageHelper ph) {
		DataGrid dg = new DataGrid();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from PtsBm t ";
		List<PtsBm> l = ptsBmDao.find(hql + whereHql(ptsBm, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		dg.setRows(l);
		dg.setTotal(ptsBmDao.count(
				"select count(*) " + hql + whereHql(ptsBm, params), params));
		return dg;
	}

	private String whereHql(PtsBm ptsBm, Map<String, Object> params) {
		String hql = "";
		if (ptsBm != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(ptsBm.getDqJb())) {
				hql += " and t.dqJb like :dqJb";
				params.put("dqJb", "%%" + ptsBm.getDqJb() + "%%");
			}

			if (StringUtils.isNotBlank(ptsBm.getUserId())) {
				hql += " and t.userId like :userId";
				params.put("userId", "%%" + ptsBm.getUserId() + "%%");
			}

			if (StringUtils.isNotBlank(ptsBm.getUserName())) {
				hql += " and t.userName like :userName";
				params.put("userName", "%%" + ptsBm.getUserName() + "%%");
			}
			if (StringUtils.isNotBlank(ptsBm.getSyl())) {
				hql += " and t.syl like :syl";
				params.put("syl", "%%" + ptsBm.getSyl() + "%%");
			}
			if (StringUtils.isNotBlank(ptsBm.getSwGx())) {
				hql += " and t.swGx like :swGx";
				params.put("swGx", "%%" + ptsBm.getSwGx() + "%%");
			}
			if (StringUtils.isNotBlank(ptsBm.getJsRq())) {
				hql += " and t.jsRq like :jsRq";
				params.put("jsRq", "%%" + ptsBm.getJsRq() + "%%");
			}
		}
		return hql;
	}

	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void add(PtsBm ptsBm) throws Exception {
		PtsBm u = new PtsBm();
		BeanUtils.copyProperties(ptsBm, u);
		ptsBmDao.save(ptsBm);
	}

	@Override
	public PtsBm get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		PtsBm t = ptsBmDao.get(
				"select distinct t from PtsBm t where t.id = :id", params);
		return t;
	}

	@Override
	public void edit(PtsBm ptsBm) throws Exception {
		ptsBmDao.update(ptsBm);
	}

	@Override
	public void delete(String id) {
		ptsBmDao.delete(ptsBmDao.get(PtsBm.class, id));
	}

	@Override
	public List<PtsBm> ptsBmList(PtsBm ptsBm, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		Map<String, Object> params = new HashMap<String, Object>();
		List<PtsBm> t = ptsBmDao.find(
				"from PtsBm t " + whereHql(ptsBm, params), params,
				Integer.valueOf(page), Integer.valueOf(rows));
		return t;
	}

	@Override
	public int getCount(PtsBm ptsBm) {
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = "select count(*) from PtsBm t " + whereHql(ptsBm, params);
		return ptsBmDao.count(hql, params).intValue();
	}

}
