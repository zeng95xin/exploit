package com.lcjh.controller.api.pay;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.Range;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.LoginUser;
import com.admin.model.SunShares;
import com.admin.model.TPayOrder;
import com.admin.service.AppPayServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.SunSharesServiceI;
import com.admin.util.InfoUtil;
import com.alibaba.fastjson.JSONObject;
import com.lcjh.biz.BowenBiz;
import com.lcjh.biz.Lcjh2Biz;
import com.lcjh.biz.PayBiz;
import com.lcjh.biz.ZsxyBiz;
import com.lcjh.entity.Bowen;
import com.lcjh.entity.Lcjh2;
import com.lcjh.entity.Zsxy;
import com.lcjh.enummole.PayOrderTypeEnum;
import com.lcjh.result.BooleanBaseResult;
import com.lcjh.result.BooleanObjectResult;
import com.log.ProjectConfig;
import com.pingplusplus.Pingpp;
import com.pingplusplus.model.Charge;
import com.web.exception.BusinessDealException;
import com.web.exception.BusinessValidateException;
import com.web.exception.CodeEnum;
import com.web.exception.PatternException;
import com.web.util.IDUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

/**
 * 支付controller
 * 
 * @author Administrator
 */
@Controller
@RequestMapping("/api/pay2/lcjh")
@Validated
@Api(tags = "-api-pay2-lcjh", description = "理财计划,晒股,掌声学院,博文,支付,有关接口")
public class AppPayLcjhController {
	/*
	 * private static final String pingppAppId = "app_iz1OG84inLq5q1SC"; private
	 * static final String pingppApiKey = "sk_test_LaP8qL4GGqD4mvD0uHmTKavL";
	 */
	// private static final Logger logger =
	// LoggerFactory.getLogger(AppPayLcjhController.class);

	private static final String pingppAppId = ProjectConfig.pingppAppId;
	private static final String pingppApiKey = ProjectConfig.pingppApiKey;

	@Autowired
	private LoginUserServiceI loginUserServiceI;
	@Autowired
	private AppPayServiceI appPayServiceI;
	@Autowired
	private Lcjh2Biz lcjh2Biz;
	@Autowired
	private PayBiz payBiz;

	@Autowired
	private SunSharesServiceI sunSharesServiceI;

	@Autowired
	private ZsxyBiz zsxyBiz;
	@Autowired
	private BowenBiz bowenBiz;

	/**
	 * 选择渠道返回凭据
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/getCharge", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	@ApiOperation(value = "获取支付凭据", notes = "", httpMethod = "POST")
	public BooleanObjectResult<Charge> getCharge(HttpServletRequest req,
			@ApiParam(value = "用户id", required = true) @RequestParam(required = false) @NotBlank(message = "用户id不能为空") @Length(min = 1, max = 200, message = "用户id长度{min}~{max}") String userid,
			@ApiParam(value = "订单类型,1理财计划,2晒股,3掌声学院,4博文", required = true) @RequestParam(required = false) @NotNull(message = "类型不能为空") @Range(min = 1, max = 4, message = "类型只能是{min}~{max}") Integer type,
			@ApiParam(value = "id,购买的id", required = true) @RequestParam(required = false) @NotBlank(message = "id不能为空") String orderId,
			@ApiParam(value = "订单金额，以分为单位", required = true) @RequestParam(required = false) @NotNull(message = "订单金额不能为空") @Min(value = 0, message = "金额大于0") Long payMoney,
			String result_url) throws Exception {
		BooleanObjectResult<Charge> baseResult = BooleanObjectResult.getSuccess();
		String orderDirections;
		String orderType;
		if (1 == type) {
			orderType = PayOrderTypeEnum.licjh.getCode();
			orderDirections = PayOrderTypeEnum.licjh.getMsg();
			Lcjh2 l = lcjh2Biz.get(Lcjh2.class, orderId);
			Assert.notNull(l, "理财计划不存在");
			Assert.isTrue(!(l.getUserId().equals(userid)), "自己的理财计划无需购买");
			Assert.isTrue(l.getBuyMaxCount() == -1 || l.getBuyCount() < l.getBuyMaxCount(),
					"理财计划最多只能" + l.getBuyMaxCount() + "人购买");
			Assert.isTrue(l.getFwf().doubleValue() <= payMoney * 1d / 100, "支付金额不足");
		} else if (2 == type) {
			SunShares sunShares = sunSharesServiceI.get(orderId);
			orderType = PayOrderTypeEnum.sunShares.getCode();
			orderDirections = PayOrderTypeEnum.sunShares.getMsg();
			Assert.notNull(sunShares, "晒股不存在");
			try {
				BigDecimal money = new BigDecimal(sunShares.getXhJf());
				Assert.isTrue(money.doubleValue() <= payMoney * 1d / 100, "支付金额不足");
			} catch (Exception e) {
				throw new BusinessDealException("牛人博文购买金额错误,id:" + orderId);
			}
		} else if (3 == type) {
			orderType = PayOrderTypeEnum.zsxy.getCode();
			orderDirections = PayOrderTypeEnum.zsxy.getMsg();
			Zsxy l = zsxyBiz.get(Zsxy.class, orderId);
			Assert.notNull(l, "掌声学院不存在");
			Assert.isTrue(l.getGxtjfxh().doubleValue() <= payMoney * 1d / 100, "支付金额不足");
		} else if (4 == type) {
			orderType = PayOrderTypeEnum.bowen.getCode();
			orderDirections = PayOrderTypeEnum.bowen.getMsg();
			Bowen l = bowenBiz.get(Bowen.class, orderId);
			Assert.notNull(l, "掌声学院不存在");
			Assert.isTrue(l.getBuyPrice().doubleValue() <= payMoney * 1d / 100, "支付金额不足");
		} else {
			throw new PatternException("订单类型错误");
		}
		synchronized (this) {

			TPayOrder order = appPayServiceI.getByOtherIdAndUserId(orderId, userid, PayOrderTypeEnum.ALREADY_PAY);

			Assert.isNull(order, "您已经购买过了该内容");

			order = appPayServiceI.getByOtherIdAndUserId(orderId, userid, PayOrderTypeEnum.NOT_PAY);

			Pingpp.apiKey = pingppApiKey;

			if (null != order) {

				if (StringUtils.isNotBlank(order.getChargeId())) {
					Charge ch = Charge.retrieve(order.getChargeId());
					if (ch.getTimeExpire() * 1000 > System.currentTimeMillis() + 1000 * 60 * 10) {
						baseResult.setResult(ch);
						return baseResult;
					}
				}
				order.setPayStatus(PayOrderTypeEnum.TIME_EXPIRE.getCode());
				appPayServiceI.update(order);
			}

			order = new TPayOrder();
			String orderNo = IDUtils.getInstanse().getUID();
			order.setOrderId(orderNo);
			order.setUserid(userid);
			order.setOtherOrderId(orderId);
			order.setOrderType(orderType);
			order.setPayStatus("NOT_PAY");
			order.setPayDirections(orderDirections + "，价格：" + payMoney / 100d);
			order.setIntegralCount(1l);
			order.setPayMoney(payMoney);
			order.setRawAddTime(new Date());
			appPayServiceI.add(order);

			String channel = "wx";

			String clinetIp = InfoUtil.getIpAddr(req);// 客服端IP

			Map<String, Object> chargeParams = new HashMap<String, Object>();
			chargeParams.put("order_no", order.getOrderId());
			chargeParams.put("amount", payMoney);
			Map<String, String> app = new HashMap<String, String>();
			app.put("id", pingppAppId);
			chargeParams.put("app", app);
			chargeParams.put("channel", channel);
			chargeParams.put("currency", "cny");

			chargeParams.put("time_expire", (System.currentTimeMillis() / 1000 + 1 * 60 * 60 * 2));

			chargeParams.put("client_ip", clinetIp);
			chargeParams.put("subject", orderDirections + ",金额：" + order.getPayMoney());
			chargeParams.put("body", orderDirections);
			if (StringUtils.isNotBlank(result_url)) {
				Map<String, String> extra = new HashMap<String, String>();
				extra.put("result_url", result_url);
				chargeParams.put("extra", extra);
			}
			Charge ch = Charge.create(chargeParams);

			// 给该订单 ‘ping++支付查询id‘ 赋值 支付渠道也赋值
			order.setChargeId(ch.getId());
			order.setPayChannel(channel);
			order.setPayMoney(payMoney);
			appPayServiceI.update(order);
			baseResult.setResult(ch);
		}
		return baseResult;
	}

	/**
	 * ping++查询订单支付状态--如果支付成功更新积分等操作
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/paySuccess", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	@ApiOperation(value = "支付成功回调", notes = "", httpMethod = "POST")
	public BooleanBaseResult paySuccess(HttpServletRequest req,
			@RequestParam(required = false) @NotBlank(message = "订单id不能为空") @ApiParam(value = "订单id") String orderId)
			throws Exception {

		TPayOrder order = appPayServiceI.get(orderId);
		Assert.notNull(order, "该订单不存在");

		Pingpp.apiKey = pingppApiKey;
		Assert.hasText(order.getChargeId(), "该订单未支付");

		payBiz.paySuccess(order);
		String id = order.getUserid();
		appPayServiceI.getid(id);
		return BooleanBaseResult.SUCCESS;
	}

	/**
	 * XW渠道返回凭据
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/getWXChargeMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	@ApiOperation(value = "WX支付凭据(jsonp)", notes = "", httpMethod = "POST")
	public void getChargeMore(HttpServletResponse res, HttpServletRequest request,
			@RequestParam(required = false) @NotBlank(message = "id不能为空") @ApiParam(value = "id,购买的id") String orderId,
			@ApiParam(value = "手机号", required = true) @RequestParam(required = false) @NotBlank(message = "手机号不能为空") @Size(min = 11, max = 20, message = "手机号在{min}-{max}个字") String phone,
			@RequestParam(required = false) @NotBlank(message = "用户标识不能为空") @ApiParam(value = "用户标识") String openid,
			@ApiParam(value = "订单类型,1理财计划,2晒股,3掌声学院,4博文", required = true) @RequestParam(required = false) @NotNull(message = "类型不能为空") @Range(min = 1, max = 4, message = "类型只能是{min}~{max}") Integer type)
			throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());
		LoginUser user = loginUserServiceI.getUserByPhone(phone);
		if (user == null) {
			result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
					CodeEnum.PATTERN_ERROR.getMessage());
			result.setResult("用户不存在");
			String resStr = "";
			String callback = request.getParameter("callback");
			if (null != callback) {
				resStr += callback + "(";
				resStr += JSONObject.toJSONString(result);
				resStr += ")";
			} else {
				resStr = JSONObject.toJSONString(result);
			}
			request.setCharacterEncoding("utf-8");
			res.setContentType("text/html;charset=utf-8");
			res.getWriter().write(resStr);
			res.getWriter().flush();
		} else {
			String body;
			String orderType;
			BigDecimal total_fee = null;
			String out_trade_no = null;
			if (1 == type) {
				orderType = PayOrderTypeEnum.licjh.getCode();
				body = PayOrderTypeEnum.licjh.getMsg();
				Lcjh2 l = lcjh2Biz.get(Lcjh2.class, orderId);
				if (l == null) {
					result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
							CodeEnum.PATTERN_ERROR.getMessage());
					result.setResult("理财计划不存在");
					String resStr = "";
					String callback = request.getParameter("callback");
					if (null != callback) {
						resStr += callback + "(";
						resStr += JSONObject.toJSONString(result);
						resStr += ")";
					} else {
						resStr = JSONObject.toJSONString(result);
					}
					request.setCharacterEncoding("utf-8");
					res.setContentType("text/html;charset=utf-8");
					res.getWriter().write(resStr);
					res.getWriter().flush();
				} else {
					total_fee = l.getFwf();
					if (l.getUserId().equals(user.getId())) {
						result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
								CodeEnum.PATTERN_ERROR.getMessage());
						result.setResult("自己的理财计划无需购买");
						String resStr = "";
						String callback = request.getParameter("callback");
						if (null != callback) {
							resStr += callback + "(";
							resStr += JSONObject.toJSONString(result);
							resStr += ")";
						} else {
							resStr = JSONObject.toJSONString(result);
						}
						request.setCharacterEncoding("utf-8");
						res.setContentType("text/html;charset=utf-8");
						res.getWriter().write(resStr);
						res.getWriter().flush();
					} else {
						if (l.getBuyMaxCount() == -1 || l.getBuyCount() < l.getBuyMaxCount()) {
							result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
									CodeEnum.PATTERN_ERROR.getMessage());
							result.setResult("理财计划最多只能" + l.getBuyMaxCount() + "人购买");
							String resStr = "";
							String callback = request.getParameter("callback");
							if (null != callback) {
								resStr += callback + "(";
								resStr += JSONObject.toJSONString(result);
								resStr += ")";
							} else {
								resStr = JSONObject.toJSONString(result);
							}
							request.setCharacterEncoding("utf-8");
							res.setContentType("text/html;charset=utf-8");
							res.getWriter().write(resStr);
							res.getWriter().flush();
						}
					}
				}
			} else if (2 == type) {
				SunShares sunShares = sunSharesServiceI.get(orderId);
				orderType = PayOrderTypeEnum.sunShares.getCode();
				body = PayOrderTypeEnum.sunShares.getMsg();
				if (sunShares == null) {
					result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
							CodeEnum.PATTERN_ERROR.getMessage());
					result.setResult("晒股不存在");
					String resStr = "";
					String callback = request.getParameter("callback");
					if (null != callback) {
						resStr += callback + "(";
						resStr += JSONObject.toJSONString(result);
						resStr += ")";
					} else {
						resStr = JSONObject.toJSONString(result);
					}
					request.setCharacterEncoding("utf-8");
					res.setContentType("text/html;charset=utf-8");
					res.getWriter().write(resStr);
					res.getWriter().flush();
				} else {
					BigDecimal money = new BigDecimal(sunShares.getXhJf());
					total_fee = money;
				}
			} else if (3 == type) {
				orderType = PayOrderTypeEnum.zsxy.getCode();
				body = PayOrderTypeEnum.zsxy.getMsg();
				Zsxy l = zsxyBiz.get(Zsxy.class, orderId);
				if (l == null) {
					result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
							CodeEnum.PATTERN_ERROR.getMessage());
					result.setResult("掌声学院不存在");
					String resStr = "";
					String callback = request.getParameter("callback");
					if (null != callback) {
						resStr += callback + "(";
						resStr += JSONObject.toJSONString(result);
						resStr += ")";
					} else {
						resStr = JSONObject.toJSONString(result);
					}
					request.setCharacterEncoding("utf-8");
					res.setContentType("text/html;charset=utf-8");
					res.getWriter().write(resStr);
					res.getWriter().flush();
				} else {
					total_fee = l.getGxtjfxh();
				}
			} else if (4 == type) {
				orderType = PayOrderTypeEnum.bowen.getCode();
				body = PayOrderTypeEnum.bowen.getMsg();
				Bowen l = bowenBiz.get(Bowen.class, orderId);
				if (l == null) {
					result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
							CodeEnum.PATTERN_ERROR.getMessage());
					result.setResult("博文不存在");
					String resStr = "";
					String callback = request.getParameter("callback");
					if (null != callback) {
						resStr += callback + "(";
						resStr += JSONObject.toJSONString(result);
						resStr += ")";
					} else {
						resStr = JSONObject.toJSONString(result);
					}
					request.setCharacterEncoding("utf-8");
					res.setContentType("text/html;charset=utf-8");
					res.getWriter().write(resStr);
					res.getWriter().flush();
				} else {
					total_fee = l.getBuyPrice();
				}
			} else {
				throw new PatternException("订单类型错误");
			}
			synchronized (this) {

				TPayOrder order = appPayServiceI.getByOtherIdAndUserId(orderId, user.getId(),
						PayOrderTypeEnum.ALREADY_PAY);

				Assert.isNull(order, "您已经购买过了该内容");

				order = appPayServiceI.getByOtherIdAndUserId(orderId, user.getId(), PayOrderTypeEnum.NOT_PAY);

				Pingpp.apiKey = pingppApiKey;

				if (null != order) {

					if (StringUtils.isNotBlank(order.getChargeId())) {
						Charge ch = Charge.retrieve(order.getChargeId());
						if (ch.getTimeExpire() * 1000 > System.currentTimeMillis() + 1000 * 60 * 10) {
							result.setResult(ch);
							String resStr = "";
							String callback = request.getParameter("callback");
							if (null != callback) {
								resStr += callback + "(";
								resStr += JSONObject.toJSONString(result);
								resStr += ")";
							} else {
								resStr = JSONObject.toJSONString(result);
							}
							request.setCharacterEncoding("utf-8");
							res.setContentType("text/html;charset=utf-8");
							res.getWriter().write(resStr);
							res.getWriter().flush();
						}
					}
					order.setPayStatus(PayOrderTypeEnum.TIME_EXPIRE.getCode());
					appPayServiceI.update(order);
				}
				order = new TPayOrder();
				String orderNo = IDUtils.getInstanse().getUID();
				order.setOrderId(orderNo);
				order.setUserid(user.getId());
				order.setOtherOrderId(orderId);
				order.setOrderType(orderType);
				order.setPayStatus("NOT_PAY");
				order.setPayDirections(body + "，价格：" + total_fee.intValue() / 100d);
				order.setIntegralCount(1l);
				order.setPayMoney(total_fee.longValue());
				order.setRawAddTime(new Date());
				appPayServiceI.add(order);

				String channel = "wx";

				String IP = WxPayUtil.getIpAddr(request);// 客服端IP

				Map<String, Object> chargeParams = new HashMap<String, Object>();
				chargeParams.put("order_no", order.getOrderId());
				chargeParams.put("amount", total_fee);
				Map<String, String> app = new HashMap<String, String>();
				app.put("id", pingppAppId);
				chargeParams.put("app", app);
				chargeParams.put("channel", channel);
				chargeParams.put("currency", "cny");

				chargeParams.put("time_expire", (System.currentTimeMillis() / 1000 + 1 * 60 * 60 * 2));

				chargeParams.put("client_ip", IP);
				chargeParams.put("subject", body + ",金额：" + order.getPayMoney());
				chargeParams.put("body", body);
				Charge ch = Charge.create(chargeParams);

				//  赋值 支付渠道也赋值
				order.setChargeId(ch.getId());
				order.setPayChannel(channel);
				order.setPayMoney(total_fee.longValue());
				appPayServiceI.update(order);

				String unifiedOrder = WxPayUtil.unifiedOrder(body, out_trade_no, total_fee.intValue(), IP, openid);
				result.setResult(unifiedOrder);
			}
			String resStr = "";
			String callback = request.getParameter("callback");
			if (null != callback) {
				resStr += callback + "(";
				resStr += JSONObject.toJSONString(result);
				resStr += ")";
			} else {
				resStr = JSONObject.toJSONString(result);
			}
			request.setCharacterEncoding("utf-8");
			res.setContentType("text/html;charset=utf-8");
			res.getWriter().write(resStr);
			res.getWriter().flush();
		}
	}

	/**
	 * ping++查询订单支付状态--如果支付成功更新积分等操作
	 *
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/WXSuccessMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	@ApiOperation(value = "WX支付成功回调(jsonp)", notes = "", httpMethod = "POST")
	public void paySuccessMore(HttpServletResponse res, HttpServletRequest request,
			@RequestParam(required = false) @NotBlank(message = "订单id不能为空") @ApiParam(value = "订单id") String orderId)
			throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());

		TPayOrder order = appPayServiceI.get(orderId);
		Pingpp.apiKey = pingppApiKey;
		if (order == null) {
			result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
					CodeEnum.PATTERN_ERROR.getMessage());
			result.setResult("该订单不存在");
			String resStr = "";
			String callback = request.getParameter("callback");
			if (null != callback) {
				resStr += callback + "(";
				resStr += JSONObject.toJSONString(result);
				resStr += ")";
			} else {
				resStr = JSONObject.toJSONString(result);
			}
			request.setCharacterEncoding("utf-8");
			res.setContentType("text/html;charset=utf-8");
			res.getWriter().write(resStr);
			res.getWriter().flush();
		} else {
			if (order.getChargeId() == null) {
				result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
						CodeEnum.PATTERN_ERROR.getMessage());
				result.setResult("该订单未支付");
				String resStr = "";
				String callback = request.getParameter("callback");
				if (null != callback) {
					resStr += callback + "(";
					resStr += JSONObject.toJSONString(result);
					resStr += ")";
				} else {
					resStr = JSONObject.toJSONString(result);
				}
				request.setCharacterEncoding("utf-8");
				res.setContentType("text/html;charset=utf-8");
				res.getWriter().write(resStr);
				res.getWriter().flush();
			} else {
				payBiz.paySuccess(order);
				String id = order.getUserid();
				appPayServiceI.getid(id);
				result.setResult("SUCCESS");
				String resStr = "";
				String callback = request.getParameter("callback");
				if (null != callback) {
					resStr += callback + "(";
					resStr += JSONObject.toJSONString(result);
					resStr += ")";
				} else {
					resStr = JSONObject.toJSONString(result);
				}
				request.setCharacterEncoding("utf-8");
				res.setContentType("text/html;charset=utf-8");
				res.getWriter().write(resStr);
				res.getWriter().flush();
			}
		}
	}
}
