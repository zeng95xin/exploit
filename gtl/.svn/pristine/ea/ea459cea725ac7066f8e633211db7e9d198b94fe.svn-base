package com.lcjh.task;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import com.admin.model.IntegralConfig;
import com.admin.model.Mrzcjs;
import com.admin.service.IntegralConfigServiceI;
import com.admin.service.MncpServiceI;
import com.admin.service.MrzcjsServiceI;
import com.web.util.DateUtil;

@Component
public class MrzcjsTask {
	private final Logger logger = LoggerFactory.getLogger(MrzcjsTask.class);
	@Autowired private MrzcjsServiceI mrzcjsServiceI;
	@Autowired private IntegralConfigServiceI integralConfigServiceI;
	@Autowired private MncpServiceI mncpServiceI;
	@Autowired private LcjhTask lcjhTask;
	
	protected Date start;
	protected int dayOfWeek;
	private Date end;
	
	protected String today; // 今天
	protected String yesterday; // 昨天
	
	private boolean insertInterfaceData;//SUN-SAT
	private boolean mrzcjsNo2;//MON-FRI
	private boolean fjyDateUpdate;//SUN,SAT
	private boolean updateMrizcjsData;//MON-FRI
	private boolean rzyUpdate;//MON-FRI
	private boolean zsyUpdate;//MON-FRI
	private boolean lcjhJs;
	private boolean lcjhJsFjyr;
	
	public void zcjsTask(){
		Calendar c = Calendar.getInstance();
//		c.set(Calendar.DAY_OF_MONTH, 9);
		start = c.getTime();
		
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		today = format.format(start); // 今天
		
		dayOfWeek = c.get(Calendar.DAY_OF_WEEK);
		c.set(Calendar.HOUR_OF_DAY, 23);
		c.set(Calendar.MINUTE, 59);
		c.set(Calendar.MILLISECOND, 59);
		end = c.getTime();
//		end = new Date(System.currentTimeMillis() + 1000*60*60*24);
		
		c.add(Calendar.DATE, -1);// 把日期往后增加一天.整数往后推,负数往前移动
		yesterday = format.format(c.getTime());// 这个时间就是日期往后推一天的结果
		
		insertInterfaceData = false;
		if(dayOfWeek == 1 || dayOfWeek == 7){
			fjyDateUpdate = false;
			lcjhJsFjyr = false;
		}else{
			fjyDateUpdate = true;
			lcjhJsFjyr = true;
		}
		if(dayOfWeek > 1 && dayOfWeek < 7){
			lcjhJs = false;
			mrzcjsNo2 = false;
			updateMrizcjsData = false;
			rzyUpdate = false;
			zsyUpdate = false;
		}else{
			lcjhJs = true;
			mrzcjsNo2 = true;
			updateMrizcjsData = true;
			rzyUpdate = true;
			zsyUpdate = true;
		}
		logger.warn("insertInterfaceData开始");
		try {
			while (!insertInterfaceData) {
				if(System.currentTimeMillis() > end.getTime()){
					throw new Exception("计算超时，24点还未结算完成");
				}
				try {
					mrzcjsServiceI.insertInterfaceData();
					mrzcjsServiceI.insertInterfaceData2();
				} catch (Exception e) {
					e.printStackTrace();
					Thread.sleep(1000*10);
					continue;
				}
				insertInterfaceData = true;
			}
			logger.warn("insertInterfaceData完成");
			logger.warn("updateWcjjl开始");
			
			do {
				try {
					mncpServiceI.updateWcjjl();
					break;
				} catch (Exception e) {
					e.printStackTrace();
					Thread.sleep(1000*10);
					logger.error("updateWcjjl出错,信息：{}", e);
				}
			} while (true);
			logger.warn("updateWcjjl结束");
			while (!mrzcjsNo2) {
				if(System.currentTimeMillis() > end.getTime()){
					throw new Exception("计算超时，24点还未结算完成");
				}
				try {
					mrzcjsNo2();
				} catch (Exception e) {
					e.printStackTrace();
					Thread.sleep(1000*10);
					continue;
				}
				mrzcjsNo2 = true;
			}
			logger.warn("mrzcjsNo2完成");
			while (!fjyDateUpdate) {
				if(System.currentTimeMillis() > end.getTime()){
					throw new Exception("计算超时，24点还未结算完成");
				}
				try {
					fjyDateUpdate();
				} catch (Exception e) {
					e.printStackTrace();
					Thread.sleep(1000*10);
					continue;
				}
				fjyDateUpdate = true;
			}
			logger.warn("fjyDateUpdate完成");
			while (!updateMrizcjsData) {
				if(System.currentTimeMillis() > end.getTime()){
					throw new Exception("计算超时，24点还未结算完成");
				}
				try {
					updateMrizcjsData();
				} catch (Exception e) {
					e.printStackTrace();
					Thread.sleep(1000*10);
					continue;
				}
				updateMrizcjsData = true;
			}
			logger.warn("updateMrizcjsData完成");
			while (!rzyUpdate) {
				if(System.currentTimeMillis() > end.getTime()){
					throw new Exception("计算超时，24点还未结算完成");
				}
				try {
					rzyUpdate();
				} catch (Exception e) {
					e.printStackTrace();
					Thread.sleep(1000*10);
					continue;
				}
				rzyUpdate = true;
			}
			logger.warn("rzyUpdate完成");
			while (!zsyUpdate) {
				if(System.currentTimeMillis() > end.getTime()){
					throw new Exception("计算超时，24点还未结算完成");
				}
				try {
					zsyUpdate();
				} catch (Exception e) {
					e.printStackTrace();
					Thread.sleep(1000*10);
					continue;
				}
				zsyUpdate = true;
			}
			logger.warn("zsyUpdate完成");
			
			logger.warn("开始结算理财计划");
			while (true) {
				if(System.currentTimeMillis() > end.getTime()){
					throw new Exception("计算超时，24点还未结算完成");
				}
				try {
					lcjhTask.updateWtwcj();
					break;
				} catch (Exception e) {
					e.printStackTrace();
					Thread.sleep(1000*10);
					continue;
				}
			}
			logger.warn("lcjhTask.updateWtwcj完成");
			
			while (!lcjhJsFjyr) {
				if(System.currentTimeMillis() > end.getTime()){
					throw new Exception("计算超时，24点还未结算完成");
				}
				try {
					lcjhTask.updateJsFjyr();
				} catch (Exception e) {
					e.printStackTrace();
					Thread.sleep(1000*10);
					continue;
				}
				lcjhJsFjyr = true;
			}
			logger.warn("lcjhTask.updateJsFjyr完成");
			while (!lcjhJs) {
				if(System.currentTimeMillis() > end.getTime()){
					throw new Exception("计算超时，24点还未结算完成");
				}
				try {
					lcjhTask.updateJs();
				} catch (Exception e) {
					e.printStackTrace();
					Thread.sleep(1000*10);
					continue;
				}
				lcjhJs = true;
			}
			logger.warn("lcjhTask.updateJs完成");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void zsyUpdate(){
		DecimalFormat df = new DecimalFormat("#.###");
		/**
		 * 获取配置文件基本参数信息
		 */
		IntegralConfig integralConfig = integralConfigServiceI.get();
		String ptsbjStr = integralConfig.getPtsjb(); // 普通赛本金
		double ptsbj = 0;
		if(StringUtils.hasText(ptsbjStr)){
			ptsbj = Double.parseDouble(ptsbjStr);
		}
		String hql = "from Mrzcjs where 1=1 and jstime='" + today + "'";
		String countHql = "select count(1) from Mrzcjs where 1=1 and jstime='" + today + "'";
		int count = 0;
		int start = 1;
		int rows = 300;
		int index = 0;
		List<Mrzcjs> list;
		Mrzcjs mrzc;
		logger.info("zsyUpdate Start ------------------------");
		do{
			logger.info("zsyUpdate,第--{}--轮,每轮--{}--条,zsyUpdate, 一共--{}--条", start, rows, count);
			list = mrzcjsServiceI.find(hql, start, rows);
			for (int i = 0; i < list.size(); i++) {
				mrzc = list.get(i);
				index++;
				logger.info("zsyUpdate,第--{}--条总收益,开始结算", index);
				do{
					try {
						mrzcjsServiceI.zsyUpdate(mrzc, df, today, ptsbj);
						logger.info("zsyUpdate,第--{}--条总收益,结算完成", index);
						break;
					} catch (Exception e) {
						logger.error("zsyUpdate,第--{}--条总收益,结算出错", index);
						e.printStackTrace();
						try {
							Thread.sleep(10);
						} catch (InterruptedException e1) {
							e1.printStackTrace();
						}
					}
				}while(true);
			}
			count = mrzcjsServiceI.count(countHql);
			start++;
		}while(index < count);
		logger.info("zsyUpdate end ------------------------");
	}
	public void rzyUpdate(){
		DecimalFormat df = new DecimalFormat("#.###");
		/**
		 * 获取配置文件基本参数信息
		 */
		IntegralConfig integralConfig = integralConfigServiceI.get();
		String ptsbjStr = integralConfig.getPtsjb(); // 普通赛本金
		double ptsbj = 0;
		if(StringUtils.hasText(ptsbjStr)){
			ptsbj = Double.parseDouble(ptsbjStr);
		}
		/**
		 * 获取赛季赛最新一次数据
		 */
		/*
		 * List<MnSjZd> mnsjList = mnSjZdServiceI.getMnsjList(); String zxSjid =
		 * ""; String sjzcbj = ""; if(mnsjList.size()>0){ MnSjZd mnsjzd =
		 * mnsjList.get(0); zxSjid = mnsjzd.getId(); sjzcbj =
		 * mnsjzd.getChuShi(); //赛季赛本金 }
		 */
		/**
		 * 获取上周日期，上月日期，昨日日期
		 */
		/*SimpleDateFormat sdf0 = new SimpleDateFormat("yyyy-MM-dd");
		String s="2016-07-18";
		Date date = sdf0.parse(s);*/
		Date syLastDay = DateUtil.getLastDayOfLastMonth(start); // 上个月最后一天
		Date szLastDay = DateUtil.getLastDayOfLastWeek(start);// 上周最后一天
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String syld = sdf.format(syLastDay);// 上个月最后一天
		String szld = sdf.format(szLastDay);// 上周最后一天
		
		String hql = "from Mrzcjs where 1=1 and jstime='" + today + "'";
		String countHql = "select count(1) from Mrzcjs where 1=1 and jstime='" + today + "'";
		long count = 0;
		int start = 1;
		int rows = 300;
		int index = 0;
		List<Mrzcjs> list;
		Mrzcjs mrzc;
		logger.info("rzyupdate Start ------------------------");
		do{
			logger.info("rzyupdate,第--{}--轮,每轮--{}--条,rzyupdate, 一共--{}--条", start, rows, count);
			list = mrzcjsServiceI.find(hql, start, rows);
			for (int i = 0; i < list.size(); i++) {
				mrzc = list.get(i);
				index++;
				logger.info("rzyUpdate,第--{}--条日周月收益,结算开始", index);
				do{
					try {
						mrzcjsServiceI.rzyUpdate(mrzc, df, today, yesterday, szld, syld, ptsbj);
						logger.info("rzyUpdate,第--{}--条日周月收益,结算完成", index);
						break;
					} catch (Exception e) {
						logger.error("rzyUpdate,第--{}--条日周月收益,结算出错", index);
						e.printStackTrace();
						try {
							Thread.sleep(10);
						} catch (InterruptedException e1) {
							e1.printStackTrace();
						}
					}
				}while(true);
			}
			count = mrzcjsServiceI.count(countHql);
			start++;
		}while(index < count);
		logger.info("rzyUpdate end ------------------------");
	}
	
	public void updateMrizcjsData(){
		mrzcjsServiceI.updateMrzcjsPts(today);
		mrzcjsServiceI.updateMrizcjsData2(today);
	}
	public void fjyDateUpdate(){
		String hql = "from Mrzcjs where 1=1 and jstime='" + yesterday + "'";
		String countHql = "select count(1) from Mrzcjs where 1=1 and jstime='" + yesterday + "'";
		long count = 0;
		int start = 1;
		int rows = 100;
		int index = 0;
		logger.info("fjyDateUpdate start ------------------------");
		do{
			logger.info("fjyDateUpdate,第--{}--轮,每轮--{}--条,rzyupdate, 一共--{}--条", start, rows, count);
			List<Mrzcjs> list = mrzcjsServiceI.find(hql, start, rows);
			for (int i = 0; i < list.size(); i++) {
				logger.info("fjyDateUpdate,第--{}--条,结算开始", index);
				Mrzcjs ztMrzc = list.get(i);
				index++;
				mrzcjsServiceI.fjyDateUpdate(ztMrzc, today);
				logger.info("fjyDateUpdate,第--{}--条,结算完成", index);
			}
			count = mrzcjsServiceI.count(countHql);
			start++;
		}while(index < count);
		logger.info("fjyDateUpdate end ------------------------");
	}
	public void mrzcjsNo2(){
		String sql = "select a.userid,a.sjid,"
				+"IFNULL(SUM(case a.mrlx when '1' then (a.cgsl+0)*(b.jsprice+0) else 0 end )+c.sjsjb+0,0)  sjzczl,"
				+"IFNULL(SUM(case a.mrlx when '0' then (a.cgsl+0)*(b.jsprice+0) else 0 end )+c.ptsjb+0,0) zczl,"
				+"DATE_FORMAT(now(),'%Y-%m-%d') as jstime,"
				+"c.`name` "
				+"from t_gpsy a "
				+"left join loginuser c on a.userid=c.id "
				+"left JOIN t_interfacedata b on a.zqdm=b.zqdm "
				+"where b.jsprice is not null and a.userid in (select id from loginuser) "
			    +"group by a.userid,a.sjid";
		String countSql = "select count(1) from (select a.userid "
				+ "from t_gpsy a "
				+ "left join loginuser c on a.userid=c.id "
				+ "left JOIN t_interfacedata b on a.zqdm=b.zqdm "
				+ "where b.jsprice is not null and a.userid in (select id from loginuser) "
				+ "group by a.userid,a.sjid) t";
		int count = mrzcjsServiceI.countBySql(countSql);
		int start = 1;
		int rows = count/3 + 1;
		int index = 0;
		logger.info("mrzcjsNo2 start ------------------------");
		do {
			logger.info("mrzcjsNo2,第--{}--轮,每轮--{}--条, 一共--{}--条", start, rows, count);
			List<Object[]> list = mrzcjsServiceI.findBySql(sql, start, rows);
			for (int i = 0; i < list.size(); i++) {
				index++;
				logger.info("mrzcjsNo2,第--{}--条,结算开始", index);
				Object[] ob = list.get(i);
				do {
					try {
						mrzcjsServiceI.mrzcjsNo2(ob);
						logger.info("mrzcjsNo2,第--{}--条,结算完成", index);
						break;
					} catch (Exception e) {
						e.printStackTrace();
						try {
							Thread.sleep(10);
						} catch (InterruptedException e1) {
							e1.printStackTrace();
						}
					}
				} while (true);
			}
			start++;
		} while (index < count);
		logger.info("mrzcjsNo2 end ------------------------");
	}
	
	
}
