package com.lcjh.controller.api.zsgxt;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.constraints.Min;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.Range;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.Ad;
import com.admin.model.LoginUser;
import com.admin.service.AdServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.util.DateUtils;
import com.alibaba.fastjson.JSONObject;
import com.lcjh.biz.ZsxyBiz;
import com.lcjh.entity.Zsxy;
import com.lcjh.model.zsxygxt.ZsxyModel;
import com.lcjh.result.BooleanBaseResult;
import com.lcjh.result.BooleanObjectResult;
import com.lcjh.result.BooleanPageResult;
import com.log.ProjectConfig;
import com.web.exception.CodeEnum;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

/**
 * 理财计划
 * 
 * @author Administrator
 */
@Controller
@RequestMapping("/api/zsxy")
@Validated
@Api(tags = "-api-zsxy", description = "掌声学院,有关接口")
public class ZsxyApiController {

	// private final Logger logger = LoggerFactory.getLogger(this.getClass());
	@Autowired
	private LoginUserServiceI loginUserServiceI;
	@Autowired
	private ZsxyBiz zsxyBiz;
	@Autowired
	private AdServiceI adService;

	@ApiOperation(value = "获取掌声学院,分页", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/getZsxyPageList", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanPageResult<ZsxyModel> getZsxyPageList(HttpServletRequest request,
			@ApiParam(value = "页号,大于0,默认1") @RequestParam(required = false, defaultValue = "1") @Min(value = 1, message = "页号必须大于0") Integer page,
			@ApiParam(value = "条数,大于0,默认10") @RequestParam(required = false, defaultValue = "10") @Min(value = 1, message = "条数必须大于0") Integer rows,
			@ApiParam(value = "当前用户id", required = true) @NotBlank(message = "当前用户id不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "当前用户id在{min}-{max}个字") String currentUserId)
			throws Exception {
		BooleanPageResult<ZsxyModel> result = BooleanPageResult.getSuccess();
		String sql = "select a.*, case " + "when (a.gxtsqdj = '4' " + "and a.freeTime > now() "
				+ "and (select count(1) from t_zsxy_user_buy_record b where b.zsxyId = a.id and b.userId = :currentUserId) < 1) "
				+ "then 0 " + "when (a.gxtsqdj = '5' "
				+ "and (select count(1) from t_zsxy_user_buy_record b where b.zsxyId = a.id and b.userId = :currentUserId) < 1) "
				+ "then 0 " + "else 1 " + "end showDetail " + "from t_zsxy a where 1=1 ";
		String sqlCount = "select count(1) from t_zsxy a where 1=1 ";
		Map<String, Object> params = new HashMap<String, Object>(1);
		params.put("currentUserId", currentUserId);
		List<ZsxyModel> list_group = zsxyBiz.findBySqlBuildObject(sql, params, ZsxyModel.class, page, rows);

		int total = zsxyBiz.countBySql(sqlCount, null);
		PageRequest pager = new PageRequest(page - 1, rows);
		Page<ZsxyModel> pageData = new PageImpl<ZsxyModel>(list_group, pager, total);

		result.setResult(pageData);
		return result;
	}

	@ApiOperation(value = "获取掌声学院详情,返回html页面", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/getZsxyDetail", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	public String getZsxyDetail(HttpServletRequest request,
			@ApiParam(value = "掌声学院id", required = true) @NotBlank(message = "掌声学院id不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "掌声学院id在{min}-{max}个字") String zsxyId,
			@ApiParam(value = "当前用户id", required = true) @NotBlank(message = "当前用户id不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "当前用户id在{min}-{max}个字") String currentUserId)
			throws Exception {

		String sql = "select a.*, case " + "when (a.gxtsqdj = '4' " + "and a.freeTime > now() "
				+ "and (select count(1) from t_zsxy_user_buy_record b where b.zsxyId = a.id and b.userId = :currentUserId) < 1) "
				+ "then 0 " + "when (a.gxtsqdj = '5' "
				+ "and (select count(1) from t_zsxy_user_buy_record b where b.zsxyId = a.id and b.userId = :currentUserId) < 1) "
				+ "then 0 " + "else 1 " + "end showDetail " + "from t_zsxy a where a.id=:zsxyId ";
		Map<String, Object> params = new HashMap<String, Object>(2);
		params.put("currentUserId", currentUserId);
		params.put("zsxyId", zsxyId);
		ZsxyModel model = zsxyBiz.findBySqlBuildObjectOne(sql, params, ZsxyModel.class);

		String path = request.getContextPath();
		String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path
				+ "/";
		request.setAttribute("basePath", basePath);
		request.setAttribute("htmlPath", basePath + "html/");

		int showDetail = 1;
		if (null == model) {
			showDetail = 0;
		} else {
			if (null == model.getGxtjfxh()) {
				model.setGxtjfxh(ProjectConfig.bd0);
			}
			if (model.getShowDetail().intValue() == 0) {
				showDetail = 2;
			} else {
				request.setAttribute("showDetail", showDetail);
				request.setAttribute("uid", currentUserId);
				request.setAttribute("id", zsxyId);
				request.setAttribute("title", model.getTitle());
				request.setAttribute("content", model.getGxtnr());
				request.setAttribute("tx", basePath + "html/images/touxiang_moren.png");
				request.setAttribute("nickname", model.getGxtfbz());
				request.setAttribute("zanCount", model.getGxtbzcs());
				request.setAttribute("buyPrice", model.getGxtjfxh().setScale(2));
				request.setAttribute("addTime", DateUtils.DateToStr(DateUtils.YYYY_MM_DD_HH_MM_SS, model.getAddTime()));
			}
			request.setAttribute("entity", model);
			request.setAttribute("buyPrice", model.getGxtjfxh().setScale(2));
			request.setAttribute("addTime", DateUtils.DateToStr(DateUtils.YYYY_MM_DD_HH_MM_SS, model.getAddTime()));
			request.setAttribute("images", StringUtils.hasText(model.getImage()) ? model.getImage().split(",") : null);
		}

		List<Ad> list_ads = adService.getAdList("31", "-1", "1000");
		request.setAttribute("ads", list_ads);

		request.setAttribute("id", zsxyId);
		request.setAttribute("uid", currentUserId);
		request.setAttribute("showDetail", showDetail);

		Zsxy b = zsxyBiz.get(Zsxy.class, zsxyId);
		b.setGxtbzcs(b.getGxtbzcs() + 1);
		zsxyBiz.update(b);

		return "/html/zsxyDetail2";
	}

	@ApiOperation(value = "吐槽,赞掌声学院", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/zantuZsxy", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanBaseResult zantuZsxy(HttpServletRequest request,
			@ApiParam(value = "掌声学院id", required = true) @RequestParam(required = false) @NotBlank(message = "掌声学院id不能为空") @Size(min = 1, max = 200, message = "掌声学院id在{min}-{max}个字") String zsxyId,
			@ApiParam(value = "用户id", required = true) @RequestParam(required = false) @NotBlank(message = "用户id不能为空") @Size(min = 1, max = 200, message = "用户id在{min}-{max}个字") String userId,
			@ApiParam(value = "操作类型,1:吐槽,2:赞", required = false) @RequestParam(required = false, defaultValue = "1") @Range(min = 1, max = 2, message = "操作类型在{min}-{max}") int type)
			throws Exception {

		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Zsxy b = zsxyBiz.get(Zsxy.class, zsxyId);
		Assert.notNull(b, "博文不存在");
		if (1 == type) {
			b.setGxtbtccs(b.getGxtbtccs() + 1);
		} else if (2 == type) {
			b.setGxtbzcs(b.getGxtbzcs() + 1);
		}
		zsxyBiz.update(b);
		return BooleanBaseResult.SUCCESS;
	}

	@ApiOperation(value = "吐槽,赞掌声学院(jsonp)", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/zantuZsxyMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void zantuZsxyMore(HttpServletResponse res, HttpServletRequest request,
			@ApiParam(value = "掌声学院id", required = true) @RequestParam(required = false) @NotBlank(message = "掌声学院id不能为空") @Size(min = 1, max = 200, message = "掌声学院id在{min}-{max}个字") String zsxyId,
			@ApiParam(value = "用户id", required = true) @RequestParam(required = false) @NotBlank(message = "用户id不能为空") @Size(min = 1, max = 200, message = "用户id在{min}-{max}个字") String userId,
			@ApiParam(value = "操作类型,1:吐槽,2:赞", required = false) @RequestParam(required = false, defaultValue = "1") @Range(min = 1, max = 2, message = "操作类型在{min}-{max}") int type)
			throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());
		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Zsxy b = zsxyBiz.get(Zsxy.class, zsxyId);
		Assert.notNull(b, "博文不存在");
		if (1 == type) {
			b.setGxtbtccs(b.getGxtbtccs() + 1);
		} else if (2 == type) {
			b.setGxtbzcs(b.getGxtbzcs() + 1);
		}
		zsxyBiz.update(b);
		result.setResult("SUCCESS");
		String resStr = "";
		String callback = request.getParameter("callback");
		if (null != callback) {
			resStr += callback + "(";
			resStr += JSONObject.toJSONString(result);
			resStr += ")";
		} else {
			resStr = JSONObject.toJSONString(result);
		}
		request.setCharacterEncoding("utf-8");
		res.setContentType("text/html;charset=utf-8");
		res.getWriter().write(resStr);
		res.getWriter().flush();
	}

	@ApiOperation(value = "获取掌声学院详情,返回html页面(jsonp)", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/getZsxyDetailMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	public void getZsxyDetailMore(HttpServletResponse res, HttpServletRequest request,
			@ApiParam(value = "掌声学院id", required = true) @NotBlank(message = "掌声学院id不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "掌声学院id在{min}-{max}个字") String zsxyId,
			@ApiParam(value = "当前用户id", required = true) @NotBlank(message = "当前用户id不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "当前用户id在{min}-{max}个字") String currentUserId)
			throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());

		result.setResult("http://admin.gtl666.com/gtl/api/zsxy/getZsxyDetail?zsxyId=" + zsxyId + "&currentUserId="
				+ currentUserId);
		String resStr = "";
		String callback = request.getParameter("callback");
		if (null != callback) {
			resStr += callback + "(";
			resStr += JSONObject.toJSONString(result);
			resStr += ")";
		} else {
			resStr = JSONObject.toJSONString(result);
		}
		request.setCharacterEncoding("utf-8");
		res.setContentType("text/html;charset=utf-8");
		res.getWriter().write(resStr);
		res.getWriter().flush();
	}

	@ApiOperation(value = "获取掌声学院,分页(jsonp)", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/getZsxyPageListMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void getZsxyPageListMore(HttpServletResponse res, HttpServletRequest request,
			@ApiParam(value = "页号,大于0,默认1") @RequestParam(required = false, defaultValue = "1") @Min(value = 1, message = "页号必须大于0") Integer page,
			@ApiParam(value = "条数,大于0,默认10") @RequestParam(required = false, defaultValue = "10") @Min(value = 1, message = "条数必须大于0") Integer rows,
			@ApiParam(value = "当前用户id", required = true) @NotBlank(message = "当前用户id不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "当前用户id在{min}-{max}个字") String currentUserId)
			throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());
		String sql = "select a.*, case " + "when (a.gxtsqdj = '4' " + "and a.freeTime > now() "
				+ "and (select count(1) from t_zsxy_user_buy_record b where b.zsxyId = a.id and b.userId = :currentUserId) < 1) "
				+ "then 0 " + "when (a.gxtsqdj = '5' "
				+ "and (select count(1) from t_zsxy_user_buy_record b where b.zsxyId = a.id and b.userId = :currentUserId) < 1) "
				+ "then 0 " + "else 1 " + "end showDetail " + "from t_zsxy a where 1=1 ";
		String sqlCount = "select count(1) from t_zsxy a where 1=1 ";
		Map<String, Object> params = new HashMap<String, Object>(1);
		params.put("currentUserId", currentUserId);
		List<ZsxyModel> list_group = zsxyBiz.findBySqlBuildObject(sql, params, ZsxyModel.class, page, rows);

		result.setResult(list_group);
		String resStr = "";
		String callback = request.getParameter("callback");
		if (null != callback) {
			resStr += callback + "(";
			resStr += JSONObject.toJSONString(result);
			resStr += ")";
		} else {
			resStr = JSONObject.toJSONString(result);
		}
		request.setCharacterEncoding("utf-8");
		res.setContentType("text/html;charset=utf-8");
		res.getWriter().write(resStr);
		res.getWriter().flush();
	}

}
