package com.admin.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.AdDaoI;
import com.admin.dao.LoginUserDaoI;
import com.admin.dao.RoleDaoI;
import com.admin.dao.UserDaoI;
import com.admin.model.Ad;
import com.admin.model.LoginUser;
import com.admin.model.Tresource;
import com.admin.model.Trole;
import com.admin.model.Tuser;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.service.AdServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.UserServiceI;
import com.admin.util.MD5Util;
import com.web.entity.Person;
import com.web.util.PageModel;
import com.web.util.TimeUtils;

@Service
public class AdServiceImpl implements AdServiceI {

	@Autowired
	private AdDaoI dao;

	@Override
	public DataGrid dataGrid(Ad ad, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Ad> ul = new ArrayList<Ad>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Ad t ";
		List<Ad> l = dao.find(hql + whereHql(ad, params) + orderHql(ph),
				params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Ad t : l) {
				Ad u = new Ad();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count("select count(*) " + hql + whereHql(ad, params),
				params));
		return dg;
	}

	/**
	 * where条件封装
	 * 
	 * @param ad
	 * @param params
	 * @return
	 */
	private String whereHql(Ad ad, Map<String, Object> params) {
		String hql = "";
		if (ad != null) {
			hql += " where 1=1 ";
			if (ad.getLanmu() != null) {
				hql += " and t.lanmu like :lanmu";
				params.put("lanmu", "%%"+ad.getLanmu()+"%%");
			}

		}
		return hql;
	}

	/**
	 * order封装
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	/**
	 * 新增
	 */
	@Override
	public void add(Ad ad) throws Exception {
		ad.setId(UUID.randomUUID().toString());
		ad.setAddtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		String i = ad.getImage();
		String[] a = i.split("&quot;");
		if (a.length > 2) {
			String b = a[1];
			if (b.contains(".")) {
				ad.setImage(b);
			}
		}
		dao.save(ad);
	}

	/**
	 * 删除
	 */
	@Override
	public void delete(String id) throws Exception {
		Ad ad = dao.get(Ad.class, id);
		dao.delete(ad);
	}

	/**
	 * 修改
	 */
	@Override
	public void update(Ad ad) throws Exception {
		Ad a = dao.get(Ad.class, ad.getId());
		a.setTitle(ad.getTitle());
		a.setHref(ad.getHref());
		a.setImage(ad.getImage());
		a.setAddtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		a.setIp(ad.getIp());
		a.setAuthor(ad.getAuthor());
		dao.update(a);
	}

	/**
	 * 得到对象
	 */
	@Override
	public Ad get(String id) throws Exception {
		return dao.get(Ad.class, id);
	}

	@Override
	public List<Ad> getAdList(String lanmu, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ").append(Ad.class.getSimpleName())
				.append(" a ");
		sff.append(" where 1=1");
		if (StringUtils.isNotBlank(lanmu)) {
			sff.append(" and lanmu='" + lanmu + "'");
		}
		List<Ad> list = dao.find(sff.toString(), Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public int getCount(String lanmu) {
		String hql = "select count(*) from Ad where 1=1";
		if (StringUtils.isNotBlank(lanmu)) {
			hql += " and lanmu='" + lanmu + "' ";
		}
		return dao.count(hql).intValue();
	}

}
