package com.admin.controller;

import java.io.IOException;
import java.net.URLDecoder;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.CollectionTemplateConfig;
import com.admin.model.Log;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.Json;
import com.admin.pageModel.PageHelper;
import com.admin.service.CollectionTemplateConfigServiceI;
import com.admin.service.LogServiceI;
import com.admin.util.InfoUtil;
import com.alibaba.fastjson.JSONObject;
import com.web.util.TimeUtils;

/**
 * 模版采集控制器
 * 
 * @author
 * 
 */
@Controller
@RequestMapping("/collectionTemplateConfigController")
public class CollectionTemplateConfigController extends BaseController {

	@Autowired
	private CollectionTemplateConfigServiceI collectionTemplateConfigService;
	@Autowired
	private LogServiceI logService;

	/**
	 * 跳转到模版采集管理页面
	 * 
	 * @return
	 */
	@RequestMapping("/manager")
	public String manager() {
		return "/admin/collectionTemplateConfig/collectionTemplateConfig";
	}

	/**
	 * 跳转到模版采集添加页面
	 * 
	 * @return
	 */
	@RequestMapping("/addPage")
	public String addPage(HttpServletRequest request) {
		CollectionTemplateConfig r = new CollectionTemplateConfig();
		r.setId(UUID.randomUUID().toString());
		request.setAttribute("collectionTemplateConfig", r);
		return "/admin/collectionTemplateConfig/collectionTemplateConfigAdd";
	}

	/**
	 * 添加模版采集
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/add")
	@ResponseBody
	public void add(String wzmc, String cjdz, String bt, String nr, String fy,
			String zfj, HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		JSONObject j = new JSONObject();
		String callback = (String) request.getParameter("callback");
		try {
			wzmc = URLDecoder.decode(wzmc, "UTF-8");
			cjdz = URLDecoder.decode(cjdz, "UTF-8");
			bt = URLDecoder.decode(bt, "UTF-8");
			nr = URLDecoder.decode(nr, "UTF-8");
			fy = URLDecoder.decode(fy, "UTF-8");
			zfj = URLDecoder.decode(zfj, "UTF-8");
			CollectionTemplateConfig c = new CollectionTemplateConfig();
			c.setBtreg(bt);
			c.setWzmc(wzmc);
			c.setCjdz(cjdz);
			c.setNrreg(nr);
			c.setFyreg(fy);
			c.setZfjreg(zfj);
			collectionTemplateConfigService.add(c);
			j.put("success", true);
			j.put("msg", "采集成功！采集新闻列表中查看");
		} catch (Exception e) {
			j.put("success", false);
			j.put("msg", "采集失败！错误：" + e.getMessage());
		}

		String retStr = callback + "(" + j.toJSONString() + ")";
		response.getWriter().print(retStr);
	}

	/**
	 * 跳转到模版采集修改页面
	 * 
	 * @return
	 */
	@RequestMapping("/editPage")
	public String editPage(HttpServletRequest request, String id) {
		CollectionTemplateConfig r = collectionTemplateConfigService.get(id);
		request.setAttribute("collectionTemplateConfig", r);
		return "/admin/collectionTemplateConfig/collectionTemplateConfigEdit";
	}

	/**
	 * 修改模版采集
	 * 
	 * @param collectionTemplateConfig
	 * @return
	 */
	@RequestMapping("/edit")
	@ResponseBody
	public void edit(String id, String wzmc, String cjdz, String bt, String nr,
			String fy, String zfj, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {
		JSONObject j = new JSONObject();
		String callback = (String) request.getParameter("callback");
		try {
			id = URLDecoder.decode(id, "UTF-8");
			wzmc = URLDecoder.decode(wzmc, "UTF-8");
			cjdz = URLDecoder.decode(cjdz, "UTF-8");
			bt = URLDecoder.decode(bt, "UTF-8");
			nr = URLDecoder.decode(nr, "UTF-8");
			fy = URLDecoder.decode(fy, "UTF-8");
			zfj = URLDecoder.decode(zfj, "UTF-8");
			CollectionTemplateConfig c = new CollectionTemplateConfig();
			c.setId(id);
			c.setBtreg(bt);
			c.setWzmc(wzmc);
			c.setCjdz(cjdz);
			c.setNrreg(nr);
			c.setFyreg(fy);
			c.setZfjreg(zfj);
			collectionTemplateConfigService.edit(c);
			j.put("success", true);
			j.put("msg", "修改成功");

		} catch (Exception e) {
			j.put("success", false);
			j.put("msg", "修改失败！错误：" + e.getMessage());
		}

		String retStr = callback + "(" + j.toJSONString() + ")";
		response.getWriter().print(retStr);
	}

	/**
	 * 获得模版采集列表
	 * 
	 * @return
	 */
	@RequestMapping("/dataGrid")
	@ResponseBody
	public DataGrid dataGrid(CollectionTemplateConfig p, PageHelper ph) {
		return collectionTemplateConfigService.dataGrid(p, ph);
	}

	/**
	 * 删除模版采集
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/delete")
	@ResponseBody
	public Json delete(String id) {
		Json j = new Json();
		collectionTemplateConfigService.delete(id);
		j.setMsg("删除成功！");
		j.setSuccess(true);
		return j;
	}

	@RequestMapping("/batchDelete")
	@ResponseBody
	public Json batchDelete(String ids, HttpSession session) {
		Json j = new Json();
		if (ids != null && ids.length() > 0) {
			for (String id : ids.split(",")) {
				if (id != null) {
					this.delete(id);
				}
			}
		}
		j.setMsg("批量删除成功！");
		j.setSuccess(true);
		return j;
	}
}
