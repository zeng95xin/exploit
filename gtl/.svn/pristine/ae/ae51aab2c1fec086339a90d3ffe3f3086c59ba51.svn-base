package com.admin.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.RoleDaoI;
import com.admin.dao.UserDaoI;
import com.admin.dao.WebDaoI;
import com.admin.model.Ad;
import com.admin.model.Tresource;
import com.admin.model.Trole;
import com.admin.model.Tuser;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.service.UserServiceI;
import com.admin.service.WebServiceI;
import com.admin.util.MD5Util;
import com.web.entity.Person;
import com.web.util.PageModel;
import com.web.util.TimeUtils;

@Service
public class WebServiceImpl implements WebServiceI {

	@Autowired
	private WebDaoI dao;

	@Override
	public DataGrid dataGridForOne(Person p, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Person> ul = new ArrayList<Person>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Person t ";
		List<Person> l = dao.findOne(hql + whereHqlForOne(p, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Person t : l) {
				Person u = new Person();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count(
				"select count(*) " + hql + whereHqlForOne(p, params), params));
		return dg;
	}

	/**
	 * where 条件封装
	 * 
	 * @param p
	 * @param params
	 * @return
	 */
	private String whereHqlForOne(Person p, Map<String, Object> params) {
		String hql = "";
		if (p != null) {
			hql += " where 1=1 ";
			if (p.getName() != null) {
				hql += " and t.name like :name";
				params.put("name", "%%" + p.getName() + "%%");
			}
			if (p.getTele() != null) {
				hql += " and t.tele =:tele";
				params.put("tele", p.getTele());
			}

		}
		return hql;
	}

	/**
	 * 排序条件
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void delete(String id) {
		dao.delete(dao.get(Person.class, id));
	}

	@Override
	synchronized public void add(Person p) throws Exception {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("name", p.getName());
		if (dao.count("select count(*) from Person t where t.name = :name",
				params) > 0) {
			throw new Exception("姓名已存在！");
		} else {
			Person u = new Person();
			BeanUtils.copyProperties(p, u);
			u.setPs(0);
			u.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
			dao.save(u);
		}
	}

	@Override
	public Person get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		Person t = dao.get("select distinct t from Person t  where t.id = :id",
				params);
		Person u = new Person();
		BeanUtils.copyProperties(t, u);
		return u;
	}

	@Override
	synchronized public void edit(Person p) throws Exception {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", p.getId());
		params.put("name", p.getName());
		if (dao.count(
				"select count(*) from Person t where t.name = :name and t.id != :id",
				params) > 0) {
			throw new Exception("姓名已存在！");
		} else {
			Person u = dao.get(Person.class, p.getId());
			u.setName(p.getName());
			u.setSex(p.getSex());
			u.setXy(p.getXy());
			u.setTele(p.getTele());
			if (u.getTime() == null) {
				u.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
			}
			dao.update(u);
		}
	}

	String[] excelHeader = { "姓名", "宣言", "票数", "性别", "电话", "注册时间" };

	@Override
	public HSSFWorkbook export(List<Person> list) {
		HSSFWorkbook wb = new HSSFWorkbook();
		HSSFSheet sheet = wb.createSheet("Person");
		HSSFRow row = sheet.createRow((int) 0);
		HSSFCellStyle style = wb.createCellStyle();
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);

		for (int i = 0; i < excelHeader.length; i++) {
			HSSFCell cell = row.createCell(i);
			cell.setCellValue(excelHeader[i]);
			cell.setCellStyle(style);
			sheet.autoSizeColumn(i);
		}

		for (int i = 0; i < list.size(); i++) {
			row = sheet.createRow(i + 1);
			Person p = list.get(i);
			row.createCell(0).setCellValue(p.getName());
			row.createCell(1).setCellValue(p.getXy());
			row.createCell(2).setCellValue(p.getPs());
			row.createCell(3).setCellValue(p.getSex());
			row.createCell(4).setCellValue(p.getTele());
			row.createCell(5).setCellValue(p.getTime());
		}
		return wb;
	}

}
