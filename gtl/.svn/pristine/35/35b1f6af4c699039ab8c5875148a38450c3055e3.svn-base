package com.admin.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.Jfxhjl;
import com.admin.model.LoginUser;
import com.admin.model.Score;
import com.admin.model.ScoreCount;
import com.admin.model.ScoreType;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.Json;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.service.LoginUserServiceI;
import com.admin.service.ScoreCountServiceI;
import com.admin.service.ScoreServiceI;
import com.admin.service.ScoreTypeServiceI;
import com.admin.util.ConfigUtil;
import com.admin.util.ExcelUtil;
import com.web.entity.CountsMsg;
import com.web.util.TimeUtils;

@Controller
@RequestMapping("/scorecount")
public class ScoreCountController {
	
	@Autowired
	private ScoreCountServiceI scoreCountServiceI;
	@Autowired
	private ScoreTypeServiceI scoreTypeServiceI;
	@Autowired
	private LoginUserServiceI loginUserService;
	
	@RequestMapping("/index")
	public String manager(HttpServletRequest request) {
		List<ScoreType> scoreTypes=scoreTypeServiceI.find("from ScoreType");
		request.getSession().setAttribute("countTypes",scoreTypes);
		return "admin/score/scorecount";
	}
	
	
	
	/**
	 * 获取积分列表
	 * @param score
	 * @param ph
	 * @return
	 */
	@RequestMapping("/dataGrid")
	@ResponseBody
	public DataGrid dataGrid(ScoreCount scoreCount, PageHelper ph,HttpServletRequest request) {
		String typeId=request.getParameter("typeId");
		if(StringUtils.isNotBlank(typeId)){
			ScoreType scoreType=new ScoreType();
			scoreType.setId(typeId);
			scoreCount.setScoreType(scoreType);
		}
		return scoreCountServiceI.dataGridForOne(scoreCount, ph);
	}
	
	
	@RequestMapping("/delete")
	@ResponseBody
	public Json delete(String id, HttpSession session,
			HttpServletRequest request) {
		Json j = new Json();
		try {
			ScoreCount s=scoreCountServiceI.get(ScoreCount.class, id);
			scoreCountServiceI.delete(s);
			j.setMsg("删除成功！");
			j.setSuccess(true);
		} catch (Exception e) {
			j.setMsg("删除失败！");
			j.setSuccess(false);
		}
		return j;
	}
	
	
	/*
	 * 计算当前的操作的数据
	 */
	@RequestMapping("/save")
	@ResponseBody
	public Json save(String id, HttpSession session,
			HttpServletRequest request) {
		Json j = new Json();
		try {
			ScoreCount s=scoreCountServiceI.get(ScoreCount.class, id);
			scoreCountServiceI.delete(s);
			j.setMsg("删除成功！");
			j.setSuccess(true);
		} catch (Exception e) {
			j.setMsg("删除失败！");
			j.setSuccess(false);
		}
		return j;
	}
	
	
	/**
	 * 积分统计报表导出
	 * @param httpServletResponse
	 */
	@RequestMapping("/exportExcel")
	@ResponseBody
	public void exportExcel(HttpServletResponse httpServletResponse,HttpServletRequest httpServletRequest){
			String type=httpServletRequest.getParameter("type");
			String thisTime=null;
			if(type!=null){
				
				if(type.equals("year")){
					thisTime=TimeUtils.getTime("yyyy-MM-dd");
					String[] times=thisTime.split("-");
					thisTime=times[0];
				}else if(type.equals("month")){
					String times=httpServletRequest.getParameter("time");
//					String[] times=thisTime.split("-");
//					thisTime=times[0]+"-"+times[1];
					thisTime=times;
				}
			}
			
			Map<String, Object> params=new HashMap<String, Object>();
			if(type.equals("year")){
				params.put("time", thisTime);
			}
			params.put("time2", "%"+thisTime+"%");
			List<Object[]> counts=scoreCountServiceI.findBySql(whereHQL(type),params);
//			List<ScoreCount> counts=scoreCountServiceI.find(whereHQL(type),params);
			List<ScoreType> scoreTypes=scoreTypeServiceI.find("from ScoreType");
			String[] rowNum=new String[scoreTypes.size()+1];
			rowNum[0]="时间";
			for(int i=0;i<scoreTypes.size();i++){
				rowNum[i+1]=scoreTypes.get(i).getTypeName();
			}
			List<Object[]> datas=new ArrayList<Object[]>();
			String time="";
			String[] msg=new String[rowNum.length];
			for(int k=0;k< counts.size();k++){
				Object[] count=counts.get(k);
				/**
				 * 判断每行数据时间列,例如:  2016-08-22 如果是 2016-08-23就重新开启一行数据
				 * 标题跟对应的数据对应的封装
				 * */
				if(!time.equals(count[2])){
					//首次
					if(time.equals("")){
						time=count[2].toString();
						msg[0]=time;
					}else{
						//行数据时间判断
						datas.add(msg);
						time=count[2].toString();
						msg=new String[rowNum.length];
						msg[0]=time;
					}
				}
				//根据对应的标题头找,找对应的数据
				for(int i=1;i<rowNum.length;i++){
					if(rowNum[i].equals(count[3].toString())){
						msg[i]=count[1].toString();
					}
				}
				//最后一次
				if(k==counts.size()-1){
					datas.add(msg);
				}
				
			}
			//填充数据并导出excel
			ExcelUtil.exportExcel1(thisTime+"数据",rowNum,datas,httpServletResponse,false);
			

		
	}
	
	private String whereHQL(String type){
		String sql=null;
		if(type.equals("month")){
			sql="select a.id,a.allScore as allScore,a.time as time ,b.typeName   from  t_sys_score_count as a left join t_sys_score_type as b on a.scoreTypeId=b.id where a.time like :time2  order by a.time desc";
		}else if(type.equals("year")){
//			sql="select a.id,sum(a.allScore) as allScore,:time1 as time,b.id as scoreTypeId from  t_sys_score_count as a left join t_sys_score_type as b on a.scoreTypeId=b.id where a.time like :time2 GROUP BY typeName";
			sql="select a.id,sum(a.allScore) as allScore,:time as time ,b.typeName   from  t_sys_score_count as a left join t_sys_score_type as b on a.scoreTypeId=b.id where a.time like :time2 group by a.scoreTypeId";
		}
		//System.out.println(sql);
		return sql;
	}
	
	
	
	@RequestMapping("/exportPage")
	public String excelPortPage(){
		return "admin/score/exportExcel";
	}
	
	
	
	
}
