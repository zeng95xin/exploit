package com.admin.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.ChestBoxEvaluateDao;
import com.admin.model.LoginUser;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.ChestBoxEvaluateService;
import com.admin.service.ChestBoxService;
import com.admin.service.LoginUserServiceI;
import com.web.entity.ChestBox;
import com.web.entity.ChestBoxEvaluate;

@Service
public class ChestBoxEvaluateServiceImpl implements ChestBoxEvaluateService{
	
	@Autowired
	private ChestBoxEvaluateDao chestBoxEvaluateDao;
	
	@Autowired
	private ChestBoxService chestBoxService;
	
	@Autowired
	private LoginUserServiceI loginUserServiceI;

	@Override
	public void add(ChestBoxEvaluate chestBoxEvaluate) throws Exception {
		chestBoxEvaluateDao.save(chestBoxEvaluate);
	}

	@Override
	public DataGrid dataGrid(ChestBoxEvaluate chestBoxEvaluate, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<ChestBoxEvaluate> lhm = new ArrayList<ChestBoxEvaluate>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from ChestBoxEvaluate t ";
		List<ChestBoxEvaluate> l = chestBoxEvaluateDao.find(hql + whereHql(chestBoxEvaluate, params) + orderHql(ph),
				params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (ChestBoxEvaluate t : l) {
				ChestBoxEvaluate u = new ChestBoxEvaluate();
				ChestBox chestBox;
				LoginUser loginUser;
				try {
					chestBox = chestBoxService.get(t.getChestBoxId());
					if (chestBox != null ) {
						if (StringUtils.isNotBlank(chestBox.getBoxTitle())) {
							t.setChsetBoxTitle(chestBox.getBoxTitle());
						}
						
					} else {
						t.setChsetBoxTitle("");
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (StringUtils.isNotBlank(t.getBoxEvaluateBuyerID())) {
					
					loginUser=loginUserServiceI.getUser(t.getBoxEvaluateBuyerID());
					if (loginUser != null) {
						if (StringUtils.isNotBlank(loginUser.getNickname())) {
							
							t.setBoxEvaluateBuyerName(loginUser.getNickname());
						}
					}
				}
				BeanUtils.copyProperties(t, u);
				lhm.add(u);
			}
		}
		dg.setRows(lhm);
		dg.setTotal(chestBoxEvaluateDao.count("select count(*) " + hql + whereHql(chestBoxEvaluate, params),
				params));
		return dg;
	}

	@Override
	public void delete(String chestBoxEvaluateId) throws Exception {
		chestBoxEvaluateDao.delete(chestBoxEvaluateDao.get(ChestBoxEvaluate.class, chestBoxEvaluateId));
		
	}

	@Override
	public void update(ChestBoxEvaluate chestBoxEvaluate) throws Exception {
		chestBoxEvaluateDao.update(chestBoxEvaluate);
		
	}

	@Override
	public ChestBoxEvaluate get(String chestBoxEvaluateId) throws Exception {
		return chestBoxEvaluateDao.get(ChestBoxEvaluate.class, chestBoxEvaluateId);
	}
	
	/**
	 * where条件封装
	 * @param chestBox
	 * @param params
	 * @return
	 */
	private String whereHql(ChestBoxEvaluate chestBoxEvaluate, Map<String, Object> params) {
		String hql = "";
		if (chestBoxEvaluate != null) {
			hql += " where 1=1 ";
			
			if (StringUtils.isNotBlank(chestBoxEvaluate.getBoxEvaluateBuyerName())) {//评价者昵称
				hql += " and t.boxEvaluateBuyerName like = :boxEvaluateBuyerName";
				params.put("boxEvaluateBuyerName", "%%" +chestBoxEvaluate.getBoxEvaluateBuyerName()+ "%%");
			}
			if (StringUtils.isNotBlank(chestBoxEvaluate.getChsetBoxTitle())) {//百宝箱标题
				hql += " and t.chsetBoxTitle like = :chsetBoxTitle";
				params.put("chsetBoxTitle", "%%" +chestBoxEvaluate.getChsetBoxTitle()+ "%%");
			}
			if (StringUtils.isNotBlank(chestBoxEvaluate.getBoxEvaluateType())) {//百宝箱评价类型  好中差 210
				hql += " and t.boxEvaluateType  = :boxEvaluateType";
				params.put("boxEvaluateType", chestBoxEvaluate.getBoxEvaluateType());
			}
			

		}
		return hql;
	}

	/**
	 * order封装
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public ChestBoxEvaluate getByBoxId(String chestBoxId,
			String boxEvaluateBuyerID) {
		ChestBoxEvaluate cbe=new ChestBoxEvaluate();
		String hql=" from ChestBoxEvaluate t where 1=1 ";
		if (StringUtils.isNotBlank(chestBoxId) && StringUtils.isNotBlank(boxEvaluateBuyerID)) {
			hql+=" and t.chestBoxId='"+chestBoxId+"' and t.boxEvaluateBuyerID= '"+ boxEvaluateBuyerID+"' order by t.boxEvaluateTime desc";
		}
		cbe=chestBoxEvaluateDao.get(hql);
		if (cbe != null) {
			return cbe;
		}
		return null;
	}

	@Override
	public List<ChestBoxEvaluate> getByBoxId2(String chestBoxId,String row ,String page) {
		if (StringUtils.isBlank(page)) {
			page="1";
		}
		if (StringUtils.isBlank(row)) {
			row="10";
		}
		List<ChestBoxEvaluate> list=new ArrayList<ChestBoxEvaluate>();
		String hql=" from ChestBoxEvaluate t where 1=1 ";
		if (StringUtils.isNotBlank(chestBoxId)) {
			hql+=" and t.chestBoxId='"+chestBoxId+"' order by t.boxEvaluateTime desc";
			list=chestBoxEvaluateDao.find(hql, Integer.parseInt(page), Integer.parseInt(row));
		}
		if (list != null && list.size() > 0) {
			return list;
		}
		return null;
	}

}
