package com.admin.dao.impl;

import java.io.Serializable;
import java.math.BigInteger;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.hibernate.LockMode;
import org.hibernate.LockOptions;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.admin.dao.BaseDaoI;
import com.admin.model.AppVersion;
import com.admin.model.TcpApplication;
import com.admin.model.TczdXz;
import com.admin.model.Tgsdz;
import com.admin.model.TxwxGl;
import com.admin.model.WcpApplication;
import com.web.entity.Person;
import com.web.util.PageModel;
import com.web.util.TimeUtils;

@Repository
public class BaseDaoImpl<T> implements BaseDaoI<T> {

	@Autowired protected SessionFactory sessionFactory;

	/**
	 * 获得当前事物的session
	 * 
	 * @return org.hibernate.Session
	 */
	public Session getCurrentSession() {
		return this.sessionFactory.getCurrentSession();
	}

	@Override
	public Serializable save(T o) {
		if (o != null) {
			return this.getCurrentSession().save(o);
		}
		return null;
	}

	@Override
	public T get(Class<T> c, Serializable id) {
		return (T) this.getCurrentSession().get(c, id);
	}

	@Override
	public T get(String hql) {
		Query q = this.getCurrentSession().createQuery(hql);
		q.setMaxResults(1);
		List<T> l = q.list();
		if (l != null && l.size() > 0) {
			return l.get(0);
		}
		return null;
	}

	@Override
	public T get(String hql, Map<String, Object> params) {
		Query q = this.getCurrentSession().createQuery(hql);
		setParams(q, params);
		List<T> l = q.list();
		if (l != null && l.size() > 0) {
			return l.get(0);
		}
		return null;
	}

	/*
	 * @Override public Tgxt getGxt(String hql, Map<String, Object> params) {
	 * Query q = this.getCurrentSession().createQuery(hql); if (params != null
	 * && !params.isEmpty()) { for (String key : params.keySet()) {
	 * q.setParameter(key, params.get(key)); } } List<Tgxt> l = q.list(); if (l
	 * != null && l.size() > 0) { return l.get(0); } return null; }
	 */

	@Override
	public void delete(T o) {
		if (o != null) {
			this.getCurrentSession().delete(o);
		}
	}

	@Override
	public void update(T o) {
		if (o != null) {
			this.getCurrentSession().update(o);
		}
	}

	@Override
	public void saveOrUpdate(T o) {
		if (o != null) {
			this.getCurrentSession().saveOrUpdate(o);
		}
	}

	@Override
	public List<T> find(String hql) {
		Query q = this.getCurrentSession().createQuery(hql);
		return q.list();
	}
	
	@Override
	public List<T> find(String hql, boolean isLock) {
		Query q = this.getCurrentSession().createQuery(hql);
		if(isLock){
			q.setLockOptions(LockOptions.UPGRADE);
		}
		return q.list();
	}

	@Override
	public List<T> find(String hql, Map<String, Object> params) {
		Query q = this.getCurrentSession().createQuery(hql);
		setParams(q, params);
		return q.list();
	}

	@Override
	public List<T> find(String hql, Map<String, Object> params, int page,
			int rows) {
		Query q = this.getCurrentSession().createQuery(hql);
		setParams(q, params);
		return q.setFirstResult((page - 1) * rows).setMaxResults(rows).list();
	}

	@Override
	public List<Person> findOne(String hql, Map<String, Object> params,
			int page, int rows) {
		Query q = this.getCurrentSession().createQuery(hql);
		setParams(q, params);
		return q.setFirstResult((page - 1) * rows).setMaxResults(rows).list();
	}

	@Override
	public List<T> find(String hql, int page, int rows) {
		Query q = this.getCurrentSession().createQuery(hql);
		return q.setFirstResult((page - 1) * rows).setMaxResults(rows).list();
	}

	@Override
	public Long count(String hql) {
		Query q = this.getCurrentSession().createQuery(hql);
		return (Long) q.uniqueResult();
	}
	
	@Override
	public Double countDouble(String hql) {
		Query q = this.getCurrentSession().createQuery(hql);
		return (Double) q.uniqueResult();
	}
	
	@Override
	public double sumDouble(String hql, Map<String, Object> params) {
		Query q = this.getCurrentSession().createQuery(hql);
		setParams(q, params);
		Object o = q.uniqueResult();
		if(null == o){
			return 0d;
		}
		String str = String.valueOf(o);
		double d = Double.valueOf(str);
		return d;
	}
	
	@Override
	public Long count(String hql, Map<String, Object> params) {
		Query q = this.getCurrentSession().createQuery(hql);
		setParams(q, params);
		return Long.valueOf(q.uniqueResult().toString());
	}

	@Override
	public int executeHql(String hql) {
		Query q = this.getCurrentSession().createQuery(hql);
		return q.executeUpdate();
	}

	@Override
	public int executeHql(String hql, Map<String, Object> params) {
		Query q = this.getCurrentSession().createQuery(hql);
		setParams(q, params);
		return q.executeUpdate();
	}

	@Override
	public List<Object[]> findBySql(String sql) {
		SQLQuery q = this.getCurrentSession().createSQLQuery(sql);
		return q.list();
	}
	
	@Override
	public List<Object> findBySql1(String sql) {
		SQLQuery q = this.getCurrentSession().createSQLQuery(sql);
		return q.list();
	}

	@Override
	public List<Object[]> findBySql(String sql, int page, int rows) {
		SQLQuery q = this.getCurrentSession().createSQLQuery(sql);
		return q.setFirstResult((page - 1) * rows).setMaxResults(rows).list();
	}

	@Override
	public List<Object[]> findBySql(String sql, Map<String, Object> params) {
		SQLQuery q = this.getCurrentSession().createSQLQuery(sql);
		setParams(q, params);
		return q.list();
	}

	@Override
	public List<Object[]> findBySql(String sql, Map<String, Object> params,
			int page, int rows) {
		SQLQuery q = this.getCurrentSession().createSQLQuery(sql);
		setParams(q, params);
		return q.setFirstResult((page - 1) * rows).setMaxResults(rows).list();
	}
	
	@Override
	public <E>List<E> findBySqlBuildObject(String sql, Map<String, Object> params, Class<E> transformersClass, Integer page, Integer rows){
		SQLQuery q = this.getCurrentSession().createSQLQuery(sql);
		setParams(q, params);
		q.setResultTransformer(Transformers.aliasToBean(transformersClass));
		if(null != rows){
			q.setMaxResults(rows);
			if(null != page){
				q.setFirstResult((page-1)*rows);
			}
		}
		@SuppressWarnings("unchecked")
		List<E> list = q.list();
		return list;
	}
	@Override
	public <E>E findBySqlBuildObjectOne(String sql, Map<String, Object> params, Class<E> transformersClass){
		SQLQuery q = this.getCurrentSession().createSQLQuery(sql);
		setParams(q, params);
		q.setResultTransformer(Transformers.aliasToBean(transformersClass));
		q.setMaxResults(1);
		@SuppressWarnings("unchecked")
		E e = (E) q.uniqueResult();
		return e;
	}

	@Override
	public Object executeSqlNonUpdate(String sql, Map<String, Object> params) {
		SQLQuery q = this.getCurrentSession().createSQLQuery(sql);
		setParams(q, params);
		return q.uniqueResult();
	}
	
	@Override
	public int executeSql(String sql) {
		SQLQuery q = this.getCurrentSession().createSQLQuery(sql);
		return q.executeUpdate();
	}
	

	@Override
	public int executeSql(String sql, Map<String, Object> params) {
		SQLQuery q = this.getCurrentSession().createSQLQuery(sql);
		setParams(q, params);
		return q.executeUpdate();
	}

	@Override
	public BigInteger countBySql(String sql) {
		SQLQuery q = this.getCurrentSession().createSQLQuery(sql);
		return (BigInteger) q.uniqueResult();
	}

	@Override
	public BigInteger countBySql(String sql, Map<String, Object> params) {
		SQLQuery q = this.getCurrentSession().createSQLQuery(sql);
		setParams(q, params);
		Object obj = q.uniqueResult();
		return new BigInteger(String.valueOf(null == obj ? "0" : obj));
	}

	@Override
	public PageModel findAllUser(int offset, int pagesize) {
		String queryCountHql = "select count(*) from com.web.entity.Person";
		Query query = this.getCurrentSession().createQuery(queryCountHql);
		int total = ((Long) query.uniqueResult()).intValue();
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ").append(Person.class.getSimpleName())
				.append(" a ");
		sff.append(" where 1=1");
		sff.append(" order by time desc");
		List datas = this.getCurrentSession().createQuery(sff.toString())
				.setFirstResult(offset).setMaxResults(pagesize).list();
		// 得到结果集
		PageModel pm = new PageModel();
		pm.setTotal(total);
		pm.setDatas(datas);

		return pm;
	}

	@Override
	public List<T> getList(String sff) {
		List<T> datas = this.getCurrentSession().createQuery(sff).list();
		return datas;
	}

	@Override
	public List<TxwxGl> getTxwxGlList() {
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ").append(TxwxGl.class.getSimpleName())
				.append(" a ");
		sff.append(" where 1=1");
		List<TxwxGl> datas = this.getCurrentSession()
				.createQuery(sff.toString()).list();
		return datas;
	}

	/*
	 * @Override public List<Tgxt> getGxtList(String fl) { StringBuffer sff =
	 * new StringBuffer();
	 * sff.append("select a from ").append(Tgxt.class.getSimpleName
	 * ()).append(" a "); sff.append(" where 1=1"); if(fl!=null){
	 * if(!fl.equals("")){ sff.append(" and gxtfl='"+fl+"'"); } } List<Tgxt>
	 * datas = this.getCurrentSession().createQuery(sff.toString()).list();
	 * return datas; }
	 */

	@Override
	public List<Tgsdz> getGqbdzList(String fl) {
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ").append(Tgsdz.class.getSimpleName())
				.append(" a ");
		sff.append(" where 1=1");
		if (fl != null) {
			if (!fl.equals("")) {
				sff.append(" and qublb='" + fl + "'");
			}
		}
		List<Tgsdz> datas = this.getCurrentSession()
				.createQuery(sff.toString()).list();
		return datas;
	}

	/*
	 * @Override public List<Tgxt> findGxtOne(String hql, Map<String, Object>
	 * params, int page, int rows) { Query q =
	 * this.getCurrentSession().createQuery(hql); if (params != null &&
	 * !params.isEmpty()) { for (String key : params.keySet()) {
	 * q.setParameter(key, params.get(key)); } } return q.setFirstResult((page -
	 * 1) * rows).setMaxResults(rows).list(); }
	 */

	@Override
	public List<Tgsdz> findGqbdzOne(String hql, Map<String, Object> params,
			int page, int rows) {
		Query q = this.getCurrentSession().createQuery(hql);
		if (params != null && !params.isEmpty()) {
			for (String key : params.keySet()) {
				q.setParameter(key, params.get(key));
			}
		}
		return q.setFirstResult((page - 1) * rows).setMaxResults(rows).list();
	}

	@Override
	public List<TxwxGl> findTxwxGlOne(String hql, Map<String, Object> params,
			int page, int rows) {
		Query q = this.getCurrentSession().createQuery(hql);
		if (params != null && !params.isEmpty()) {
			for (String key : params.keySet()) {
				q.setParameter(key, params.get(key));
			}
		}
		return q.setFirstResult((page - 1) * rows).setMaxResults(rows).list();
	}

	@Override
	public List<TczdXz> findGqbCzdOne(String hql, Map<String, Object> params,
			int page, int rows) {
		Query q = this.getCurrentSession().createQuery(hql);
		if (params != null && !params.isEmpty()) {
			for (String key : params.keySet()) {
				q.setParameter(key, params.get(key));
			}
		}
		return q.setFirstResult((page - 1) * rows).setMaxResults(rows).list();
	}

	/**
	 * 保存股学堂对象
	 */
	/*
	 * @Override public Serializable save(Tgxt o) { if (o != null) { return
	 * this.getCurrentSession().save(o); } return null; }
	 *//**
	 * 复写股学堂编辑获取实体
	 * 
	 * @see com.admin.dao.BaseDaoI#getGxt(java.lang.Class, java.io.Serializable)
	 */
	/*
	 * 
	 * @Override public Tgxt getGxt(Class<Tgxt> c, Serializable id) { return
	 * (Tgxt) this.getCurrentSession().get(c, id); }
	 */

	/*
	 * @Override public void update(Tgxt o) { if (o != null) {
	 * this.getCurrentSession().update(o); } }
	 * 
	 * @Override public void delete(Tgxt o) { if (o != null) {
	 * this.getCurrentSession().delete(o); } }
	 */

	@Override
	public Tgsdz getGqbdz(String hql, Map<String, Object> params) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public AppVersion getAppVersion() {
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ").append(AppVersion.class.getSimpleName())
				.append(" a ");
		sff.append(" where 1=1");
		List<AppVersion> datas = this.getCurrentSession()
				.createQuery(sff.toString()).list();
		AppVersion app = new AppVersion();
		if (datas.size() > 0) {
			app = datas.get(0);
		}
		return app;
	}

	/**
	 * 获取猜涨跌实体list
	 */
	@Override
	public List<TczdXz> getCzdList() {
		StringBuffer sff = new StringBuffer();
		String timeTp = TimeUtils.getTime("yyyy-MM-dd") + " 09:00:00";
		sff.append("select a from ").append(TczdXz.class.getSimpleName())
				.append(" a ");
		sff.append(" where 1=1 and cdzt ='03' and xztime <='" + timeTp + "'");
		List<TczdXz> datas = this.getCurrentSession()
				.createQuery(sff.toString()).list();
		return datas;
	}

	@Override
	public List<TcpApplication> getCpList(String userid) {
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ")
				.append(TcpApplication.class.getSimpleName()).append(" a ");
		sff.append(" where 1=1");
		if (userid != null) { // 当投资顾问自我查看申请列表时只能看到自己的申请列表
			if (!userid.equals("")) {
				sff.append(" and userid='" + userid + "'");
			}
		} else {// 当首页查看投顾产品申请列表时只能看到审核通过的
			sff.append(" and shzt='1'");
		}
		List<TcpApplication> datas = this.getCurrentSession()
				.createQuery(sff.toString()).list();
		return datas;
	}

	@Override
	public List<WcpApplication> getWcpList(String userid) {
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ")
				.append(WcpApplication.class.getSimpleName()).append(" a ");
		sff.append(" where 1=1");
		if (userid != null) { // 当投资顾问自我查看申请列表时只能看到自己的申请列表
			if (!userid.equals("")) {
				sff.append(" and userid='" + userid + "'");
			}
		} else {// 当首页查看投顾产品申请列表时只能看到审核通过的
			sff.append(" and shzt='1'");
		}
		List<WcpApplication> datas = this.getCurrentSession()
				.createQuery(sff.toString()).list();
		return datas;
	}

	/**
	 * 执行原生的SQL查询
	 */
	@Override
	public List<Object[]> findZjdr(String sql) {
		SQLQuery query = this.getCurrentSession().createSQLQuery(sql);
		List<Object[]> results = query.list(); // 因为只有查询一个列，所以返回的List是List<Object>
		return results;
	}


	
	@Override
	public T get(String hql,String objectName) {
		Query q = this.getCurrentSession().createQuery(hql);
		q.setLockMode(objectName, LockMode.UPGRADE);
		List<T> l = q.list();
		if (l != null && l.size() > 0) {
			return l.get(0);
		}
		return null;
	}

	
	private void setParams(Query q, Map<String, Object> params){
		if (params != null && !params.isEmpty()) {
			for (String key : params.keySet()) {
				Object value = params.get(key);
				if(value instanceof Collection<?>){
					q.setParameterList(key, (Collection<?>)value);
				}else if(value instanceof Object[]){
					q.setParameterList(key, (Object[])value);
				}else{
					q.setParameter(key, params.get(key));
				}
			}
		}
	}

}
