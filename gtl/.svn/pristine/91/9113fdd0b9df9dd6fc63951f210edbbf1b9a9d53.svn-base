package com.admin.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URLDecoder;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.admin.model.Ad;
import com.admin.model.CollectionTemplateConfig;
import com.admin.model.Log;
import com.admin.model.LoginUser;
import com.admin.model.Tpinglun;
import com.admin.pageModel.DataGrid;

import com.admin.pageModel.Json;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.service.AdServiceI;
import com.admin.service.LogServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.PinglunServiceI;
import com.admin.service.UserServiceI;
import com.admin.util.ConfigUtil;
import com.admin.util.InfoUtil;
import com.alibaba.fastjson.JSONObject;
import com.web.util.TimeUtils;

/**
 * 评论管理控制器
 * 
 * @author
 * 
 */
@Controller
@RequestMapping("/pinglunController")
public class PinglunController extends BaseController {

	@Autowired
	private PinglunServiceI service;

	@Autowired
	private LogServiceI logService;

	@Autowired
	private LoginUserServiceI loginUserServiceI;

	/**
	 * 页面跳转
	 */
	@RequestMapping("/pinglun")
	public String pinglun(HttpServletResponse response,
			HttpServletRequest request) throws IOException {
		return "/admin/pinglun/pinglun";
	}

	/**
	 * 页面跳转
	 */
	@RequestMapping("/pl")
	public String pl(HttpServletResponse response, HttpServletRequest request)
			throws IOException {
		return "/admin/pinglun/pl";
	}

	/**
	 * 处理页面跳转
	 */
	@RequestMapping("/dealPage")
	public String dealPage(String id, HttpServletResponse response,
			HttpServletRequest request) throws Exception {
		Tpinglun t = service.get(id);
		LoginUser user = loginUserServiceI.getLoginUser(t.getUserid());
		if (user != null) {
			t.setUserid(user.getName());
		} else {
			t.setUserid("");
		}
		request.setAttribute("t", t);
		return "/admin/pinglun/pldeal";
	}

	/**
	 * 获取数据表格
	 * 
	 * @param user
	 * @return
	 * @throws IOException
	 */
	@RequestMapping("/dataGrid")
	@ResponseBody
	public DataGrid dataGrid(Tpinglun tp, PageHelper ph,
			HttpServletResponse response, HttpServletRequest request)
			throws IOException {
		response.setCharacterEncoding("utf-8");
		DataGrid d = service.dataGrid(tp, ph);
		return d;
	}

	/**
	 * 获取数据表格
	 * 
	 * @param user
	 * @return
	 * @throws IOException
	 */
	@RequestMapping("/dataGrid1")
	@ResponseBody
	public DataGrid dataGrid1(Tpinglun tp, PageHelper ph,
			HttpServletResponse response, HttpServletRequest request)
			throws IOException {
		response.setCharacterEncoding("utf-8");
		DataGrid d = service.dataGrid1(tp, ph);
		return d;
	}

	/**
	 * 跳过
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/tg")
	@ResponseBody
	public Json tg(String id, HttpSession session, HttpServletRequest request) {
		SessionInfo sessionInfo = (SessionInfo) session.getAttribute(ConfigUtil
				.getSessionInfoName());
		Json j = new Json();
		if (id != null && !id.equalsIgnoreCase(sessionInfo.getId())) {// 不能操作自己
			try {
				service.tg(id);
				j.setMsg("操作成功！");
				j.setSuccess(true);

				Log log = new Log();
				log.setType("update");// 操作描述
				log.setAuthor(InfoUtil.getUser(session));// 操作员
				log.setIp(InfoUtil.getIpAddr(request));// ip
				log.setTteble("t_pinglun");// 操作的表
				log.setTid(id);// 操作的ID
				log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
				logService.add(log);

			} catch (Exception e) {
				j.setMsg("操作失败!" + e.getMessage());
				j.setSuccess(false);
			}
		}
		return j;
	}

	/**
	 * 删除
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/delete")
	@ResponseBody
	public Json delete(String id, HttpSession session,
			HttpServletRequest request) {
		SessionInfo sessionInfo = (SessionInfo) session.getAttribute(ConfigUtil
				.getSessionInfoName());
		Json j = new Json();
		if (id != null && !id.equalsIgnoreCase(sessionInfo.getId())) {// 不能操作自己
			try {
				service.delete(id);
				j.setMsg("删除成功！");
				j.setSuccess(true);

				Log log = new Log();
				log.setType("delete");// 操作描述
				log.setAuthor(InfoUtil.getUser(session));// 操作员
				log.setIp(InfoUtil.getIpAddr(request));// ip
				log.setTteble("t_pinglun");// 操作的表
				log.setTid(id);// 操作的ID
				log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
				logService.add(log);

			} catch (Exception e) {
				j.setMsg("删除失败!" + e.getMessage());
				j.setSuccess(false);
			}
		}
		return j;
	}

	/**
	 * 批量删除
	 * 
	 * @param ids
	 *            ('0','1','2')
	 * @return
	 */
	@RequestMapping("/pldelete")
	@ResponseBody
	public Json pljy(String ids, HttpSession session, HttpServletRequest request) {
		Json j = new Json();
		if (ids != null && ids.length() > 0) {
			for (String id : ids.split(",")) {
				if (id != null) {
					this.delete(id, session, request);
				}
			}
		}
		j.setMsg("批量删除成功！");
		j.setSuccess(true);
		return j;
	}

	/**
	 * 举报处理
	 */
	@RequestMapping("/deal")
	@ResponseBody
	public void deal(String id, String jg, String title, String content,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		JSONObject j = new JSONObject();
		String callback = (String) request.getParameter("callback");
		try {
			id = URLDecoder.decode(id, "UTF-8");
			jg = URLDecoder.decode(jg, "UTF-8");
			title = URLDecoder.decode(title, "UTF-8");
			content = URLDecoder.decode(content, "UTF-8");
			Tpinglun t = service.get(id);
			String fbrid = t.getUserid();// 发布人ID
			String jbrid = t.getJbrid();// 举报人ID

			if (jg.equals("2")) {// 严重违反规定
				service.pb(fbrid);
				service.fh(fbrid);
			} else if (jg.equals("3")) {// 轻度违反规定
				service.pb(fbrid);
			} else if (jg.equals("4")) {// 恶意举报
				String[] a = jbrid.split(";");
				for (int i = 0; i < a.length; i++) {
					service.jg(a[i], title, content);
				}

			} else if (jg.equals("5")) {// 长期恶意举报
				String[] a = jbrid.split(";");
				for (int i = 0; i < a.length; i++) {
					service.jg(a[i], title, content);
					service.fh(a[i]);
				}

			}
			// 修改评论状态
			t.setStatus(jg);
			service.update1(t);
			j.put("success", true);
			j.put("msg", "处理成功");
		} catch (Exception e) {
			j.put("success", false);
			j.put("msg", "处理失败！错误：" + e.getMessage());
		}

		String retStr = callback + "(" + j.toJSONString() + ")";
		response.getWriter().print(retStr);
	}
}
