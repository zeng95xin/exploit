package com.admin.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.ExchangeGoodsDaoI;
import com.admin.model.ExchangeGoods;
import com.admin.model.GoodsManagement;
import com.admin.model.LoginUser;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.User;
import com.admin.service.ExchangeGoodsServiceI;
import com.admin.service.GoodsManagementServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.UserServiceI;

@Service
public class ExchangeGoodsServiceImpl implements ExchangeGoodsServiceI {

	@Autowired
	private ExchangeGoodsDaoI exchangeGoodsDao;
	@Autowired
	private GoodsManagementServiceI goodsManagementServiceI;
	@Autowired
	private LoginUserServiceI userServiceI;

	@Override
	public DataGrid dataGrid(ExchangeGoods exchangeGoods, PageHelper ph) {
		DataGrid dg = new DataGrid();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from ExchangeGoods t ";
		List<ExchangeGoods> l = exchangeGoodsDao.find(
				hql + whereHql(exchangeGoods, params) + orderHql(ph), params,
				ph.getPage(), ph.getRows());
		List<ExchangeGoods> eds = new ArrayList<ExchangeGoods>();
		GoodsManagement goodsManagement = null;
		LoginUser user = null;
		for (ExchangeGoods exchangeGoods2 : l) {
			if (exchangeGoods2 != null
					&& StringUtils.isNotBlank(exchangeGoods2.getGoodsId())) {
				goodsManagement = goodsManagementServiceI.get(exchangeGoods2
						.getGoodsId());
				if (goodsManagement!=null) {
					if (StringUtils.isNotBlank(goodsManagement.getGoodsName())) {
						
						exchangeGoods2.setGoodsName(goodsManagement.getGoodsName());
					}
					
					if (StringUtils.isNotBlank(goodsManagement.getMallName())) {
						
						exchangeGoods2.setMallName(goodsManagement.getMallName());
					}
				}
				
				
			}
			if (exchangeGoods2 != null
					&& StringUtils.isNotBlank(exchangeGoods2.getUserId())) {
				user = userServiceI.getLoginUser(exchangeGoods2.getUserId());
				if (user!= null) {
					if (StringUtils.isNotBlank(user.getName())) {
						
						exchangeGoods2.setUserName(user.getName());
					}
					if (StringUtils.isNotBlank(user.getNickname())) {
						
						exchangeGoods2.setUserNickname(user.getNickname());
					}
				}
				
			}
			eds.add(exchangeGoods2);
		}
		dg.setRows(eds);
		dg.setTotal(exchangeGoodsDao.count(
				"select count(*) " + hql + whereHql(exchangeGoods, params),
				params));
		return dg;
	}

	private String whereHql(ExchangeGoods exchangeGoods,
			Map<String, Object> params) {
		String hql = "";
		if (exchangeGoods != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(exchangeGoods.getUserId())) {
				hql += " and t.USERID = :userId";
				params.put("userId", exchangeGoods.getUserId());
			}
			if (StringUtils.isNotBlank(exchangeGoods.getExchangeNum())) {
				hql += " and t.exchangeNum = :exchangeNum";
				params.put("exchangeNum", exchangeGoods.getExchangeNum());
			}
			if (StringUtils.isNotBlank(exchangeGoods.getExchangeTime())) {
				hql += " and t.exchangeTime like :exchangeTime";
				params.put("exchangeTime",
						"%%" + exchangeGoods.getExchangeTime() + "%%");
			}
			if (StringUtils.isNotBlank(exchangeGoods.getGoodsId())) {
				hql += " and t.goodsId = :goodsId";
				params.put("goodsId", exchangeGoods.getGoodsId());
			}
			if (StringUtils.isNotBlank(exchangeGoods.getBeginTime())) {
				hql += " and t.exchangeTime >= :beginTime";
				params.put("beginTime", exchangeGoods.getBeginTime());
			}
			if (StringUtils.isNotBlank(exchangeGoods.getEndTime())) {
				hql += " and t.exchangeTime <= :endTime";
				params.put("endTime", exchangeGoods.getEndTime());
			}
			if (StringUtils.isNotBlank(exchangeGoods.getState())) {
				hql += " and t.state = :state";
				params.put("state", exchangeGoods.getState());
			}
		}
		return hql;
	}

	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void add(ExchangeGoods exchangeGoods) throws Exception {
		ExchangeGoods u = new ExchangeGoods();
		BeanUtils.copyProperties(exchangeGoods, u);
		exchangeGoodsDao.save(u);
	}

	@Override
	public ExchangeGoods get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		ExchangeGoods t = exchangeGoodsDao.get(
				"select distinct t from ExchangeGoods t where t.id = :id",
				params);
		if (t != null && StringUtils.isNotBlank(t.getGoodsId())) {
			GoodsManagement goodsManagement = goodsManagementServiceI.get(t
					.getGoodsId());
			t.setGoodsName(goodsManagement.getGoodsName());
			t.setMallName(goodsManagement.getMallName());
		}
		if (t != null && StringUtils.isNotBlank(t.getUserId())) {
			LoginUser user = userServiceI.getLoginUser(t.getUserId());
			t.setUserName(user.getName());
		}
		return t;
	}

	@Override
	public void edit(ExchangeGoods exchangeGoods) throws Exception {

		exchangeGoodsDao.update(exchangeGoods);
	}

	@Override
	public void delete(String id) {
		exchangeGoodsDao.delete(exchangeGoodsDao.get(ExchangeGoods.class, id));
	}

	@Override
	public List<ExchangeGoods> exchangeGoodsList() {
		List<ExchangeGoods> t = exchangeGoodsDao.find("from ExchangeGoods t ");
		List<ExchangeGoods> eds = new ArrayList<ExchangeGoods>();
		GoodsManagement goodsManagement = null;
		LoginUser user = null;
		for (ExchangeGoods exchangeGoods2 : t) {
			if (exchangeGoods2 != null
					&& StringUtils.isNotBlank(exchangeGoods2.getGoodsId())) {
				goodsManagement = goodsManagementServiceI.get(exchangeGoods2
						.getGoodsId());
				exchangeGoods2.setGoodsName(goodsManagement.getGoodsName());
				exchangeGoods2.setMallName(goodsManagement.getMallName());
			}
			if (exchangeGoods2 != null
					&& StringUtils.isNotBlank(exchangeGoods2.getUserId())) {
				user = userServiceI.getLoginUser(exchangeGoods2.getUserId());
				if (user != null) {
					exchangeGoods2.setUserName(user.getName());
				}
			}
			eds.add(exchangeGoods2);
		}
		return eds;
	}

	@Override
	public List<ExchangeGoods> exchangeGoodsListByUserId(String userid,
			String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		Map<String, Object> params = new HashMap<String, Object>();
		List<ExchangeGoods> t = exchangeGoodsDao.find(
				"from ExchangeGoods t where userid='" + userid
						+ "' order by exchangeTime ", Integer.valueOf(page),
				Integer.valueOf(rows));
		List<ExchangeGoods> eds = new ArrayList<ExchangeGoods>();
		GoodsManagement goodsManagement = null;
		LoginUser user = null;
		for (ExchangeGoods exchangeGoods2 : t) {
			if (exchangeGoods2 != null
					&& StringUtils.isNotBlank(exchangeGoods2.getGoodsId())) {
				goodsManagement = goodsManagementServiceI.get(exchangeGoods2
						.getGoodsId());
				exchangeGoods2.setGoodsName(goodsManagement.getGoodsName());
				exchangeGoods2.setMallName(goodsManagement.getMallName());
			}
			if (exchangeGoods2 != null
					&& StringUtils.isNotBlank(exchangeGoods2.getUserId())) {
				user = userServiceI.getLoginUser(exchangeGoods2.getUserId());
				exchangeGoods2.setUserName(user.getName());
			}
			eds.add(exchangeGoods2);
		}
		return eds;
	}

	@Override
	public int getCount(String userId) {
		String hql = "select count(*) from ExchangeGoods where 1=1";
		if (StringUtils.isNotBlank(userId)) {
			hql += " and USERID='" + userId + "'";
		}
		return exchangeGoodsDao.count(hql).intValue();
	}

	@Override
	public ExchangeGoods find(String id) {
		String hql = "from ExchangeGoods where id='" + id + "'";
		return exchangeGoodsDao.get(hql);
	}

}
