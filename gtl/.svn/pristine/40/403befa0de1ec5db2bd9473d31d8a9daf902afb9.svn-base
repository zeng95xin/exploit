package com.admin.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.WcpBzDaoI;
import com.admin.model.WcpBz;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.WcpBzServiceI;

@Service
public class WcpBzServiceImpl implements WcpBzServiceI {

	@Autowired
	private WcpBzDaoI wcpBzDao;

	@Override
	public DataGrid dataGrid(WcpBz wcpBz, PageHelper ph) {
		DataGrid dg = new DataGrid();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from WcpBz t ";
		List<WcpBz> l = wcpBzDao.find(hql + whereHql(wcpBz, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		dg.setRows(l);
		dg.setTotal(wcpBzDao.count(
				"select count(*) " + hql + whereHql(wcpBz, params), params));
		return dg;
	}

	private String whereHql(WcpBz wcpBz, Map<String, Object> params) {
		String hql = "";
		if (wcpBz != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(wcpBz.getTitle())) {
				hql += " and t.title like :title";
				params.put("title", "%%" + wcpBz.getTitle() + "%%");
			}
			if (StringUtils.isNotBlank(wcpBz.getUserName())) {
				hql += " and t.userName like :userName";
				params.put("userName", "%%" + wcpBz.getUserName() + "%%");
			}
			if (StringUtils.isNotBlank(wcpBz.getUserId())) {
				hql += " and t.userId = :userId";
				params.put("userId", wcpBz.getUserId());
			}
			if (StringUtils.isNotBlank(wcpBz.getReleaseTime())) {
				hql += " and t.releaseTime like :releaseTime";
				params.put("releaseTime", "%%" + wcpBz.getReleaseTime() + "%%");
			}
			if (StringUtils.isNotBlank(wcpBz.getContent())) {
				hql += " and t.content like :content";
				params.put("content", "%%" + wcpBz.getContent() + "%%");
			}
		}
		return hql;
	}

	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void add(WcpBz wcpBz) throws Exception {
		WcpBz u = new WcpBz();
		BeanUtils.copyProperties(wcpBz, u);
		wcpBzDao.save(wcpBz);
	}

	@Override
	public WcpBz get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		WcpBz t = wcpBzDao.get(
				"select distinct t from WcpBz t where t.id = :id", params);
		return t;
	}

	@Override
	public void edit(WcpBz wcpBz) throws Exception {
		wcpBzDao.update(wcpBz);
	}

	@Override
	public void delete(String id) {
		wcpBzDao.delete(wcpBzDao.get(WcpBz.class, id));
	}

	@Override
	public List<WcpBz> wcpBzList() {
		List<WcpBz> t = wcpBzDao
				.find("from WcpBz t order by t.releaseTime desc");
		return t;
	}

}
