package com.admin.service.impl;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.MnSjZdDaoI;
import com.admin.model.MnSjZd;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.MnSjBmServiceI;
import com.admin.service.MnSjZdServiceI;
import com.web.util.TimeUtils;

@Service
public class MnSjZdServiceImpl implements MnSjZdServiceI {

	@Autowired
	private MnSjZdDaoI mnSjZdDao;
	
	@Autowired
	private MnSjBmServiceI mbs;

	@Override
	public DataGrid dataGrid(MnSjZd mnSjZd, PageHelper ph) {
		DataGrid dg = new DataGrid();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from MnSjZd t ";
		List<MnSjZd> l = mnSjZdDao.find(hql + whereHql(mnSjZd, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		int ii=0;
		List<MnSjZd> lm=new ArrayList<MnSjZd>();
		for (MnSjZd mnSjZd2 : l) {
			if (StringUtils.isNotBlank(mnSjZd2.getId())) {
				ii=mbs.sjpmCount(mnSjZd2.getId());
			}
			mnSjZd2.setCountNum(ii);
			lm.add(mnSjZd2);
		}
		dg.setRows(lm);
		dg.setTotal(mnSjZdDao.count(
				"select count(*) " + hql + whereHql(mnSjZd, params), params));
		return dg;
	}

	private String whereHql(MnSjZd mnSjZd, Map<String, Object> params) {
		String hql = "";
		if (mnSjZd != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(mnSjZd.getSjName())) {
				hql += " and t.sjName like :sjName";
				params.put("sjName", "%%" + mnSjZd.getSjName() + "%%");
			}

			if (StringUtils.isNotBlank(mnSjZd.getSjBeginTime())) {
				hql += " and t.sjBeginTime >= :sjBeginTime";
				params.put("sjBeginTime", mnSjZd.getSjBeginTime());
			}

			if (StringUtils.isNotBlank(mnSjZd.getSjEndTime())) {
				hql += " and t.sjEndTime <= :sjEndTime";
				params.put("sjEndTime", mnSjZd.getSjEndTime());
			}
			if (StringUtils.isNotBlank(mnSjZd.getChuShi())) {
				hql += " and t.chuShi like :chuShi";
				params.put("chuShi", "%%" + mnSjZd.getChuShi() + "%%");
			}
			if (StringUtils.isNotBlank(mnSjZd.getSjDwJl())) {
				hql += " and t.sjDwJl like :sjDwJl";
				params.put("sjDwJl", "%%" + mnSjZd.getSjDwJl() + "%%");
			}

			if (StringUtils.isNotBlank(mnSjZd.getSjSxfl())) {
				hql += " and t.sjSxfl like :sjSxfl";
				params.put("sjSxfl", "%%" + mnSjZd.getSjSxfl() + "%%");
			}

			if (StringUtils.isNotBlank(mnSjZd.getSjYhsl())) {
				hql += " and t.sjYhsl like :sjYhsl";
				params.put("sjYhsl", "%%" + mnSjZd.getSjYhsl() + "%%");
			}
		}
		return hql;
	}

	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	private String orderHql02(String addTime) {
		String orderString = "";
		if (StringUtils.isNotBlank(addTime)) {
			orderString = " order by sortnum asc, addTime desc";
		}
		return orderString;
	}

	@Override
	public void add(MnSjZd mnSjZd) throws Exception {
		MnSjZd u = new MnSjZd();
		mnSjZd.setAddTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		BeanUtils.copyProperties(mnSjZd, u);
		mnSjZdDao.save(mnSjZd);
	}

	@Override
	public MnSjZd get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		MnSjZd t = mnSjZdDao.get(
				"select distinct t from MnSjZd t where t.id = :id", params);
		return t;
	}

	@Override
	public void edit(MnSjZd mnSjZd) throws Exception {
		mnSjZdDao.update(mnSjZd);
	}

	@Override
	public void delete(String id) {
		mnSjZdDao.delete(mnSjZdDao.get(MnSjZd.class, id));
	}

	@Override
	public List<MnSjZd> mnSjZdList(MnSjZd mnSjZd, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String addtime = "1";
		Map<String, Object> params = new HashMap<String, Object>();
		List<MnSjZd> t = mnSjZdDao.find(
				"from MnSjZd t " + whereHql(mnSjZd, params)
						+ orderHql02(addtime), params, Integer.valueOf(page),
				Integer.valueOf(rows));

		return t;
	}

	@Override
	public int getCount(MnSjZd mnSjZd) {
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = "select count(*) from MnSjZd t "
				+ whereHql(mnSjZd, params);
		return mnSjZdDao.count(hql, params).intValue();
	}

	@Override
	public List<MnSjZd> getMnsjList() {

		String hql = " from MnSjZd t where 1=1 order by sjBeginTime desc ";
		List<MnSjZd> list = mnSjZdDao.find(hql);
		return list;
	}

	@Override
	public MnSjZd getBySjid(String sjid) {
		// TODO Auto-generated method stub
		String hql = " from MnSjZd t where 1=1 and sjid ";
		return null;
	}

	@Override
	public MnSjZd getDqSjs(String date) {
		// TODO Auto-generated method stub
		MnSjZd mnsj = null;
		String hql = " from MnSjZd t where 1=1 and sjBeginTime <= '" + date
				+ "' and sjEndTime >='" + date + "' order by sjBeginTime desc";
		List<MnSjZd> list = mnSjZdDao.find(hql);
		if (list.size() > 0) {
			mnsj = list.get(0);
		}
		return mnsj;
	}

	@Override
	public MnSjZd getDqJxSjs(String sjid, String date) {
		MnSjZd mnsj = null;

		String hql = " from MnSjZd t where 1=1 and id='" + sjid
				+ "' and sjBeginTime <= '" + date + "' and sjEndTime >='"
				+ date + "' order by sjBeginTime desc";
		List<MnSjZd> list = mnSjZdDao.find(hql);

		if (list.size() > 0) {
			mnsj = list.get(0);
		}
		return mnsj;
	}

}
