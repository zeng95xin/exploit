package com.admin.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.WebDaoI;
import com.admin.dao.XieyiDaoI;
import com.admin.model.Tgxt;
import com.admin.model.Xieyi;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.XieyiServiceI;
import com.web.entity.Person;
import com.web.util.TimeUtils;

@Service
public class XieyiServiceImpl implements XieyiServiceI {

	@Autowired
	private WebDaoI dao;

	@Autowired
	private XieyiDaoI xyDaoI;

	@Override
	public DataGrid dataGridForOne(Xieyi xy, PageHelper ph) {

		DataGrid dg = new DataGrid();
		List<Xieyi> ul = new ArrayList<Xieyi>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = "from Xieyi xy";
		List<Xieyi> l = xyDaoI.find(hql + whereHqlForOne(xy, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Xieyi x : l) {
				Xieyi u = new Xieyi();
				BeanUtils.copyProperties(x, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count(
				"select count(*) " + hql + whereHqlForOne(xy, params), params));
		return dg;
	}

	/**
	 * where 条件封装
	 * 
	 * @param p
	 * @param params
	 * @return
	 */
	private String whereHqlForOne(Xieyi xy, Map<String, Object> params) {
		String hql = "";
		if (xy != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(xy.getTheme())) {
				hql += " and xy.theme like :theme";
				params.put("theme", "%%" + xy.getTheme() + "%%");
			}
			if (StringUtils.isNotBlank(xy.getEditer())) {
				hql += " and xy.editer =:editer";
				params.put("editer", xy.getEditer());
			}

		}
		return hql;
	}

	/**
	 * 排序条件
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "  order by edittime desc";
		/*
		 * if (ph.getSort() != null && ph.getOrder() != null) { orderString =
		 * " order by t." + ph.getSort() + " " + ph.getOrder(); }
		 */
		return orderString;
	}

	@Override
	public void delete(String id) {
		xyDaoI.delete(xyDaoI.get(Xieyi.class, id));

	}

	@Override
	synchronized public void add(Xieyi xy) throws Exception {
		Xieyi x = new Xieyi();
		BeanUtils.copyProperties(xy, x);
		x.setTheme(xy.getTheme());
		x.setContent(xy.getContent());
		x.setEditer(xy.getEditer());
		x.setId(UUID.randomUUID().toString());
		x.setEdittime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		xyDaoI.save(x);

	}

	@Override
	public Person get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		Person t = dao.get("select distinct t from Person t  where t.id = :id",
				params);
		Person u = new Person();
		BeanUtils.copyProperties(t, u);
		return u;
	}

	@Override
	public Xieyi getXieyi(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		Xieyi t = xyDaoI.get(
				"select distinct t from Xieyi t  where t.id = :id", params);
		Xieyi u = new Xieyi();
		BeanUtils.copyProperties(t, u);
		return u;
	}

	@Override
	public void edit(Xieyi p) throws Exception {

		Xieyi u = xyDaoI.get(Xieyi.class, p.getId());
		//System.out.println("editImpl 》》》》》》》》》》》》》 " + p.getId());
		u.setTheme(p.getTheme());
		u.setContent(p.getContent());
		u.setEditer(p.getEditer());

		if (u.getEdittime() == null) {
			u.setEdittime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		}

		xyDaoI.update(u);

	}

	@Override
	public void update(Xieyi xy) throws Exception {
		xyDaoI.update(xy);

	}

	@Override
	public List<Xieyi> getList(String theme, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String hql = "from Xieyi where 1=1 ";
		if (StringUtils.isNotBlank(theme)) {
			hql += " and theme='" + theme + "' ";
		}
		hql += " order by edittime desc";
		List<Xieyi> list = xyDaoI.find(hql, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	String[] excelHeader = { "主题", "内容", "发布者", "发布时间" };

	@Override
	public int getCount(String theme) {
		String hql = "select count(*) from Xieyi where 1=1 ";
		if (StringUtils.isNotBlank(theme)) {
			hql = " and theme='" + theme + "'";
		}
		return xyDaoI.count(hql).intValue();
	}

	@Override
	public HSSFWorkbook export(List<Xieyi> list) {
		HSSFWorkbook wb = new HSSFWorkbook();
		HSSFSheet sheet = wb.createSheet("Xieyi");
		HSSFRow row = sheet.createRow((int) 0);
		HSSFCellStyle style = wb.createCellStyle();
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);

		for (int i = 0; i < excelHeader.length; i++) {
			HSSFCell cell = row.createCell(i);
			cell.setCellValue(excelHeader[i]);
			cell.setCellStyle(style);
			sheet.autoSizeColumn(i);
		}

		for (int i = 0; i < list.size(); i++) {
			row = sheet.createRow(i + 1);
			Xieyi p = list.get(i);
			row.createCell(0).setCellValue(p.getTheme());
			row.createCell(1).setCellValue(p.getContent());
			row.createCell(2).setCellValue(p.getEditer());
			row.createCell(3).setCellValue(p.getEdittime());

		}
		return wb;
	}

}
