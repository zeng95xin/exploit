package com.admin.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.admin.model.Ad;
import com.admin.model.CollectionTemplateConfig;
import com.admin.model.Log;
import com.admin.model.LoginUser;
import com.admin.model.News;
import com.admin.pageModel.DataGrid;

import com.admin.pageModel.Json;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.pc.LinkTypeData;
import com.admin.pc.Test;
import com.admin.service.AdServiceI;
import com.admin.service.CollectionTemplateConfigServiceI;
import com.admin.service.LogServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.NewsServiceI;
import com.admin.service.UserServiceI;
import com.admin.util.ConfigUtil;
import com.admin.util.InfoUtil;
import com.web.util.TimeUtils;

/**
 * 数据采集管理控制器
 * 
 * @author
 * 
 */
@Controller
@RequestMapping("/newsController")
public class NewsController extends BaseController {

	@Autowired
	private NewsServiceI service;

	@Autowired
	private LogServiceI logService;

	@Autowired
	private CollectionTemplateConfigServiceI sjcjServiceI;

	/**
	 * 获取数据表格
	 * 
	 * @param
	 * @return
	 * @throws IOException
	 */
	@RequestMapping("/dataGrid")
	@ResponseBody
	public DataGrid dataGrid(News news, PageHelper ph,
			HttpServletResponse response, HttpServletRequest request)
			throws IOException {
		response.setCharacterEncoding("utf-8");
		DataGrid d = service.dataGrid(news, ph);
		return d;
	}

	/**
	 * 跳转到列表页面
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/news")
	public String ad(HttpServletRequest request) {
		return "/admin/news/news";
	}

	/**
	 * 跳转到新闻转移界面
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/zy")
	public String zy(String ids, HttpServletRequest request) {
		request.setAttribute("ids", ids);
		return "/admin/news/newsZy";
	}

	/**
	 * 跳转到修改页面
	 * 
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/editPage")
	public String editPage(String id, HttpServletRequest request)
			throws Exception {
		News n = service.get(id);
		request.setAttribute("news", n);
		return "/admin/news/newsEdit";
	}

	/**
	 * 删除
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/delete")
	@ResponseBody
	public Json delete(String id, HttpSession session,
			HttpServletRequest request) {
		SessionInfo sessionInfo = (SessionInfo) session.getAttribute(ConfigUtil
				.getSessionInfoName());
		Json j = new Json();
		if (id != null && !id.equalsIgnoreCase(sessionInfo.getId())) {// 不能操作自己
			try {
				service.delete(id);
				j.setMsg("删除成功！");
				j.setSuccess(true);

				Log log = new Log();
				log.setType("delete");// 操作描述
				log.setAuthor(InfoUtil.getUser(session));// 操作员
				log.setIp(InfoUtil.getIpAddr(request));// ip
				log.setTteble("news");// 操作的表
				log.setTid(id);// 操作的ID
				log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
				logService.add(log);

			} catch (Exception e) {
				j.setMsg("删除失败!" + e.getMessage());
				j.setSuccess(false);
			}
		}
		return j;
	}

	/**
	 * 修改
	 * 
	 * @return
	 */
	@RequestMapping("/update")
	@ResponseBody
	public Json update(News news, HttpServletRequest request,
			HttpSession session) {
		Json j = new Json();
		try {
			String content = request.getParameter("content");
			service.update(news);

			j.setSuccess(true);
			j.setMsg("添加成功！");
			j.setObj(news);

			Log log = new Log();
			log.setType("update");// 操作描述
			log.setAuthor(InfoUtil.getUser(session));// 操作员
			log.setIp(InfoUtil.getIpAddr(request));// ip
			log.setTteble("news");// 操作的表
			log.setTid(news.getId());// 操作的ID
			log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
			logService.add(log);

		} catch (Exception e) {
			j.setMsg(e.getMessage());
		}
		return j;
	}

	/**
	 * 批量删除
	 * 
	 * @param ids
	 *            ('0','1','2')
	 * @return
	 */
	@RequestMapping("/pldelete")
	@ResponseBody
	public Json pljy(String ids, HttpSession session, HttpServletRequest request) {
		Json j = new Json();
		if (ids != null && ids.length() > 0) {
			for (String id : ids.split(",")) {
				if (id != null) {
					this.delete(id, session, request);
				}
			}
		}
		j.setMsg("批量删除成功！");
		j.setSuccess(true);
		return j;
	}

	@RequestMapping("/add")
	@ResponseBody
	public Json add(String id, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		Json j = new Json();
		try {

			CollectionTemplateConfig ctc = sjcjServiceI.get(id);
			String path = ctc.getCjdz();// 采集地址
			String re1 = ctc.getBtreg();// 标题
			String re2 = ctc.getNrreg();// 内容
			String re3 = ctc.getFyreg();// 分页
			String zf = ctc.getZfjreg();// 字符集

			Test t = new Test();
			// 1
			List<LinkTypeData> list = t.getDatasByCssQuery(path, re1);
			// 2
			List<LinkTypeData> list_1 = new ArrayList<LinkTypeData>();

			// 扒取第一层链接
			for (int i = 0; i < list.size(); i++) {
				StringBuffer sb = new StringBuffer();
				// 父级url
				String url = list.get(i).getLinkHref();
				// 父级文章
				String content_1 = t.getStringByReg(url, re2, zf);
				sb.append(content_1);

				// 获取子集url
				List<LinkTypeData> l = t.getDatasByCssQuery(url, re3);

				if (l.size() > 0) {
					for (int k = 0; k < l.size(); k++) {
						String con = t.getStringByReg(l.get(i).getLinkHref(),
								re2, zf);
						sb.append(con);
					}
				}

				LinkTypeData lkd = new LinkTypeData();
				lkd.setContent(sb.toString());
				lkd.setLinkHref(url);
				lkd.setLinkText(list.get(i).getLinkText());
				list_1.add(lkd);
			}

			for (int a = 0; a < list_1.size(); a++) {
				String link = list_1.get(a).getLinkHref();
				String text = list_1.get(a).getLinkText();
				String content = list_1.get(a).getContent();
				content = content.replaceAll("<a.*?</a>", "");// 去掉文中的超链接
				News n = new News();
				n.setContent(content);
				n.setTitle(text);
				n.setUrl(link);
				service.add(n);
			}

			// 修改数据采集次数和采集量
			int cs = Integer.valueOf(ctc.getCjcs()) + 1;
			ctc.setCjcs(cs + "");
			int xxl = Integer.valueOf(ctc.getCjxxl()) + list_1.size();
			ctc.setCjxxl(xxl + "");
			sjcjServiceI.edit2(ctc);

			j.setMsg("采集成功！请到新闻列表中查看！");
			j.setSuccess(true);

		} catch (Exception e) {
			j.setMsg("采集失败！错误:" + e.getMessage());
			j.setSuccess(false);
		}
		return j;
	}

	/**
	 * 批量转移
	 * 
	 * @param ids
	 *            ('0','1','2')
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/zhuanyi")
	@ResponseBody
	public Json zhuanyi(String ids, String zt, String xwxfl, String gxtfl,
			String gqbfl, HttpServletRequest request) throws Exception {
		Json j = new Json();
		if (StringUtils.isNotBlank(zt)) {
			if (zt.equals("gxt")) {
				if (ids != null && ids.length() > 0) {
					for (String id : ids.split(",")) {
						if (id != null) {
							News n = service.get(id);
							service.toGxt(n, gxtfl);
							service.Zy(id, "1");
						}
					}
				}
			} else if (zt.equals("gqb")) {
				if (ids != null && ids.length() > 0) {
					for (String id : ids.split(",")) {
						if (id != null) {
							News n = service.get(id);
							service.toGqb(n, gqbfl);
							service.Zy(id, "1");
						}
					}
				}
			} else if (zt.equals("xwx")) {
				if (ids != null && ids.length() > 0) {
					for (String id : ids.split(",")) {
						if (id != null) {
							News n = service.get(id);
							service.toXwx(n, xwxfl);
							service.Zy(id, "1");
						}
					}
				}
			}
		}

		j.setMsg("批量转移成功！");
		j.setSuccess(true);
		return j;
	}
}
