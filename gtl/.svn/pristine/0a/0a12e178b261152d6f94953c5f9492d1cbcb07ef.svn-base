package com.lcjh.controller.api.pay;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.Range;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.TPayOrder;
import com.admin.service.AppPayServiceI;
import com.admin.util.InfoUtil;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.lcjh.biz.PayBiz;
import com.lcjh.enummole.PayOrderTypeEnum;
import com.lcjh.result.BooleanBaseResult;
import com.lcjh.result.BooleanObjectResult;
import com.log.ProjectConfig;
import com.pingplusplus.Pingpp;
import com.pingplusplus.model.Charge;
import com.web.exception.BusinessValidateException;
import com.web.exception.CodeEnum;
import com.web.exception.PatternException;
import com.web.util.IDUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

/**
 * 支付controller
 * 
 * @author Administrator
 */
@Controller
@RequestMapping("/api/pay2")
@Validated
@Api(tags = "-api-pay2", description = "偷听，打赏，提问，支付,有关接口")
public class AppPay2Controller {
	/*
	 * private static final String pingppAppId = "app_iz1OG84inLq5q1SC"; private
	 * static final String pingppApiKey = "sk_test_LaP8qL4GGqD4mvD0uHmTKavL";
	 */
	private static final Logger logger = LoggerFactory.getLogger(AppPay2Controller.class);
	private static final String pingppAppId = ProjectConfig.pingppAppId;
	private static final String pingppApiKey = ProjectConfig.pingppApiKey;
	@Autowired
	private AppPayServiceI appPayServiceI;
	@Autowired
	private PayBiz payBiz;

	/**
	 * 选择渠道返回凭据
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/getCharge", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	@ApiOperation(value = "获取支付凭据", notes = "", httpMethod = "POST")
	public BooleanObjectResult<Charge> getCharge(HttpServletRequest req,
			@RequestParam(required = false, defaultValue = "") // @NotBlank(message="用户id不能为空")
			@ApiParam(value = "用户id") String userid, @RequestParam(required = false) @NotNull(message = "类型不能为空") @Range(min = 1, max = 3, message = "类型只能是1,2,3") @ApiParam(value = "订单类型,1偷听,2打赏,3提问") Integer type, @RequestParam(required = false) @NotBlank(message = "订单id不能为空") @ApiParam(value = "id,订单id") String orderId, @RequestParam(required = false) @NotNull(message = "订单金额不能为空") @Min(value = 0, message = "金额大于0") @ApiParam(value = "订单金额，以分为单位") Long payMoney, String result_url) throws Exception {
		BooleanObjectResult<Charge> baseResult = BooleanObjectResult.getSuccess();
		String orderDirections;
		String orderType;
		if (1 == type) {
			orderType = PayOrderTypeEnum.listen.getCode();
			orderDirections = PayOrderTypeEnum.listen.getMsg();
		} else if (2 == type) {
			orderType = PayOrderTypeEnum.reward.getCode();
			orderDirections = PayOrderTypeEnum.reward.getMsg();
		} else if (3 == type) {
			orderType = PayOrderTypeEnum.problem.getCode();
			orderDirections = PayOrderTypeEnum.problem.getMsg();
		} else {
			throw new PatternException("类型错误");
		}
		synchronized (this) {

			TPayOrder order = appPayServiceI.getByOtherId(orderId);

			Pingpp.apiKey = pingppApiKey;

			if (null != order) {
				if ("ALREADY_PAY".equals(order.getPayStatus())) {
					throw new BusinessValidateException("该订单已经支付过,正在处理中，请稍候");
				}
				if (StringUtils.isNotBlank(order.getChargeId())) {
					Charge ch = Charge.retrieve(order.getChargeId());
					if (ch.getTimeExpire() * 1000 > System.currentTimeMillis() + 1000 * 60 * 10) {
						baseResult.setResult(ch);
						return baseResult;
					} else {
						appPayServiceI.delete(order.getOrderId());
					}
				}
			}
			order = new TPayOrder();
			String orderNo = IDUtils.getInstanse().getUID();
			order.setOrderId(orderNo);
			order.setUserid(userid);
			order.setOtherOrderId(orderId);
			order.setOrderType(orderType);
			order.setPayStatus("NOT_PAY");
			order.setPayDirections(orderDirections + "，价格：" + payMoney / 100d);
			order.setIntegralCount(1l);
			double da = Math.round(payMoney / 100d);
			order.setPayMoney(new Double(da).longValue());
			order.setRawAddTime(new Date());
			appPayServiceI.add(order);

			String channel = "wx";

			String clinetIp = InfoUtil.getIpAddr(req);// 客服端IP

			Map<String, Object> chargeParams = new HashMap<String, Object>();
			chargeParams.put("order_no", order.getOrderId());
			chargeParams.put("amount", payMoney);
			Map<String, String> app = new HashMap<String, String>();
			app.put("id", pingppAppId);
			chargeParams.put("app", app);
			chargeParams.put("channel", channel);
			chargeParams.put("currency", "cny");

			chargeParams.put("time_expire", (System.currentTimeMillis() / 1000 + 1 * 60 * 60 * 2));

			chargeParams.put("client_ip", clinetIp);
			chargeParams.put("subject", orderDirections + ",金额：" + order.getPayMoney());
			chargeParams.put("body", orderDirections);
			if (StringUtils.isNotBlank(result_url)) {
				Map<String, String> extra = new HashMap<String, String>();
				extra.put("result_url", result_url);
				chargeParams.put("extra", extra);
			}
			Charge ch = Charge.create(chargeParams);

			// 给该订单 ‘ping++支付查询id‘ 赋值 支付渠道也赋值
			order.setChargeId(ch.getId());
			order.setPayChannel(channel);
			order.setPayMoney(payMoney);
			appPayServiceI.update(order);
			baseResult.setResult(ch);
		}
		return baseResult;
	}

	/**
	 * ping++查询订单支付状态--如果支付成功更新积分等操作
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/paySuccess", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	@ApiOperation(value = "支付成功回调", notes = "", httpMethod = "POST")
	public BooleanBaseResult paySuccess(HttpServletRequest req,
			@RequestParam(required = false) @NotBlank(message = "订单id不能为空") @ApiParam(value = "订单id") String orderId)
			throws Exception {

		TPayOrder order = appPayServiceI.getByOtherId(orderId);
		Assert.notNull(order, "订单不存在");
		Assert.hasText(order.getChargeId(), "该订单未支付");

		Pingpp.apiKey = pingppApiKey;
		Charge ch = Charge.retrieve(order.getChargeId());

		logger.info("查询ping++结果：{}", JSON.toJSONString(ch));

		Assert.notNull(ch, "订单查询失败");
		Assert.isTrue(ch.getPaid(), "订单支付还未成功");
		// 未付款
		if ("NOT_PAY".equals(order.getPayStatus())) {
			order.setPayStatus("ALREADY_PAY");
			order.setPayTime(new Date());
			order.setPayMoney(order.getPayMoney());
			appPayServiceI.update(order);
		}
		payBiz.payNoticeOther(order);
		return BooleanBaseResult.SUCCESS;
	}

	/**
	 * 选择渠道返回凭据
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/getChargeMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	@ApiOperation(value = "获取支付凭据(jsonp)", notes = "", httpMethod = "POST")
	public void getChargeMore(HttpServletResponse res, HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "") // @NotBlank(message="用户id不能为空")
			@ApiParam(value = "用户id") String userid, @RequestParam(required = false) @NotNull(message = "类型不能为空") @Range(min = 1, max = 3, message = "类型只能是1,2,3") @ApiParam(value = "订单类型,1偷听,2打赏,3提问") Integer type, @RequestParam(required = false) @NotBlank(message = "订单id不能为空") @ApiParam(value = "id,订单id") String orderId, @RequestParam(required = false) @NotNull(message = "订单金额不能为空") @Min(value = 0, message = "金额大于0") @ApiParam(value = "订单金额，以分为单位") Long payMoney, String result_url) throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());
		String orderDirections;
		String orderType;
		if (1 == type) {
			orderType = PayOrderTypeEnum.listen.getCode();
			orderDirections = PayOrderTypeEnum.listen.getMsg();
		} else if (2 == type) {
			orderType = PayOrderTypeEnum.reward.getCode();
			orderDirections = PayOrderTypeEnum.reward.getMsg();
		} else if (3 == type) {
			orderType = PayOrderTypeEnum.problem.getCode();
			orderDirections = PayOrderTypeEnum.problem.getMsg();
		} else {
			throw new PatternException("类型错误");
		}
		synchronized (this) {

			TPayOrder order = appPayServiceI.getByOtherId(orderId);

			Pingpp.apiKey = pingppApiKey;

			if (null != order) {
				if ("ALREADY_PAY".equals(order.getPayStatus())) {
					throw new BusinessValidateException("该订单已经支付过,正在处理中，请稍候");
				}
				if (StringUtils.isNotBlank(order.getChargeId())) {
					Charge ch = Charge.retrieve(order.getChargeId());
					if (ch.getTimeExpire() * 1000 > System.currentTimeMillis() + 1000 * 60 * 10) {
						result.setResult(ch);
						String resStr = "";
						String callback = request.getParameter("callback");
						if (null != callback) {
							resStr += callback + "(";
							resStr += JSONObject.toJSONString(result);
							resStr += ")";
						} else {
							resStr = JSONObject.toJSONString(result);
						}
						request.setCharacterEncoding("utf-8");
						res.setContentType("text/html;charset=utf-8");
						res.getWriter().write(resStr);
						res.getWriter().flush();
					} else {
						appPayServiceI.delete(order.getOrderId());
					}
				}
			}
			order = new TPayOrder();
			String orderNo = IDUtils.getInstanse().getUID();
			order.setOrderId(orderNo);
			order.setUserid(userid);
			order.setOtherOrderId(orderId);
			order.setOrderType(orderType);
			order.setPayStatus("NOT_PAY");
			order.setPayDirections(orderDirections + "，价格：" + payMoney / 100d);
			order.setIntegralCount(1l);
			double da = Math.round(payMoney / 100d);
			order.setPayMoney(new Double(da).longValue());
			order.setRawAddTime(new Date());
			appPayServiceI.add(order);

			String channel = "wx";

			String clinetIp = InfoUtil.getIpAddr(request);// 客服端IP

			Map<String, Object> chargeParams = new HashMap<String, Object>();
			chargeParams.put("order_no", order.getOrderId());
			chargeParams.put("amount", payMoney);
			Map<String, String> app = new HashMap<String, String>();
			app.put("id", pingppAppId);
			chargeParams.put("app", app);
			chargeParams.put("channel", channel);
			chargeParams.put("currency", "cny");

			chargeParams.put("time_expire", (System.currentTimeMillis() / 1000 + 1 * 60 * 60 * 2));

			chargeParams.put("client_ip", clinetIp);
			chargeParams.put("subject", orderDirections + ",金额：" + order.getPayMoney());
			chargeParams.put("body", orderDirections);
			if (StringUtils.isNotBlank(result_url)) {
				Map<String, String> extra = new HashMap<String, String>();
				extra.put("result_url", result_url);
				chargeParams.put("extra", extra);
			}
			Charge ch = Charge.create(chargeParams);

			// 给该订单 ‘ping++支付查询id‘ 赋值 支付渠道也赋值
			order.setChargeId(ch.getId());
			order.setPayChannel(channel);
			order.setPayMoney(payMoney);
			appPayServiceI.update(order);
			result.setResult(ch);
		}
		String resStr = "";
		String callback = request.getParameter("callback");
		if (null != callback) {
			resStr += callback + "(";
			resStr += JSONObject.toJSONString(result);
			resStr += ")";
		} else {
			resStr = JSONObject.toJSONString(result);
		}
		request.setCharacterEncoding("utf-8");
		res.setContentType("text/html;charset=utf-8");
		res.getWriter().write(resStr);
		res.getWriter().flush();
	}

	/**
	 * ping++查询订单支付状态--如果支付成功更新积分等操作
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/paySuccessMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	@ApiOperation(value = "支付成功回调(jsonp)", notes = "", httpMethod = "POST")
	public void paySuccessMore(HttpServletResponse res, HttpServletRequest request,
			@RequestParam(required = false) @NotBlank(message = "订单id不能为空") @ApiParam(value = "订单id") String orderId)
			throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());
		TPayOrder order = appPayServiceI.getByOtherId(orderId);
		Assert.notNull(order, "订单不存在");
		Assert.hasText(order.getChargeId(), "该订单未支付");

		Pingpp.apiKey = pingppApiKey;
		Charge ch = Charge.retrieve(order.getChargeId());

		logger.info("查询ping++结果：{}", JSON.toJSONString(ch));

		Assert.notNull(ch, "订单查询失败");
		Assert.isTrue(ch.getPaid(), "订单支付还未成功");
		// 未付款
		if ("NOT_PAY".equals(order.getPayStatus())) {
			order.setPayStatus("ALREADY_PAY");
			order.setPayTime(new Date());
			order.setPayMoney(order.getPayMoney());
			appPayServiceI.update(order);
		}
		payBiz.payNoticeOther(order);
		result.setResult("SUCCESS");
		String resStr = "";
		String callback = request.getParameter("callback");
		if (null != callback) {
			resStr += callback + "(";
			resStr += JSONObject.toJSONString(result);
			resStr += ")";
		} else {
			resStr = JSONObject.toJSONString(result);
		}
		request.setCharacterEncoding("utf-8");
		res.setContentType("text/html;charset=utf-8");
		res.getWriter().write(resStr);
		res.getWriter().flush();
	}

}
