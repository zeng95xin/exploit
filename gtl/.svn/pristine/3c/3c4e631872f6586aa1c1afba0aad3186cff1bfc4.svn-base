package com.admin.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.Column;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.WcpJsSqDaoI;
import com.admin.model.WcpJs;
import com.admin.model.WcpJsSq;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.WcpJsSqServiceI;

@Service
public class WcpJsSqServiceImpl implements WcpJsSqServiceI {

	@Autowired
	private WcpJsSqDaoI wcpJsSqDao;

	@Override
	public DataGrid dataGrid(WcpJsSq wcpJsSq, PageHelper ph) {
		DataGrid dg = new DataGrid();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from WcpJsSq t ";
		List<WcpJsSq> l = wcpJsSqDao.find(hql + whereHql(wcpJsSq, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		dg.setRows(l);
		dg.setTotal(wcpJsSqDao.count(
				"select count(*) " + hql + whereHql(wcpJsSq, params), params));
		return dg;
	}

	private String whereHql(WcpJsSq wcpJsSq, Map<String, Object> params) {
		String hql = "";
		if (wcpJsSq != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(wcpJsSq.getDjNum())) {
				hql += " and t.djNum like :djNum";
				params.put("djNum", "%%" + wcpJsSq.getDjNum() + "%%");
			}
			if (StringUtils.isNotBlank(wcpJsSq.getFhYe())) {
				hql += " and t.fhYe like :fhYe";
				params.put("fhYe", "%%" + wcpJsSq.getFhYe() + "%%");
			}
			if (StringUtils.isNotBlank(wcpJsSq.getBzjJe())) {
				hql += " and t.bzjJe = :bzjJe";
				params.put("bzjJe", wcpJsSq.getBzjJe());
			}
			if (StringUtils.isNotBlank(wcpJsSq.getPzJe())) {
				hql += " and t.pzJe like :pzJe";
				params.put("pzJe", "%%" + wcpJsSq.getPzJe() + "%%");
			}

			if (StringUtils.isNotBlank(wcpJsSq.getKcSxf())) {
				hql += " and t.kcSxf like :kcSxf";
				params.put("kcSxf", "%%" + wcpJsSq.getKcSxf() + "%%");
			}

			if (StringUtils.isNotBlank(wcpJsSq.getUserId())) {
				hql += " and t.userId like :userId";
				params.put("userId", "%%" + wcpJsSq.getUserId() + "%%");
			}

			if (StringUtils.isNotBlank(wcpJsSq.getUserName())) {
				hql += " and t.userName like :userName";
				params.put("userName", "%%" + wcpJsSq.getUserName() + "%%");
			}

			if (StringUtils.isNotBlank(wcpJsSq.getFafang())) {
				hql += " and t.fafang like :fafang";
				params.put("fafang", "%%" + wcpJsSq.getFafang() + "%%");
			}
		}
		return hql;
	}

	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void add(WcpJsSq wcpJsSq) throws Exception {
		WcpJsSq u = new WcpJsSq();
		BeanUtils.copyProperties(wcpJsSq, u);
		wcpJsSqDao.save(wcpJsSq);
	}

	@Override
	public WcpJsSq get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		WcpJsSq t = wcpJsSqDao.get(
				"select distinct t from WcpJsSq t where t.id = :id", params);
		return t;
	}

	@Override
	public void edit(WcpJsSq wcpJsSq) throws Exception {
		WcpJsSq s = wcpJsSqDao.get(WcpJsSq.class, wcpJsSq.getId());
		s.setFafang(wcpJsSq.getFafang());
		s.setShzt(wcpJsSq.getShzt());
		wcpJsSqDao.update(s);
	}

	@Override
	public void delete(String id) {
		wcpJsSqDao.delete(wcpJsSqDao.get(WcpJsSq.class, id));
	}

	@Override
	public List<WcpJsSq> wcpJsSqList() {
		List<WcpJsSq> t = wcpJsSqDao.find("from WcpJsSq t ");
		return t;
	}

	@Override
	public List<WcpJsSq> wcpJsSqList(WcpJsSq wcpJsSq, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		Map<String, Object> params = new HashMap<String, Object>();
		List<WcpJsSq> t = wcpJsSqDao.find(
				"from WcpJsSq t " + whereHql(wcpJsSq, params)
						+ " order by t.djScSj desc", params,
				Integer.valueOf(page), Integer.valueOf(rows));
		return t;
	}

	@Override
	public int getCount(WcpJsSq wcpJsSq) {
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = "select count(*) from WcpJsSq t "
				+ whereHql(wcpJsSq, params);
		return wcpJsSqDao.count(hql, params).intValue();
	}
}
