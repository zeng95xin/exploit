package com.admin.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.GxtDaoI;
import com.admin.dao.RoleDaoI;
import com.admin.dao.UserDaoI;
import com.admin.dao.WebDaoI;
import com.admin.model.Tgxt;
import com.admin.model.Tresource;
import com.admin.model.Trole;
import com.admin.model.Tuser;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.service.GxtServiceI;
import com.admin.service.UserServiceI;
import com.admin.service.WebServiceI;
import com.admin.util.MD5Util;
import com.web.entity.Person;
import com.web.util.PageModel;
import com.web.util.TimeUtils;

@Service
public class GxtServiceImpl implements GxtServiceI {

	@Autowired
	private WebDaoI dao;

	@Autowired
	private GxtDaoI gxtDaoI;

	@Override
	public DataGrid dataGridForOne(Tgxt g, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Tgxt> ul = new ArrayList<Tgxt>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Tgxt t ";
		List<Tgxt> l = gxtDaoI.find(hql + whereHqlForOne(g, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Tgxt t : l) {
				Tgxt u = new Tgxt();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count(
				"select count(*) " + hql + whereHqlForOne(g, params), params));
		return dg;
	}

	
	@Override
	public DataGrid dataGridForTwo(Tgxt g, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Tgxt> ul = new ArrayList<Tgxt>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Tgxt t where t.gxtzd = '1' or t.gxtzhuy = '2'";
		List<Tgxt> l = gxtDaoI.find(hql + whereHqlForTwo(g, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Tgxt t : l) {
				Tgxt u = new Tgxt();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count(
				"select count(*) " + hql + whereHqlForTwo(g, params), params));
		return dg;
	}
	/**
	 * where 条件封装
	 * 
	 * @param p
	 * @param params
	 * @return
	 */
	private String whereHqlForOne(Tgxt g, Map<String, Object> params) {
		String hql = "";
		if (g != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(g.getGxttitel())) {
				hql += " and t.gxttitel like :gxttitel";
				params.put("gxttitel", "%%" + g.getGxttitel() + "%%");
			}
			if (StringUtils.isNotBlank(g.getGxtfbz())) {
				hql += " and t.gxtfbz =:gxtfbz";
				params.put("gxtfbz", g.getGxtfbz());
			}
			if (StringUtils.isNotBlank(g.getGxtfl())) {
				hql += " and t.gxtfl =:gxtfl";
				params.put("gxtfl", g.getGxtfl());
			}

		}
		return hql;
	}
	
	private String whereHqlForTwo(Tgxt g, Map<String, Object> params) {
		String hql = "";
		if (g != null) {
			
			if (StringUtils.isNotBlank(g.getGxttitel())) {
				hql += " and t.gxttitel like :gxttitel";
				params.put("gxttitel", "%%" + g.getGxttitel() + "%%");
			}
			if (StringUtils.isNotBlank(g.getGxtfbz())) {
				hql += " and t.gxtfbz =:gxtfbz";
				params.put("gxtfbz", g.getGxtfbz());
			}
			if (StringUtils.isNotBlank(g.getGxtfl())) {
				hql += " and t.gxtfl =:gxtfl";
				params.put("gxtfl", g.getGxtfl());
			}

		}
		return hql;
	}

	/**
	 * 排序条件
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "  order by gxtfbtime desc";
		/*
		 * if (ph.getSort() != null && ph.getOrder() != null) { orderString =
		 * " order by t." + ph.getSort() + " " + ph.getOrder(); }
		 */
		return orderString;
	}

	@Override
	public void delete(String id) {
		gxtDaoI.delete(gxtDaoI.get(Tgxt.class, id));
	}
	
	@Override
	public void deleteZY(String id) {
		Tgxt tg=gxtDaoI.get(Tgxt.class, id);
		if (tg != null) {
			if (StringUtils.isNotBlank(tg.getGxtzd()) && tg.getGxtzd().equals("1")) {
				tg.setGxtzd("");
			}
			if (StringUtils.isNotBlank(tg.getGxtzhuy()) && tg.getGxtzhuy().equals("2")) {
				tg.setGxtzhuy("");
			}
			gxtDaoI.update(tg);
		}
		
	}

	@Override
	synchronized public void add(Tgxt p) throws Exception {
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put("gxttitel", p.getGxttitel());

		Tgxt u = new Tgxt();
		BeanUtils.copyProperties(p, u);
		u.setGxttitel(p.getGxttitel());
		u.setGxtfbz(p.getGxtfbz());
		u.setGxtfl(p.getGxtfl());
		u.setGxtfbtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		u.setGxtnr(p.getGxtnr());
		u.setId(UUID.randomUUID().toString());
		u.setGxtsqdj(p.getGxtsqdj());
		u.setGxtjfxh(p.getGxtjfxh());
		u.setGxtgmcs("0");
		u.setGxtbtccs("0");
		u.setGxtbzcs("0");
		u.setGxtzd(p.getGxtzd());
		u.setGxtzhuy(p.getGxtzhuy());
		gxtDaoI.save(u);

	}

	@Override
	public Person get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		Person t = dao.get("select distinct t from Person t  where t.id = :id",
				params);
		Person u = new Person();
		BeanUtils.copyProperties(t, u);
		return u;
	}

	@Override
	public Tgxt getGxt(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		Tgxt t = gxtDaoI.get("select distinct t from Tgxt t  where t.id = :id",
				params);
		/*Tgxt u = new Tgxt();
		if (t != null) {
			BeanUtils.copyProperties(t, u);
		}*/
		return t;
	}

	@Override
	public List<Tgxt> getList(String fl, String page, String rows) {
		Map<String, Object> params = new HashMap<String, Object>();
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		String hql = "from Tgxt where 1=1 ";
		if (StringUtils.isNotBlank(fl)) {
			params.put("fl", fl);
			hql += " and gxtfl=:fl";
		} else {
			hql += " and gxtfl <> '5'";
		}
		hql += " order by gxtzd desc,gxtfbtime desc";
		List<Tgxt> list = gxtDaoI.find(hql, params, Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	String[] excelHeader = { "标题", "分类", "内容", "发布者", "发布时间" };

	@Override
	public void edit(Tgxt p) throws Exception {

		Tgxt u = gxtDaoI.get(Tgxt.class, p.getId());
		u.setGxttitel(p.getGxttitel());
		u.setGxtfl(p.getGxtfl());
		u.setGxtfbz(p.getGxtfbz());
		u.setGxtfbtime(p.getGxtfbtime());
		u.setImage(p.getImage());
		u.setGxtnr(p.getGxtnr());
		if (u.getGxtfbtime() == null) {
			u.setGxtfbtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		}
		u.setGxtzy(p.getGxtzy());
		u.setGxtsqdj(p.getGxtsqdj());
		u.setGxtjfxh(p.getGxtjfxh());
		u.setGxtzd(p.getGxtzd());
		u.setGxtzhuy(p.getGxtzhuy());
		u.setVisitCount(p.getVisitCount());
		gxtDaoI.update(u);

	}

	@Override
	public HSSFWorkbook export(List<Tgxt> list) {
		HSSFWorkbook wb = new HSSFWorkbook();
		HSSFSheet sheet = wb.createSheet("Tgxt");
		HSSFRow row = sheet.createRow((int) 0);
		HSSFCellStyle style = wb.createCellStyle();
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);

		for (int i = 0; i < excelHeader.length; i++) {
			HSSFCell cell = row.createCell(i);
			cell.setCellValue(excelHeader[i]);
			cell.setCellStyle(style);
			sheet.autoSizeColumn(i);
		}

		for (int i = 0; i < list.size(); i++) {
			row = sheet.createRow(i + 1);
			Tgxt p = list.get(i);
			row.createCell(0).setCellValue(p.getGxttitel());
			row.createCell(1).setCellValue(p.getGxtfbz());
			row.createCell(2).setCellValue(p.getGxtnr());
			row.createCell(3).setCellValue(p.getGxtfl());
			row.createCell(4).setCellValue(p.getGxtfbtime());

		}
		return wb;
	}

	@Override
	public void update(Tgxt p) throws Exception {
		gxtDaoI.update(p);
	}

	@Override
	public int getCount(String fl) {
		String hql = "select count(*) from Tgxt where 1=1 ";
		if (StringUtils.isNotBlank(fl)) {
			hql += " and gxtfl='" + fl + "'";
		}
		return gxtDaoI.count(hql).intValue();
	}

	@Override
	public List<Tgxt> getTop2() {
		String hql = "from Tgxt where 1=1 ";
		hql += " order by gxtfbtime desc";
		List<Tgxt> list = gxtDaoI.find(hql, 1, 2);
		return list;
	}


	@Override
	public void saveVisit(Tgxt p) throws Exception {
		Tgxt u = gxtDaoI.get(Tgxt.class, p.getId());
		u.setVisitCount(p.getVisitCount());
		gxtDaoI.update(u);
	}


	

	
	
	/*@Override
	public HSSFWorkbook export(List<Person> list) {
		 HSSFWorkbook wb = new HSSFWorkbook();    
	        HSSFSheet sheet = wb.createSheet("Person");    
	        HSSFRow row = sheet.createRow((int) 0);    
	        HSSFCellStyle style = wb.createCellStyle();    
	        style.setAlignment(HSSFCellStyle.ALIGN_CENTER);    
	    
	        for (int i = 0; i < excelHeader.length; i++) {    
	            HSSFCell cell = row.createCell(i);    
	            cell.setCellValue(excelHeader[i]);    
	            cell.setCellStyle(style);    
	            sheet.autoSizeColumn(i);    
	        }    
	    
	        for (int i = 0; i < list.size(); i++) {    
	            row = sheet.createRow(i + 1);    
	            Person p = list.get(i);    
	            row.createCell(0).setCellValue(p.getName());    
	            row.createCell(1).setCellValue(p.getXy());    
	            row.createCell(2).setCellValue(p.getPs());    
	            row.createCell(3).setCellValue(p.getSex()); 
	            row.createCell(4).setCellValue(p.getTele()); 
	            row.createCell(5).setCellValue(p.getTime()); 
	        }    
	        return wb;    
	    }    */

}
