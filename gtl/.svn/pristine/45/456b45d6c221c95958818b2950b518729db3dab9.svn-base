package com.admin.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.ReplyQuestions2DaoI;
import com.admin.model.AnswerQuestions;
import com.admin.model.JPushChatModel;
import com.admin.model.ReplyQuestions2;
import com.admin.model.Tgshow;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.JPushApiClient;
import com.admin.service.MyCareServiceI;
import com.admin.service.ReplyQuestions2ServiceI;

@Service
public class ReplyQuestions2ServiceImpl implements ReplyQuestions2ServiceI {

	@Autowired
	private ReplyQuestions2DaoI replyQuestionsDao;

	@Autowired
	private JPushApiClient jPushApiClient;

	@Autowired
	private MyCareServiceI myCareServiceI;

	@Override
	public DataGrid dataGrid(ReplyQuestions2 replyQuestions, PageHelper ph) {
		DataGrid dg = new DataGrid();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from ReplyQuestions2 t ";
		List<ReplyQuestions2> l = replyQuestionsDao.find(
				hql + whereHql(replyQuestions, params) + orderHql(ph), params,
				ph.getPage(), ph.getRows());
		dg.setRows(l);
		dg.setTotal(replyQuestionsDao.count("select count(*) " + hql
				+ whereHql(replyQuestions, params), params));
		return dg;
	}

	private String whereHql(ReplyQuestions2 replyQuestions,
			Map<String, Object> params) {
		String hql = "";
		if (replyQuestions != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(replyQuestions.getQuestionId())) {
				hql += " and t.questionId like :questionId";
				params.put("questionId", replyQuestions.getQuestionId());
			}
			if (StringUtils.isNotBlank(replyQuestions.getUserName())) {
				hql += " and t.userName like :userName";
				params.put("userName", "%%" + replyQuestions.getUserName()
						+ "%%");
			}
			if (StringUtils.isNotBlank(replyQuestions.getUserId())) {
				hql += " and t.userId = :userId";
				params.put("userId", replyQuestions.getUserId());
			}
			if (StringUtils.isNotBlank(replyQuestions.getReleaseTime())) {
				hql += " and t.releaseTime like :releaseTime";
				params.put("releaseTime",
						"%%" + replyQuestions.getReleaseTime() + "%%");
			}
			if (StringUtils.isNotBlank(replyQuestions.getState())) {
				hql += " and t.state = :state";
				params.put("state", replyQuestions.getState());
			}
			if (StringUtils.isNotBlank(replyQuestions.getReleaseContent())) {
				hql += " and t.releaseContent like :releaseContent";
				params.put("releaseContent",
						"%%" + replyQuestions.getReleaseContent() + "%%");
			}
			if (StringUtils.isNotBlank(replyQuestions.getReleaseIp())) {
				hql += " and t.releaseIp = :releaseIp";
				params.put("releaseIp", replyQuestions.getReleaseIp());
			}
			if (StringUtils.isNotBlank(replyQuestions.getReplyType())) {
				hql += " and t.replyType = :replyType";
				params.put("replyType", replyQuestions.getReplyType());
			}
			if (StringUtils.isNotBlank(replyQuestions.getReplyId())) {
				hql += " and t.replyId = :replyId";
				params.put("replyId", replyQuestions.getReplyId());
			}
		}
		return hql;
	}

	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public void add(ReplyQuestions2 replyQuestions) throws Exception {
		ReplyQuestions2 u = new ReplyQuestions2();
		BeanUtils.copyProperties(replyQuestions, u);
		replyQuestionsDao.save(replyQuestions);
//		String dataId = replyQuestions.getQuestionId();
//		String title01 = "股天乐信息";
//		String content01 = "你关注的股天乐投资顾问回答了您有问必答问题，请关注此问题回复信息!";
//		List<String> alias = myCareServiceI.getUseridList(replyQuestions
//				.getUserId());
//		if(){
//			JPushChatModel jpModel = new JPushChatModel();
//			jpModel.setType("3"); // 有问必答
//			jpModel.setTitle(title01);// 推送题目
//			jpModel.setContent(content01);// 推送内容
//			jpModel.setDataId(dataId); // 有问必答问题id
//
//			jPushApiClient.jPush(alias, jpModel);
//		}
		
	}

	@Override
	public ReplyQuestions2 get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		ReplyQuestions2 t = replyQuestionsDao.get(
				"select distinct t from ReplyQuestions t where t.id = :id",
				params);
		return t;
	}

	@Override
	public void edit(ReplyQuestions2 replyQuestions) throws Exception {
		replyQuestionsDao.update(replyQuestions);
	}

	@Override
	public void delete(String id) {
		replyQuestionsDao.delete(replyQuestionsDao
				.get(ReplyQuestions2.class, id));
	}

	@Override
	public List<ReplyQuestions2> replyQuestionsList() {
		List<ReplyQuestions2> t = replyQuestionsDao
				.find("from ReplyQuestions2 t ");
		return t;
	}

	@Override
	public List<ReplyQuestions2> replyQuestionsList(
			ReplyQuestions2 replyQuestions, String page, String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		Map<String, Object> params = new HashMap<String, Object>();
		List<ReplyQuestions2> t = replyQuestionsDao.find(
				"from ReplyQuestions2 t " + whereHql(replyQuestions, params)
						+ " order by t.releaseTime desc", params,
				Integer.valueOf(page), Integer.valueOf(rows));
		return t;
	}

	@Override
	public int getCount(ReplyQuestions2 replyQuestions) {
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = "select count(*) from ReplyQuestions2 t"
				+ whereHql(replyQuestions, params);
		return replyQuestionsDao.count(hql, params).intValue();
	}

	@Override
	public List<ReplyQuestions2> hfzdQuestion() {
		List<Object[]> objects = replyQuestionsDao
				.findBySql("select count(*) as HFCS,QUESTIONID from t_replyQuestions2 GROUP BY QUESTIONID ORDER BY HFCS desc");
		List<ReplyQuestions2> t = new ArrayList<ReplyQuestions2>();
		if (objects.size() > 0) {
			for (int i = 0; i < objects.size(); i++) {
				Object[] object = objects.get(i);
				if (object[1] != null) {
					ReplyQuestions2 replyQuestions = new ReplyQuestions2();
					replyQuestions.setHfcs(object[0].toString());
					replyQuestions.setQuestionId(object[1].toString());
					t.add(replyQuestions);
				}
			}
		}
		return t;
	}

	@Override
	public List<ReplyQuestions2> getQuestionsList(int limit) {
		String hql = "select a.* from t_replyquestions2 a ,"
				+ "(select id,RELEASECONTENT as anwser from t_answerquestions  order by RELEASETIME DESC LIMIT "+limit+") b ,"
				+ " (select userid  from t_tgsq where 1=1 and iszb ='1')"
				+ "  c where a.QUESTIONID= b.id and c.userid=a.USERID group by b.anwser";
		List<Object[]>  list = replyQuestionsDao.findBySql(hql);
		List<ReplyQuestions2> list_1 = new ArrayList<ReplyQuestions2>();
		for (int i = 0; i < list.size(); i++) {
			Object[] ob = list.get(i);
			for (int k = 0; k < 12; k++) {
				if (ob[k] == null) {
					ob[k] = "";
				}
			}
			ReplyQuestions2 replyQuestions=new ReplyQuestions2();
			replyQuestions.setId((String) ob[0]);
			replyQuestions.setDeleteReason((String) ob[1]);
			replyQuestions.setQuestionId((String) ob[2]);
			replyQuestions.setReleaseContent((String) ob[3]);
			replyQuestions.setReleaseIp((String) ob[4]);
			replyQuestions.setReleaseTime((String) ob[5]);
			replyQuestions.setState((String) ob[6]);
			replyQuestions.setUserId((String) ob[7]);
			replyQuestions.setUserName((String) ob[8]);
			replyQuestions.setReplyId((String) ob[9]);
			replyQuestions.setReplyType((String) ob[10]);
			replyQuestions.setHfcs((String) ob[11]);
			list_1.add(replyQuestions);
			}
		return list_1;
	}

}
