package com.lcjh.controller.api;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.constraints.Min;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.Range;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.JPushChatModel;
import com.admin.model.LoginUser;
import com.admin.service.LoginUserServiceI;
import com.alibaba.fastjson.JSONObject;
import com.lcjh.biz.Lcjh2Biz;
import com.lcjh.biz.LcjhRatingBiz;
import com.lcjh.biz.LcjhUserBuyRecordBiz;
import com.lcjh.common.JudgeLevelUtil;
import com.lcjh.common.LcjhJpushUtil;
import com.lcjh.entity.Lcjh2;
import com.lcjh.entity.LcjhRating;
import com.lcjh.enummole.LcjhPushEnum;
import com.lcjh.model.LcjhRatingModel;
import com.lcjh.result.BooleanBaseResult;
import com.lcjh.result.BooleanObjectResult;
import com.lcjh.result.BooleanPageResult;
import com.web.exception.CodeEnum;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

@Controller
@RequestMapping("/api/lcjh2")
@Validated
@Api(tags="-api-lcjh2-rating", description = "理财计划评论,有关接口")
public class Lcjh2RatingApiController {
//	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	@Autowired private Lcjh2Biz lcjh2Biz;
	@Autowired private LcjhRatingBiz lcjhRatingBiz;
	@Autowired private LcjhUserBuyRecordBiz lcjhUserBuyRecordBiz;
	@Autowired private LoginUserServiceI loginUserServiceI;
	@Autowired private LcjhJpushUtil lcjhJpushUtil;

	@ApiOperation(value = "发布理财计划评论", notes="", httpMethod="POST")
	@RequestMapping(value = "/addLcjhRating", method = {RequestMethod.POST, RequestMethod.GET}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanBaseResult addLcjhRating(HttpServletRequest request
	,@ApiParam(value="用户id",required=true) @NotBlank(message="用户id不能为空")
	@Size(min=1,max=200,message="用户id在{min}-{max}个字")
	@RequestParam(required=false) String userId
	,@ApiParam(value="理财计划id",required=true) @NotBlank(message="用户id不能为空")
	@Size(min=1,max=200,message="用户id在{min}-{max}个字")
	@RequestParam(required=false) String lcjhId
	,@ApiParam(value="评论内容",required=true) @NotBlank(message="评论内容")
	@Size(min=1,max=250,message="标题在{min}-{max}个字")
	@RequestParam(required=false) String content
//	,@ApiParam(value="赚钱度评分,默认好评5颗星",required=false)
//	@Range(min=0,max=5,message="赚钱度评分在{min}-{max}之间")
//	@RequestParam(required=false, defaultValue="5") Integer moneyLevel
//	,@ApiParam(value="服务态度评分,默认好评5颗星",required=false)
//	@Range(min=0,max=5,message="服务态度评分在{min}-{max}之间")
//	@RequestParam(required=false, defaultValue="5") Integer serviceLevel
//	,@ApiParam(value="帮助评分,默认好评5颗星",required=false)
//	@Range(min=0,max=5,message="帮助评分在{min}-{max}之间")
//	@RequestParam(required=false, defaultValue="5") Integer usefulLevel
	,@RequestParam(required=false, defaultValue="10") 
	@Range(min=0,max=10,message="帮助评分在{min}-{max}之间")
	@ApiParam(value="帮助评分,默认好评5颗星,值为10",required=false)
	Integer totalLevel
	,@RequestParam(required=false, defaultValue="1")
	@Range(min=0,max=5,message="可见性在{min}-{max}之间")
	@ApiParam(value="可见性,1：所有人可见，2：购买可见,默认所有人可见",required=false)
	Integer visibility
		) throws Exception {
		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Lcjh2 l = lcjh2Biz.get(Lcjh2.class, lcjhId);
		Assert.notNull(l, "理财计划不存在");
		LcjhRating r = new LcjhRating();
		r.setAddTime(new Date());
		r.setContent(content);
		r.setTotalLevel(totalLevel);
		r.setLcjhId(lcjhId);
		r.setUserId(userId);
		int ratingLevel = JudgeLevelUtil.judgeLevel(totalLevel);
		r.setRatingLevel(ratingLevel);
		r.setVisibility(visibility);
		lcjhRatingBiz.save(r);
		
		JPushChatModel chat = new JPushChatModel();
		String chattitle = "股天乐信息";
		String chatcontent = "'" + user.getNickname() + ",'评论了你的理财计划'" + l.getJhbt() + "'!";
		chat.setType(LcjhPushEnum.ratingLcjh.getCode());
		chat.setTitle(chattitle);
		chat.setContent(chatcontent);
		chat.setDataId(l.getId() + ":" + r.getId());
		lcjhJpushUtil.pushLcjhAllUser(chat, l.getId());
		
		
		return BooleanBaseResult.SUCCESS;
	}
	
	@ApiOperation(value = "获取理财计划评论分页", notes="根据评论时间倒序", httpMethod="POST")
	@RequestMapping(value = "/getPageLcjhRating", method = {RequestMethod.POST, RequestMethod.GET}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanPageResult<LcjhRatingModel> getPageLcjhRating(HttpServletRequest request
	,@ApiParam(value="用户id",required=true) @NotBlank(message="用户id不能为空")
	@Size(min=1,max=200,message="用户id在{min}-{max}个字")
	@RequestParam(required=false) String userId
	,@ApiParam(value="理财计划id",required=true) @NotBlank(message="理财计划id不能为空")
	@Size(min=1,max=200,message="理财计划id在{min}-{max}个字")
	@RequestParam(required=false) String lcjhId
	,@ApiParam(value="page",required=false)
	@Min(value=1,message="page大于0")
	@RequestParam(required=false, defaultValue="1") Integer page
	,@ApiParam(value="rows",required=false)
	@Min(value=1,message="rows大于0")
	@RequestParam(required=false, defaultValue="10") Integer rows
			) throws Exception {
		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Lcjh2 l = lcjh2Biz.get(Lcjh2.class, lcjhId);
		Assert.notNull(l, "理财计划不存在");
		
		Map<String, Object> params = new HashMap<String, Object>(2);
		params.put("userId", userId);
		params.put("lcjhId", lcjhId);
		String buyRecordHql = "select count(1) from LcjhUserBuyRecord where userId=:userId and lcjhId=:lcjhId";
		
		String ratingSql = "select a.*,b.`name`,b.nickname,b.tx from t_lcjh_rating a left outer join loginuser b on a.userId = b.id where a.lcjhId=:lcjhId ";
		String ratingHqlCount = "select count(1) from LcjhRating where lcjhId=:lcjhId";
		
		if(lcjhUserBuyRecordBiz.count(buyRecordHql, params) < 1){
			ratingSql += " and a.visibility = 1";
			ratingHqlCount += " and visibility = 1";
		}
		params.remove("userId");
		List<LcjhRatingModel> list = lcjhRatingBiz.findBySqlBuildObject(ratingSql, params, LcjhRatingModel.class, page, rows);
		int total = lcjhRatingBiz.count(ratingHqlCount, params);
		
		PageRequest pager = new PageRequest(page, rows);
		Page<LcjhRatingModel> pageData = new PageImpl<LcjhRatingModel>(list, pager, total);
		
		BooleanPageResult<LcjhRatingModel> result = BooleanPageResult.getSuccess();
		result.setResult(pageData);
		return result;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	@ApiOperation(value = "发布理财计划评论(jsonp)", notes="", httpMethod="POST")
	@RequestMapping(value = "/addLcjhRatingMore", method = {RequestMethod.POST, RequestMethod.GET}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void addLcjhRatingMore(HttpServletResponse res, HttpServletRequest request
	,			@ApiParam(value = "手机号", required = true) @RequestParam(required = false) @NotBlank(message = "手机号不能为空") @Size(min = 11, max = 20, message = "手机号在{min}-{max}个字") String phone
	,@ApiParam(value="理财计划id",required=true) @NotBlank(message="用户id不能为空")
	@Size(min=1,max=200,message="用户id在{min}-{max}个字")
	@RequestParam(required=false) String lcjhId
	,@ApiParam(value="评论内容",required=true) @NotBlank(message="评论内容")
	@Size(min=1,max=250,message="标题在{min}-{max}个字")
	@RequestParam(required=false) String content
//	,@ApiParam(value="赚钱度评分,默认好评5颗星",required=false)
//	@Range(min=0,max=5,message="赚钱度评分在{min}-{max}之间")
//	@RequestParam(required=false, defaultValue="5") Integer moneyLevel
//	,@ApiParam(value="服务态度评分,默认好评5颗星",required=false)
//	@Range(min=0,max=5,message="服务态度评分在{min}-{max}之间")
//	@RequestParam(required=false, defaultValue="5") Integer serviceLevel
//	,@ApiParam(value="帮助评分,默认好评5颗星",required=false)
//	@Range(min=0,max=5,message="帮助评分在{min}-{max}之间")
//	@RequestParam(required=false, defaultValue="5") Integer usefulLevel
	,@RequestParam(required=false, defaultValue="10") 
	@Range(min=0,max=10,message="帮助评分在{min}-{max}之间")
	@ApiParam(value="帮助评分,默认好评5颗星,值为10",required=false)
	Integer totalLevel
	,@RequestParam(required=false, defaultValue="1")
	@Range(min=0,max=5,message="可见性在{min}-{max}之间")
	@ApiParam(value="可见性,1：所有人可见，2：购买可见,默认所有人可见",required=false)
	Integer visibility
		) throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());
		LoginUser user = loginUserServiceI.getUserByPhone(phone);
		Assert.notNull(user, "用户不存在");
		Lcjh2 l = lcjh2Biz.get(Lcjh2.class, lcjhId);
		Assert.notNull(l, "理财计划不存在");
		LcjhRating r = new LcjhRating();
		r.setAddTime(new Date());
		r.setContent(content);
		r.setTotalLevel(totalLevel);
		r.setLcjhId(lcjhId);
		r.setUserId(user.getId());
		int ratingLevel = JudgeLevelUtil.judgeLevel(totalLevel);
		r.setRatingLevel(ratingLevel);
		r.setVisibility(visibility);
		lcjhRatingBiz.save(r);
		
		JPushChatModel chat = new JPushChatModel();
		String chattitle = "股天乐信息";
		String chatcontent = "'" + user.getNickname() + ",'评论了你的理财计划'" + l.getJhbt() + "'!";
		chat.setType(LcjhPushEnum.ratingLcjh.getCode());
		chat.setTitle(chattitle);
		chat.setContent(chatcontent);
		chat.setDataId(l.getId() + ":" + r.getId());
		lcjhJpushUtil.pushLcjhAllUser(chat, l.getId());
		result.setResult("SUCCESS");
		String resStr = "";
		String callback = request.getParameter("callback");
		if (null != callback) {
			resStr += callback + "(";
			resStr += JSONObject.toJSONString(result);
			resStr += ")";
		} else {
			resStr = JSONObject.toJSONString(result);
		}
		request.setCharacterEncoding("utf-8");
		res.setContentType("text/html;charset=utf-8");
		res.getWriter().write(resStr);
		res.getWriter().flush();
	}
	
	@ApiOperation(value = "获取理财计划评论分页(jsonp)", notes="根据评论时间倒序", httpMethod="POST")
	@RequestMapping(value = "/getPageLcjhRatingMore", method = {RequestMethod.POST, RequestMethod.GET}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void getPageLcjhRatingMore(HttpServletResponse res, HttpServletRequest request
	,			@ApiParam(value = "手机号", required = true) @RequestParam(required = false) @NotBlank(message = "手机号不能为空") @Size(min = 11, max = 20, message = "手机号在{min}-{max}个字") String phone	,@ApiParam(value="理财计划id",required=true) @NotBlank(message="理财计划id不能为空")
	@Size(min=1,max=200,message="理财计划id在{min}-{max}个字")
	@RequestParam(required=false) String lcjhId
	,@ApiParam(value="page",required=false)
	@Min(value=1,message="page大于0")
	@RequestParam(required=false, defaultValue="1") Integer page
	,@ApiParam(value="rows",required=false)
	@Min(value=1,message="rows大于0")
	@RequestParam(required=false, defaultValue="10") Integer rows
			) throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());
		LoginUser user = loginUserServiceI.getUserByPhone(phone);
		Assert.notNull(user, "用户不存在");
		Lcjh2 l = lcjh2Biz.get(Lcjh2.class, lcjhId);
		Assert.notNull(l, "理财计划不存在");
		
		Map<String, Object> params = new HashMap<String, Object>(2);
		params.put("userId", user.getId());
		params.put("lcjhId", lcjhId);
		String buyRecordHql = "select count(1) from LcjhUserBuyRecord where userId=:userId and lcjhId=:lcjhId";
		
		String ratingSql = "select a.*,b.`name`,b.nickname,b.tx from t_lcjh_rating a left outer join loginuser b on a.userId = b.id where a.lcjhId=:lcjhId ";
		String ratingHqlCount = "select count(1) from LcjhRating where lcjhId=:lcjhId";
		
		if(lcjhUserBuyRecordBiz.count(buyRecordHql, params) < 1){
			ratingSql += " and a.visibility = 1";
			ratingHqlCount += " and visibility = 1";
		}
		params.remove("userId");
		List<LcjhRatingModel> list = lcjhRatingBiz.findBySqlBuildObject(ratingSql, params, LcjhRatingModel.class, page, rows);
		int total = lcjhRatingBiz.count(ratingHqlCount, params);
		
		PageRequest pager = new PageRequest(page, rows);
		Page<LcjhRatingModel> pageData = new PageImpl<LcjhRatingModel>(list, pager, total);
		result.setResult(pageData);
		String resStr = "";
		String callback = request.getParameter("callback");
		if (null != callback) {
			resStr += callback + "(";
			resStr += JSONObject.toJSONString(result);
			resStr += ")";
		} else {
			resStr = JSONObject.toJSONString(result);
		}
		request.setCharacterEncoding("utf-8");
		res.setContentType("text/html;charset=utf-8");
		res.getWriter().write(resStr);
		res.getWriter().flush();
	}
	
}
