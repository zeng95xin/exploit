package com.web.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.LoginUser;
import com.admin.service.ChestBoxBuyService;
import com.admin.service.ChestBoxEvaluateService;
import com.admin.service.ChestBoxService;
import com.admin.service.LoginUserServiceI;
import com.web.entity.ChestBox;
import com.web.entity.ChestBoxEvaluate;
import com.web.exception.BusinessDealException;
import com.web.exception.BusinessValidateException;
import com.web.exception.CodeEnum;
import com.web.exception.PatternException;
import com.web.result.BaseListResult;
import com.web.result.BaseObjectResult;
import com.web.util.TimeUtils;

@Controller
@RequestMapping("/chestBoxEvaluate")
public class ChestBoxEvaluateController {
	private static final Logger logger = LoggerFactory.getLogger(ChestBoxEvaluateController.class);
	
	@Autowired
	private ChestBoxEvaluateService chestBoxEvaluateService;
	
	@Autowired
	private ChestBoxService chestBoxService;
	
	@Autowired
	private LoginUserServiceI loginUserServiceI;
	
	@Autowired
	private ChestBoxBuyService chestBoxBuyService;
	
	/**
	 * 新增百宝箱评价
	 * @param req
	 * @param res
	 * @param chestBoxEvaluate
	 * @return
	 */
	@RequestMapping(value = "/add", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseObjectResult<ChestBoxEvaluate> addChestBoxEvaluate(HttpServletRequest req,HttpServletResponse res,
			ChestBoxEvaluate chestBoxEvaluate) {
		logger.info("新增百宝箱评价: {}", chestBoxEvaluate);
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<ChestBoxEvaluate> baseResult = new BaseObjectResult<ChestBoxEvaluate>();
		ChestBox cb=new ChestBox();
		LoginUser lg= new LoginUser();
		boolean flag=false;
		
		try {
			req.setCharacterEncoding("UTF-8");
			// 参数校验
			if (chestBoxEvaluate == null) {
				throw new PatternException("百宝箱评价信息不能为空");
			}
			if (StringUtils.isBlank(chestBoxEvaluate.getChestBoxId())) {
				throw new PatternException("百宝箱ID不能为空");
			}
			if (StringUtils.isBlank(chestBoxEvaluate.getBoxEvaluateBuyerID())) {
				throw new PatternException("评价者Id不能为空");
			}
			if (StringUtils.isBlank(chestBoxEvaluate.getBoxEvaluateContext())) {
				throw new PatternException("评价内容不能为空");
			}
			flag=chestBoxBuyService.checkBuyer(chestBoxEvaluate.getChestBoxId(), chestBoxEvaluate.getBoxEvaluateBuyerID());
			if (!flag) {
				throw new PatternException("您还未购买该百宝箱，不能对其进行评价！");
			}
			lg=loginUserServiceI.getUser(chestBoxEvaluate.getBoxEvaluateBuyerID());
			cb=chestBoxService.get(chestBoxEvaluate.getChestBoxId());
			
			if (cb == null ) {
				throw new PatternException("该百宝箱不存在！");
			}else{
				if (StringUtils.isNotBlank(cb.getBoxTitle())) {
					chestBoxEvaluate.setChsetBoxTitle(cb.getBoxTitle());
				}
			}
			if (lg!= null) {
				if (StringUtils.isNotBlank(lg.getNickname())) {
					chestBoxEvaluate.setBoxEvaluateBuyerName(lg.getNickname());
				}
				if (StringUtils.isNotBlank(lg.getTx())) {
					chestBoxEvaluate.setBoxEvaluateBuyerImage(lg.getTx());
				}
				
			}else{
				throw new PatternException("用户不存在！");
			}
			chestBoxEvaluate.setBoxEvaluateId(UUID.randomUUID().toString());
			chestBoxEvaluate.setBoxEvaluateTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
			chestBoxEvaluateService.add(chestBoxEvaluate);
			
			baseResult.setErrorCode("0");
			baseResult.setErrorMessage("评价成功！");
			baseResult.setResult(chestBoxEvaluate);
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<ChestBoxEvaluate>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<ChestBoxEvaluate>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<ChestBoxEvaluate>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<ChestBoxEvaluate>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
	/**
	 * 分页获取单个百宝箱的评价
	 * @param req
	 * @param res
	 * @param chestBoxEvaluate
	 * @param row
	 * @param page
	 * @return
	 */
	@RequestMapping(value = "/all", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<ChestBoxEvaluate> getOneBoxAllEvaluate(HttpServletRequest req,HttpServletResponse res,
			ChestBoxEvaluate chestBoxEvaluate,String row ,String page) {
		logger.info("获取单个百宝箱的所有评价: {}", chestBoxEvaluate);
		res.setCharacterEncoding("UTF-8");
		BaseListResult<ChestBoxEvaluate> baseResult = new BaseListResult<ChestBoxEvaluate>();
		ChestBox cb=new ChestBox();
		List<ChestBoxEvaluate> list=new ArrayList<ChestBoxEvaluate>();
		try {
			req.setCharacterEncoding("UTF-8");
			// 参数校验
			if (chestBoxEvaluate == null) {
				throw new PatternException("百宝箱评价信息不能为空");
			}
			if (StringUtils.isBlank(chestBoxEvaluate.getChestBoxId())) {
				throw new PatternException("百宝箱ID不能为空");
			}
			cb=chestBoxService.get(chestBoxEvaluate.getChestBoxId());
			if (cb == null ) {
				throw new PatternException("该百宝箱不存在！");
			}
			list=chestBoxEvaluateService.getByBoxId2(chestBoxEvaluate.getChestBoxId(), row, page);
			//if (list != null && list.size() >0) {
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("获取评价成功！");
				baseResult.setResult(list);
			/*} else {
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("该百宝箱还未有评价！");
				baseResult.setResult(list);
			}*/
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<ChestBoxEvaluate>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxEvaluate>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxEvaluate>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxEvaluate>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
	
	
}
