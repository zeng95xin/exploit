package com.admin.service.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.ChestBoxDao;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.ChestBoxService;
import com.admin.service.ChestBoxTypeService;
import com.admin.service.HostMainService;
import com.admin.service.LoginUserServiceI;
import com.web.entity.ChestBox;
import com.web.entity.ChestBoxType;
import com.web.entity.HostMain;

@Service
public class ChestBoxServiceImpl implements ChestBoxService{

	@Autowired
	private ChestBoxDao cbd;
	
	@Autowired
	private HostMainService hostMainService;
	
	@Autowired
	private LoginUserServiceI loginUserServiceI;
	
	@Autowired
	private ChestBoxTypeService chestBoxTypeService;

	@Override
	public void add(ChestBox chestBox) throws Exception {
		cbd.save(chestBox);
		
	}

	@Override
	public DataGrid dataGrid(ChestBox chestBox, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<ChestBox> lhm = new ArrayList<ChestBox>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from ChestBox t ";
		List<ChestBox> l = cbd.find(hql + whereHql(chestBox, params) + orderHql(ph),
				params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (ChestBox t : l) {
				ChestBox u = new ChestBox();
				HostMain hostMain;
				//LoginUser loginUser;
				try {
					hostMain = hostMainService.get(t.getBoxHostID());
					if (hostMain != null ) {
						if (StringUtils.isNotBlank(hostMain.getHostNickname())) {
							t.setHostMainNickname(hostMain.getHostNickname());
						}
						if (StringUtils.isNotBlank(hostMain.getHostHomeName())) {
							t.setBoxHome(hostMain.getHostHomeName());
						}
					} else {
						t.setHostMainNickname("");
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				/*if (StringUtils.isNotBlank(t.getBoxBuyerId())) {
					
					loginUser=loginUserServiceI.getUser(t.getBoxBuyerId());
					if (loginUser != null) {
						if (StringUtils.isNotBlank(loginUser.getNickname())) {
							
							t.setBoxBuyerNickname(loginUser.getNickname());
						}
					}
				}*/
				BeanUtils.copyProperties(t, u);
				lhm.add(u);
			}
		}
		dg.setRows(lhm);
		dg.setTotal(cbd.count("select count(*) " + hql + whereHql(chestBox, params),
				params));
		return dg;
	}

	@Override
	public void delete(String chestBoxId) throws Exception {
		cbd.delete(cbd.get(ChestBox.class, chestBoxId));
		
	}

	@Override
	public void update(ChestBox chestBox) throws Exception {
		cbd.update(chestBox);
		
	}
	@Override
	public void update1(ChestBox chestBox) throws Exception {
		ChestBox cb=new ChestBox();
		cb=cbd.get(ChestBox.class, chestBox.getBoxID());
		if (StringUtils.isNotBlank(chestBox.getBoxDiscountPrice())) {
			cb.setBoxDiscountPrice(chestBox.getBoxDiscountPrice());
		}
		if (StringUtils.isNotBlank(chestBox.getBoxHome())) {
			cb.setBoxHome(chestBox.getBoxHome());
		}
		if (StringUtils.isNotBlank(chestBox.getBoxHostID())) {
			cb.setBoxHostID(chestBox.getBoxHostID());
		}
		if (StringUtils.isNotBlank(chestBox.getBoxID())) {
			cb.setBoxID(chestBox.getBoxID());
		}
		if (StringUtils.isNotBlank(chestBox.getBoxIntroduction())) {
			cb.setBoxIntroduction(chestBox.getBoxIntroduction());
		}
		if (StringUtils.isNotBlank(chestBox.getBoxMaxNum())) {
			cb.setBoxMaxNum(chestBox.getBoxMaxNum());
		}
		if (StringUtils.isNotBlank(chestBox.getBoxPrice())) {
			cb.setBoxPrice(chestBox.getBoxPrice());
		}
		if (StringUtils.isNotBlank(chestBox.getBoxServiceBeginTime())) {
			cb.setBoxServiceBeginTime(chestBox.getBoxServiceBeginTime());
		}
		if (StringUtils.isNotBlank(chestBox.getBoxServiceEndTime())) {
			cb.setBoxServiceEndTime(chestBox.getBoxServiceEndTime());
		}
		if (StringUtils.isNotBlank(chestBox.getBoxTitle())) {
			cb.setBoxTitle(chestBox.getBoxTitle());
		}
		if (StringUtils.isNotBlank(chestBox.getBoxType())) {
			cb.setBoxType(chestBox.getBoxType());
			ChestBoxType cbt=new ChestBoxType();
			cbt=chestBoxTypeService.get(chestBox.getBoxType());
			if (cbt != null) {
				
				cb.setBoxTypeName(cbt.getTypeName());
			}
		}
		if (StringUtils.isNotBlank(chestBox.getHostMainNickname())) {
			cb.setHostMainNickname(chestBox.getHostMainNickname());
		}
		if (StringUtils.isNotBlank(chestBox.getReleaseTime())) {
			cb.setReleaseTime(chestBox.getReleaseTime());
		}
		if (StringUtils.isNotBlank(chestBox.getUpdateTime())) {
			cb.setUpdateTime(chestBox.getUpdateTime());
		}
		cbd.update(cb);
		
	}

	@Override
	public ChestBox get(String chestBoxId) throws Exception {
		return cbd.get(ChestBox.class, chestBoxId);
	}
	
	/**
	 * where条件封装
	 * @param chestBox
	 * @param params
	 * @return
	 */
	private String whereHql(ChestBox chestBox, Map<String, Object> params) {
		String hql = "";
		if (chestBox != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(chestBox.getBoxType())) {//百宝箱分类
				hql += " and t.boxType  = :boxType";
				params.put("boxType", chestBox.getBoxType());
			}
			if (StringUtils.isNotBlank(chestBox.getBoxHome())) {//直播间名称
				hql += " and t.boxHome like = :boxHome";
				params.put("boxHome", "%%" +chestBox.getBoxHome()+ "%%");
			}
			if (StringUtils.isNotBlank(chestBox.getHostMainNickname())) {//主播昵称
				hql += " and t.hostMainNickname like = :hostMainNickname";
				params.put("hostMainNickname", "%%" +chestBox.getHostMainNickname()+ "%%");
			}
			/*if (StringUtils.isNotBlank(chestBox.getBoxBuyerNickname())) {//购买者昵称
				hql += " and t.boxBuyerNickname like = :boxBuyerNickname";
				params.put("boxBuyerNickname", "%%" +chestBox.getBoxBuyerNickname()+ "%%");
			}*/
			if (StringUtils.isNotBlank(chestBox.getBoxTitle())) {//百宝箱标题
				hql += " and t.boxTitle like = :boxTitle";
				params.put("boxTitle", "%%" +chestBox.getBoxTitle()+ "%%");
			}
			

		}
		return hql;
	}

	/**
	 * order封装
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public List<ChestBox> getByTypeId(String boxType) throws Exception {
		List<ChestBox> list=new ArrayList<ChestBox>();
		String hql = " from ChestBox t where 1=1 ";
		if (StringUtils.isNotBlank(boxType)) {
			 hql += " and t.boxType="+boxType;
		}
		list=cbd.find(hql);
		/*if (list!=null && list.size()>0) {
			return list;
		}*/
		return list;
	}

	@Override
	public List<ChestBox> getByTypeName(String boxTitle) {
		List<ChestBox> list=new ArrayList<ChestBox>();
		String hql = " from ChestBox t where 1=1 ";
		if (StringUtils.isNotBlank(boxTitle)) {
			 hql += " and t.boxTitle='"+boxTitle+"' ";
		}
		list=cbd.find(hql);
		if (list!=null && list.size()>0) {
			return list;
		}
		return null;
	}

	@Override
	public List<ChestBox> getByHostId(String boxHostID,String row ,String page) {
		if (StringUtils.isBlank(row)) {
			row="10";
		}
		if (StringUtils.isBlank(page)) {
			page="1";
		}
		List<ChestBox> list=new ArrayList<ChestBox>();
		List<ChestBox> list1=new ArrayList<ChestBox>();
		String hql = " from ChestBox t where 1=1 ";
		if (StringUtils.isNotBlank(boxHostID)) {
			 hql += " and t.boxHostID='"+boxHostID+"' order by releaseTime desc";
		}
		list=cbd.find(hql, Integer.parseInt(page), Integer.parseInt(row));
		if (list != null && list.size()>0) {
			for (ChestBox chestBox : list) {
				String date1="";
				String date2="";
				date1=new SimpleDateFormat("yyyy-MM-dd").format(new Date());
				date2=chestBox.getBoxServiceBeginTime();
				if (StringUtils.isNotBlank(date1) && StringUtils.isNotBlank(date2) && (date2.compareTo(date1)<0)) {
					chestBox.setIsLate("0");//过期
				} else {
					chestBox.setIsLate("1");//未过期
				}
				list1.add(chestBox);
			}
			return list1;
		}
		
		return null;
	}

	@Override
	public List<ChestBox> getByTime(String row, String page) {
		if (StringUtils.isBlank(row)) {
			row="10";
		}
		if (StringUtils.isBlank(page)) {
			page="1";
		}
		List<ChestBox> list=new ArrayList<ChestBox>();
		
		String hql = " from ChestBox t where 1=1 order by releaseTime desc";
		list=cbd.find(hql, Integer.parseInt(page), Integer.parseInt(row));
		if (list != null && (list.size() > 0)) {
			return list;
		}
		return null;
	}
	
}
