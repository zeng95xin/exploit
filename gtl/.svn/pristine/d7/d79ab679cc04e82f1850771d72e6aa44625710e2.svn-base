package com.lcjh.controller.api.bowen;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.constraints.Min;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.Range;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.Ad;
import com.admin.model.LoginUser;
import com.admin.service.AdServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.util.DateUtils;
import com.alibaba.fastjson.JSONObject;
import com.lcjh.biz.BowenBiz;
import com.lcjh.biz.LoginnUser;
import com.lcjh.entity.Bowen;
import com.lcjh.model.bowen.BowenModel;
import com.lcjh.result.BooleanBaseResult;
import com.lcjh.result.BooleanObjectResult;
import com.lcjh.result.BooleanPageResult;
import com.web.exception.CodeEnum;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

/**
 * 理财计划
 * 
 * @author Administrator
 */
@Controller
@RequestMapping("/api/bowen")
@Validated
@Api(tags = "-api-bowen", description = "博文,有关接口")
public class BowenApiController {

	// private final Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private LoginUserServiceI loginUserServiceI;
	@Autowired
	private BowenBiz bowenBiz;
	@Autowired
	private AdServiceI adService;
	@Autowired
	private LoginnUser loginnUser;

	
	
	@ApiOperation(value = "发布博文", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/addBowen", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanBaseResult addBowen(HttpServletRequest request,
			@ApiParam(value = "用户id", required = true) @RequestParam(required = false) @NotBlank(message = "用户id不能为空") @Size(min = 1, max = 200, message = "用户id在{min}-{max}个字") String userId,
			@ApiParam(value = "标题,名称", required = true) @RequestParam(required = false) @NotBlank(message = "标题不能为空") @Size(min = 1, max = 250, message = "标题在{min}-{max}个字") String title,
			@ApiParam(value = "摘要", required = true) @RequestParam(required = false) @NotBlank(message = "摘要不能为空") @Length(min = 1, max = 2000, message = "摘要在{min}-{max}个字") String zy,
			@ApiParam(value = "内容", required = true) @RequestParam(required = false) @NotBlank(message = "内容不能为空") @Length(min = 0, max = 2000, message = "内容在{min}-{max}个字") String content,
			@ApiParam(value = "价格", required = false) @RequestParam(required = false, defaultValue = "0") @Range(min = 0, max = 200000, message = "服务费在{min}-{max}之间") BigDecimal buyPrice,
			@ApiParam(value = "是否置顶,0否,1是", required = false) @RequestParam(required = false, defaultValue = "0") @Range(min = 0, max = 1, message = "是否置顶只能是0,1") int isTop,
			@ApiParam(value = "授权等级 1:完全公开、2:会员公开、3:积分浏览、4:付费浏览,到期免费,5:付费浏览,到期不免费,到期时间默认3天", required = false) @RequestParam(required = false, defaultValue = "1") @Range(min = 1, max = 5, message = "授权等级只能是{min}-{max}") int sqdj,
			@ApiParam(value = "图片,调用通用上传接口上传图片,多张图片之间用逗号隔开", required = false) @RequestParam(required = false, defaultValue = "") String imageUrl)
			throws Exception {

		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Bowen b = new Bowen();
		Calendar c = Calendar.getInstance();
		b.setAddTime(c.getTime());

		b.setTitle(title);
		b.setZy(zy);
		b.setContent(content);
		b.setUserId(userId);
		b.setBuyPrice(buyPrice);
		if (1 == isTop) {
			isTop = bowenBiz.countBySql("select max(isTop) from t_bowen", null) + 1;
		}
		b.setIsTop(isTop);
		b.setSqdj(sqdj);
		b.setFreeTime(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24 * 3));

		// String imageUrl = FileUploadDeleteUtil.upload(image,
		// ProjectConfig.imgRootURL, ProjectConfig.imgSavePath, null, null);
		b.setImage(imageUrl);

		bowenBiz.save(b);

		return BooleanBaseResult.SUCCESS;
	}

	@ApiOperation(value = "修改博文", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/editBowen", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanBaseResult editBowen(HttpServletRequest request,
			@ApiParam(value = "博文id", required = true) @RequestParam(required = false) @NotBlank(message = "博文id不能为空") @Size(min = 1, max = 200, message = "博文id在{min}-{max}个字") String bowenId,
			@ApiParam(value = "用户id", required = true) @RequestParam(required = false) @NotBlank(message = "用户id不能为空") @Size(min = 1, max = 200, message = "用户id在{min}-{max}个字") String userId,
			@ApiParam(value = "标题,名称", required = true) @RequestParam(required = false) @NotBlank(message = "标题不能为空") @Size(min = 1, max = 250, message = "标题在{min}-{max}个字") String title,
			@ApiParam(value = "摘要", required = true) @RequestParam(required = false) @NotBlank(message = "摘要不能为空") @Length(min = 1, max = 2000, message = "摘要在{min}-{max}个字") String zy,
			@ApiParam(value = "内容", required = true) @RequestParam(required = false) @NotBlank(message = "内容不能为空") @Length(min = 0, max = 2000, message = "内容在{min}-{max}个字") String content,
			@ApiParam(value = "价格", required = false) @RequestParam(required = false, defaultValue = "0") @Range(min = 0, max = 200000, message = "服务费在{min}-{max}之间") BigDecimal buyPrice,
			@ApiParam(value = "是否置顶,0否,1是", required = false) @RequestParam(required = false, defaultValue = "0") @Range(min = 0, max = 1, message = "是否置顶只能是0,1") int isTop,
			@ApiParam(value = "授权等级 1:完全公开、2:会员公开、3:积分浏览、4:付费浏览,到期免费,5:付费浏览,到期不免费,到期时间默认3天", required = false) @RequestParam(required = false, defaultValue = "1") @Range(min = 1, max = 5, message = "授权等级只能是{min}-{max}") int sqdj,
			@ApiParam(value = "图片,调用通用上传接口上传图片", required = false) @RequestParam(required = false, defaultValue = "") String imageUrl,
			@ApiParam(value = "旧图片,如果旧图片和新图片都为空则会删除图片", required = false) @RequestParam(required = false) String oldImage)
			throws Exception {

		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Bowen b = bowenBiz.get(Bowen.class, bowenId);
		Assert.notNull(b, "博文不存在");
		Assert.isTrue(userId.equals(b.getUserId()), "只能修改自己的博文");

		b.setTitle(title);
		b.setZy(zy);
		b.setContent(content);
		b.setUserId(userId);
		b.setBuyPrice(buyPrice);
		b.setSqdj(sqdj);
		if (1 == isTop) {
			isTop = bowenBiz.countBySql("select max(isTop) from t_bowen", null) + 1;
		}
		b.setIsTop(isTop);

		if (!StringUtils.hasText(imageUrl)) {
			imageUrl = oldImage;
		}
		b.setImage(imageUrl);
		bowenBiz.update(b);
		return BooleanBaseResult.SUCCESS;
	}

	@ApiOperation(value = "获取博文列表,分页", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/getBowenPageList", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanPageResult<BowenModel> getBowenPageList(HttpServletRequest request,
			@ApiParam(value = "页号,大于0,默认1") @RequestParam(required = false, defaultValue = "1") @Min(value = 1, message = "页号必须大于0") Integer page,
			@ApiParam(value = "条数,大于0,默认10") @RequestParam(required = false, defaultValue = "10") @Min(value = 1, message = "条数必须大于0") Integer rows,
			@ApiParam(value = "当前用户id", required = false) @RequestParam(required = false, defaultValue = "-111") @Size(min = 1, max = 200, message = "当前用户id在{min}-{max}个字") String currentUserId)
			throws Exception {
		BooleanPageResult<BowenModel> result = BooleanPageResult.getSuccess();
		String sql = "select a.*,b.`name`,b.nickname,b.tx, case " + "when a.userId = :currentUserId " + "then 1 "
				+ "when (a.sqdj = '4' " + "and a.freeTime > now() "
				+ "and (select count(1) from t_bowen_user_buy_record b where b.bowenId = a.id and b.userId = :currentUserId) < 1) "
				+ "then 0 " + "when (a.sqdj = '5' "
				+ "and (select count(1) from t_bowen_user_buy_record b where b.bowenId = a.id and b.userId = :currentUserId) < 1) "
				+ "then 0 " + "else 1 " + "end showDetail " + "from t_bowen a "
				+ "left outer join loginuser b on a.userId = b.id "
				+ "where a.isUserDelete=0 order by a.isTop desc, a.addTime desc";
		String sqlCount = "select count(1) from t_bowen a where 1=1 ";
		Map<String, Object> params = new HashMap<String, Object>(1);
		params.put("currentUserId", currentUserId);
		List<BowenModel> list_group = bowenBiz.findBySqlBuildObject(sql, params, BowenModel.class, page, rows);

		int total = bowenBiz.countBySql(sqlCount, null);
		PageRequest pager = new PageRequest(page - 1, rows);
		Page<BowenModel> pageData = new PageImpl<BowenModel>(list_group, pager, total);

		result.setResult(pageData);
		return result;

	}

	@ApiOperation(value = "获取博文详情,返回html页面", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/getBowenDetail", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	public String getBowenDetail(HttpServletRequest request,
			@ApiParam(value = "博文id", required = true) @NotBlank(message = "博文id不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "博文id在{min}-{max}个字") String bowenId,
			@ApiParam(value = "当前用户id", required = true) @NotBlank(message = "当前用户id不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "当前用户id在{min}-{max}个字") String currentUserId)
			throws Exception {
		String sql = "select a.*,b.`name`,b.nickname,b.tx, case " + "when a.userId = :currentUserId " + "then 1 "
				+ "when (a.sqdj = '4' " + "and a.freeTime > now() "
				+ "and (select count(1) from t_bowen_user_buy_record b where b.bowenId = a.id and b.userId = :currentUserId) < 1) "
				+ "then 0 " + "when (a.sqdj = '5' "
				+ "and (select count(1) from t_bowen_user_buy_record b where b.bowenId = a.id and b.userId = :currentUserId) < 1) "
				+ "then 0 " + "else 1 " + "end showDetail " + "from t_bowen a "
				+ "left outer join loginuser b on a.userId = b.id "
				+ "where a.id=:bowenId order by a.isTop desc, a.addTime desc";
		Map<String, Object> params = new HashMap<String, Object>(2);
		params.put("currentUserId", currentUserId);
		params.put("bowenId", bowenId);
		BowenModel model = bowenBiz.findBySqlBuildObjectOne(sql, params, BowenModel.class);

		String path = request.getContextPath();
		String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path
				+ "/";
		request.setAttribute("basePath", basePath);
		request.setAttribute("htmlPath", basePath + "html/");

		int showDetail = 1;
		if (null == model) {
			showDetail = 0;
		} else {
			if (model.getShowDetail().intValue() == 0) {
				showDetail = 2;
			} else {
				request.setAttribute("uid", currentUserId);
				request.setAttribute("id", bowenId);
				request.setAttribute("title", model.getTitle());
				request.setAttribute("content", model.getContent());
				String tx = StringUtils.hasText(model.getTx()) ? model.getTx()
						: basePath + "html/images/touxiang_moren.png";
				if (tx.indexOf(".") < 0) {
					tx += ".jpg";
				}
				request.setAttribute("tx", tx);
				request.setAttribute("nickname", model.getNickname());
				request.setAttribute("zanCount", model.getZanCount());
				request.setAttribute("buyPrice", model.getBuyPrice().setScale(2));
				request.setAttribute("addTime", DateUtils.DateToStr(DateUtils.YYYY_MM_DD_HH_MM_SS, model.getAddTime()));
				request.setAttribute("images",
						StringUtils.hasText(model.getImage()) ? model.getImage().split(",") : null);
			}
		}

		List<Ad> list_ads = adService.getAdList("32", "-1", "1000");
		request.setAttribute("ads", list_ads);

		request.setAttribute("showDetail", showDetail);
		Bowen b = bowenBiz.get(Bowen.class, bowenId);
		b.setZanCount(b.getZanCount() + 1);
		bowenBiz.update(b);
		return "/html/bowenDetail";
	}

	@ApiOperation(value = "吐槽,赞博文", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/zantuBowen", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanBaseResult zantuBowen(HttpServletRequest request,
			@ApiParam(value = "博文id", required = true) @RequestParam(required = false) @NotBlank(message = "博文id不能为空") @Size(min = 1, max = 200, message = "博文id在{min}-{max}个字") String bowenId,
			@ApiParam(value = "用户id", required = true) @RequestParam(required = false) @NotBlank(message = "用户id不能为空") @Size(min = 1, max = 200, message = "用户id在{min}-{max}个字") String userId,
			@ApiParam(value = "操作类型,1:吐槽,2:赞", required = false) @RequestParam(required = false, defaultValue = "1") @Range(min = 1, max = 2, message = "操作类型在{min}-{max}") int type)
			throws Exception {

		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Bowen b = bowenBiz.get(Bowen.class, bowenId);
		Assert.notNull(b, "博文不存在");
		if (1 == type) {
			b.setTcCount(b.getTcCount() + 1);
		} else if (2 == type) {
			b.setZanCount(b.getZanCount() + 1);
		}
		bowenBiz.update(b);
		return BooleanBaseResult.SUCCESS;
	}

	@ApiOperation(value = "删除博文", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/deleteBowen", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanBaseResult deleteBowen(HttpServletRequest request,
			@ApiParam(value = "博文id", required = true) @RequestParam(required = false) @NotBlank(message = "博文id不能为空") @Size(min = 1, max = 200, message = "博文id在{min}-{max}个字") String bowenId,
			@ApiParam(value = "用户id", required = true) @RequestParam(required = false) @NotBlank(message = "用户id不能为空") @Size(min = 1, max = 200, message = "用户id在{min}-{max}个字") String userId)
			throws Exception {
		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Bowen b = bowenBiz.get(Bowen.class, bowenId);
		Assert.notNull(b, "博文不存在");
		Assert.isTrue(userId.equals(b.getUserId()), "只能删除自己的博文");
		b.setIsUserDelete(1);
		bowenBiz.update(b);
		return BooleanBaseResult.SUCCESS;
	}

	@ApiOperation(value = "获取博文详情,返回html页面(jsonp)", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/getBowenDetailMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	public void getBowenDetailMore(HttpServletResponse res, HttpServletRequest request,
			@ApiParam(value = "博文id", required = true) @NotBlank(message = "博文id不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "博文id在{min}-{max}个字") String bowenId,
			@ApiParam(value = "当前用户id", required = true) @NotBlank(message = "当前用户id不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "当前用户id在{min}-{max}个字") String currentUserId)
			throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());
		/*
		 * getBowenDetail(request, bowenId, currentUserId); String htmlSource =
		 * null; File file = new File("src/main/webapp/html/bowenDetail.jsp");
		 * FileInputStream in = null; try { in = new FileInputStream(file); //
		 * size 为字串的长度 ，这里一次性读完 int size = in.available(); byte[] buffer = new
		 * byte[size]; in.read(buffer); in.close(); htmlSource = new
		 * String(buffer, "UTF-8"); } catch (IOException e) {
		 * e.printStackTrace(); }
		 */
		result.setResult("http://admin.gtl666.com/gtl/api/bowen/getBowenDetail?bowenId=" + bowenId + "&currentUserId="
				+ currentUserId);
		String resStr = "";
		String callback = request.getParameter("callback");
		if (null != callback) {
			resStr += callback + "(";
			resStr += JSONObject.toJSONString(result);
			resStr += ")";
		} else {
			resStr = JSONObject.toJSONString(result);
		}
		request.setCharacterEncoding("utf-8");
		res.setContentType("text/html;charset=utf-8");
		res.getWriter().write(resStr);
		res.getWriter().flush();
	}

	public static byte[] readInputStream(InputStream instream) throws Exception {
		ByteArrayOutputStream outStream = new ByteArrayOutputStream();
		byte[] buffer = new byte[1204];
		int len = 0;
		while ((len = instream.read(buffer)) != -1) {
			outStream.write(buffer, 0, len);
		}
		instream.close();
		return outStream.toByteArray();
	}

	@ApiOperation(value = "获取博文列表,分页(jsonp)", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/getBowenPageListMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void getBowenPageListMore(HttpServletRequest request, HttpServletResponse res,
			@ApiParam(value = "页号,大于0,默认1") @RequestParam(required = false, defaultValue = "1") @Min(value = 1, message = "页号必须大于0") Integer page,
			@ApiParam(value = "条数,大于0,默认10") @RequestParam(required = false, defaultValue = "10") @Min(value = 1, message = "条数必须大于0") Integer rows,
			@ApiParam(value = "手机号", required = true) @RequestParam(required = false) @NotBlank(message = "手机号不能为空") @Size(min = 11, max = 20, message = "手机号在{min}-{max}个字") String phone)
			throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());
		Map<String, Object> params = new HashMap<String, Object>(1);
		params.put("phone", phone);
		String sql1="select id from loginuser where phone= :phone";
		List<Object[]> findBySql = loginnUser.findBySql(sql1, params);
		String uid=findBySql.toString();
		String sql = "select a.*,b.`name`,b.nickname,b.tx, case " + "when a.userId = :currentUserId " + "then 1 "
				+ "when (a.sqdj = '4' " + "and a.freeTime > now() "
				+ "and (select count(1) from t_bowen_user_buy_record b where b.bowenId = a.id and b.userId = :currentUserId) < 1) "
				+ "then 0 " + "when (a.sqdj = '5' "
				+ "and (select count(1) from t_bowen_user_buy_record b where b.bowenId = a.id and b.userId = :currentUserId) < 1) "
				+ "then 0 " + "else 1 " + "end showDetail " + "from t_bowen a "
				+ "left outer join loginuser b on a.userId = b.id "
				+ "where a.isUserDelete=0 order by a.isTop desc, a.addTime desc";
		String sqlCount = "select count(1) from t_bowen a where 1=1 ";
		Map<String, Object> params2 = new HashMap<String, Object>(1);
		params2.put("currentUserId", uid);
		List<BowenModel> list_group = bowenBiz.findBySqlBuildObject(sql, params2, BowenModel.class, page, rows);
		int total = bowenBiz.countBySql(sqlCount, null);
		PageRequest pager = new PageRequest(page - 1, rows);
		Page<BowenModel> pageData = new PageImpl<BowenModel>(list_group, pager, total);
		result.setResult(pageData);
		String resStr = "";
		String callback = request.getParameter("callback");
		if (null != callback) {
			resStr += callback + "(";
			resStr += JSONObject.toJSONString(result);
			resStr += ")";
		} else {
			resStr = JSONObject.toJSONString(result);
		}
		request.setCharacterEncoding("utf-8");
		res.setContentType("text/html;charset=utf-8");
		res.getWriter().write(resStr);
		res.getWriter().flush();
	}

	@ApiOperation(value = "吐槽,赞博文(jsonp)", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/zantuBowenMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void zantuBowenMore(HttpServletResponse res, HttpServletRequest request,
			@ApiParam(value = "博文id", required = true) @RequestParam(required = false) @NotBlank(message = "博文id不能为空") @Size(min = 1, max = 200, message = "博文id在{min}-{max}个字") String bowenId,
			@ApiParam(value = "用户id", required = true) @RequestParam(required = false) @NotBlank(message = "用户id不能为空") @Size(min = 1, max = 200, message = "用户id在{min}-{max}个字") String userId,
			@ApiParam(value = "操作类型,1:吐槽,2:赞", required = false) @RequestParam(required = false, defaultValue = "1") @Range(min = 1, max = 2, message = "操作类型在{min}-{max}") int type)
			throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());

		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Bowen b = bowenBiz.get(Bowen.class, bowenId);
		Assert.notNull(b, "博文不存在");
		if (1 == type) {
			b.setTcCount(b.getTcCount() + 1);
		} else if (2 == type) {
			b.setZanCount(b.getZanCount() + 1);
		}
		bowenBiz.update(b);
		result.setResult("SUCCESS");
		String resStr = "";
		String callback = request.getParameter("callback");
		if (null != callback) {
			resStr += callback + "(";
			resStr += JSONObject.toJSONString(result);
			resStr += ")";
		} else {
			resStr = JSONObject.toJSONString(result);
		}
		request.setCharacterEncoding("utf-8");
		res.setContentType("text/html;charset=utf-8");
		res.getWriter().write(resStr);
		res.getWriter().flush();
	}

	@ApiOperation(value = "删除博文(jsonp)", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/deleteBowenMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void deleteBowenMore(HttpServletResponse res, HttpServletRequest request,
			@ApiParam(value = "博文id", required = true) @RequestParam(required = false) @NotBlank(message = "博文id不能为空") @Size(min = 1, max = 200, message = "博文id在{min}-{max}个字") String bowenId,
			@ApiParam(value = "用户id", required = true) @RequestParam(required = false) @NotBlank(message = "用户id不能为空") @Size(min = 1, max = 200, message = "用户id在{min}-{max}个字") String userId)
			throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());
		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Bowen b = bowenBiz.get(Bowen.class, bowenId);
		Assert.notNull(b, "博文不存在");
		Assert.isTrue(userId.equals(b.getUserId()), "只能删除自己的博文");
		b.setIsUserDelete(1);
		bowenBiz.update(b);
		result.setResult("SUCCESS");
		String resStr = "";
		String callback = request.getParameter("callback");
		if (null != callback) {
			resStr += callback + "(";
			resStr += JSONObject.toJSONString(result);
			resStr += ")";
		} else {
			resStr = JSONObject.toJSONString(result);
		}
		request.setCharacterEncoding("utf-8");
		res.setContentType("text/html;charset=utf-8");
		res.getWriter().write(resStr);
		res.getWriter().flush();
	}

	@ApiOperation(value = "发布博文(jsonp)", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/addBowenMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void addBowenMore(HttpServletResponse res, HttpServletRequest request,
			@ApiParam(value = "用户id", required = true) @RequestParam(required = false) @NotBlank(message = "用户id不能为空") @Size(min = 1, max = 200, message = "用户id在{min}-{max}个字") String userId,
			@ApiParam(value = "标题,名称", required = true) @RequestParam(required = false) @NotBlank(message = "标题不能为空") @Size(min = 1, max = 250, message = "标题在{min}-{max}个字") String title,
			@ApiParam(value = "摘要", required = true) @RequestParam(required = false) @NotBlank(message = "摘要不能为空") @Length(min = 1, max = 2000, message = "摘要在{min}-{max}个字") String zy,
			@ApiParam(value = "内容", required = true) @RequestParam(required = false) @NotBlank(message = "内容不能为空") @Length(min = 0, max = 2000, message = "内容在{min}-{max}个字") String content,
			@ApiParam(value = "价格", required = false) @RequestParam(required = false, defaultValue = "0") @Range(min = 0, max = 200000, message = "服务费在{min}-{max}之间") BigDecimal buyPrice,
			@ApiParam(value = "是否置顶,0否,1是", required = false) @RequestParam(required = false, defaultValue = "0") @Range(min = 0, max = 1, message = "是否置顶只能是0,1") int isTop,
			@ApiParam(value = "授权等级 1:完全公开、2:会员公开、3:积分浏览、4:付费浏览,到期免费,5:付费浏览,到期不免费,到期时间默认3天", required = false) @RequestParam(required = false, defaultValue = "1") @Range(min = 1, max = 5, message = "授权等级只能是{min}-{max}") int sqdj,
			@ApiParam(value = "图片,调用通用上传接口上传图片,多张图片之间用逗号隔开", required = false) @RequestParam(required = false, defaultValue = "") String imageUrl)
			throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());

		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Bowen b = new Bowen();
		Calendar c = Calendar.getInstance();
		b.setAddTime(c.getTime());

		b.setTitle(title);
		b.setZy(zy);
		b.setContent(content);
		b.setUserId(userId);
		b.setBuyPrice(buyPrice);
		if (1 == isTop) {
			isTop = bowenBiz.countBySql("select max(isTop) from t_bowen", null) + 1;
		}
		b.setIsTop(isTop);
		b.setSqdj(sqdj);
		b.setFreeTime(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24 * 3));

		// String imageUrl = FileUploadDeleteUtil.upload(image,
		// ProjectConfig.imgRootURL, ProjectConfig.imgSavePath, null, null);
		b.setImage(imageUrl);

		bowenBiz.save(b);

		result.setResult("SUCCESS");
		String resStr = "";
		String callback = request.getParameter("callback");
		if (null != callback) {
			resStr += callback + "(";
			resStr += JSONObject.toJSONString(result);
			resStr += ")";
		} else {
			resStr = JSONObject.toJSONString(result);
		}
		request.setCharacterEncoding("utf-8");
		res.setContentType("text/html;charset=utf-8");
		res.getWriter().write(resStr);
		res.getWriter().flush();
	}

	@ApiOperation(value = "修改博文(jsonp)", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/editBowenMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void editBowenMore(HttpServletResponse res, HttpServletRequest request,
			@ApiParam(value = "博文id", required = true) @RequestParam(required = false) @NotBlank(message = "博文id不能为空") @Size(min = 1, max = 200, message = "博文id在{min}-{max}个字") String bowenId,
			@ApiParam(value = "用户id", required = true) @RequestParam(required = false) @NotBlank(message = "用户id不能为空") @Size(min = 1, max = 200, message = "用户id在{min}-{max}个字") String userId,
			@ApiParam(value = "标题,名称", required = true) @RequestParam(required = false) @NotBlank(message = "标题不能为空") @Size(min = 1, max = 250, message = "标题在{min}-{max}个字") String title,
			@ApiParam(value = "摘要", required = true) @RequestParam(required = false) @NotBlank(message = "摘要不能为空") @Length(min = 1, max = 2000, message = "摘要在{min}-{max}个字") String zy,
			@ApiParam(value = "内容", required = true) @RequestParam(required = false) @NotBlank(message = "内容不能为空") @Length(min = 0, max = 2000, message = "内容在{min}-{max}个字") String content,
			@ApiParam(value = "价格", required = false) @RequestParam(required = false, defaultValue = "0") @Range(min = 0, max = 200000, message = "服务费在{min}-{max}之间") BigDecimal buyPrice,
			@ApiParam(value = "是否置顶,0否,1是", required = false) @RequestParam(required = false, defaultValue = "0") @Range(min = 0, max = 1, message = "是否置顶只能是0,1") int isTop,
			@ApiParam(value = "授权等级 1:完全公开、2:会员公开、3:积分浏览、4:付费浏览,到期免费,5:付费浏览,到期不免费,到期时间默认3天", required = false) @RequestParam(required = false, defaultValue = "1") @Range(min = 1, max = 5, message = "授权等级只能是{min}-{max}") int sqdj,
			@ApiParam(value = "图片,调用通用上传接口上传图片", required = false) @RequestParam(required = false, defaultValue = "") String imageUrl,
			@ApiParam(value = "旧图片,如果旧图片和新图片都为空则会删除图片", required = false) @RequestParam(required = false) String oldImage)
			throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());

		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Bowen b = bowenBiz.get(Bowen.class, bowenId);
		Assert.notNull(b, "博文不存在");
		Assert.isTrue(userId.equals(b.getUserId()), "只能修改自己的博文");

		b.setTitle(title);
		b.setZy(zy);
		b.setContent(content);
		b.setUserId(userId);
		b.setBuyPrice(buyPrice);
		b.setSqdj(sqdj);
		if (1 == isTop) {
			isTop = bowenBiz.countBySql("select max(isTop) from t_bowen", null) + 1;
		}
		b.setIsTop(isTop);

		if (!StringUtils.hasText(imageUrl)) {
			imageUrl = oldImage;
		}
		b.setImage(imageUrl);
		bowenBiz.update(b);
		result.setResult("SUCCESS");
		String resStr = "";
		String callback = request.getParameter("callback");
		if (null != callback) {
			resStr += callback + "(";
			resStr += JSONObject.toJSONString(result);
			resStr += ")";
		} else {
			resStr = JSONObject.toJSONString(result);
		}
		request.setCharacterEncoding("utf-8");
		res.setContentType("text/html;charset=utf-8");
		res.getWriter().write(resStr);
		res.getWriter().flush();
	}

}
