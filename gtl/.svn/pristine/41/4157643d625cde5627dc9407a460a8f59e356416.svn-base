package com.admin.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.AdDaoI;
import com.admin.dao.LoginUserDaoI;
import com.admin.dao.PtsMrzcjsDaoI;
import com.admin.dao.RoleDaoI;
import com.admin.dao.UserDaoI;
import com.admin.model.Ad;
import com.admin.model.LoginUser;
import com.admin.model.PtsMrzcjs;
import com.admin.model.Tresource;
import com.admin.model.Trole;
import com.admin.model.Tuser;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.service.AdServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.PtsMrzcjsServiceI;
import com.admin.service.UserServiceI;
import com.admin.util.MD5Util;
import com.web.entity.Person;
import com.web.util.PageModel;
import com.web.util.TimeUtils;

@Service
public class PtsMrzcjsServiceImpl implements PtsMrzcjsServiceI {

	@Autowired
	private PtsMrzcjsDaoI dao;

	@Override
	public DataGrid dataGrid(PtsMrzcjs ad, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<PtsMrzcjs> ul = new ArrayList<PtsMrzcjs>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from PtsMrzcjs t ";
		List<PtsMrzcjs> l = dao.find(hql + whereHql(ad, params) + orderHql(ph),
				params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (PtsMrzcjs t : l) {
				PtsMrzcjs u = new PtsMrzcjs();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count("select count(*) " + hql + whereHql(ad, params),
				params));
		return dg;
	}

	/**
	 * where条件封装
	 * 
	 * @param ad
	 * @param params
	 * @return
	 */
	private String whereHql(PtsMrzcjs ad, Map<String, Object> params) {
		String hql = "";
		/*
		 * if (ad != null) { hql += " where 1=1 "; if (ad.getLanmu() != null) {
		 * hql += " and t.lanmu = :lanmu"; params.put("lanmu", ad.getLanmu()); }
		 * 
		 * }
		 */
		return hql;
	}

	/**
	 * order封装
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	/**
	 * 新增
	 */
	@Override
	public void add(PtsMrzcjs ad) throws Exception {
		dao.save(ad);
	}

	/**
	 * 删除
	 */
	@Override
	public void delete(String id) throws Exception {
		PtsMrzcjs ad = dao.get(PtsMrzcjs.class, id);
		dao.delete(ad);
	}

	/**
	 * 修改
	 */
	@Override
	public void update(PtsMrzcjs ad) throws Exception {
		PtsMrzcjs a = dao.get(PtsMrzcjs.class, ad.getId());
		/*
		 * a.setTitle(ad.getTitle()); a.setHref(ad.getHref());
		 * a.setImage(ad.getImage());
		 * a.setPtsMrzcjsdtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		 * a.setIp(ad.getIp()); a.setAuthor(ad.getAuthor());
		 */
		dao.update(a);
	}

	/**
	 * 得到对象
	 */
	@Override
	public PtsMrzcjs get(String id) throws Exception {
		return dao.get(PtsMrzcjs.class, id);
	}

	@Override
	public List<PtsMrzcjs> getPtsMrzcjsList(String lanmu, String page,
			String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ").append(PtsMrzcjs.class.getSimpleName())
				.append(" a ");
		sff.append(" where 1=1");
		if (StringUtils.isNotBlank(lanmu)) {
			sff.append(" and lanmu='" + lanmu + "'");
		}
		List<PtsMrzcjs> list = dao.find(sff.toString(), Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	@Override
	public int getCount(String lanmu) {
		String hql = "select count(*) from PtsMrzcjs where 1=1";
		if (StringUtils.isNotBlank(lanmu)) {
			hql += " and lanmu='" + lanmu + "' ";
		}
		return dao.count(hql).intValue();
	}

	@Override
	public List<PtsMrzcjs> nosjsList(String jstime) {
		// TODO Auto-generated method stub
		String sql = "select a.id,a.userid,a.username,a.zczl from t_PtsMrzcjs a where "
//				+ "NOT EXISTS(select * from t_Mrzcjs b where a.userid = b.userid and b.jstime ='" + jstime + "')"
				+ "a.userid not in (select b.userid from t_Mrzcjs b where b.jstime ='" + jstime + "')"
				+ " and jstime='" + jstime + "'";
		List<Object[]> list01 = dao.findBySql(sql);
		List<PtsMrzcjs> list = new ArrayList<PtsMrzcjs>();
		if (list01.size() > 0) {
			for (int i = 0; i < list01.size(); i++) {
				Object[] ob = list01.get(i);
				String id = ob[0].toString();
				String userid = ob[1].toString();
				String username = ob[2].toString();
				String zczl = ob[3].toString();
				PtsMrzcjs ptsmr = new PtsMrzcjs();
				ptsmr.setId(id);
				ptsmr.setUserid(userid);
				ptsmr.setUsername(username);
				ptsmr.setZczl(zczl);
				ptsmr.setJstime(jstime);
				list.add(ptsmr);
			}
		}

		return list;
	}

}
