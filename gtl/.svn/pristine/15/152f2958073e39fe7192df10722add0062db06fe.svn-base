package com.admin.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.ChatMessageEntityDao;
import com.admin.service.ChatMessageEntityService;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.huanxin.util.ChartUtlis;
import com.web.entity.ChatMessageEntity;
import com.web.util.TimeUtils;

@Service
public class ChatMessageEntityServiceImpl implements ChatMessageEntityService{
	
	@Autowired
	private ChatMessageEntityDao chatMessageEntityDao;

	@Override
	public void add(ChatMessageEntity room) throws Exception {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void addChatMessage() throws Exception {
		//System.out.println("聊天记录查询开始了....................................................");
		
		String timestamp="";//时间戳
		String cursor="";//环信分页查询标识
		
		List<ChatMessageEntity > listc=chatMessageEntityDao.find(" from ChatMessageEntity where 1=1 order by timeStamps desc");
		if (listc == null || (listc.size() <= 0)) {//第一次获取聊天记录  获取定时的时间戳之前的所有聊天记录
			Date date=new Date();
			timestamp=date.getTime()+"";
			cursor=addMessage(timestamp,cursor); 
			
			while (StringUtils.isNotBlank(cursor)) {
				timestamp="";
				List<ChatMessageEntity > listc1=new ArrayList<ChatMessageEntity>();
				listc1=chatMessageEntityDao.find(" from ChatMessageEntity where 1=1 order by timeStamps desc");
				if (listc1 != null && (listc1.size() > 0)) {
					timestamp=listc1.get(0).getTimeStamps();
					if (StringUtils.isNotBlank(timestamp)) {
						cursor=addMessage(timestamp,cursor);
					}
				}else{
					Date date1=new Date();
					timestamp=date1.getTime()+"";
					cursor=addMessage(timestamp,cursor);
				}
			}
		}else{//根据数据库上一次获取的最后一条记录的时间戳分页查询聊天记录
			timestamp=listc.get(0).getTimeStamps();
			//System.out.println(timestamp);
			if (StringUtils.isNotBlank(timestamp)) {
				cursor=addMessageAfterTimestamp(timestamp, cursor);
				
				while (StringUtils.isNotBlank(cursor)) {
					timestamp="";
					List<ChatMessageEntity > listc1=new ArrayList<ChatMessageEntity>();
					listc1=chatMessageEntityDao.find(" from ChatMessageEntity where 1=1 order by timeStamps desc");
					if (listc1 != null && (listc1.size() > 0)) {
						timestamp=listc1.get(0).getTimeStamps();
						cursor=addMessageAfterTimestamp(timestamp, cursor);
					}else{
						Date date1=new Date();
						timestamp=date1.getTime()+"";
						cursor=addMessageAfterTimestamp(timestamp, cursor);
					}
				}
			}
		}
		//System.out.println("-------------------聊天记录查询结束--------------------------------------");
	}
	
	/**
	 * 分页查询时间戳之后的所有聊天记录
	 * @param timestamp
	 * @param cursor
	 * @return
	 * @throws Exception
	 */
	public String addMessageAfterTimestamp(String timestamp,String cursor) throws Exception{
		String message="";
		ChartUtlis cu=new ChartUtlis();
		JSONObject json=new JSONObject();
		
		message=cu.getRoomMessage(timestamp, cursor);
		json=JSON.parseObject(message);
		String count=json.getString("count");
		String entities=json.getString("entities");
		cursor=json.getString("cursor");
		if (StringUtils.isNotBlank(count) && (Integer.parseInt(count) > 0)) {
			JSONArray array=JSON.parseArray(entities);
			for (int i = 0; i < array.size(); i++) {
				JSONObject jsonObject=new JSONObject();
				ChatMessageEntity chatMessageEntity=new ChatMessageEntity();
				ChatMessageEntity chatMessageEntityOld=new ChatMessageEntity();
				jsonObject=array.getJSONObject(i);
				String uuid=jsonObject.getString("uuid");
				if (StringUtils.isNotBlank(uuid)) {
					chatMessageEntityOld=chatMessageEntityDao.get(ChatMessageEntity.class, uuid);
					if (chatMessageEntityOld != null) {
						continue;//如果数据库中已经存在该uuid对应的信息就跳过此次循环；
					}
				}else{
					continue;//如果信息uuid为空就跳过此次循环；
				}
				
				String type=jsonObject.getString("type");
				String created=jsonObject.getString("created");
				String modified=jsonObject.getString("modified");
				String timestamps=jsonObject.getString("timestamp");
				String from=jsonObject.getString("from");
				String msg_id=jsonObject.getString("msg_id");
				String to=jsonObject.getString("to");
				String chat_type=jsonObject.getString("chat_type");
				String payload=jsonObject.getString("payload");
				//System.out.println("payload的内容是"+payload);
				
				chatMessageEntity.setId(uuid);//环信给的每一条消息的uuid
				chatMessageEntity.setMessage_type(type);//聊天记录，是固定的值
				chatMessageEntity.setChat_type(chat_type);//群聊、单聊
				chatMessageEntity.setCreated(created);//暂时不清楚
				chatMessageEntity.setTimeStamps(timestamps);//消息的时间戳
				chatMessageEntity.setFromHost(from);//消息发送者
				chatMessageEntity.setModified(modified);//不清楚
				chatMessageEntity.setToPerson(to);;//消息接受者
				chatMessageEntity.setTime(TimeUtils.stringlongToyyyyMMdd(timestamps));//年月日
				chatMessageEntity.setDate(TimeUtils.stringlongToyyyyMMddHHmm(timestamps));//年月日时分秒
				chatMessageEntity.setHours(TimeUtils.stringlongToHHmmss(timestamps));//时分秒
				if (StringUtils.isNotBlank(payload)) {
					String bodies=JSON.parseObject(payload).getString("bodies");
					//System.out.println("bodies的内容是："+bodies);
					JSONArray arrayNew=JSON.parseArray(bodies);
					for (int j = 0; j < arrayNew.size(); j++) {
						JSONObject jsonObjectNew=new JSONObject();
						jsonObjectNew=arrayNew.getJSONObject(j);
						String msgType=jsonObjectNew.getString("type");
						if (StringUtils.isNotBlank(msgType)) {
							chatMessageEntity.setType(msgType);//消息类型
							if (msgType.equals("txt")) {//文本信息
								String msg=jsonObjectNew.getString("msg");
								if (StringUtils.isNotBlank(msg)) {
									chatMessageEntity.setMsg(msg);
								}
								String ext=JSON.parseObject(payload).getString("ext");
								if (StringUtils.isNotBlank(ext)) {
									String headImage=JSON.parseObject(ext).getString("headImage");
									String nickname=JSON.parseObject(ext).getString("nickname");
									if (StringUtils.isNotBlank(headImage)) {
										chatMessageEntity.setHeadImage(headImage);
									}
									if (StringUtils.isNotBlank(nickname)) {
										chatMessageEntity.setNickname(nickname);
									}
								}
							} else if (msgType.equals("img")){//图片信息
								String ext=JSON.parseObject(payload).getString("ext");
								if (StringUtils.isNotBlank(ext)) {
									String headImage=JSON.parseObject(ext).getString("headImage");
									String nickname=JSON.parseObject(ext).getString("nickname");
									if (StringUtils.isNotBlank(headImage)) {
										chatMessageEntity.setHeadImage(headImage);
									}
									if (StringUtils.isNotBlank(nickname)) {
										chatMessageEntity.setNickname(nickname);
									}
								}
								String url=jsonObjectNew.getString("url");
								String filename=jsonObjectNew.getString("filename");
								String thumbFilename=jsonObjectNew.getString("thumbFilename");
								String secret=jsonObjectNew.getString("secret");
								String file_length=jsonObjectNew.getString("file_length");
								String size=jsonObjectNew.getString("size");
								if (StringUtils.isNotBlank(url) && StringUtils.isNotBlank(secret)) {
									url=cu.getHXFileImage(url, secret);
									chatMessageEntity.setUrl(url);
									chatMessageEntity.setSecret(secret);
								}
								if (StringUtils.isNotBlank(file_length)) {
									chatMessageEntity.setFile_length(file_length);
								}
								if (StringUtils.isNotBlank(filename)) {
									chatMessageEntity.setFileName(filename);
								}
								if (StringUtils.isNotBlank(thumbFilename)) {
									chatMessageEntity.setThumbFilename(thumbFilename);
								}

							}else if (msgType.equals("audio")){//语音信息
								String ext=JSON.parseObject(payload).getString("ext");
								if (StringUtils.isNotBlank(ext)) {
									String integral=JSON.parseObject(ext).getString("integral");
									String headImage=JSON.parseObject(ext).getString("headImage");
									String nickname=JSON.parseObject(ext).getString("nickname");
									if (StringUtils.isNotBlank(headImage)) {
										chatMessageEntity.setHeadImage(headImage);
									}
									if (StringUtils.isNotBlank(nickname)) {
										chatMessageEntity.setNickname(nickname);
									}
									if (StringUtils.isNotBlank(integral)) {
										chatMessageEntity.setIntegral(integral);
									}
								}
								String url=jsonObjectNew.getString("url");
								String filename=jsonObjectNew.getString("filename");
								String length=jsonObjectNew.getString("length");
								String secret=jsonObjectNew.getString("secret");
								String file_length=jsonObjectNew.getString("file_length");
								if (StringUtils.isNotBlank(url) && StringUtils.isNotBlank(secret)) {
									url=cu.getHXFileAudio(url, secret);
									chatMessageEntity.setUrl(url);
									chatMessageEntity.setSecret(secret);
								}
								if (StringUtils.isNotBlank(file_length)) {
									chatMessageEntity.setFile_length(file_length);
								}
								if (StringUtils.isNotBlank(filename)) {
									chatMessageEntity.setFileName(filename);
								}
								if (StringUtils.isNotBlank(length)) {
									chatMessageEntity.setLength(Integer.parseInt(length));
								}
								
							}else if (msgType.equals("video")){//视频信息  客户没要求做
								String url=jsonObjectNew.getString("url");
								String filename=jsonObjectNew.getString("filename");
								String thumb=jsonObjectNew.getString("thumb");
								String secret=jsonObjectNew.getString("secret");
								String length=jsonObjectNew.getString("length");
								String file_length=jsonObjectNew.getString("file_length");
								String thumb_secret=jsonObjectNew.getString("thumb_secret");
								
							}else {//地址信息 客户没要求做
								String addr=jsonObjectNew.getString("addr");
								String lat=jsonObjectNew.getString("lat");
								String lng=jsonObjectNew.getString("lng");
							}
						}
					}
				}
				chatMessageEntityDao.save(chatMessageEntity);
			}
		}
		//System.out.println("聊天记录信息是："+message);
		return cursor;
	}
	
	/**
	 * 分页获取时间戳之前的所有聊天记录
	 * @param timestamp
	 * @param cursor
	 * @return
	 * @throws Exception
	 */
	public String addMessage(String timestamp,String cursor) throws Exception{
		String message="";
		ChartUtlis cu=new ChartUtlis();
		JSONObject json=new JSONObject();
		
		message=cu.getRoomMessageBefor(timestamp, cursor);
		json=JSON.parseObject(message);
		String count=json.getString("count");
		String entities=json.getString("entities");
		cursor=json.getString("cursor");
		if (StringUtils.isNotBlank(count) && (Integer.parseInt(count) > 0)) {
			JSONArray array=JSON.parseArray(entities);
			for (int i = 0; i < array.size(); i++) {
				JSONObject jsonObject=new JSONObject();
				ChatMessageEntity chatMessageEntity=new ChatMessageEntity();
				jsonObject=array.getJSONObject(i);
				String uuid=jsonObject.getString("uuid");
				String type=jsonObject.getString("type");
				String created=jsonObject.getString("created");
				String modified=jsonObject.getString("modified");
				String timestamps=jsonObject.getString("timestamp");
				String from=jsonObject.getString("from");
				String msg_id=jsonObject.getString("msg_id");
				String to=jsonObject.getString("to");
				String chat_type=jsonObject.getString("chat_type");
				String payload=jsonObject.getString("payload");
				//System.out.println("payload的内容是"+payload);
				
				chatMessageEntity.setId(uuid);//环信给的每一条消息的uuid
				chatMessageEntity.setMessage_type(type);//聊天记录，是固定的值
				chatMessageEntity.setChat_type(chat_type);//群聊、单聊
				chatMessageEntity.setCreated(created);//暂时不清楚
				chatMessageEntity.setTimeStamps(timestamps);//消息的时间戳
				chatMessageEntity.setFromHost(from);//消息发送者
				chatMessageEntity.setModified(modified);//不清楚
				chatMessageEntity.setToPerson(to);//消息接受者
				chatMessageEntity.setTime(TimeUtils.stringlongToyyyyMMdd(timestamps));//年月日
				chatMessageEntity.setDate(TimeUtils.stringlongToyyyyMMddHHmm(timestamps));//年月日时分秒
				chatMessageEntity.setHours(TimeUtils.stringlongToHHmmss(timestamps));//时分秒
				
				if (StringUtils.isNotBlank(payload)) {
					String bodies=JSON.parseObject(payload).getString("bodies");
					//System.out.println("bodies的内容是："+bodies);
					JSONArray arrayNew=JSON.parseArray(bodies);
					for (int j = 0; j < arrayNew.size(); j++) {
						JSONObject jsonObjectNew=new JSONObject();
						jsonObjectNew=arrayNew.getJSONObject(j);
						String msgType=jsonObjectNew.getString("type");
						if (StringUtils.isNotBlank(msgType)) {
							chatMessageEntity.setType(msgType);//消息类型
							if (msgType.equals("txt")) {//文本信息
								String msg=jsonObjectNew.getString("msg");
								if (StringUtils.isNotBlank(msg)) {
									chatMessageEntity.setMsg(msg);
								}
								String ext=JSON.parseObject(payload).getString("ext");
								if (StringUtils.isNotBlank(ext)) {
									String headImage=JSON.parseObject(ext).getString("headImage");
									String nickname=JSON.parseObject(ext).getString("nickname");
									if (StringUtils.isNotBlank(headImage)) {
										chatMessageEntity.setHeadImage(headImage);
									}
									if (StringUtils.isNotBlank(nickname)) {
										chatMessageEntity.setNickname(nickname);
									}
								}
							} else if (msgType.equals("img")){//图片信息
								String ext=JSON.parseObject(payload).getString("ext");
								if (StringUtils.isNotBlank(ext)) {
									String headImage=JSON.parseObject(ext).getString("headImage");
									String nickname=JSON.parseObject(ext).getString("nickname");
									if (StringUtils.isNotBlank(headImage)) {
										chatMessageEntity.setHeadImage(headImage);
									}
									if (StringUtils.isNotBlank(nickname)) {
										chatMessageEntity.setNickname(nickname);
									}
								}
								String url=jsonObjectNew.getString("url");
								String filename=jsonObjectNew.getString("filename");
								String thumbFilename=jsonObjectNew.getString("thumbFilename");
								String secret=jsonObjectNew.getString("secret");
								String file_length=jsonObjectNew.getString("file_length");
								String size=jsonObjectNew.getString("size");
								if (StringUtils.isNotBlank(url) && StringUtils.isNotBlank(secret)) {
									url=cu.getHXFileImage(url, secret);
									chatMessageEntity.setUrl(url);
									chatMessageEntity.setSecret(secret);
								}
								if (StringUtils.isNotBlank(file_length)) {
									chatMessageEntity.setFile_length(file_length);
								}
								if (StringUtils.isNotBlank(filename)) {
									chatMessageEntity.setFileName(filename);;
								}
								if (StringUtils.isNotBlank(thumbFilename)) {
									chatMessageEntity.setThumbFilename(thumbFilename);
								}

							}else if (msgType.equals("audio")){//语音信息
								String ext=JSON.parseObject(payload).getString("ext");
								if (StringUtils.isNotBlank(ext)) {
									String integral=JSON.parseObject(ext).getString("integral");
									String headImage=JSON.parseObject(ext).getString("headImage");
									String nickname=JSON.parseObject(ext).getString("nickname");
									if (StringUtils.isNotBlank(headImage)) {
										chatMessageEntity.setHeadImage(headImage);
									}
									if (StringUtils.isNotBlank(nickname)) {
										chatMessageEntity.setNickname(nickname);
									}
									if (StringUtils.isNotBlank(integral)) {
										chatMessageEntity.setIntegral(integral);
									}
								}
								String url=jsonObjectNew.getString("url");
								String filename=jsonObjectNew.getString("filename");
								String length=jsonObjectNew.getString("length");
								String secret=jsonObjectNew.getString("secret");
								String file_length=jsonObjectNew.getString("file_length");
								if (StringUtils.isNotBlank(url) && StringUtils.isNotBlank(secret)) {
									url=cu.getHXFileAudio(url, secret);
									chatMessageEntity.setUrl(url);
									chatMessageEntity.setSecret(secret);
								}
								if (StringUtils.isNotBlank(file_length)) {
									chatMessageEntity.setFile_length(file_length);
								}
								if (StringUtils.isNotBlank(filename)) {
									chatMessageEntity.setFileName(filename);
								}
								if (StringUtils.isNotBlank(length)) {
									chatMessageEntity.setLength(Integer.parseInt(length));
								}
								
							}else if (msgType.equals("video")){//视频信息
								String url=jsonObjectNew.getString("url");
								String filename=jsonObjectNew.getString("filename");
								String thumb=jsonObjectNew.getString("thumb");
								String secret=jsonObjectNew.getString("secret");
								String length=jsonObjectNew.getString("length");
								String file_length=jsonObjectNew.getString("file_length");
								String thumb_secret=jsonObjectNew.getString("thumb_secret");
								
							}else {//地址信息
								String addr=jsonObjectNew.getString("addr");
								String lat=jsonObjectNew.getString("lat");
								String lng=jsonObjectNew.getString("lng");
							}
						}
					}
				}
				chatMessageEntityDao.save(chatMessageEntity);
			}
		}
		//System.out.println("聊天记录信息是："+message);
		return cursor;
	}


	@Override
	public ChatMessageEntity getByTimeTamp(String timesTamp) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<ChatMessageEntity> get(String form, String to, String timesTamp) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<ChatMessageEntity> getTxt(String form, String time, String to,String row ,String page) {
		if (StringUtils.isBlank(row)) {
			row="10";
		}
		if (StringUtils.isBlank(page)) {
			page="1";
		}
		List<ChatMessageEntity> list=new ArrayList<ChatMessageEntity>();
		String hql=" from ChatMessageEntity where 1=1 ";
		if (StringUtils.isNotBlank(time) && StringUtils.isNotBlank(form) && StringUtils.isNotBlank(to)) {
			hql+=" and time='"+time+"' and fromHost='"+form+"' and toPerson='"+to+"' and type <> 'audio' order by timeStamps asc";
			/*if (StringUtils.isNotBlank(form)) {
			hql+=" and fromHost='"+form+"'";
		}
		if (StringUtils.isNotBlank(to)) {
			hql+=" and toPerson='"+to+"'";
		}
		hql+=" and type <> 'audio' order by timeStamps asc";*/
			list=chatMessageEntityDao.find(hql, Integer.parseInt(page), Integer.parseInt(row));
			if (list != null && (list.size() > 0)) {
				return list;
			} 
		}
		return null;
	}

	@Override
	public List<ChatMessageEntity> getAudio(String form, String time, String to,String row ,String page) {
		if (StringUtils.isBlank(row)) {
			row="10";
		}
		if (StringUtils.isBlank(page)) {
			page="1";
		}
		List<ChatMessageEntity> list=new ArrayList<ChatMessageEntity>();
		String hql=" from ChatMessageEntity where 1=1 ";
		if (StringUtils.isNotBlank(time) && StringUtils.isNotBlank(form) && StringUtils.isNotBlank(to)) {
			hql+=" and time='"+time+"' and fromHost='"+form+"' and toPerson='"+to+"' and type='audio' order by timeStamps asc";
			/*if (StringUtils.isNotBlank(form)) {
			hql+=" and fromHost='"+form+"' ";
		}
		if (StringUtils.isNotBlank(to)) {
			hql+=" and toPerson='"+to+"' ";
		}
		hql+=" and type='audio' order by timeStamps asc";*/
			list=chatMessageEntityDao.find(hql, Integer.parseInt(page), Integer.parseInt(row));
			if (list != null && (list.size() > 0)) {
				return list;
			} 
		}
		return null;
	}

	@Override
	public List<ChatMessageEntity> getChat(String time, String userHxName,String row ,String page) {
		if (StringUtils.isBlank(row)) {
			row="10";
		}
		if (StringUtils.isBlank(page)) {
			page="1";
		}
		List<ChatMessageEntity> list=new ArrayList<ChatMessageEntity>();
		String hql=" from ChatMessageEntity where 1=1 ";
		if (StringUtils.isNotBlank(time) && StringUtils.isNotBlank(userHxName)) {
			hql+=" and time='"+time+"' and fromHost='"+userHxName+"' or toPerson='"+userHxName+"' order by timeStamps asc";
			/*if (StringUtils.isNotBlank(userHxName)) {
			hql+=" and fromHost='"+userHxName+"' ";
			hql+=" or toPerson='"+userHxName+"' ";
		}
		
		hql+="  order by timeStamps desc";*/
			list=chatMessageEntityDao.find(hql, Integer.parseInt(page), Integer.parseInt(row));
			if (list != null && (list.size() > 0)) {
				return list;
			} 
		}
		return null;
	}

	@Override
	public List<ChatMessageEntity> getGroupChat( String time,
			String to,String row ,String page) {
		if (StringUtils.isBlank(row)) {
			row="10";
		}
		if (StringUtils.isBlank(page)) {
			page="1";
		}
		List<ChatMessageEntity> list=new ArrayList<ChatMessageEntity>();
		String hql=" from ChatMessageEntity where 1=1 ";
		if (StringUtils.isNotBlank(time) && StringUtils.isNotBlank(to)) {
			hql+=" and time='"+time+"' and toPerson='"+to+"' order by timeStamps asc";
			/*if (StringUtils.isNotBlank(to)) {
			hql+=" and toPerson='"+to+"' ";
		}*/
			
			//hql+="  order by timeStamps asc";
			list=chatMessageEntityDao.find(hql, Integer.parseInt(page), Integer.parseInt(row));
			if (list != null && (list.size() > 0)) {
				return list;
			} 
		}
		return null;
	}

	

}
