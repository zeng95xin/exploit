package com.admin.controller;

import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.Log;
import com.admin.model.ReplyQuestions;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.Json;
import com.admin.pageModel.PageHelper;
import com.admin.service.LogServiceI;
import com.admin.service.ReplyQuestionsServiceI;
import com.admin.util.InfoUtil;
import com.web.util.TimeUtils;

/**
 * 回复有问必答控制器
 * 
 * @author
 * 
 */
@Controller
@RequestMapping("/replyQuestionsController")
public class ReplyQuestionsController extends BaseController {

	@Autowired
	private ReplyQuestionsServiceI replyQuestionsService;
	@Autowired
	private LogServiceI logService;

	/**
	 * 跳转到回复有问必答管理页面
	 * 
	 * @return
	 */
	@RequestMapping("/manager")
	public String manager(HttpServletRequest request, String questionId) {
		request.setAttribute("questionId", questionId);
		return "/admin/replyQuestions/replyQuestions";
	}

	/**
	 * 跳转到回复有问必答添加页面
	 * 
	 * @return
	 */
	@RequestMapping("/addPage")
	public String addPage(HttpServletRequest request) {
		ReplyQuestions r = new ReplyQuestions();
		r.setId(UUID.randomUUID().toString());
		request.setAttribute("replyQuestions", r);
		return "/admin/replyQuestions/replyQuestionsAdd";
	}

	/**
	 * 添加回复有问必答
	 * 
	 * @return
	 */
	@RequestMapping("/add")
	@ResponseBody
	public Json add(ReplyQuestions replyQuestions) {
		Json j = new Json();
		// <img
		// src="/gtl/attached/image/2015/08/06/229c08b7-4d49-4942-bd9e-4f1142daa8c9.gif"
		// alt="" />
		// &lt;img
		// src=&quot;/gtl/attached/image/2015/08/06/05289f0f-c80d-4086-8d81-e69e15e86f9e.gif&quot;
		// alt=&quot;&quot; /&gt;
		try {
			replyQuestionsService.add(replyQuestions);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		j.setSuccess(true);
		j.setMsg("添加成功！");
		return j;
	}

	/**
	 * 跳转到回复有问必答修改页面
	 * 
	 * @return
	 */
	@RequestMapping("/editPage")
	public String editPage(HttpServletRequest request, String id) {
		ReplyQuestions r = replyQuestionsService.get(id);
		request.setAttribute("replyQuestions", r);
		return "/admin/replyQuestions/replyQuestionsEdit";
	}

	/**
	 * 修改回复有问必答
	 * 
	 * @param replyQuestions
	 * @return
	 */
	@RequestMapping("/edit")
	@ResponseBody
	public Json edit(HttpServletRequest request, HttpSession session,
			ReplyQuestions replyQuestions) {
		Json j = new Json();
		try {
			replyQuestionsService.edit(replyQuestions);
			Log log = new Log();
			log.setType("update");// 操作描述
			log.setAuthor(InfoUtil.getUser(session));// 操作员
			log.setIp(InfoUtil.getIpAddr(request));// ip
			log.setTteble("t_replyQuestions");// 操作的表
			log.setTid(replyQuestions.getId());// 操作的ID
			log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
			logService.add(log);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		j.setSuccess(true);
		j.setMsg("编辑成功！");
		return j;
	}

	/**
	 * 获得回复有问必答列表
	 * 
	 * @return
	 */
	@RequestMapping("/dataGrid")
	@ResponseBody
	public DataGrid dataGrid(ReplyQuestions p, PageHelper ph) {
		return replyQuestionsService.dataGrid(p, ph);
	}

	/**
	 * 删除回复有问必答
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/delete")
	@ResponseBody
	public Json delete(String id) {
		Json j = new Json();
		replyQuestionsService.delete(id);
		j.setMsg("删除成功！");
		j.setSuccess(true);
		return j;
	}

	@RequestMapping("/batchDelete")
	@ResponseBody
	public Json batchDelete(String ids, HttpSession session) {
		Json j = new Json();
		if (ids != null && ids.length() > 0) {
			for (String id : ids.split(",")) {
				if (id != null) {
					this.delete(id);
				}
			}
		}
		j.setMsg("批量删除成功！");
		j.setSuccess(true);
		return j;
	}
}
