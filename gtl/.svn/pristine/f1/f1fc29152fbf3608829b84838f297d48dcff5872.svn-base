package com.admin.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.ChestBoxTypeDao;
import com.admin.model.LoginUser;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.ChestBoxService;
import com.admin.service.ChestBoxTypeService;
import com.web.entity.ChestBox;
import com.web.entity.ChestBoxType;
import com.web.entity.HostMain;

@Service
public class ChestBoxTypeServiceImpl implements ChestBoxTypeService{
	
	@Autowired
	private ChestBoxTypeDao chestBoxTypeDao;
	
	@Autowired
	private ChestBoxService chestBoxService;

	@Override
	public void add(ChestBoxType chestBoxType) throws Exception {
		chestBoxTypeDao.save(chestBoxType);
		
	}

	@Override
	public DataGrid dataGrid(ChestBoxType chestBoxType, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<ChestBoxType> lhm = new ArrayList<ChestBoxType>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from ChestBoxType t ";
		List<ChestBoxType> l = chestBoxTypeDao.find(hql + whereHql(chestBoxType, params) + orderHql(ph),
				params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (ChestBoxType t : l) {
				ChestBoxType u = new ChestBoxType();
				BeanUtils.copyProperties(t, u);
				lhm.add(u);
			}
		}
		dg.setRows(lhm);
		dg.setTotal(chestBoxTypeDao.count("select count(*) " + hql + whereHql(chestBoxType, params),
				params));
		return dg;
	}

	@Override
	public void delete(String chestBoxTypeId) throws Exception {
		chestBoxTypeDao.delete(chestBoxTypeDao.get(ChestBoxType.class, chestBoxTypeId));
		
	}

	@Override
	public void update(ChestBoxType chestBoxType) throws Exception {
		chestBoxTypeDao.update(chestBoxType);
		
	}

	@Override
	public ChestBoxType get(String chestBoxTypeId) throws Exception {
		return chestBoxTypeDao.get(ChestBoxType.class, chestBoxTypeId);
	}

	/**
	 * where条件封装
	 * @param chestBoxType
	 * @param params
	 * @return
	 */
	private String whereHql(ChestBoxType chestBoxType, Map<String, Object> params) {
		String hql = "";
		if (chestBoxType != null) {
			hql += " where 1=1 ";
			
			if (StringUtils.isNotBlank(chestBoxType.getTypeName())) {//分类名称
				hql += " and t.typeName like = :typeName";
				params.put("typeName", "%%" +chestBoxType.getTypeName()+ "%%");
			}
		}
		return hql;
	}

	/**
	 * order封装
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		}
		return orderString;
	}

	@Override
	public List<ChestBoxType> getAll() {
		String hql = " from ChestBoxType t ";
		List<ChestBoxType> list=new ArrayList<ChestBoxType>();
		list =chestBoxTypeDao.find(hql);
		if (list!=null && list.size()>0) {
			return list;
		}
		return null;
	}

	@Override
	public List<ChestBox> getByType(String typeId) {
		List<ChestBox> list=new ArrayList<ChestBox>();
		try {
			list=chestBoxService.getByTypeId(typeId);
			/*if (list!=null && list.size()>0) {
				return list;
			}*/
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}
}
