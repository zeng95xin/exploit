package com.admin.controller;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import jxl.write.WritableWorkbook;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.IntegralConfig;
import com.admin.model.Log;
import com.admin.model.LoginUser;
import com.admin.model.MnSjBm;
import com.admin.model.Mncp;
import com.admin.model.Tgxt;
import com.admin.model.TxwxGl;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.Json;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.service.CpApplicationServiceI;
import com.admin.service.IntegralConfigServiceI;
import com.admin.service.LogServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.MnSjBmServiceI;
import com.admin.service.MncpServiceI;
import com.admin.service.XwxServiceI;
import com.admin.util.ConfigUtil;
import com.admin.util.InfoUtil;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.web.util.TimeUtils;

/**
 * 用户控制器
 * 
 * @author
 * 
 */
@Controller
@RequestMapping("/wcpController")
public class WcpUpdateController extends BaseController {

	@Autowired
	private CpApplicationServiceI cpApplicationServiceI;

	@Autowired
	private LoginUserServiceI loginUserServiceI;
	@Autowired
	private MncpServiceI mncpServiceI;

	@Autowired
	private MnSjBmServiceI mnSjBmServiceI;
	WritableWorkbook book = null;

	/**
	 * 跳转到新闻纵深列表页面
	 * 
	 * @return
	 */
	@RequestMapping("/xwxxwzs")
	public String xwxxwzs(HttpServletRequest request,
			HttpServletResponse response, ModelMap modelMap) throws Exception {
		return "/admin/xwx/xwxxwzs";
	}

	/**
	 * 模拟操盘股票买卖成交方法
	 * 
	 * @param ids
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/gpMmCjUpdate")
	public JSONObject gpMmCjUpdate() throws Exception {
		JSONObject json = new JSONObject();
		JSONArray arr = new JSONArray();
		Mncp p = new Mncp();
		List<Mncp> list = mncpServiceI.getwcjList(); // 获取委托数据中未成交的数据
		StringBuffer sb = new StringBuffer();
		String timeTp = TimeUtils.getTime("yyyyMMddHHmmss");
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				p = list.get(i);
				sb.append(p.getZqdm()).append(","); // 获取交易委托证券代码字符串
			}
			String stocks = sb.toString();
			if (stocks.length() > 0) {
				stocks = stocks.substring(0, stocks.length() - 1); // 去除拼装StringBuffer的最后一个逗号
			}
			// 统一请求接口数据
			URL u = new URL(
					"http://route.showapi.com/131-46?showapi_appid=6127"
							+ "&showapi_timestamp="
							+ timeTp
							+ "&stocks="
							+ stocks
							+ "&needIndex=1&showapi_sign=a28416fd6ff14246b4783026128a6f83");
			InputStream in = u.openStream();
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			try {
				byte buf[] = new byte[1024];
				int read = 0;
				while ((read = in.read(buf)) > 0) {
					out.write(buf, 0, read);
				}
			} finally {
				if (in != null) {
					in.close();
				}
			}
			byte b[] = out.toByteArray();
			JSONObject jsonJg = JSON.parseObject(new String(b, "utf-8")); // 将json结果转换成jsonObject
			JSONObject showBody = jsonJg.getJSONObject("showapi_res_body"); // 获取到大盘指数结果集
			JSONArray jsList = showBody.getJSONArray("list"); // 获取实时个股数组数据
			JSONObject gg_m = new JSONObject();
			String sell01 = null;
			String sell02 = null;
			String sell03 = null;
			String sell04 = null;
			String sell05 = null;

			String buy01 = null;
			String buy02 = null;
			String buy03 = null;
			String buy04 = null;
			String buy05 = null;

			for (int k = 0; k < list.size(); k++) { // 委托数据
				JSONObject j = new JSONObject(); // 返回结果
				p = list.get(k);
				String cz = p.getCz(); // 获取未成交记录操作状态 ：0 买入；1 卖出
				String wtjg = p.getWtjg(); // 委托价格
				String zqdm = p.getZqdm(); // 委托代码
				for (int m = 0; m < jsList.size(); m++) { // 获取实时数据
					gg_m = jsList.getJSONObject(m);// 获取个股实时数据
					String code = gg_m.getString("code");// 返回代码

					if (code.equals(zqdm) && "0".equals(cz)) { // 若委托股票代码与返回行情股票代码相等，且为“买入”操作
						sell01 = gg_m.getString("sell1_m"); // 获取该股票卖一的价格
						sell02 = gg_m.getString("sell2_m"); // 获取该股票卖二的价格
						sell03 = gg_m.getString("sell3_m"); // 获取该股票卖三的价格
						sell04 = gg_m.getString("sell4_m"); // 获取该股票卖四的价格
						sell05 = gg_m.getString("sell5_m"); // 获取该股票卖五的价格
						if (wtjg.equals(sell05) || wtjg.equals(sell04)
								|| wtjg.equals(sell03) || wtjg.equals(sell02)
								|| wtjg.equals(sell01)) {
							p.setCjsl(Integer.parseInt(p.getWtsl())); // 成交数据为委托数量
							p.setHtbh(UUID.randomUUID().toString()); // 生成合同编号
							p.setBz("1");// 更新状态为“成交”
							/**
							 * 计算出此次购买总价
							 * 
							 */
							Double cjjg = Double.parseDouble(wtjg); // 成交价格
							Double mrzj = cjjg
									* Double.parseDouble(p.getWtsl()); // 成交总价
							p.setMrzj(mrzj.toString());
							mncpServiceI.edit(p);
							j.put("userid", p.getUserid());
							j.put("sjid", p.getId()); // 操作的数据id（唯一）
							j.put("cz", cz);
							j.put("bz", "1"); // 成交
							arr.add(j);
						} else {
							j.put("userid", p.getUserid());
							j.put("cz", cz);
							j.put("sjid", p.getId()); // 操作的数据id（唯一）
							j.put("bz", "0"); // 未成交
							arr.add(j);
						}

					} else if (code.equals(zqdm) && "1".equals(cz)) {// 若委托股票代码与返回行情股票代码相等，且为“卖出”操作
						buy01 = gg_m.getString("buy1_m"); // 获取该股票买一的价格
						buy02 = gg_m.getString("buy2_m"); // 获取该股票买二的价格
						buy03 = gg_m.getString("buy3_m"); // 获取该股票买三的价格
						buy04 = gg_m.getString("buy4_m"); // 获取该股票买四的价格
						buy05 = gg_m.getString("buy5_m"); // 获取该股票买五的价格

						if (wtjg.equals(buy05) || wtjg.equals(buy04)
								|| wtjg.equals(buy03) || wtjg.equals(buy02)
								|| wtjg.equals(buy01)) {
							p.setCjsl(Integer.parseInt(p.getWtsl()));// 成交数据为委托数量
							p.setHtbh(UUID.randomUUID().toString()); // 生成合同编号
							p.setBz("1");// 更新状态为“成交”

							Double mczj = Double.parseDouble(p.getWtsl())
									* Double.parseDouble(wtjg); // 获取卖出总价
							p.setMczj(String.valueOf(mczj));

							String userid = p.getUserid();
							LoginUser loginUser = loginUserServiceI
									.getLoginUser(userid); // 获取当前用户信息
							Double nowPtsJb = Double.parseDouble(loginUser
									.getPtsjb());// 获取当前用户普通赛金币
							Double nowSjJb = Double.parseDouble(loginUser
									.getSjsjb());// 获取当前用户赛季赛金币

							if ("0".equals(p.getMrlx())) { // 当为普通赛买入时
								loginUser.setPtsjb(String.valueOf(mczj
										+ nowPtsJb));
								loginUserServiceI.update(loginUser);
								mncpServiceI.edit(p);
							} else if ("1".equals(p.getMrlx())) {// 当为赛季赛买入时
								loginUser.setSjsjb(String.valueOf(mczj
										+ nowSjJb));
								loginUserServiceI.update(loginUser);
								mncpServiceI.edit(p);
								if (StringUtils.isNotBlank(p.getSjsId())) {
									MnSjBm mnSjBm = mnSjBmServiceI
											.findByUserIdAndSjId(p.getUserid(),
													p.getSjsId());
									if (mnSjBm != null) {
										mnSjBm.setDqsd(nowSjJb.toString());
										mnSjBmServiceI.edit(mnSjBm);
									}
								}
							}
							j.put("userid", p.getUserid());
							j.put("sjid", p.getId()); // 操作的数据id（唯一）
							j.put("cz", cz);
							j.put("bz", "1"); // 成交
							arr.add(j);
						} else {
							j.put("userid", p.getUserid());
							j.put("sjid", p.getId()); // 操作的数据id（唯一）
							j.put("cz", cz);
							j.put("bz", "0"); // 未成交
							arr.add(j);
						}
					}
				}
			}
		}
		json.put("errorCode", "0");
		json.put("errorMsg", "操作成功");
		json.put("total", list.size());
		json.put("rows", arr);
		return json;
	}

}
