package com.lcjh.controller.api;

import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.constraints.Future;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.Range;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.JPushChatModel;
import com.admin.model.LoginUser;
import com.admin.service.LoginUserServiceI;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.lcjh.biz.Lcjh2Biz;
import com.lcjh.biz.LcjhLabelBiz;
import com.lcjh.common.LcjhJpushUtil;
import com.lcjh.entity.Lcjh2;
import com.lcjh.entity.LcjhLabel;
import com.lcjh.enummole.LcjhPushEnum;
import com.lcjh.enummole.LcjhStatusEnum;
import com.lcjh.model.Lcjh2Model;
import com.lcjh.model.UserLcjhModel;
import com.lcjh.result.BooleanBaseResult;
import com.lcjh.result.BooleanListResult;
import com.lcjh.result.BooleanObjectResult;
import com.lcjh.result.BooleanPageResult;
import com.log.ProjectConfig;
import com.web.exception.CodeEnum;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

/**
 * 理财计划
 * 
 * @author Administrator
 */
@Controller
@RequestMapping("/api/lcjh2")
@Validated
@Api(tags = "-api-lcjh2", description = "理财计划,有关接口")
public class Lcjh2ApiController {
	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	@Autowired
	private Lcjh2Biz lcjh2Biz;
	@Autowired
	private LcjhLabelBiz lcjhLabelBiz;
	@Autowired
	private LoginUserServiceI loginUserServiceI;
	@Autowired
	private LcjhJpushUtil lcjhJpushUtil;

	@ApiOperation(value = "获取理财计划标签", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/getLcjhLabels", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanListResult<LcjhLabel> getLcjhLabels(HttpServletRequest request) throws Exception {
		BooleanListResult<LcjhLabel> result = BooleanListResult.getSuccess();
		List<LcjhLabel> list_label = lcjhLabelBiz.find("from LcjhLabel");
		result.setResult(list_label);
		return result;
	}

	/**
	 * 选择渠道返回凭据
	 * 
	 * @return
	 * @throws Exception
	 */
	@ApiOperation(value = "发布理财计划", notes = "时间格式为 yyyy-MM-dd HH:mm:ss", httpMethod = "POST")
	@RequestMapping(value = "/addLcjh", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanBaseResult addLcjh(HttpServletRequest request,
			@ApiParam(value = "用户id", required = true) @NotBlank(message = "用户id不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "用户id在{min}-{max}个字") String userId,
			@ApiParam(value = "计划标题,名称", required = true) @NotBlank(message = "标题不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "标题在{min}-{max}个字") String jhbt,
			@ApiParam(value = "计划简介", required = true) @NotBlank(message = "计划简介不能为空") @RequestParam(required = false) @Length(min = 1, max = 2000, message = "计划简介在{min}-{max}个字") String jhjj,
			@ApiParam(value = "预计收益率", required = true) @NotNull(message = "预计收益率不能为空") @RequestParam(required = false) @Range(min = 0, max = 200, message = "预计收益率在{min}-{max}个字") BigDecimal yjsyl,
			@ApiParam(value = "预计止损线", required = true) @NotNull(message = "预计止损线不能为空") @RequestParam(required = false) @Range(min = 0, max = 200, message = "预计止损线在{min}-{max}个字") BigDecimal yjzsx,
			@ApiParam(value = "服务费", required = true) @NotNull(message = "服务费不能为空") @RequestParam(required = false) @Range(min = 0, max = 200000, message = "服务费在{min}-{max}之间") BigDecimal fwf
			// ,@ApiParam(value="开始发售时间",required=true)
			// @NotNull(message="开始发售时间不能为空")
			// @Future(message="开始发售时间必须大于当前时间")
			// @RequestParam(required=false)@DateTimeFormat(pattern="yyyy-MM-dd
			// HH:mm:ss") Date fssj
			// ,@ApiParam(value="截止销售时间",required=true)
			// @NotNull(message="截止销售时间不能为空")
			// @Future(message="截止销售时间必须大于当前时间")
			// @RequestParam(required=false)@DateTimeFormat(pattern="yyyy-MM-dd
			// HH:mm:ss") Date jzsj
			,
			@ApiParam(value = "购买限时,以小时为单位,从计划发布时开始", required = true) @NotNull(message = "购买限时") @RequestParam(required = false) Integer gmxs,
			@ApiParam(value = "购买限人,0表示不能购买,-1表示无限", required = true) @NotNull(message = "购买限时") @Min(value = -1, message = "购买限人>=-1") @RequestParam(required = false) Integer buyMaxCount,
			@ApiParam(value = "计划机构名称") @RequestParam(required = false) String jgmc,
			@ApiParam(value = "计划启动时间,开始时间", required = true) @NotNull(message = "计划启动时间不能为空") @Future(message = "计划启动时间必须大于当前时间") @RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss") Date jhqdsj,
			@ApiParam(value = "计划预期时间,以天为单位,5~183", required = true) @NotNull(message = "计划预期时间不能为空") @Range(min = 5, max = 183, message = "计划预期时间在{min}~{max}之间") @RequestParam(required = false) Integer dayCount
			// ,@ApiParam(value="计划图片",required=false)
			// @RequestParam(required=false) MultipartFile image
			,
			@RequestParam(required = false, defaultValue = "") @ApiParam(value = "操作风格标签：（下拉选择）,可通过接口获取操作风格选项,多个用,隔开") String labelIds)
			throws Exception {

		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Lcjh2 l = new Lcjh2();
		Calendar c = Calendar.getInstance();
		l.setAddTime(c.getTime());

		l.setBuyCount(0);
		l.setBuyMaxCount(buyMaxCount);
		l.setDayCount(dayCount);
		l.setFwf(fwf);
		l.setStartGoldCoins(new BigDecimal(ProjectConfig.getLcjhConfig(true, null).getStartGoldCoins()));
		l.setGoldCoins(new BigDecimal(ProjectConfig.getLcjhConfig(true, null).getStartGoldCoins()));
		l.setJgmc(jgmc);
		l.setJhbt(jhbt);
		l.setJhjj(jhjj);

		l.setGmxs(gmxs);
		l.setFssj(c.getTime());
		c.add(Calendar.HOUR, gmxs);
		l.setJzsj(c.getTime());

		c.setTime(jhqdsj);
		c.set(Calendar.HOUR_OF_DAY, 0);
		c.set(Calendar.MINUTE, 0);
		c.set(Calendar.SECOND, 0);
		c.set(Calendar.MILLISECOND, 0);
		l.setJhqdsj(c.getTime());

		c.add(Calendar.DATE, dayCount);
		c.set(Calendar.HOUR_OF_DAY, 23);
		c.set(Calendar.MINUTE, 59);
		c.set(Calendar.SECOND, 59);
		c.set(Calendar.MILLISECOND, 0);
		l.setJhwjrq(c.getTime());

		int monthCount = (int) (dayCount / 30) + 1;
		l.setMonthCount(monthCount);
		l.setStatus(LcjhStatusEnum.authSuccess.ordinal());
		l.setUserId(userId);
		l.setSyl(BigDecimal.ZERO);
		l.setYjsyl(yjsyl);
		l.setYjzsx(yjzsx);

		// String images = FileUploadDeleteUtil.upload(image,
		// ProjectConfig.imgRootURL, ProjectConfig.imgSavePath, null, null);
		// l.setImages(images);

		Set<LcjhLabel> labelsSet = null;
		if (StringUtils.hasText(labelIds)) {
			String[] labels = labelIds.split(",");
			labelsSet = new HashSet<>(labels.length);
			for (int i = 0; i < labels.length; i++) {
				String labelStr = labels[i];
				LcjhLabel label = lcjhLabelBiz.get(LcjhLabel.class, labelStr);
				Assert.notNull(label, "标签不存在");
				labelsSet.add(label);
			}
		}
		l.setLabels(labelsSet);
		lcjh2Biz.save(l);

		JPushChatModel chat = new JPushChatModel();
		String chattitle = "涨声信息";
		String chatcontent = "你关注的股天乐投资顾问'" + user.getNickname() + "' 发布了新的理财计划,'" + l.getJhbt() + "'!";
		chat.setType(LcjhPushEnum.addLcjh.getCode());
		chat.setTitle(chattitle);
		chat.setContent(chatcontent);
		chat.setDataId(l.getId());
		lcjhJpushUtil.pushUser(chat, userId);

		return BooleanBaseResult.SUCCESS;
	}

	@ApiOperation(value = "修改理财计划", notes = "时间格式为 yyyy-MM-dd HH:mm:ss，只能修改自己发布的理财计划，某项值未修改时，传入原值，审核完成的理财计划，不能修改", httpMethod = "POST")
	@RequestMapping(value = "/updateLcjh", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanBaseResult updateLcjh(HttpServletRequest request,
			@ApiParam(value = "计划id", required = true) @NotBlank(message = "计划id不能为空") @Size(min = 32, max = 36, message = "计划id在{min}-{max}个字") @RequestParam(required = false) String id,
			@ApiParam(value = "用户id", required = true) @NotBlank(message = "用户id不能为空") @Size(min = 1, max = 200, message = "用户id在{min}-{max}个字") @RequestParam(required = false) String userId,
			@ApiParam(value = "计划标题,名称", required = true) @NotBlank(message = "标题不能为空") @Size(min = 1, max = 200, message = "标题在{min}-{max}个字") @RequestParam(required = false) String jhbt,
			@ApiParam(value = "计划简介", required = true) @NotBlank(message = "计划简介不能为空") @Length(min = 1, max = 2000, message = "计划简介在{min}-{max}个字") @RequestParam(required = false) String jhjj,
			@ApiParam(value = "预计收益率", required = true) @NotNull(message = "预计收益率不能为空") @Range(min = 0, max = 200, message = "预计收益率在{min}-{max}个字") @RequestParam(required = false) BigDecimal yjsyl,
			@ApiParam(value = "预计止损线", required = true) @NotNull(message = "预计止损线不能为空") @Range(min = 0, max = 200, message = "预计止损线在{min}-{max}个字") @RequestParam(required = false) BigDecimal yjzsx,
			@ApiParam(value = "服务费", required = true) @NotNull(message = "服务费不能为空") @Range(min = 0, max = 200000, message = "服务费在{min}-{max}之间") @RequestParam(required = false) BigDecimal fwf,
			@ApiParam(value = "购买限时,以小时为单位,从计划发布时开始", required = true) @NotNull(message = "购买限时") @RequestParam(required = false) Integer gmxs,
			@ApiParam(value = "购买限人,0表示不能购买,-1表示无限", required = true) @NotNull(message = "购买限时") @Min(value = -1, message = "购买限人>=-1") @RequestParam(required = false) Integer buyMaxCount,
			@ApiParam(value = "计划机构名称") @RequestParam(required = false) String jgmc,
			@ApiParam(value = "计划启动时间,开始时间", required = true) @NotNull(message = "计划启动时间不能为空") @Future(message = "计划启动时间必须大于当前时间") @RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss") Date jhqdsj,
			@ApiParam(value = "计划预期时间,以天为单位,5~183", required = true) @NotNull(message = "计划预期时间不能为空") @Range(min = 5, max = 183, message = "计划预期时间在{min}~{max}之间") @RequestParam(required = false) Integer dayCount
			// ,@ApiParam(value="新图片",required=false)
			// @RequestParam(required=false) MultipartFile image
			// ,@ApiParam(value="旧图片，如果旧图片和新图片都为空就表示删除图片",required=false)
			// @Length(min=0, max=300)
			// @RequestParam(required=false) String oldImageUrl
			,
			@RequestParam(required = false, defaultValue = "") @ApiParam(value = "操作风格标签：（下拉选择）,可通过接口获取操作风格选项,多个之前用,隔开") String labelIds)
			throws Exception {
		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "用户不存在");
		Lcjh2 l = lcjh2Biz.get(Lcjh2.class, id);
		Assert.notNull(l, "理财计划不存在");
		Assert.isTrue(userId.equals(l.getUserId()), "只能修改自己发布的理财计划");
		Assert.isTrue(l.getStatus() > LcjhStatusEnum.authSuccess.ordinal()
				&& l.getJhqdsj().getTime() > System.currentTimeMillis(), "理财计划已经执行中，不能修改");

		Calendar c = Calendar.getInstance();
		c.setTime(l.getAddTime());

		Assert.isTrue(l.getBuyCount() < buyMaxCount, "购买人数必须大于等于当前购买人数");

		l.setBuyMaxCount(buyMaxCount);
		l.setDayCount(dayCount);

		l.setFwf(fwf);
		l.setStartGoldCoins(new BigDecimal(ProjectConfig.getLcjhConfig(true, null).getStartGoldCoins()));
		l.setGoldCoins(new BigDecimal(ProjectConfig.getLcjhConfig(true, null).getStartGoldCoins()));
		l.setJgmc(jgmc);
		l.setJhbt(jhbt);
		l.setJhjj(jhjj);
		l.setJhqdsj(jhqdsj);

		l.setGmxs(gmxs);
		c.add(Calendar.HOUR, gmxs);
		l.setJzsj(c.getTime());

		c.setTime(jhqdsj);
		c.set(Calendar.HOUR_OF_DAY, 0);
		c.set(Calendar.MINUTE, 0);
		c.set(Calendar.SECOND, 0);
		c.set(Calendar.MILLISECOND, 0);
		l.setJhqdsj(c.getTime());

		c.add(Calendar.DATE, dayCount);
		c.set(Calendar.HOUR_OF_DAY, 23);
		c.set(Calendar.MINUTE, 59);
		c.set(Calendar.SECOND, 59);
		c.set(Calendar.MILLISECOND, 0);
		l.setJhwjrq(c.getTime());

		int monthCount = (int) (dayCount / 30) + 1;
		l.setMonthCount(monthCount);

		l.setUserId(userId);
		l.setSyl(BigDecimal.ZERO);
		l.setYjsyl(yjsyl);
		l.setYjzsx(yjzsx);

		// if(!image.isEmpty()){
		// String images = FileUploadDeleteUtil.upload(image,
		// ProjectConfig.imgRootURL, ProjectConfig.imgSavePath, null, null);
		// l.setImages(images);
		// }else{
		// l.setImages(oldImageUrl);
		// }

		Set<LcjhLabel> labelsSet = null;
		if (StringUtils.hasText(labelIds)) {
			String[] labels = labelIds.split(",");
			labelsSet = new HashSet<>(labels.length);
			for (int i = 0; i < labels.length; i++) {
				String labelStr = labels[i];
				LcjhLabel label = lcjhLabelBiz.get(LcjhLabel.class, labelStr);
				Assert.notNull(label, "标签不存在");
				labelsSet.add(label);
			}
		}
		l.setLabels(labelsSet);

		lcjh2Biz.update(l);
		logger.debug(JSON.toJSONString(l));
		return BooleanBaseResult.SUCCESS;
	}

	@ApiOperation(value = "获取首页理财计划列表,分页", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/getLcjhPageList", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanPageResult<Lcjh2Model> getLcjhPageList(HttpServletRequest request,
			@RequestParam(required = false, defaultValue = "1") @Min(value = 1, message = "页号必须大于0") @ApiParam(value = "页号") Integer page,
			@RequestParam(required = false, defaultValue = "10") @Min(value = 1, message = "条数必须大于0") @ApiParam(value = "条数") Integer rows,
			@RequestParam(required = false, defaultValue = "-1") @ApiParam(value = "理财计划状态：1最新计划  2  运行中     3已经终止, 其他值:全部") Integer status,
			@RequestParam(required = false, defaultValue = "-1") @ApiParam(value = "排序状态：1当前收益率最高,2关注度最高,3目标收益最高,4服务费用最高, 其他值:按照发布时间倒序,排序状态") Integer order,
			@RequestParam(required = false, defaultValue = "-1") @Max(value = 12, message = "期限最长12个月") @ApiParam(value = "计划期限：1月/2月/3月/6月 （下拉选择）,以月为单位,如1表示1个月，4表示4个月,其他值:全部") Integer monthCount,
			@RequestParam(required = false, defaultValue = "") @ApiParam(value = "操作风格标签：（下拉选择）,可通过接口获取操作风格选项,为空表示:全部,多个之间用逗号隔开") String labelIds,
			@ApiParam(value = "当前用户id", required = false) @RequestParam(required = false, defaultValue = "-11") @Size(min = 1, max = 200, message = "当前用户id在{min}-{max}个字") String currentUserId)
			throws Exception {
		BooleanPageResult<Lcjh2Model> result = BooleanPageResult.getSuccess();

		// String sql_group = "select max(addTime) addTime,userId from t_lcjh2
		// group by userId";
		StringBuilder sb_group = new StringBuilder();
		StringBuilder sb_count = new StringBuilder();
		String oderBy = "";
		String selectColumn = " (select addTime from t_lcjh2 ina where ina.userId = a.userId #{conditon2} #{orderBy} limit 1 offset 0) addTime"
				+ ", a.userId,SUM(a.syl) nhsy ";
		String conditon = " where (1=1 ";
		String conditon2 = "";
		Map<String, Object> params_group = new HashMap<>();
		params_group.put("currentUserId", currentUserId);
		if (2 == status) {
			conditon += " and a.status = " + LcjhStatusEnum.authSuccess.ordinal();
			conditon += " and a.jhqdsj <= now() ";
			conditon2 += " and ina.status = " + LcjhStatusEnum.authSuccess.ordinal();
			conditon2 += " and ina.jhqdsj <= now() ";
		} else if (3 == status) {
			conditon += " and a.status in (:completeList)";
			params_group.put("completeList", LcjhStatusEnum.getCompleteStatus());
			conditon2 += " and a.status in (:completeList)";
		}
		if (monthCount > 0) {
			conditon += " and a.monthCount = " + monthCount;
			conditon2 += " and a.monthCount = " + monthCount;
		}
		if (StringUtils.hasText(labelIds)) {
			String[] labels = labelIds.split(",");
			for (int i = 0; i < labels.length; i++) {
				String labelStr = labels[i];
				conditon += " and a.id in (select lcjh_id from t_lcjh_label_relation where label_id = :labelId" + i
						+ ")";
				conditon2 += " and a.id in (select lcjh_id from t_lcjh_label_relation where label_id = :labelId" + i
						+ ")";
				params_group.put("labelId" + i, labelStr);
			}
		}
		conditon += " )";
		selectColumn = selectColumn.replace("#{conditon2}", conditon2);
		String orderByOut = "";
		if (1 == order) {
			selectColumn = selectColumn.replace("#{orderBy}", " order by isTop desc, syl desc ");
			selectColumn += ",max(syl) syl ";
			oderBy += " order by max(isTop) desc, max(syl) desc";
			orderByOut = "syl desc";
		} else if (2 == order) {
			selectColumn = selectColumn.replace("#{orderBy}", " order by isTop desc, buyCount desc ");
			selectColumn += ",max(buyCount) buyCount ";
			oderBy += " order by max(isTop) desc, max(buyCount) desc ";
			orderByOut = "buyCount desc";
		} else if (3 == order) {
			selectColumn = selectColumn.replace("#{orderBy}", " order by isTop desc, yjsyl desc ");
			selectColumn += ",max(yjsyl) yjsyl ";
			oderBy += " order by max(isTop) desc, max(yjsyl) desc ";
			orderByOut = "yjsyl desc";
		} else if (4 == order) {
			selectColumn = selectColumn.replace("#{orderBy}", " order by isTop desc, fwf desc ");
			selectColumn += ",max(fwf) fwf ";
			oderBy += " order by max(isTop) desc, max(fwf) desc ";
			orderByOut = "fwf desc";
		} else {
			selectColumn = selectColumn.replace("#{orderBy}", " order by isTop desc, addTime desc ");
			oderBy += " order by max(isTop) desc, max(addTime) desc ";
			orderByOut = "addTime desc";
		}
		int offset = (page - 1) * rows;
		sb_group.append("select b.*,c.`name`,c.nickname,c.tx,t.nhsy,");
		sb_group.append("case when b.jhqdsj < now() and b.jhwjrq > now() then 1 else 0 end isdoing ");
		sb_group.append(
				",case when b.userId = :currentUserId then 2 when (select count(1) from t_lcjh_user_buy_record buy where buy.userId = :currentUserId and buy.lcjhId = b.id) > 0 then 1 else 0 end isbuy ");
		sb_group.append(" from ( select ");
		sb_group.append(selectColumn);
		sb_group.append(" from t_lcjh2 a");
		sb_group.append(conditon);
		sb_group.append(" group by userId ");
		sb_group.append(oderBy);
		sb_group.append(" limit " + rows + " offset " + offset + " ");
		sb_group.append(") t left outer join t_lcjh2 b on t.addTime = b.addTime and t.userId = b.userId ");
		sb_group.append(" left outer join loginuser c on c.id = t.userId order by isTop desc,");
		sb_group.append(orderByOut);

		sb_count.append("select count(1) from ( select ");
		sb_count.append(" a.userId from t_lcjh2 a");
		sb_count.append(conditon);
		sb_count.append(" group by userId ");
		sb_count.append(") t ");

		String sql_group = sb_group.toString();
		String sql_count = sb_count.toString();

		List<Lcjh2Model> list_group = lcjh2Biz.findBySqlBuildObject(sql_group, params_group, Lcjh2Model.class, null,
				null);

		for (Lcjh2Model m : list_group) {
			String sql_label = "select * from t_lcjh_label where id in (select label_id from t_lcjh_label_relation where lcjh_id = :lcjhId)";
			Map<String, Object> params_label = new HashMap<String, Object>();
			params_label.put("lcjhId", m.getId());
			List<LcjhLabel> labels = lcjhLabelBiz.findBySqlBuildObject(sql_label, params_label, LcjhLabel.class, null,
					null);
			Set<LcjhLabel> lables_set = new HashSet<>(labels);
			m.setLabels(lables_set);
		}

		params_group.remove("currentUserId");
		int total = lcjh2Biz.countBySql(sql_count, params_group);
		PageRequest pager = new PageRequest(page - 1, rows);
		Page<Lcjh2Model> pageData = new PageImpl<Lcjh2Model>(list_group, pager, total);

		// Map<String, Object> params = new HashMap<String, Object>(1);
		// params.put("completeList", LcjhStatusEnum.getCompleteStatus());
		// String completeHql = "select count(1) from Lcjh2 where status in
		// (:completeList)";
		// String successHql = "select count(1) from Lcjh2 where status = " +
		// LcjhStatusEnum.success.ordinal();
		//
		// int complete = lcjh2Biz.count(completeHql, params);
		// int success = lcjh2Biz.count(successHql, null);
		// BigDecimal cgl = new BigDecimal(success * 1d / complete);
		//
		// model.setCgl(cgl);
		// model.setComplete(complete);
		// model.setSuccess(success);
		// model.setNhsyl(new BigDecimal("1.0"));

		result.setResult(pageData);
		return result;
	}

	@ApiOperation(value = "获取某个名家的理财计划列表,分页", notes = "根据时间倒序,如果某个计划失败，syl比止损线低，表示触及止损,名家id 和当前id 相同表示获取自己的理财计划", httpMethod = "POST")
	@RequestMapping(value = "/getUserLcjhPageList", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanObjectResult<UserLcjhModel> getUserLcjhPageList(HttpServletRequest request,
			@ApiParam(value = "页号") @RequestParam(required = false, defaultValue = "1") @Min(value = 1, message = "页号必须大于0") Integer page,
			@ApiParam(value = "条数") @RequestParam(required = false, defaultValue = "10") @Min(value = 1, message = "条数必须大于0") Integer rows,
			@ApiParam(value = "名家id", required = true) @NotBlank(message = "名家id不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "名家id在{min}-{max}个字之间") String userId,
			@ApiParam(value = "当前用户id", required = true) @NotBlank(message = "当前用户id不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "当前用户id在{min}-{max}个字") String currentUserId)
			throws Exception {

		BooleanObjectResult<UserLcjhModel> result = BooleanObjectResult.getSuccess();

		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "名家不存在");

		UserLcjhModel model = new UserLcjhModel();
		model.setUserId(userId);
		model.setName(user.getName());
		model.setNickname(user.getNickname());
		model.setTx(user.getTx());

		Map<String, Object> params = new HashMap<String, Object>(1);
		params.put("userId", userId);
		Map<String, Object> params2 = new HashMap<>(2);
		params2.putAll(params);
		Map<String, Object> params3 = new HashMap<>(2);
		params3.putAll(params);

		params.put("completeList", LcjhStatusEnum.getCompleteStatus());
		String completeHql = "select count(1) from Lcjh2 where userId = :userId and status in (:completeList)";
		int complete = lcjh2Biz.count(completeHql, params);
		model.setComplete(complete);

		String successHql = "select count(1) from Lcjh2 where userId = :userId and status = :successStatus";
		params2.put("successStatus", LcjhStatusEnum.success.ordinal());
		int successCount = lcjh2Biz.count(successHql, params2);
		model.setSuccessCount(successCount);

		double cgl_d = complete == 0 ? 0 : successCount * 1d / complete * 100;
		BigDecimal cgl = new BigDecimal(cgl_d);
		model.setCgl(cgl);

		String allsylHql = "select sum(syl) from Lcjh2 where userId = :userId and status in (:completeList)";
		double allsyl = lcjh2Biz.sumDouble(allsylHql, params);
		BigDecimal nhsyl = new BigDecimal(complete == 0 ? 0 : allsyl / complete);
		model.setNhsyl(nhsyl);

		params3.put("authSuccessStatus", LcjhStatusEnum.getAllAuthSuccessStatus());
		params3.put("currentUserId", currentUserId);
		String sql = "select a.*,b.`name`,b.nickname,b.tx, case when a.jhqdsj < now() and a.jhwjrq > now() then 1 else 0 end isdoing "
				+ " ,case when a.userId = :currentUserId then 2 when (select count(1) from t_lcjh_user_buy_record buy where buy.userId = :currentUserId and buy.lcjhId = a.id) > 0 then 1 else 0 end isbuy "
				+ " from t_lcjh2 a left outer join loginuser b on a.userId = b.id "
				+ " where a.userId = :userId and a.status in (:authSuccessStatus) order by a.isTop desc, a.addTime desc";
		String hqlCount = "select count(1) from Lcjh2 where userId = :userId and status in (:authSuccessStatus)";
		List<Lcjh2Model> list = lcjh2Biz.findBySqlBuildObject(sql, params3, Lcjh2Model.class, page, rows);
		for (Lcjh2Model m : list) {
			String sql_label = "select * from t_lcjh_label where id in (select label_id from t_lcjh_label_relation where lcjh_id = :lcjhId)";
			Map<String, Object> params_label = new HashMap<String, Object>();
			params_label.put("lcjhId", m.getId());
			List<LcjhLabel> labels = lcjhLabelBiz.findBySqlBuildObject(sql_label, params_label, LcjhLabel.class, null,
					null);
			Set<LcjhLabel> lables_set = new HashSet<>(labels);
			m.setLabels(lables_set);
		}
		params3.remove("currentUserId");
		int total = lcjh2Biz.count(hqlCount, params3);

		PageRequest pager = new PageRequest(page - 1, rows);
		Page<Lcjh2Model> pageData = new PageImpl<Lcjh2Model>(list, pager, total);

		model.setPageData(pageData);

		result.setResult(model);
		return result;
	}

	@ApiOperation(value = "获取某个名家的往期理财计划,分页", notes = "根据时间倒序,如果某个计划失败，syl比止损线低，表示触及止损", httpMethod = "POST")
	@RequestMapping(value = "/getUserLcjhPageListHistory", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanObjectResult<UserLcjhModel> getUserLcjhPageListHistory(HttpServletRequest request,
			@ApiParam(value = "页号") @RequestParam(required = false, defaultValue = "1") @Min(value = 1, message = "页号必须大于0") Integer page,
			@ApiParam(value = "条数") @RequestParam(required = false, defaultValue = "10") @Min(value = 1, message = "条数必须大于0") Integer rows,
			@ApiParam(value = "名家id", required = true) @NotBlank(message = "名家id不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "名家id在{min}-{max}个字之间") String userId,
			@ApiParam(value = "当前用户id", required = true) @NotBlank(message = "当前用户id不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "当前用户id在{min}-{max}个字") String currentUserId)
			throws Exception {

		BooleanObjectResult<UserLcjhModel> result = BooleanObjectResult.getSuccess();

		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "名家不存在");

		UserLcjhModel model = new UserLcjhModel();
		model.setUserId(userId);
		model.setName(user.getName());
		model.setNickname(user.getNickname());
		model.setTx(user.getTx());

		Map<String, Object> params = new HashMap<String, Object>(1);
		params.put("userId", userId);
		Map<String, Object> params2 = new HashMap<>(2);
		params2.putAll(params);
		Map<String, Object> params3 = new HashMap<>(2);
		params3.putAll(params);

		params.put("completeList", LcjhStatusEnum.getCompleteStatus());
		String completeHql = "select count(1) from Lcjh2 where userId = :userId and status in (:completeList)";
		int complete = lcjh2Biz.count(completeHql, params);
		model.setComplete(complete);

		String successHql = "select count(1) from Lcjh2 where userId = :userId and status = :successStatus";
		params2.put("successStatus", LcjhStatusEnum.success.ordinal());
		int successCount = lcjh2Biz.count(successHql, params2);
		model.setSuccessCount(successCount);

		double cgl_d = complete == 0 ? 0 : successCount * 1d / complete * 100;
		BigDecimal cgl = new BigDecimal(cgl_d);
		model.setCgl(cgl);

		String allsylHql = "select sum(syl) from Lcjh2 where userId = :userId and status in (:completeList)";
		double allsyl = lcjh2Biz.sumDouble(allsylHql, params);
		BigDecimal nhsyl = new BigDecimal(complete == 0 ? 0 : allsyl / complete);
		model.setNhsyl(nhsyl);

		Map<String, Object> params4 = new HashMap<String, Object>(1);
		params4.put("userId", userId);
		params4.put("completeStatus", LcjhStatusEnum.getCompleteStatus());
		params4.put("currentUserId", currentUserId);

		String sql = "select a.*,b.`name`,b.nickname,b.tx, case when a.jhqdsj < now() and a.jhwjrq > now() then 1 else 0 end isdoing "
				+ " ,case when a.userId = :currentUserId then 2 when (select count(1) from t_lcjh_user_buy_record buy where buy.userId = :currentUserId and buy.lcjhId = b.id) > 0 then 1 else 0 end isbuy "
				+ " from t_lcjh2 a left outer join loginuser b on a.userId = b.id "
				+ " where a.userId = :userId and a.status in (:completeStatus) order by a.isTop desc, a.addTime desc";

		String hqlCount = "select count(1) from Lcjh2 where userId = :userId and status in (:completeStatus)";

		List<Lcjh2Model> list = lcjh2Biz.findBySqlBuildObject(sql, params4, Lcjh2Model.class, page, rows);
		for (Lcjh2Model m : list) {
			String sql_label = "select * from t_lcjh_label where id in (select label_id from t_lcjh_label_relation where lcjh_id = :lcjhId)";
			Map<String, Object> params_label = new HashMap<String, Object>();
			params_label.put("lcjhId", m.getId());
			List<LcjhLabel> labels = lcjhLabelBiz.findBySqlBuildObject(sql_label, params_label, LcjhLabel.class, null,
					null);
			Set<LcjhLabel> lables_set = new HashSet<>(labels);
			m.setLabels(lables_set);
		}
		params4.remove("currentUserId");
		int total = lcjh2Biz.count(hqlCount, params4);

		PageRequest pager = new PageRequest(page - 1, rows);
		Page<Lcjh2Model> pageData = new PageImpl<Lcjh2Model>(list, pager, total);

		model.setPageData(pageData);

		result.setResult(model);
		return result;
	}

	@ApiOperation(value = "获取用户购买的理财计划列表,分页", notes = "根据时间倒序", httpMethod = "POST")
	@RequestMapping(value = "/getUserBuyPageList", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanPageResult<Lcjh2Model> getUserBuyPageList(HttpServletRequest request,
			@ApiParam(value = "页号") @RequestParam(required = false, defaultValue = "1") @Min(value = 1, message = "页号必须大于0") Integer page,
			@ApiParam(value = "条数") @RequestParam(required = false, defaultValue = "10") @Min(value = 1, message = "条数必须大于0") Integer rows,
			@ApiParam(value = "当前用户id", required = true) @NotBlank(message = "当前用户id不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "当前用户id在{min}-{max}个字") String currentUserId)
			throws Exception {

		BooleanPageResult<Lcjh2Model> result = BooleanPageResult.getSuccess();

		// String sql_group = "select max(addTime) addTime,userId from t_lcjh2
		// group by userId";
		StringBuilder sb_group = new StringBuilder();
		StringBuilder sb_count = new StringBuilder();
		String oderBy = "";
		String conditon = " where 1=1 ";
		Map<String, Object> params_group = new HashMap<>();
		params_group.put("currentUserId", currentUserId);

		conditon += " and a.id in (select lcjhId from t_lcjh_user_buy_record buy where buy.userId = :currentUserId)";

		oderBy += " order by a.addTime desc ";

		int offset = (page - 1) * rows;
		sb_group.append("select a.*,c.`name`,c.nickname,c.tx,");
		sb_group.append("case when a.jhqdsj < now() and a.jhwjrq > now() then 1 else 0 end isdoing ");
		sb_group.append(",1 as isbuy ");
		sb_group.append(" from t_lcjh2 a ");
		sb_group.append(" left outer join loginuser c on c.id = a.userId ");
		sb_group.append(conditon);
		sb_group.append(" ");
		sb_group.append(oderBy);
		sb_group.append(" limit " + rows + " offset " + offset + " ");

		sb_count.append("select ");
		sb_count.append("count(1) from t_lcjh2 a ");
		sb_count.append(conditon);

		String sql_group = sb_group.toString();
		String sql_count = sb_count.toString();

		List<Lcjh2Model> list_group = lcjh2Biz.findBySqlBuildObject(sql_group, params_group, Lcjh2Model.class, null,
				null);

		for (Lcjh2Model m : list_group) {
			String sql_label = "select * from t_lcjh_label where id in (select label_id from t_lcjh_label_relation where lcjh_id = :lcjhId)";
			Map<String, Object> params_label = new HashMap<String, Object>();
			params_label.put("lcjhId", m.getId());
			List<LcjhLabel> labels = lcjhLabelBiz.findBySqlBuildObject(sql_label, params_label, LcjhLabel.class, null,
					null);
			Set<LcjhLabel> lables_set = new HashSet<>(labels);
			m.setLabels(lables_set);
		}

		int total = lcjh2Biz.countBySql(sql_count, params_group);
		PageRequest pager = new PageRequest(page - 1, rows);
		Page<Lcjh2Model> pageData = new PageImpl<Lcjh2Model>(list_group, pager, total);

		result.setResult(pageData);
		return result;
	}

	@ApiOperation(value = "发布理财计划(jsonp)", notes = "时间格式为 yyyy-MM-dd HH:mm:ss", httpMethod = "POST")
	@RequestMapping(value = "/addLcjhMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void addLcjhMore(HttpServletResponse res, HttpServletRequest request,
			@ApiParam(value = "手机号", required = true) @RequestParam(required = false) @NotBlank(message = "手机号不能为空") @Size(min = 11, max = 20, message = "手机号在{min}-{max}个字") String phone,
			@ApiParam(value = "计划标题,名称", required = true) @NotBlank(message = "标题不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "标题在{min}-{max}个字") String jhbt,
			@ApiParam(value = "计划简介", required = true) @NotBlank(message = "计划简介不能为空") @RequestParam(required = false) @Length(min = 1, max = 2000, message = "计划简介在{min}-{max}个字") String jhjj,
			@ApiParam(value = "预计收益率", required = true) @NotNull(message = "预计收益率不能为空") @RequestParam(required = false) @Range(min = 0, max = 200, message = "预计收益率在{min}-{max}个字") BigDecimal yjsyl,
			@ApiParam(value = "预计止损线", required = true) @NotNull(message = "预计止损线不能为空") @RequestParam(required = false) @Range(min = 0, max = 200, message = "预计止损线在{min}-{max}个字") BigDecimal yjzsx,
			@ApiParam(value = "服务费", required = true) @NotNull(message = "服务费不能为空") @RequestParam(required = false) @Range(min = 0, max = 200000, message = "服务费在{min}-{max}之间") BigDecimal fwf
			// ,@ApiParam(value="开始发售时间",required=true)
			// @NotNull(message="开始发售时间不能为空")
			// @Future(message="开始发售时间必须大于当前时间")
			// @RequestParam(required=false)@DateTimeFormat(pattern="yyyy-MM-dd
			// HH:mm:ss") Date fssj
			// ,@ApiParam(value="截止销售时间",required=true)
			// @NotNull(message="截止销售时间不能为空")
			// @Future(message="截止销售时间必须大于当前时间")
			// @RequestParam(required=false)@DateTimeFormat(pattern="yyyy-MM-dd
			// HH:mm:ss") Date jzsj
			,
			@ApiParam(value = "购买限时,以小时为单位,从计划发布时开始", required = true) @NotNull(message = "购买限时") @RequestParam(required = false) Integer gmxs,
			@ApiParam(value = "购买限人,0表示不能购买,-1表示无限", required = true) @NotNull(message = "购买限时") @Min(value = -1, message = "购买限人>=-1") @RequestParam(required = false) Integer buyMaxCount,
			@ApiParam(value = "计划机构名称") @RequestParam(required = false) String jgmc,
			@ApiParam(value = "计划启动时间,开始时间", required = true) @NotNull(message = "计划启动时间不能为空") @Future(message = "计划启动时间必须大于当前时间") @RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss") Date jhqdsj,
			@ApiParam(value = "计划预期时间,以天为单位,5~183", required = true) @NotNull(message = "计划预期时间不能为空") @Range(min = 5, max = 183, message = "计划预期时间在{min}~{max}之间") @RequestParam(required = false) Integer dayCount
			// ,@ApiParam(value="计划图片",required=false)
			// @RequestParam(required=false) MultipartFile image
			,
			@RequestParam(required = false, defaultValue = "") @ApiParam(value = "操作风格标签：（下拉选择）,可通过接口获取操作风格选项,多个用,隔开") String labelIds)
			throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());

		LoginUser user = loginUserServiceI.getUserByPhone(phone);
		if (user == null) {
			result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
					CodeEnum.PATTERN_ERROR.getMessage());
			result.setResult("用户不存在");
			String resStr = "";
			String callback = request.getParameter("callback");
			if (null != callback) {
				resStr += callback + "(";
				resStr += JSONObject.toJSONString(result);
				resStr += ")";
			} else {
				resStr = JSONObject.toJSONString(result);
			}
			request.setCharacterEncoding("utf-8");
			res.setContentType("text/html;charset=utf-8");
			res.getWriter().write(resStr);
			res.getWriter().flush();
			res.getWriter().close();
		} else {
			Lcjh2 l = new Lcjh2();
			Calendar c = Calendar.getInstance();
			l.setAddTime(c.getTime());

			l.setBuyCount(0);
			l.setBuyMaxCount(buyMaxCount);
			l.setDayCount(dayCount);
			l.setFwf(fwf);
			l.setStartGoldCoins(new BigDecimal(ProjectConfig.getLcjhConfig(true, null).getStartGoldCoins()));
			l.setGoldCoins(new BigDecimal(ProjectConfig.getLcjhConfig(true, null).getStartGoldCoins()));
			l.setJgmc(jgmc);
			l.setJhbt(jhbt);
			l.setJhjj(jhjj);

			l.setGmxs(gmxs);
			l.setFssj(c.getTime());
			c.add(Calendar.HOUR, gmxs);
			l.setJzsj(c.getTime());

			c.setTime(jhqdsj);
			c.set(Calendar.HOUR_OF_DAY, 0);
			c.set(Calendar.MINUTE, 0);
			c.set(Calendar.SECOND, 0);
			c.set(Calendar.MILLISECOND, 0);
			l.setJhqdsj(c.getTime());

			c.add(Calendar.DATE, dayCount);
			c.set(Calendar.HOUR_OF_DAY, 23);
			c.set(Calendar.MINUTE, 59);
			c.set(Calendar.SECOND, 59);
			c.set(Calendar.MILLISECOND, 0);
			l.setJhwjrq(c.getTime());

			int monthCount = (int) (dayCount / 30) + 1;
			l.setMonthCount(monthCount);
			l.setStatus(LcjhStatusEnum.authSuccess.ordinal());
			l.setUserId(user.getId());
			l.setSyl(BigDecimal.ZERO);
			l.setYjsyl(yjsyl);
			l.setYjzsx(yjzsx);

			// String images = FileUploadDeleteUtil.upload(image,
			// ProjectConfig.imgRootURL, ProjectConfig.imgSavePath, null, null);
			// l.setImages(images);

			Set<LcjhLabel> labelsSet = null;
			if (StringUtils.hasText(labelIds)) {
				String[] labels = labelIds.split(",");
				labelsSet = new HashSet<>(labels.length);
				for (int i = 0; i < labels.length; i++) {
					String labelStr = labels[i];
					LcjhLabel label = lcjhLabelBiz.get(LcjhLabel.class, labelStr);
					Assert.notNull(label, "标签不存在");
					labelsSet.add(label);
				}
			}
			l.setLabels(labelsSet);
			lcjh2Biz.save(l);

			JPushChatModel chat = new JPushChatModel();
			String chattitle = "涨声信息";
			String chatcontent = "你关注的股天乐投资顾问'" + user.getNickname() + "' 发布了新的理财计划,'" + l.getJhbt() + "'!";
			chat.setType(LcjhPushEnum.addLcjh.getCode());
			chat.setTitle(chattitle);
			chat.setContent(chatcontent);
			chat.setDataId(l.getId());
			lcjhJpushUtil.pushUser(chat, user.getId());

			result.setResult("SUCCESS");
			String resStr = "";
			String callback = request.getParameter("callback");
			if (null != callback) {
				resStr += callback + "(";
				resStr += JSONObject.toJSONString(result);
				resStr += ")";
			} else {
				resStr = JSONObject.toJSONString(result);
			}
			request.setCharacterEncoding("utf-8");
			res.setContentType("text/html;charset=utf-8");
			res.getWriter().write(resStr);
			res.getWriter().flush();
			res.getWriter().close();
		}
	}

	@ApiOperation(value = "获取某个名家的理财计划列表,分页(jsonp)", notes = "根据时间倒序,如果某个计划失败，syl比止损线低，表示触及止损,名家id 和当前id 相同表示获取自己的理财计划", httpMethod = "POST")
	@RequestMapping(value = "/getUserLcjhPageListMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void getUserLcjhPageListMore(HttpServletResponse res, HttpServletRequest request,
			@ApiParam(value = "页号") @RequestParam(required = false, defaultValue = "1") @Min(value = 1, message = "页号必须大于0") Integer page,
			@ApiParam(value = "条数") @RequestParam(required = false, defaultValue = "10") @Min(value = 1, message = "条数必须大于0") Integer rows,
			@ApiParam(value = "名家id", required = true) @NotBlank(message = "名家id不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "名家id在{min}-{max}个字之间") String userId,
			@ApiParam(value = "手机号", required = true) @RequestParam(required = false) @NotBlank(message = "手机号不能为空") @Size(min = 11, max = 20, message = "手机号在{min}-{max}个字") String phone)
			throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());

		LoginUser user = loginUserServiceI.getUser(userId);
		if (user == null) {
			result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
					CodeEnum.PATTERN_ERROR.getMessage());
			result.setResult("名家不存在");
			String resStr = "";
			String callback = request.getParameter("callback");
			if (null != callback) {
				resStr += callback + "(";
				resStr += JSONObject.toJSONString(result);
				resStr += ")";
			} else {
				resStr = JSONObject.toJSONString(result);
			}
			request.setCharacterEncoding("utf-8");
			res.setContentType("text/html;charset=utf-8");
			res.getWriter().write(resStr);
			res.getWriter().flush();
			res.getWriter().close();
		} else {
			LoginUser user2 = loginUserServiceI.getUserByPhone(phone);
			if (user2 == null) {
				result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
						CodeEnum.PATTERN_ERROR.getMessage());
				result.setResult("用户不存在");
				String resStr = "";
				String callback = request.getParameter("callback");
				if (null != callback) {
					resStr += callback + "(";
					resStr += JSONObject.toJSONString(result);
					resStr += ")";
				} else {
					resStr = JSONObject.toJSONString(result);
				}
				request.setCharacterEncoding("utf-8");
				res.setContentType("text/html;charset=utf-8");
				res.getWriter().write(resStr);
				res.getWriter().flush();
			} else {
				UserLcjhModel model = new UserLcjhModel();
				model.setUserId(userId);
				model.setName(user.getName());
				model.setNickname(user.getNickname());
				model.setTx(user.getTx());

				Map<String, Object> params = new HashMap<String, Object>(1);
				params.put("userId", userId);
				Map<String, Object> params2 = new HashMap<>(2);
				params2.putAll(params);
				Map<String, Object> params3 = new HashMap<>(2);
				params3.putAll(params);

				params.put("completeList", LcjhStatusEnum.getCompleteStatus());
				String completeHql = "select count(1) from Lcjh2 where userId = :userId and status in (:completeList)";
				int complete = lcjh2Biz.count(completeHql, params);
				model.setComplete(complete);

				String successHql = "select count(1) from Lcjh2 where userId = :userId and status = :successStatus";
				params2.put("successStatus", LcjhStatusEnum.success.ordinal());
				int successCount = lcjh2Biz.count(successHql, params2);
				model.setSuccessCount(successCount);

				double cgl_d = complete == 0 ? 0 : successCount * 1d / complete * 100;
				BigDecimal cgl = new BigDecimal(cgl_d);
				model.setCgl(cgl);

				String allsylHql = "select sum(syl) from Lcjh2 where userId = :userId and status in (:completeList)";
				double allsyl = lcjh2Biz.sumDouble(allsylHql, params);
				BigDecimal nhsyl = new BigDecimal(complete == 0 ? 0 : allsyl / complete);
				model.setNhsyl(nhsyl);

				params3.put("authSuccessStatus", LcjhStatusEnum.getAllAuthSuccessStatus());
				params3.put("currentUserId", user2.getId());
				String sql = "select a.*,b.`name`,b.nickname,b.tx, case when a.jhqdsj < now() and a.jhwjrq > now() then 1 else 0 end isdoing "
						+ " ,case when a.userId = :currentUserId then 2 when (select count(1) from t_lcjh_user_buy_record buy where buy.userId = :currentUserId and buy.lcjhId = a.id) > 0 then 1 else 0 end isbuy "
						+ " from t_lcjh2 a left outer join loginuser b on a.userId = b.id "
						+ " where a.userId = :userId and a.status in (:authSuccessStatus) order by a.isTop desc, a.addTime desc";
				String hqlCount = "select count(1) from Lcjh2 where userId = :userId and status in (:authSuccessStatus)";
				List<Lcjh2Model> list = lcjh2Biz.findBySqlBuildObject(sql, params3, Lcjh2Model.class, page, rows);
				for (Lcjh2Model m : list) {
					String sql_label = "select * from t_lcjh_label where id in (select label_id from t_lcjh_label_relation where lcjh_id = :lcjhId)";
					Map<String, Object> params_label = new HashMap<String, Object>();
					params_label.put("lcjhId", m.getId());
					List<LcjhLabel> labels = lcjhLabelBiz.findBySqlBuildObject(sql_label, params_label, LcjhLabel.class,
							null, null);
					Set<LcjhLabel> lables_set = new HashSet<>(labels);
					m.setLabels(lables_set);
				}
				params3.remove("currentUserId");
				int total = lcjh2Biz.count(hqlCount, params3);

				PageRequest pager = new PageRequest(page - 1, rows);
				Page<Lcjh2Model> pageData = new PageImpl<Lcjh2Model>(list, pager, total);

				model.setPageData(pageData);

				result.setResult(model);
				String resStr = "";
				String callback = request.getParameter("callback");
				if (null != callback) {
					resStr += callback + "(";
					resStr += JSONObject.toJSONString(result);
					resStr += ")";
				} else {
					resStr = JSONObject.toJSONString(result);
				}
				request.setCharacterEncoding("utf-8");
				res.setContentType("text/html;charset=utf-8");
				res.getWriter().write(resStr);
				res.getWriter().flush();
				res.getWriter().close();
			}
		}
	}

	@ApiOperation(value = "获取用户购买的理财计划列表,分页(jsonp)", notes = "根据时间倒序", httpMethod = "POST")
	@RequestMapping(value = "/getUserBuyPageListMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void getUserBuyPageListMore(HttpServletResponse res, HttpServletRequest request,
			@ApiParam(value = "页号") @RequestParam(required = false, defaultValue = "1") @Min(value = 1, message = "页号必须大于0") Integer page,
			@ApiParam(value = "条数") @RequestParam(required = false, defaultValue = "10") @Min(value = 1, message = "条数必须大于0") Integer rows,
			@ApiParam(value = "手机号", required = true) @RequestParam(required = false) @NotBlank(message = "手机号不能为空") @Size(min = 11, max = 20, message = "手机号在{min}-{max}个字") String phone)
			throws Exception {

		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());

		// String sql_group = "select max(addTime) addTime,userId from t_lcjh2
		// group by userId";
		LoginUser user = loginUserServiceI.getUserByPhone(phone);
		if (user == null) {
			result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
					CodeEnum.PATTERN_ERROR.getMessage());
			result.setResult("用户不存在");
			String resStr = "";
			String callback = request.getParameter("callback");
			if (null != callback) {
				resStr += callback + "(";
				resStr += JSONObject.toJSONString(result);
				resStr += ")";
			} else {
				resStr = JSONObject.toJSONString(result);
			}
			request.setCharacterEncoding("utf-8");
			res.setContentType("text/html;charset=utf-8");
			res.getWriter().write(resStr);
			res.getWriter().flush();
			res.getWriter().close();
		} else {
			StringBuilder sb_group = new StringBuilder();
			StringBuilder sb_count = new StringBuilder();
			String oderBy = "";
			String conditon = " where 1=1 ";
			Map<String, Object> params_group = new HashMap<>();
			params_group.put("currentUserId", user.getId());

			conditon += " and a.id in (select lcjhId from t_lcjh_user_buy_record buy where buy.userId = :currentUserId)";

			oderBy += " order by a.addTime desc ";

			int offset = (page - 1) * rows;
			sb_group.append("select a.*,c.`name`,c.nickname,c.tx,");
			sb_group.append("case when a.jhqdsj < now() and a.jhwjrq > now() then 1 else 0 end isdoing ");
			sb_group.append(",1 as isbuy ");
			sb_group.append(" from t_lcjh2 a ");
			sb_group.append(" left outer join loginuser c on c.id = a.userId ");
			sb_group.append(conditon);
			sb_group.append(" ");
			sb_group.append(oderBy);
			sb_group.append(" limit " + rows + " offset " + offset + " ");

			sb_count.append("select ");
			sb_count.append("count(1) from t_lcjh2 a ");
			sb_count.append(conditon);

			String sql_group = sb_group.toString();
			String sql_count = sb_count.toString();

			List<Lcjh2Model> list_group = lcjh2Biz.findBySqlBuildObject(sql_group, params_group, Lcjh2Model.class, null,
					null);

			for (Lcjh2Model m : list_group) {
				String sql_label = "select * from t_lcjh_label where id in (select label_id from t_lcjh_label_relation where lcjh_id = :lcjhId)";
				Map<String, Object> params_label = new HashMap<String, Object>();
				params_label.put("lcjhId", m.getId());
				List<LcjhLabel> labels = lcjhLabelBiz.findBySqlBuildObject(sql_label, params_label, LcjhLabel.class,
						null, null);
				Set<LcjhLabel> lables_set = new HashSet<>(labels);
				m.setLabels(lables_set);
			}

			int total = lcjh2Biz.countBySql(sql_count, params_group);
			PageRequest pager = new PageRequest(page - 1, rows);
			Page<Lcjh2Model> pageData = new PageImpl<Lcjh2Model>(list_group, pager, total);

			result.setResult(pageData);
			String resStr = "";
			String callback = request.getParameter("callback");
			if (null != callback) {
				resStr += callback + "(";
				resStr += JSONObject.toJSONString(result);
				resStr += ")";
			} else {
				resStr = JSONObject.toJSONString(result);
			}
			request.setCharacterEncoding("utf-8");
			res.setContentType("text/html;charset=utf-8");
			res.getWriter().write(resStr);
			res.getWriter().flush();
			res.getWriter().close();
		}
	}

	@ApiOperation(value = "获取首页理财计划列表,分页(jsonp)", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/getLcjhPageListMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void getLcjhPageListMore(HttpServletRequest request, HttpServletResponse res,
			@RequestParam(required = false, defaultValue = "1") @Min(value = 1, message = "页号必须大于0") @ApiParam(value = "页号") Integer page,
			@RequestParam(required = false, defaultValue = "10") @Min(value = 1, message = "条数必须大于0") @ApiParam(value = "条数") Integer rows,
			@RequestParam(required = false, defaultValue = "-1") @ApiParam(value = "理财计划状态：1最新计划  2  运行中     3已经终止, 其他值:全部") Integer status,
			@RequestParam(required = false, defaultValue = "-1") @ApiParam(value = "排序状态：1当前收益率最高,2关注度最高,3目标收益最高,4服务费用最高, 其他值:按照发布时间倒序,排序状态") Integer order,
			@RequestParam(required = false, defaultValue = "-1") @Max(value = 12, message = "期限最长12个月") @ApiParam(value = "计划期限：1月/2月/3月/6月 （下拉选择）,以月为单位,如1表示1个月，4表示4个月,其他值:全部") Integer monthCount,
			@RequestParam(required = false, defaultValue = "") @ApiParam(value = "操作风格标签：（下拉选择）,可通过接口获取操作风格选项,为空表示:全部,多个之间用逗号隔开") String labelIds,
			@ApiParam(value = "手机号", required = true) @RequestParam(required = false) @NotBlank(message = "手机号不能为空") @Size(min = 11, max = 20, message = "手机号在{min}-{max}个字") String phone)
			throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());
		LoginUser user = loginUserServiceI.getUserByPhone(phone);
		if (user == null) {
			result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
					CodeEnum.PATTERN_ERROR.getMessage());
			result.setResult("用户不存在");
			String resStr = "";
			String callback = request.getParameter("callback");
			if (null != callback) {
				resStr += callback + "(";
				resStr += JSONObject.toJSONString(result);
				resStr += ")";
			} else {
				resStr = JSONObject.toJSONString(result);
			}
			request.setCharacterEncoding("utf-8");
			res.setContentType("text/html;charset=utf-8");
			res.getWriter().write(resStr);
			res.getWriter().flush();
			res.getWriter().close();
		} else {
			// String sql_group = "select max(addTime) addTime,userId from
			// t_lcjh2
			// group by userId";
			StringBuilder sb_group = new StringBuilder();
			StringBuilder sb_count = new StringBuilder();
			String oderBy = "";
			String selectColumn = " (select addTime from t_lcjh2 ina where ina.userId = a.userId #{conditon2} #{orderBy} limit 1 offset 0) addTime"
					+ ", a.userId,SUM(a.syl) nhsy ";
			String conditon = " where (1=1 ";
			String conditon2 = "";
			Map<String, Object> params_group = new HashMap<>();
			params_group.put("currentUserId", user.getId());
			if (2 == status) {
				conditon += " and a.status = " + LcjhStatusEnum.authSuccess.ordinal();
				conditon += " and a.jhqdsj <= now() ";
				conditon2 += " and ina.status = " + LcjhStatusEnum.authSuccess.ordinal();
				conditon2 += " and ina.jhqdsj <= now() ";
			} else if (3 == status) {
				conditon += " and a.status in (:completeList)";
				params_group.put("completeList", LcjhStatusEnum.getCompleteStatus());
				conditon2 += " and a.status in (:completeList)";
			}
			if (monthCount > 0) {
				conditon += " and a.monthCount = " + monthCount;
				conditon2 += " and a.monthCount = " + monthCount;
			}
			if (StringUtils.hasText(labelIds)) {
				String[] labels = labelIds.split(",");
				for (int i = 0; i < labels.length; i++) {
					String labelStr = labels[i];
					conditon += " and a.id in (select lcjh_id from t_lcjh_label_relation where label_id = :labelId" + i
							+ ")";
					conditon2 += " and a.id in (select lcjh_id from t_lcjh_label_relation where label_id = :labelId" + i
							+ ")";
					params_group.put("labelId" + i, labelStr);
				}
			}
			conditon += " )";
			selectColumn = selectColumn.replace("#{conditon2}", conditon2);
			String orderByOut = "";
			if (1 == order) {
				selectColumn = selectColumn.replace("#{orderBy}", " order by isTop desc, syl desc ");
				selectColumn += ",max(syl) syl ";
				oderBy += " order by max(isTop) desc, max(syl) desc";
				orderByOut = "syl desc";
			} else if (2 == order) {
				selectColumn = selectColumn.replace("#{orderBy}", " order by isTop desc, buyCount desc ");
				selectColumn += ",max(buyCount) buyCount ";
				oderBy += " order by max(isTop) desc, max(buyCount) desc ";
				orderByOut = "buyCount desc";
			} else if (3 == order) {
				selectColumn = selectColumn.replace("#{orderBy}", " order by isTop desc, yjsyl desc ");
				selectColumn += ",max(yjsyl) yjsyl ";
				oderBy += " order by max(isTop) desc, max(yjsyl) desc ";
				orderByOut = "yjsyl desc";
			} else if (4 == order) {
				selectColumn = selectColumn.replace("#{orderBy}", " order by isTop desc, fwf desc ");
				selectColumn += ",max(fwf) fwf ";
				oderBy += " order by max(isTop) desc, max(fwf) desc ";
				orderByOut = "fwf desc";
			} else {
				selectColumn = selectColumn.replace("#{orderBy}", " order by isTop desc, addTime desc ");
				oderBy += " order by max(isTop) desc, max(addTime) desc ";
				orderByOut = "addTime desc";
			}
			int offset = (page - 1) * rows;
			sb_group.append("select b.*,c.`name`,c.nickname,c.tx,t.nhsy,");
			sb_group.append("case when b.jhqdsj < now() and b.jhwjrq > now() then 1 else 0 end isdoing ");
			sb_group.append(
					",case when b.userId = :currentUserId then 2 when (select count(1) from t_lcjh_user_buy_record buy where buy.userId = :currentUserId and buy.lcjhId = b.id) > 0 then 1 else 0 end isbuy ");
			sb_group.append(" from ( select ");
			sb_group.append(selectColumn);
			sb_group.append(" from t_lcjh2 a");
			sb_group.append(conditon);
			sb_group.append(" group by userId ");
			sb_group.append(oderBy);
			sb_group.append(" limit " + rows + " offset " + offset + " ");
			sb_group.append(") t left outer join t_lcjh2 b on t.addTime = b.addTime and t.userId = b.userId ");
			sb_group.append(" left outer join loginuser c on c.id = t.userId order by isTop desc,");
			sb_group.append(orderByOut);

			sb_count.append("select count(1) from ( select ");
			sb_count.append(" a.userId from t_lcjh2 a");
			sb_count.append(conditon);
			sb_count.append(" group by userId ");
			sb_count.append(") t ");

			String sql_group = sb_group.toString();
			String sql_count = sb_count.toString();

			List<Lcjh2Model> list_group = lcjh2Biz.findBySqlBuildObject(sql_group, params_group, Lcjh2Model.class, null,
					null);

			for (Lcjh2Model m : list_group) {
				String sql_label = "select * from t_lcjh_label where id in (select label_id from t_lcjh_label_relation where lcjh_id = :lcjhId)";
				Map<String, Object> params_label = new HashMap<String, Object>();
				params_label.put("lcjhId", m.getId());
				List<LcjhLabel> labels = lcjhLabelBiz.findBySqlBuildObject(sql_label, params_label, LcjhLabel.class,
						null, null);
				Set<LcjhLabel> lables_set = new HashSet<>(labels);
				m.setLabels(lables_set);
			}
			result.setResult(list_group);
			String resStr = "";
			String callback = request.getParameter("callback");
			if (null != callback) {
				resStr += callback + "(";
				resStr += JSONObject.toJSONString(result);
				resStr += ")";
			} else {
				resStr = JSONObject.toJSONString(result);
			}
			request.setCharacterEncoding("utf-8");
			res.setContentType("text/html;charset=utf-8");
			res.getWriter().write(resStr);
			res.getWriter().flush();
			res.getWriter().close();
		}
	}

	@ApiOperation(value = "修改理财计划(jsonp)", notes = "时间格式为 yyyy-MM-dd HH:mm:ss，只能修改自己发布的理财计划，某项值未修改时，传入原值，审核完成的理财计划，不能修改", httpMethod = "POST")
	@RequestMapping(value = "/updateLcjhMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void updateLcjhMore(HttpServletResponse res, HttpServletRequest request,
			@ApiParam(value = "计划id", required = true) @NotBlank(message = "计划id不能为空") @Size(min = 32, max = 36, message = "计划id在{min}-{max}个字") @RequestParam(required = false) String id,
			@ApiParam(value = "手机号", required = true) @RequestParam(required = false) @NotBlank(message = "手机号不能为空") @Size(min = 11, max = 20, message = "手机号在{min}-{max}个字") String phone,
			@ApiParam(value = "计划标题,名称", required = true) @NotBlank(message = "标题不能为空") @Size(min = 1, max = 200, message = "标题在{min}-{max}个字") @RequestParam(required = false) String jhbt,
			@ApiParam(value = "计划简介", required = true) @NotBlank(message = "计划简介不能为空") @Length(min = 1, max = 2000, message = "计划简介在{min}-{max}个字") @RequestParam(required = false) String jhjj,
			@ApiParam(value = "预计收益率", required = true) @NotNull(message = "预计收益率不能为空") @Range(min = 0, max = 200, message = "预计收益率在{min}-{max}个字") @RequestParam(required = false) BigDecimal yjsyl,
			@ApiParam(value = "预计止损线", required = true) @NotNull(message = "预计止损线不能为空") @Range(min = 0, max = 200, message = "预计止损线在{min}-{max}个字") @RequestParam(required = false) BigDecimal yjzsx,
			@ApiParam(value = "服务费", required = true) @NotNull(message = "服务费不能为空") @Range(min = 0, max = 200000, message = "服务费在{min}-{max}之间") @RequestParam(required = false) BigDecimal fwf,
			@ApiParam(value = "购买限时,以小时为单位,从计划发布时开始", required = true) @NotNull(message = "购买限时") @RequestParam(required = false) Integer gmxs,
			@ApiParam(value = "购买限人,0表示不能购买,-1表示无限", required = true) @NotNull(message = "购买限时") @Min(value = -1, message = "购买限人>=-1") @RequestParam(required = false) Integer buyMaxCount,
			@ApiParam(value = "计划机构名称") @RequestParam(required = false) String jgmc,
			@ApiParam(value = "计划启动时间,开始时间", required = true) @NotNull(message = "计划启动时间不能为空") @Future(message = "计划启动时间必须大于当前时间") @RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss") Date jhqdsj,
			@ApiParam(value = "计划预期时间,以天为单位,5~183", required = true) @NotNull(message = "计划预期时间不能为空") @Range(min = 5, max = 183, message = "计划预期时间在{min}~{max}之间") @RequestParam(required = false) Integer dayCount
			// ,@ApiParam(value="新图片",required=false)
			// @RequestParam(required=false) MultipartFile image
			// ,@ApiParam(value="旧图片，如果旧图片和新图片都为空就表示删除图片",required=false)
			// @Length(min=0, max=300)
			// @RequestParam(required=false) String oldImageUrl
			,
			@RequestParam(required = false, defaultValue = "") @ApiParam(value = "操作风格标签：（下拉选择）,可通过接口获取操作风格选项,多个之前用,隔开") String labelIds)
			throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());

		LoginUser user = loginUserServiceI.getUserByPhone(phone);
		if (user == null) {
			result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
					CodeEnum.PATTERN_ERROR.getMessage());
			result.setResult("用户不存在");
			String resStr = "";
			String callback = request.getParameter("callback");
			if (null != callback) {
				resStr += callback + "(";
				resStr += JSONObject.toJSONString(result);
				resStr += ")";
			} else {
				resStr = JSONObject.toJSONString(result);
			}
			request.setCharacterEncoding("utf-8");
			res.setContentType("text/html;charset=utf-8");
			res.getWriter().write(resStr);
			res.getWriter().flush();
			res.getWriter().close();
		} else {
			Lcjh2 l = lcjh2Biz.get(Lcjh2.class, id);
			if (l == null) {
				result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
						CodeEnum.PATTERN_ERROR.getMessage());
				result.setResult("理财计划不不存在");
				String resStr = "";
				String callback = request.getParameter("callback");
				if (null != callback) {
					resStr += callback + "(";
					resStr += JSONObject.toJSONString(result);
					resStr += ")";
				} else {
					resStr = JSONObject.toJSONString(result);
				}
				request.setCharacterEncoding("utf-8");
				res.setContentType("text/html;charset=utf-8");
				res.getWriter().write(resStr);
				res.getWriter().flush();
				res.getWriter().close();
			} else {
				Assert.isTrue(user.getId().equals(l.getUserId()), "只能修改自己发布的理财计划");
				Assert.isTrue(l.getStatus() > LcjhStatusEnum.authSuccess.ordinal()
						&& l.getJhqdsj().getTime() > System.currentTimeMillis(), "理财计划已经执行中，不能修改");

				Calendar c = Calendar.getInstance();
				c.setTime(l.getAddTime());

				Assert.isTrue(l.getBuyCount() < buyMaxCount, "购买人数必须大于等于当前购买人数");

				l.setBuyMaxCount(buyMaxCount);
				l.setDayCount(dayCount);

				l.setFwf(fwf);
				l.setStartGoldCoins(new BigDecimal(ProjectConfig.getLcjhConfig(true, null).getStartGoldCoins()));
				l.setGoldCoins(new BigDecimal(ProjectConfig.getLcjhConfig(true, null).getStartGoldCoins()));
				l.setJgmc(jgmc);
				l.setJhbt(jhbt);
				l.setJhjj(jhjj);
				l.setJhqdsj(jhqdsj);

				l.setGmxs(gmxs);
				c.add(Calendar.HOUR, gmxs);
				l.setJzsj(c.getTime());

				c.setTime(jhqdsj);
				c.set(Calendar.HOUR_OF_DAY, 0);
				c.set(Calendar.MINUTE, 0);
				c.set(Calendar.SECOND, 0);
				c.set(Calendar.MILLISECOND, 0);
				l.setJhqdsj(c.getTime());

				c.add(Calendar.DATE, dayCount);
				c.set(Calendar.HOUR_OF_DAY, 23);
				c.set(Calendar.MINUTE, 59);
				c.set(Calendar.SECOND, 59);
				c.set(Calendar.MILLISECOND, 0);
				l.setJhwjrq(c.getTime());

				int monthCount = (int) (dayCount / 30) + 1;
				l.setMonthCount(monthCount);

				l.setUserId(user.getId());
				l.setSyl(BigDecimal.ZERO);
				l.setYjsyl(yjsyl);
				l.setYjzsx(yjzsx);

				// if(!image.isEmpty()){
				// String images = FileUploadDeleteUtil.upload(image,
				// ProjectConfig.imgRootURL, ProjectConfig.imgSavePath, null,
				// null);
				// l.setImages(images);
				// }else{
				// l.setImages(oldImageUrl);
				// }

				Set<LcjhLabel> labelsSet = null;
				if (StringUtils.hasText(labelIds)) {
					String[] labels = labelIds.split(",");
					labelsSet = new HashSet<>(labels.length);
					for (int i = 0; i < labels.length; i++) {
						String labelStr = labels[i];
						LcjhLabel label = lcjhLabelBiz.get(LcjhLabel.class, labelStr);
						Assert.notNull(label, "标签不存在");
						labelsSet.add(label);
					}
				}
				l.setLabels(labelsSet);

				lcjh2Biz.update(l);
				logger.debug(JSON.toJSONString(l));
				result.setResult("SUCCESS");
				String resStr = "";
				String callback = request.getParameter("callback");
				if (null != callback) {
					resStr += callback + "(";
					resStr += JSONObject.toJSONString(result);
					resStr += ")";
				} else {
					resStr = JSONObject.toJSONString(result);
				}
				request.setCharacterEncoding("utf-8");
				res.setContentType("text/html;charset=utf-8");
				res.getWriter().write(resStr);
				res.getWriter().flush();
				res.getWriter().close();
			}
		}
	}

	@ApiOperation(value = "获取理财计划标签(jsonp)", notes = "", httpMethod = "POST")
	@RequestMapping(value = "/getLcjhLabelsMore", method = { RequestMethod.POST, RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void getLcjhLabelsMore(HttpServletResponse res, HttpServletRequest request) throws Exception {
		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());
		List<LcjhLabel> list_label = lcjhLabelBiz.find("from LcjhLabel");
		result.setResult(list_label);
		String resStr = "";
		String callback = request.getParameter("callback");
		if (null != callback) {
			resStr += callback + "(";
			resStr += JSONObject.toJSONString(result);
			resStr += ")";
		} else {
			resStr = JSONObject.toJSONString(result);
		}
		request.setCharacterEncoding("utf-8");
		res.setContentType("text/html;charset=utf-8");
		res.getWriter().write(resStr);
		res.getWriter().flush();
		res.getWriter().close();
	}

	@ApiOperation(value = "获取某个名家的往期理财计划,分页(jsonp)", notes = "根据时间倒序,如果某个计划失败，syl比止损线低，表示触及止损", httpMethod = "POST")
	@RequestMapping(value = "/getUserLcjhPageListHistoryMore", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public void getUserLcjhPageListHistoryMore(HttpServletResponse res, HttpServletRequest request,
			@ApiParam(value = "页号") @RequestParam(required = false, defaultValue = "1") @Min(value = 1, message = "页号必须大于0") Integer page,
			@ApiParam(value = "条数") @RequestParam(required = false, defaultValue = "10") @Min(value = 1, message = "条数必须大于0") Integer rows,
			@ApiParam(value = "名家id", required = true) @NotBlank(message = "名家id不能为空") @RequestParam(required = false) @Size(min = 1, max = 200, message = "名家id在{min}-{max}个字之间") String userId,
			@ApiParam(value = "手机号", required = true) @RequestParam(required = false) @NotBlank(message = "手机号不能为空") @Size(min = 11, max = 20, message = "手机号在{min}-{max}个字") String phone)
			throws Exception {

		BooleanObjectResult<Object> result = new BooleanObjectResult<Object>(true, CodeEnum.SUCCESS.getCode(),
				CodeEnum.SUCCESS.getMessage());

		LoginUser user = loginUserServiceI.getUser(userId);
		if (user == null) {
			result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
					CodeEnum.PATTERN_ERROR.getMessage());
			result.setResult("名家不存在");
			String resStr = "";
			String callback = request.getParameter("callback");
			if (null != callback) {
				resStr += callback + "(";
				resStr += JSONObject.toJSONString(result);
				resStr += ")";
			} else {
				resStr = JSONObject.toJSONString(result);
			}
			request.setCharacterEncoding("utf-8");
			res.setContentType("text/html;charset=utf-8");
			res.getWriter().write(resStr);
			res.getWriter().flush();
			res.getWriter().close();
		} else {
			LoginUser user2 = loginUserServiceI.getUserByPhone(phone);
			if (user2 == null) {
				result = new BooleanObjectResult<Object>(false, CodeEnum.PATTERN_ERROR.getCode(),
						CodeEnum.PATTERN_ERROR.getMessage());
				result.setResult("用户不存在");
				String resStr = "";
				String callback = request.getParameter("callback");
				if (null != callback) {
					resStr += callback + "(";
					resStr += JSONObject.toJSONString(result);
					resStr += ")";
				} else {
					resStr = JSONObject.toJSONString(result);
				}
				request.setCharacterEncoding("utf-8");
				res.setContentType("text/html;charset=utf-8");
				res.getWriter().write(resStr);
				res.getWriter().flush();
				res.getWriter().close();
			} else {
				UserLcjhModel model = new UserLcjhModel();
				model.setUserId(userId);
				model.setName(user.getName());
				model.setNickname(user.getNickname());
				model.setTx(user.getTx());

				Map<String, Object> params = new HashMap<String, Object>(1);
				params.put("userId", userId);
				Map<String, Object> params2 = new HashMap<>(2);
				params2.putAll(params);
				Map<String, Object> params3 = new HashMap<>(2);
				params3.putAll(params);

				params.put("completeList", LcjhStatusEnum.getCompleteStatus());
				String completeHql = "select count(1) from Lcjh2 where userId = :userId and status in (:completeList)";
				int complete = lcjh2Biz.count(completeHql, params);
				model.setComplete(complete);

				String successHql = "select count(1) from Lcjh2 where userId = :userId and status = :successStatus";
				params2.put("successStatus", LcjhStatusEnum.success.ordinal());
				int successCount = lcjh2Biz.count(successHql, params2);
				model.setSuccessCount(successCount);

				double cgl_d = complete == 0 ? 0 : successCount * 1d / complete * 100;
				BigDecimal cgl = new BigDecimal(cgl_d);
				model.setCgl(cgl);

				String allsylHql = "select sum(syl) from Lcjh2 where userId = :userId and status in (:completeList)";
				double allsyl = lcjh2Biz.sumDouble(allsylHql, params);
				BigDecimal nhsyl = new BigDecimal(complete == 0 ? 0 : allsyl / complete);
				model.setNhsyl(nhsyl);

				Map<String, Object> params4 = new HashMap<String, Object>(1);
				params4.put("userId", userId);
				params4.put("completeStatus", LcjhStatusEnum.getCompleteStatus());
				params4.put("currentUserId", user2.getId());

				String sql = "select a.*,b.`name`,b.nickname,b.tx, case when a.jhqdsj < now() and a.jhwjrq > now() then 1 else 0 end isdoing "
						+ " ,case when a.userId = :currentUserId then 2 when (select count(1) from t_lcjh_user_buy_record buy where buy.userId = :currentUserId and buy.lcjhId = b.id) > 0 then 1 else 0 end isbuy "
						+ " from t_lcjh2 a left outer join loginuser b on a.userId = b.id "
						+ " where a.userId = :userId and a.status in (:completeStatus) order by a.isTop desc, a.addTime desc";

				String hqlCount = "select count(1) from Lcjh2 where userId = :userId and status in (:completeStatus)";

				List<Lcjh2Model> list = lcjh2Biz.findBySqlBuildObject(sql, params4, Lcjh2Model.class, page, rows);
				for (Lcjh2Model m : list) {
					String sql_label = "select * from t_lcjh_label where id in (select label_id from t_lcjh_label_relation where lcjh_id = :lcjhId)";
					Map<String, Object> params_label = new HashMap<String, Object>();
					params_label.put("lcjhId", m.getId());
					List<LcjhLabel> labels = lcjhLabelBiz.findBySqlBuildObject(sql_label, params_label, LcjhLabel.class,
							null, null);
					Set<LcjhLabel> lables_set = new HashSet<>(labels);
					m.setLabels(lables_set);
				}
				params4.remove("currentUserId");
				int total = lcjh2Biz.count(hqlCount, params4);

				PageRequest pager = new PageRequest(page - 1, rows);
				Page<Lcjh2Model> pageData = new PageImpl<Lcjh2Model>(list, pager, total);

				model.setPageData(pageData);

				result.setResult(model);
				String resStr = "";
				String callback = request.getParameter("callback");
				if (null != callback) {
					resStr += callback + "(";
					resStr += JSONObject.toJSONString(result);
					resStr += ")";
				} else {
					resStr = JSONObject.toJSONString(result);
				}
				request.setCharacterEncoding("utf-8");
				res.setContentType("text/html;charset=utf-8");
				res.getWriter().write(resStr);
				res.getWriter().flush();
				res.getWriter().close();
			}
		}
	}
}
