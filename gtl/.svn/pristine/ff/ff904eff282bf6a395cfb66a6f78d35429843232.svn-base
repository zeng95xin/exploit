package com.lcjh.controller.api;

import java.math.BigDecimal;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.Range;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.JPushChatModel;
import com.admin.model.LoginUser;
import com.admin.service.LoginUserServiceI;
import com.lcjh.biz.Lcjh2Biz;
import com.lcjh.biz.LcjhCjBiz;
import com.lcjh.biz.LcjhCjBuySellRecordBiz;
import com.lcjh.common.LcjhJpushUtil;
import com.lcjh.entity.Lcjh2;
import com.lcjh.entity.LcjhCj;
import com.lcjh.entity.LcjhCjBuySellRecord;
import com.lcjh.enummole.LcjhPushEnum;
import com.lcjh.result.BooleanBaseResult;
import com.lcjh.result.BooleanListResult;
import com.lcjh.result.BooleanObjectResult;
import com.lcjh.result.BooleanPageResult;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

@Controller
@RequestMapping("/api/lcjh2")
@Validated
@Api(tags="-api-lcjh2-trade", description = "理财计划交易,有关接口--名家使用")
public class LcjhTradeApiController {
//	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	@Autowired private Lcjh2Biz lcjh2Biz;
	@Autowired private LcjhCjBiz lcjhCjBiz;
	@Autowired private LcjhCjBuySellRecordBiz lcjhCjBuySellRecordBiz;
	@Autowired private LoginUserServiceI loginUserServiceI;
	@Autowired private LcjhJpushUtil lcjhJpushUtil;

	@ApiOperation(value = "获取理财计划持仓", notes="获取理财计划持仓", httpMethod="POST")
	@RequestMapping(value = "/getLcjhCj", method = {RequestMethod.POST, RequestMethod.GET}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanListResult<LcjhCj> getLcjhCj(HttpServletRequest request
	,@NotBlank(message="名家id不能为空") @Size(min=1,max=200,message="名家id在{min}-{max}个字")
	@RequestParam(required=false) 
	@ApiParam(value="名家id",required=true) String userId
	,@NotBlank(message="理财计划id不能为空") @Size(min=1,max=200,message="理财计划id在{min}-{max}个字")
	@RequestParam(required=false)
	@ApiParam(value="理财计划id",required=true) String lcjhId
		) throws Exception {
		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "名家不存在");
		Lcjh2 l = lcjh2Biz.get(Lcjh2.class, lcjhId);
		Assert.notNull(l, "理财计划不存在");
		BooleanListResult<LcjhCj> result = BooleanListResult.getSuccess();
		
		List<LcjhCj> list = lcjhCjBiz.find("from LcjhCj where lcjhId = '"+lcjhId+"' and cjsl > 0");
		
		result.setResult(list);
		
		return result;
	}
	@ApiOperation(value = "获取理财计划交易记录", notes="获取理财计划交易记录", httpMethod="POST")
	@RequestMapping(value = "/getLcjhTradeRecord", method = {RequestMethod.POST, RequestMethod.GET}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanPageResult<LcjhCjBuySellRecord> getLcjhTradeRecord(HttpServletRequest request
	,@NotBlank(message="名家id不能为空") @Size(min=1,max=200,message="名家id在{min}-{max}个字")
	@RequestParam(required=false) 
	@ApiParam(value="名家id",required=true) String userId
	,@NotBlank(message="理财计划id不能为空") @Size(min=1,max=200,message="理财计划id在{min}-{max}个字")
	@RequestParam(required=false)
	@ApiParam(value="理财计划id",required=true) String lcjhId
	,@Min(value=1,message="页号必须大于0")
	@RequestParam(required=false, defaultValue="1") 
	@ApiParam(value="页号") Integer page
	,@Min(value=1,message="条数必须大于0")
	@RequestParam(required=false, defaultValue="10")
	@ApiParam(value="条数")Integer rows
			) throws Exception {
		LoginUser user = loginUserServiceI.getUser(userId);
		Assert.notNull(user, "名家不存在");
		Lcjh2 l = lcjh2Biz.get(Lcjh2.class, lcjhId);
		Assert.notNull(l, "理财计划不存在");
		BooleanPageResult<LcjhCjBuySellRecord> result = BooleanPageResult.getSuccess();
		
		List<LcjhCjBuySellRecord> list = lcjhCjBuySellRecordBiz.find("from LcjhCjBuySellRecord where lcjhId = '"+lcjhId+"'", page, rows);
		int total = lcjh2Biz.count("select count(1) from LcjhCjBuySellRecord where lcjhId = '"+lcjhId+"'", null);
		PageRequest pager = new PageRequest(page-1, rows);
		Page<LcjhCjBuySellRecord> pageData = new PageImpl<LcjhCjBuySellRecord>(list, pager, total);
		result.setResult(pageData);
		return result;
	}
	
	@ApiOperation(value = "理财计划委托买卖股票", notes="股票列表同之前的股票列表接口", httpMethod="POST")
	@RequestMapping(value = "/buyOrSellLcjh", method = {RequestMethod.POST, RequestMethod.GET}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanObjectResult<LcjhCjBuySellRecord> buyOrSellLcjh(HttpServletRequest request
	,@ApiParam(value="名家id",required=true) @NotBlank(message="名家id不能为空") @RequestParam(required=false)
	@Size(min=1,max=200,message="名家id在{min}-{max}个字")
		String userId
	,@ApiParam(value="理财计划id",required=true) @NotBlank(message="理财计划id不能为空") @RequestParam(required=false)
	@Size(min=1,max=200,message="理财计划id在{min}-{max}个字")
		String lcjhId
	,@ApiParam(value="类型,1买,2卖",required=true) @NotNull(message="类型不能为空") @RequestParam(required=false)
	@Range(min=1,max=2,message="类型只能是1,2")
		Integer type
	,@ApiParam(value="证券代码",required=true) @NotBlank(message="证券代码不能为空") @RequestParam(required=false)
	@Length(min=6, max=8, message="证券代码只能是6-8位")
		String zqdm
	,@ApiParam(value="证券代码名称",required=true) @NotBlank(message="证券代码名称不能为空") @RequestParam(required=false)
	@Length(min=1, max=100, message="证券代码名称只能是6-8位")
		String zqname
	,@ApiParam(value="成交数量",required=true) @NotNull(message="成交数量不能为空") @RequestParam(required=false)
	@Min(value=1,message="成交数量大于0")
		Integer cjsl
	,@ApiParam(value="委托价格",required=true) @NotNull(message="成交价格不能为空") @RequestParam(required=false)
	@Min(value=1,message="成交价格大于0")
		BigDecimal wtjg
			) throws Exception {
		BooleanObjectResult<LcjhCjBuySellRecord> result = BooleanObjectResult.getSuccess();
		LcjhCjBuySellRecord record = lcjhCjBuySellRecordBiz.buyOrSellLcjh(userId, lcjhId, type, zqdm, zqname, cjsl, wtjg);
		result.setResult(record);
		
		LoginUser user = loginUserServiceI.getUser(userId);
		Lcjh2 l = lcjh2Biz.get(Lcjh2.class, lcjhId);
		
		JPushChatModel chat = new JPushChatModel();
		String chattitle = "股天乐信息";
		String chatcontent = "你关注的股天乐投资顾问'" + user.getNickname() + "' 交易了理财计划,'" + l.getJhbt() + "',证券名称'"
				+ zqname
				+"'!";
		chat.setType(LcjhPushEnum.tradeLcjh.getCode());
		chat.setTitle(chattitle);
		chat.setContent(chatcontent);
		chat.setDataId(l.getId() + ":" + record.getId());
		lcjhJpushUtil.pushCareUser(chat, userId);
		return result;
	}
	
	@ApiOperation(value = "取消委托", notes="", httpMethod="POST")
	@RequestMapping(value = "/cancelBuyOrSellLcjh", method = {RequestMethod.POST, RequestMethod.GET}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BooleanBaseResult cancelBuyOrSellLcjh(HttpServletRequest request
	,@NotBlank(message="记录id不能为空") @Size(min=1,max=200,message="记录id在{min}-{max}个字")
	@RequestParam(required=false) 
	@ApiParam(value="记录id",required=true) String id
			) throws Exception {
		LcjhCjBuySellRecord record = lcjhCjBuySellRecordBiz.get(LcjhCjBuySellRecord.class, id);
		Assert.notNull(record, "没有该买卖记录");
		lcjhCjBuySellRecordBiz.updateCancelBuyOrSellLcjh(record);
		return BooleanBaseResult.SUCCESS;
	}
	
}
