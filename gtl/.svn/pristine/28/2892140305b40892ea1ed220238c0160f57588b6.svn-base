package com.web.controller;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.Jfxhjl;
import com.admin.model.LoginUser;
import com.admin.service.AudioBuyService;
import com.admin.service.ChatMessageEntityService;
import com.admin.service.ChatRoomService;
import com.admin.service.GroupHostService;
import com.admin.service.HostMainService;
import com.admin.service.JfxhjlfServiceI;
import com.admin.service.LoginUserServiceI;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.huanxin.util.ChartUtlis;
import com.web.entity.AudioBuy;
import com.web.entity.ChatHouse;
import com.web.entity.ChatMessageEntity;
import com.web.entity.ChatRoom;
import com.web.entity.ChatRoomList;
import com.web.entity.HostMain;
import com.web.exception.BusinessDealException;
import com.web.exception.BusinessValidateException;
import com.web.exception.CodeEnum;
import com.web.exception.PatternException;
import com.web.result.BaseListResult;
import com.web.result.BaseObjectResult;
import com.web.util.TimeUtils;

@Controller
@RequestMapping("/chatRoom")
public class ChatRoomController {
	
	private  final Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Autowired
	private ChatRoomService chatRoomService;
	
	@Autowired
	private HostMainService hostMainService;
	
	@Autowired
	private LoginUserServiceI loginUserServiceI;
	
	@Autowired
	private ChatMessageEntityService chatMessageEntityService;
	
	@Autowired
	private GroupHostService groupHostService;
	
	@Autowired
	private AudioBuyService audioBuyService;
	
	@Autowired
	private JfxhjlfServiceI jfxhjlfServiceI;
	
	/**
	 * 聊天室新增今日观点
	 * @param req
	 * @param res
	 * @param chatHouse
	 * @return
	 */
	@RequestMapping(value="/create", method= {RequestMethod.GET,RequestMethod.POST},produces = { MediaType.APPLICATION_JSON_VALUE } )
	@ResponseBody
	public BaseListResult<ChatHouse> createChatRoom(HttpServletRequest req,HttpServletResponse res,ChatHouse chatHouse){
		res.setCharacterEncoding("UTF-8");
		logger.info("聊天室新增今日观点:{}", chatHouse);
		BaseListResult<ChatHouse> baseResult=new BaseListResult<ChatHouse>();
		HostMain hm=new HostMain();
		List<ChatHouse> listHouse=new ArrayList<ChatHouse>();
		List<ChatHouse> listLast=new ArrayList<ChatHouse>();
		try {
			req.setCharacterEncoding("UTF-8");
			res.setCharacterEncoding("UTF-8");
			if (chatHouse == null) {
				throw new PatternException("聊天室信息不能为空");
			}
			if (StringUtils.isBlank(chatHouse.getHostId())) {
				throw new PatternException("主播ID不能为空");
			}
			if (StringUtils.isBlank(chatHouse.getTodayPoint())) {
				throw new PatternException("今日观点不能为空");
			}
			hm=hostMainService.get(chatHouse.getHostId());
			if (hm != null) {
				if (StringUtils.isNotBlank(hm.getHostName())) {
					chatHouse.setOwner(hm.getHostName());
				}
			}else{
				throw new PatternException("主播不存在！");
			} 
			listHouse=chatRoomService.getAllByCreateTime(TimeUtils.getTime("yyyy-MM-dd"), chatHouse.getOwner(), chatHouse.getHostId());
			if (listHouse != null && listHouse.size() > 0) {
				for (ChatHouse chatHouse2 : listHouse) {
					if (chatHouse2 != null ) {
						chatHouse2.setTodayPoint(chatHouse.getTodayPoint());
					} else {
						continue;
					}
					chatRoomService.update(chatHouse2);
					listLast.add(chatHouse2);
				}
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("添加今日观点成功成功！");
				baseResult.setResult(listLast);
			} else {
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("主播还没创建聊天室！");
				baseResult.setResult(listLast);
			}	
			
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<ChatHouse>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ChatHouse>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ChatHouse>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<ChatHouse>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		
		return baseResult;
	}
	/**
	 * 主播点击按钮进入直播间：
	 * 如果是当天第一次点击则提示需要主播传入今日观点；
	 * 如果不是第一次点击，则直接返回当天的直播间信息
	 * @param req
	 * @param res
	 * @param chatHouse
	 * @return
	 */
	@RequestMapping(value="/intoHouse", method= {RequestMethod.GET,RequestMethod.POST},produces = { MediaType.APPLICATION_JSON_VALUE } )
	@ResponseBody
	public BaseListResult<ChatHouse> createChatRoom2(HttpServletRequest req,HttpServletResponse res,ChatHouse chatHouse){
		res.setCharacterEncoding("UTF-8");
		logger.info("主播点击按钮进入聊天室:{}", chatHouse);
		BaseListResult<ChatHouse> baseResult=new BaseListResult<ChatHouse>();
		HostMain hm=new HostMain();
		List<ChatHouse> list=new ArrayList<ChatHouse>();
		List<ChatHouse> listLast=new ArrayList<ChatHouse>();
		try {
			req.setCharacterEncoding("UTF-8");
			res.setCharacterEncoding("UTF-8");
			if (chatHouse == null) {
				throw new PatternException("聊天室信息不能为空");
			}
			if (StringUtils.isBlank(chatHouse.getHostId())) {
				throw new PatternException("主播ID不能为空");
			}
			
			hm=hostMainService.get(chatHouse.getHostId());
			if (hm != null) {
				if (StringUtils.isNotBlank(hm.getHostName())) {
					chatHouse.setOwner(hm.getHostName());
				}
			}else{
				throw new PatternException("主播不存在！");
			} 
			list=chatRoomService.getAllByCreateTime(TimeUtils.getTime("yyyy-MM-dd", new Date()), chatHouse.getOwner(), chatHouse.getHostId());
			if (list != null && (list.size() > 0)) {
				ChatHouse che=new ChatHouse();
				che=list.get(0);
				if (che != null ) {
					if (StringUtils.isNotBlank(che.getTodayPoint())) {
						
						baseResult.setErrorCode("0");
						baseResult.setErrorMessage("该主播今天已经创建了聊天室！");
						baseResult.setResult(list);
					} else {
						baseResult.setErrorCode("1");
						baseResult.setErrorMessage("今日观点不能为空！");
						baseResult.setResult(list);
					}
				}
			} else {
				baseResult.setErrorCode("2");
				baseResult.setErrorMessage("主播还未创建聊天室！");
				baseResult.setResult(listLast);
			}
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<ChatHouse>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ChatHouse>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ChatHouse>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<ChatHouse>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		
		return baseResult;
	}
	
	/**
	 * 修改聊天室信息
	 * @param req
	 * @param res
	 * @param chatHouse
	 * @return
	 */
	@RequestMapping(value="/update", method= {RequestMethod.GET,RequestMethod.POST},produces = { MediaType.APPLICATION_JSON_VALUE } )
	@ResponseBody
	public BaseObjectResult<ChatHouse> updateChatRoom(HttpServletRequest req,HttpServletResponse res,ChatHouse chatHouse){
		res.setCharacterEncoding("UTF-8");
		
		logger.info("修改聊天室:{}", chatHouse);
		
		BaseObjectResult<ChatHouse> baseLog=new BaseObjectResult<ChatHouse>();
		List<ChatHouse> list=new ArrayList<ChatHouse>();
		try {
			if (chatHouse == null) {
				throw new PatternException("聊天室信息不能为空");
			}
			if (StringUtils.isBlank(chatHouse.getCreateTime())) {
				throw new PatternException("聊天室的创建时间不能为空");
			}
			if (StringUtils.isBlank(chatHouse.getHostId())) {
				throw new PatternException("主播ID不能为空");
			}
			if (StringUtils.isBlank(chatHouse.getOwner())) {
				throw new PatternException("聊天室创建者不能为空");
			}
			list=chatRoomService.getAllByCreateTime(chatHouse.getCreateTime(), chatHouse.getOwner(), chatHouse.getHostId());
			if (list != null && (list.size() > 0) ) {
				for (ChatHouse chatHouse2 : list) {
					ChatHouse ch=new ChatHouse();
					BeanUtils.copyProperties(chatHouse2, ch);
					if (StringUtils.isNotBlank(chatHouse.getDescription())) {
						ch.setDescription(chatHouse.getDescription());
					}
					if (StringUtils.isNotBlank(chatHouse.getTodayPoint())) {
						ch.setTodayPoint(chatHouse.getTodayPoint());
					}
					chatRoomService.update(ch);
				}
				baseLog.setErrorCode("0");
				baseLog.setErrorMessage("更新成功");
				baseLog.setResult(list.get(0));
			} else {
				baseLog.setErrorCode("1");
				baseLog.setErrorMessage("聊天室不存在！");
				
			}
			
		}  catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseLog = new BaseObjectResult<ChatHouse>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseLog = new BaseObjectResult<ChatHouse>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseLog = new BaseObjectResult<ChatHouse>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseLog = new BaseObjectResult<ChatHouse>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseLog;
		
	}
	
	/**
	 * 获取单个聊天室
	 * @param req
	 * @param res
	 * @param chatHouse
	 * @return
	 */
	@RequestMapping(value="/getRoomInfo", method= {RequestMethod.GET,RequestMethod.POST},produces = { MediaType.APPLICATION_JSON_VALUE } )
	@ResponseBody
	public BaseObjectResult<ChatRoom> getChatRoom(HttpServletRequest req,HttpServletResponse res,ChatHouse chatHouse){
		res.setCharacterEncoding("UTF-8");
		
		logger.info("获取单个聊天室详情:{}", chatHouse);
		ChartUtlis cu=new ChartUtlis();
		BaseObjectResult<ChatRoom> baseLog=new BaseObjectResult<ChatRoom>();
		ChatRoom chatRoom=new ChatRoom();
		JSONObject json1=new JSONObject();
		try {
			if (chatHouse == null) {
				throw new PatternException("聊天室信息不能为空");
			}
			
			if (StringUtils.isBlank(chatHouse.getId())) {
				throw new PatternException("聊天室id不能为空");
			}
			
			json1=JSONObject.parseObject(cu.getRoom(chatHouse.getId()));
			String data=json1.getString("data");
			//System.out.println("聊天室ID为："+data);
			String affiliations="";
			JSONArray array=JSON.parseArray(data);
			for (int i = 0; i < array.size(); i++) {
				JSONObject o=new JSONObject();
				o=array.getJSONObject(i);
				if (StringUtils.isNotBlank(o.getString("affiliations"))) {
					affiliations=o.getString("affiliations");
					break;
				}
			}
			
			//System.out.println("成员表的值为："+affiliations);
			String [] s=affiliations.substring(1, affiliations.length()-1).split(",");
			if (StringUtils.isNotBlank(data)) {
				if (StringUtils.isNotBlank(chatHouse.getId())) {
					
					ChatHouse ch=chatRoomService.getByRoomId(chatHouse.getId());
					org.springframework.beans.BeanUtils.copyProperties(ch, chatRoom);
				}
				chatRoom.setAffiliations(s);
					
					baseLog.setErrorCode("0");
					baseLog.setErrorMessage("查询成功");
					baseLog.setResult(chatRoom);
				
			}else{
				throw new PatternException("聊天室不存在！");
			}
			
		}  catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseLog = new BaseObjectResult<ChatRoom>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseLog = new BaseObjectResult<ChatRoom>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseLog = new BaseObjectResult<ChatRoom>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseLog = new BaseObjectResult<ChatRoom>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseLog;
		
	}
	
	/**
	 * 分页获取往期直播列表
	 * @param req
	 * @param res
	 * @return
	 */
	@RequestMapping(value="/getAll", method= {RequestMethod.GET,RequestMethod.POST},produces = { MediaType.APPLICATION_JSON_VALUE } )
	@ResponseBody
	public BaseObjectResult<ChatRoomList> getAllChatRoom(HttpServletRequest req,HttpServletResponse res,String row,String page,String hostId){
		res.setCharacterEncoding("UTF-8");
		
		logger.info("主播所有往期记录:{}");
		
		BaseObjectResult<ChatRoomList> baseLog=new BaseObjectResult<ChatRoomList>();
		List<ChatRoom> listChatRoom=new ArrayList<ChatRoom>();
		ChatRoomList crList=new ChatRoomList();
		ChatRoomList crList1=new ChatRoomList();
		
		try {
			crList1=chatRoomService.getCountByHostId(hostId);
			listChatRoom=chatRoomService.getAllRoom(hostId, row, page);
			if (crList1 == null) {
				baseLog.setErrorCode("1");
				baseLog.setErrorMessage("该主播未开始直播");
				baseLog.setResult(crList1);
			}else{
				BeanUtils.copyProperties(crList1, crList);
				if (listChatRoom != null && (listChatRoom.size() > 0)) {
					
					crList.setListRoom(listChatRoom);
				}
				baseLog.setErrorCode("0");
				baseLog.setErrorMessage("查询成功");
				baseLog.setResult(crList);
			}
			
		}  catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseLog = new BaseObjectResult<ChatRoomList>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseLog = new BaseObjectResult<ChatRoomList>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseLog = new BaseObjectResult<ChatRoomList>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseLog = new BaseObjectResult<ChatRoomList>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseLog;
		
	}
	
	/**
	 * 获取对应聊天室往期直播的文字直播信息
	 * @param req
	 * @param res
	 * @param chatRoom
	 * @return
	 */
	@RequestMapping(value="/getTxt", method= {RequestMethod.GET,RequestMethod.POST},produces = { MediaType.APPLICATION_JSON_VALUE } )
	@ResponseBody
	public BaseListResult<ChatMessageEntity> getTxtChat(HttpServletRequest req,HttpServletResponse res,
			ChatRoom chatRoom,String row,String page){
		res.setCharacterEncoding("UTF-8");
		logger.info("获取单个聊天室文字直播详情:{}", chatRoom);
		
		BaseListResult<ChatMessageEntity> baseLog=new BaseListResult<ChatMessageEntity>();
		List<ChatMessageEntity> list=new ArrayList<ChatMessageEntity>();
		try {
			req.setCharacterEncoding("UTF-8");
			if (chatRoom == null) {
				throw new PatternException("聊天室信息不能为空");
			}
			
			if (StringUtils.isBlank(chatRoom.getId())) {
				throw new PatternException("聊天室id不能为空");
			}
			if (StringUtils.isBlank(chatRoom.getOwner())) {
				throw new PatternException("聊天室创建者不能为空");
			}
			if (StringUtils.isBlank(chatRoom.getCreateTime())) {
				throw new PatternException("聊天室创建时间不能为空");
			}
			list=chatMessageEntityService.getTxt(chatRoom.getOwner(), chatRoom.getCreateTime(), chatRoom.getId(), row, page);
			//if (list != null && (list.size() > 0)) {
				baseLog.setErrorCode("0");
				baseLog.setErrorMessage("查询成功！");
				baseLog.setResult(list);
			/*} else {
				baseLog.setErrorCode("1");
				baseLog.setErrorMessage("未找到主播文字直播信息！");
				baseLog.setResult(list);
			}*/
			
			
		}  catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseLog = new BaseListResult<ChatMessageEntity>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseLog = new BaseListResult<ChatMessageEntity>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseLog = new BaseListResult<ChatMessageEntity>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseLog = new BaseListResult<ChatMessageEntity>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseLog;
		
	}
	
	/**
	 * 获取单个聊天室语音直播详情
	 * @param req
	 * @param res
	 * @param chatRoom
	 * @return
	 */
	@RequestMapping(value="/getAudio", method= {RequestMethod.GET,RequestMethod.POST},produces = { MediaType.APPLICATION_JSON_VALUE } )
	@ResponseBody
	public BaseListResult<ChatMessageEntity> getAudioChat(HttpServletRequest req,HttpServletResponse res,
			ChatRoom chatRoom,String row,String page){
		res.setCharacterEncoding("UTF-8");
		logger.info("获取单个聊天室语音直播详情:{}", chatRoom);
		
		BaseListResult<ChatMessageEntity> baseLog=new BaseListResult<ChatMessageEntity>();
		List<ChatMessageEntity> list=new ArrayList<ChatMessageEntity>();
		try {
			req.setCharacterEncoding("UTF-8");
			if (chatRoom == null) {
				throw new PatternException("聊天室信息不能为空");
			}
			
			if (StringUtils.isBlank(chatRoom.getId())) {
				throw new PatternException("聊天室id不能为空");
			}
			if (StringUtils.isBlank(chatRoom.getOwner())) {
				throw new PatternException("聊天室创建者不能为空");
			}
			if (StringUtils.isBlank(chatRoom.getCreateTime())) {
				throw new PatternException("聊天室创建时间不能为空");
			}
			list=chatMessageEntityService.getAudio(chatRoom.getOwner(), chatRoom.getCreateTime(), chatRoom.getId(), row, page);
			//if (list != null && (list.size() > 0)) {
				baseLog.setErrorCode("0");
				baseLog.setErrorMessage("查询成功！");
				baseLog.setResult(list);
			/*} else {
				baseLog.setErrorCode("1");
				baseLog.setErrorMessage("未找到主播语音直播信息！");
				baseLog.setResult(list);
			}*/
			
			
		}  catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseLog = new BaseListResult<ChatMessageEntity>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseLog = new BaseListResult<ChatMessageEntity>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseLog = new BaseListResult<ChatMessageEntity>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseLog = new BaseListResult<ChatMessageEntity>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseLog;
		
	}
	/**
	 * 获取单个用户私聊详情
	 * @param req
	 * @param res
	 * @param chatRoom
	 * @return
	 */
	@RequestMapping(value="/getChat", method= {RequestMethod.GET,RequestMethod.POST},produces = { MediaType.APPLICATION_JSON_VALUE } )
	@ResponseBody
	public BaseListResult<ChatMessageEntity> getChat(HttpServletRequest req,HttpServletResponse res,
			ChatRoom chatRoom,String row,String page){
		res.setCharacterEncoding("UTF-8");
		logger.info("获取单个用户私聊详情:{}", chatRoom);
		
		BaseListResult<ChatMessageEntity> baseLog=new BaseListResult<ChatMessageEntity>();
		List<ChatMessageEntity> list=new ArrayList<ChatMessageEntity>();
		try {
			req.setCharacterEncoding("UTF-8");
			if (chatRoom == null) {
				throw new PatternException("聊天室信息不能为空");
			}
			
			if (StringUtils.isBlank(chatRoom.getUserHxName())) {
				throw new PatternException("用户环信账号不能为空");
			}
		
			if (StringUtils.isBlank(chatRoom.getCreateTime())) {
				throw new PatternException("聊天室创建时间不能为空");
			}
			list=chatMessageEntityService.getChat(chatRoom.getCreateTime(), chatRoom.getUserHxName(), row, page);
			//if (list != null && (list.size() > 0)) {
				baseLog.setErrorCode("0");
				baseLog.setErrorMessage("查询成功！");
				baseLog.setResult(list);
			/*} else {
				baseLog.setErrorCode("1");
				baseLog.setErrorMessage("未找到用户私聊信息！");
				baseLog.setResult(list);
			}*/
			
			
		}  catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseLog = new BaseListResult<ChatMessageEntity>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseLog = new BaseListResult<ChatMessageEntity>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseLog = new BaseListResult<ChatMessageEntity>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseLog = new BaseListResult<ChatMessageEntity>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseLog;
		
	}
	
	/**
	 * 往期直播聊天室互动信息列表
	 * @param req
	 * @param res
	 * @param chatRoom
	 * @return
	 */
	@RequestMapping(value="/getChatGroup", method= {RequestMethod.GET,RequestMethod.POST},produces = { MediaType.APPLICATION_JSON_VALUE } )
	@ResponseBody
	public BaseListResult<ChatMessageEntity> getChatGroup(HttpServletRequest req,HttpServletResponse res,
			ChatRoom chatRoom,String row,String page){
		res.setCharacterEncoding("UTF-8");
		logger.info("获取聊天室互动详情:{}", chatRoom);
		
		BaseListResult<ChatMessageEntity> baseLog=new BaseListResult<ChatMessageEntity>();
		List<ChatMessageEntity> list=new ArrayList<ChatMessageEntity>();
		try {
			if (chatRoom == null) {
				throw new PatternException("聊天室信息不能为空");
			}
			
			if (StringUtils.isBlank(chatRoom.getId())) {
				throw new PatternException("互动聊天室ID不能为空");
			}
		
			if (StringUtils.isBlank(chatRoom.getCreateTime())) {
				throw new PatternException("聊天室创建时间不能为空");
			}
			list=chatMessageEntityService.getGroupChat(chatRoom.getCreateTime(), chatRoom.getId(), row, page);
			//if (list != null && (list.size() > 0)) {
				baseLog.setErrorCode("0");
				baseLog.setErrorMessage("查询成功！");
				baseLog.setResult(list);
			/*} else {
				baseLog.setErrorCode("1");
				baseLog.setErrorMessage("未找到互动信息！");
				baseLog.setResult(list);
			}*/
			
			
		}  catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseLog = new BaseListResult<ChatMessageEntity>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseLog = new BaseListResult<ChatMessageEntity>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseLog = new BaseListResult<ChatMessageEntity>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseLog = new BaseListResult<ChatMessageEntity>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseLog;
		
	}
	
	/**
	 * 更新聊天室的访问量
	 * @param req
	 * @param res
	 * @param visitCount
	 * @return
	 */
	@RequestMapping(value="/updateCount", method= {RequestMethod.GET,RequestMethod.POST},produces = { MediaType.APPLICATION_JSON_VALUE } )
	@ResponseBody
	public BaseObjectResult<String> getAllChatRoomByNum(HttpServletRequest req,HttpServletResponse res
			,ChatHouse visitCount){
		res.setCharacterEncoding("UTF-8");
		
		logger.info("更新聊天室访问量:{}",visitCount);
		BaseObjectResult<String> baseLog=new BaseObjectResult<String>();
		HostMain hm=new  HostMain();
		ChatHouse ch=new ChatHouse();
		try {
			if (StringUtils.isBlank(visitCount.getId())) {
				throw new PatternException("直播间ID不能为空！");
			}
			ch=chatRoomService.getByRoomId(visitCount.getId());
			if (ch != null) {
				ch.setVisitCount(ch.getVisitCount()+1);
				chatRoomService.update(ch);
				if (StringUtils.isNotBlank(ch.getHostId())) {
					hm=hostMainService.get(ch.getHostId());
					if (hm != null) {
						hm.setLookNum(ch.getVisitCount());
						hostMainService.update(hm);
					}
				}
				baseLog.setErrorCode("0");
				baseLog.setErrorMessage("访问量增加成功");
			}else{
				throw new PatternException("聊天室不能为空！");
			}
			
			
		}  catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseLog = new BaseObjectResult<String>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseLog = new BaseObjectResult<String>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseLog = new BaseObjectResult<String>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseLog = new BaseObjectResult<String>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseLog;
		
	}
	
	/**
	 * 聊天室添加单个用户
	 * @param req
	 * @param res
	 * @param chatHouse
	 * @param loginUser
	 * @return
	 */
	@RequestMapping(value="/addRoomUser", method= {RequestMethod.GET,RequestMethod.POST},produces = { MediaType.APPLICATION_JSON_VALUE } )
	@ResponseBody
	public BaseObjectResult<String> addChatRoomUser(HttpServletRequest req,HttpServletResponse res,ChatHouse chatHouse,LoginUser loginUser){
		res.setCharacterEncoding("UTF-8");
		
		logger.info("聊天室新增用户:{}", loginUser);
		ChartUtlis cu=new ChartUtlis();
		BaseObjectResult<String> baseLog=new BaseObjectResult<String>();
		ChatHouse ch=new ChatHouse();
		LoginUser lg=new LoginUser();
		JSONObject json1=new JSONObject();
		try {
			if (chatHouse == null) {
				throw new PatternException("聊天室信息不能为空");
			}
			if (loginUser == null) {
				throw new PatternException("用户信息不能为空");
			}
			
			if (StringUtils.isBlank(chatHouse.getId())) {
				throw new PatternException("聊天室id不能为空");
			}
			if (StringUtils.isBlank(loginUser.getId())) {
				throw new PatternException("用户id不能为空");
			}
			lg=loginUserServiceI.getUser(loginUser.getId());
			ch=chatRoomService.getByRoomId(chatHouse.getId());
			if (lg==null) {
				throw new PatternException("用户不存在！");
			}
			if (ch==null) {
				throw new PatternException("聊天室不存在！");
			}
			json1=JSONObject.parseObject(cu.addRoomByUser(chatHouse.getId(), lg.getIm_username()));
			String data=json1.getString("data");
			//System.out.println("聊天室ID为："+data);
			
			if (StringUtils.isNotBlank(data)) {
				JSONObject object=JSON.parseObject(data);
				if (StringUtils.isNotBlank(object.getString("id")) && StringUtils.isNotBlank(object.getString("user"))) {
					
					baseLog.setErrorCode("0");
					baseLog.setErrorMessage("添加成功！");
					//baseLog.setResult(chatRoom);
				}
			}else{
				baseLog.setErrorCode("1");
				baseLog.setErrorMessage("添加失败！");
			}
			
		}  catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseLog = new BaseObjectResult<String>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseLog = new BaseObjectResult<String>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseLog = new BaseObjectResult<String>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseLog = new BaseObjectResult<String>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		
		return baseLog;
	}
	
	/**
	 * 首页分页获取今日观点
	 * @param req
	 * @param res
	 * @param row
	 * @param page
	 * @return
	 */
	@RequestMapping(value="/getTodayPoint", method= {RequestMethod.GET,RequestMethod.POST},produces = { MediaType.APPLICATION_JSON_VALUE } )
	@ResponseBody
	public BaseListResult<ChatRoom> getTodayPoint(HttpServletRequest req,HttpServletResponse res,String row , String page){
		res.setCharacterEncoding("UTF-8");
		logger.info("首页分页获取今日观点:{}");
		
		BaseListResult<ChatRoom> baseLog=new BaseListResult<ChatRoom>();
		List<ChatRoom> list=new ArrayList<ChatRoom>();
		try {
			
			list=chatRoomService.getTodayPoint(row, page);
			//if (list != null && (list.size() > 0)) {
				baseLog.setErrorCode("0");
				baseLog.setErrorMessage("查询成功！");
				baseLog.setResult(list);
			/*} else {
				baseLog.setErrorCode("1");
				baseLog.setErrorMessage("未找到今日观点！");
				baseLog.setResult(list);
			}*/
			
			
		}  catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseLog = new BaseListResult<ChatRoom>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseLog = new BaseListResult<ChatRoom>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseLog = new BaseListResult<ChatRoom>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseLog = new BaseListResult<ChatRoom>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseLog;
		
	}
	/**
	 * 根据主播ID更新今日观点
	 * @param req
	 * @param res
	 * @param chatHouse
	 * @return
	 */
	@RequestMapping(value="/updateTodayPoint", method= {RequestMethod.GET,RequestMethod.POST},produces = { MediaType.APPLICATION_JSON_VALUE } )
	@ResponseBody
	public BaseObjectResult<ChatHouse> updateTodayPoint(HttpServletRequest req,HttpServletResponse res,ChatHouse chatHouse){
		res.setCharacterEncoding("UTF-8");
		logger.info("主播更新分页获取今日观点:{}");
		
		BaseObjectResult<ChatHouse> baseLog=new BaseObjectResult<ChatHouse>();
		ChatHouse ch=new ChatHouse();
		try {
			if (chatHouse == null) {
				throw new PatternException("观点信息不能为空~！");
			}
			if (StringUtils.isBlank(chatHouse.getHostId())) {
				throw new PatternException("主播ID不能为空！");
			}
			if (StringUtils.isBlank(chatHouse.getTodayPoint())) {
				throw new PatternException("观点内容不能为空！");
			}
			ch=chatRoomService.updateHostTodayPoint(chatHouse.getHostId());
			if (ch != null ) {
				ch.setTodayPoint(chatHouse.getTodayPoint());
				chatRoomService.update(ch);
				baseLog.setErrorCode("0");
				baseLog.setErrorMessage("观点更新成功！");
				baseLog.setResult(ch);
			} else {
				baseLog.setErrorCode("1");
				baseLog.setErrorMessage("您还未发布今天观点！");
				baseLog.setResult(ch);
			}
			
			
			
		}  catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseLog = new BaseObjectResult<ChatHouse>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseLog = new BaseObjectResult<ChatHouse>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseLog = new BaseObjectResult<ChatHouse>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseLog = new BaseObjectResult<ChatHouse>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseLog;
		
	}
	/**
	 * 分页获取某主播的今日观点
	 * @param req
	 * @param res
	 * @param hostId
	 * @param row
	 * @param page
	 * @return
	 */
	@RequestMapping(value="/hostTodayPoint", method= {RequestMethod.GET,RequestMethod.POST},produces = { MediaType.APPLICATION_JSON_VALUE } )
	@ResponseBody
	public BaseListResult<ChatRoom> getHostTodayPoint(HttpServletRequest req,HttpServletResponse res,String hostId,String row , String page){
		res.setCharacterEncoding("UTF-8");
		logger.info("分页获取某主播的今日观点:{}");
		
		BaseListResult<ChatRoom> baseLog=new BaseListResult<ChatRoom>();
		List<ChatRoom> list=new ArrayList<ChatRoom>();
		try {
			
			list=chatRoomService.getHostTodayPoint(hostId, row, page);
			//if (list != null && (list.size() > 0)) {
				baseLog.setErrorCode("0");
				baseLog.setErrorMessage("查询成功！");
				baseLog.setResult(list);
			/*} else {
				baseLog.setErrorCode("1");
				baseLog.setErrorMessage("未找到今日观点！");
				baseLog.setResult(list);
			}*/
			
			
		}  catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseLog = new BaseListResult<ChatRoom>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseLog = new BaseListResult<ChatRoom>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseLog = new BaseListResult<ChatRoom>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseLog = new BaseListResult<ChatRoom>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseLog;
		
	}
	
	/**
	 * 用户点击语音积分变更
	 * @param req
	 * @param res
	 * @param audioBuy
	 * @return
	 */
	@RequestMapping(value="/integralCost", method= {RequestMethod.GET,RequestMethod.POST},produces = { MediaType.APPLICATION_JSON_VALUE } )
	@ResponseBody
	public BaseObjectResult<AudioBuy> get(HttpServletRequest req,HttpServletResponse res,AudioBuy audioBuy){
		res.setCharacterEncoding("UTF-8");
		logger.info("用户点击语音消费积分:{}",audioBuy);
		
		BaseObjectResult<AudioBuy> baseLog=new BaseObjectResult<AudioBuy>();
		LoginUser lg=new LoginUser();
		LoginUser lghm=new LoginUser();
		HostMain hm=new HostMain();
		AudioBuy ab=new AudioBuy();
		try {
			if (audioBuy == null) {
				throw new PatternException("消费信息不能为空！");
			}
			if (StringUtils.isBlank(audioBuy.getHostId())) {
				throw new PatternException("主播不能为空！");
			}
			if (StringUtils.isBlank(audioBuy.getMessageId())) {
				throw new PatternException("消费ID不能为空！");
			}
			if (StringUtils.isBlank(audioBuy.getUserId())) {
				throw new PatternException("用户不能为空！");
			}
			if (audioBuy.getIntegral()<0 || StringUtils.isBlank(audioBuy.getIntegral().toString())) {
				throw new PatternException("积分不能为空！或为负！");
			}
			ab=audioBuyService.getByMessageId(audioBuy.getMessageId(), audioBuy.getUserId());
			if (ab != null) {
				baseLog.setErrorCode("0");
				baseLog.setErrorMessage("您已经听取过该条语言信息！");
				baseLog.setResult(audioBuy);
			} else {
				lg=loginUserServiceI.getUser(audioBuy.getUserId());
				hm=hostMainService.get(audioBuy.getHostId());
				if (lg == null) {
					throw new PatternException("用户不存在！");
				}
				if (hm == null) {
					throw new PatternException("主播不存在！");
				}
				lghm=loginUserServiceI.getUser(hm.getUserId());
				Integer jifen=lg.getJifen();
				Integer jifenhm=lghm.getJifen();
				if (jifen < audioBuy.getIntegral()) {
					throw new PatternException("用户积分不足！");
				}
				lg.setJifen(jifen-audioBuy.getIntegral());
				lghm.setJifen(jifenhm+audioBuy.getIntegral());
//				loginUserServiceI.update(lg);
//				loginUserServiceI.update(lghm);
				loginUserServiceI.saveScore(lghm, "被打赏", lg, "用户听取语音消费");
				audioBuy.setId(UUID.randomUUID().toString());
				audioBuyService.add(audioBuy);
				Jfxhjl jf=new Jfxhjl();
				jf.setResaon("听取语音消息消费");
				jf.setUserid(audioBuy.getUserId());
				jf.setWzid(audioBuy.getMessageId());
				jf.setSl("-"+audioBuy.getIntegral());
				if (StringUtils.isNotBlank(lg.getUsertype())) {
					jf.setUserType(lg.getUsertype());
				}
				if (StringUtils.isNotBlank(lg.getName())) {
					jf.setUsername(lg.getName());
				}
				if (StringUtils.isNotBlank(lg.getNickname())) {
					jf.setNickname(lg.getNickname());
				}
				jfxhjlfServiceI.add(jf);
				
				Jfxhjl jf1=new Jfxhjl();
				jf1.setResaon("语音消息被听取！");
				jf1.setUserid(hm.getUserId());
				jf1.setWzid(audioBuy.getMessageId());
				jf1.setSl("+"+audioBuy.getIntegral());
				if (StringUtils.isNotBlank(lghm.getUsertype())) {
					jf1.setUserType(lghm.getUsertype());
				}
				if (StringUtils.isNotBlank(lghm.getName())) {
					jf1.setUsername(lghm.getName());
				}
				if (StringUtils.isNotBlank(lghm.getNickname())) {
					jf1.setNickname(lghm.getNickname());
				}
				jfxhjlfServiceI.add(jf1);
				
				baseLog.setErrorCode("1");
				baseLog.setErrorMessage("积分消费新增成功！");
				baseLog.setResult(audioBuy);
			}
			
			
		}  catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseLog = new BaseObjectResult<AudioBuy>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseLog = new BaseObjectResult<AudioBuy>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseLog = new BaseObjectResult<AudioBuy>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseLog = new BaseObjectResult<AudioBuy>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseLog;
		
	}
}
