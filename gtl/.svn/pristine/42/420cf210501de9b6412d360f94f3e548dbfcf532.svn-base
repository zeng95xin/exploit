package com.admin.controller;

import java.io.OutputStream;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.ExchangeGoods;
import com.admin.model.Log;
import com.admin.model.TxwxGl;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.Json;
import com.admin.pageModel.PageHelper;
import com.admin.service.ExchangeGoodsServiceI;
import com.admin.service.LogServiceI;
import com.admin.util.InfoUtil;
import com.web.util.TimeUtils;

/**
 * 商品交易控制器
 * 
 * @author
 * 
 */
@Controller
@RequestMapping("/exchangeGoodsController")
public class ExchangeGoodsController extends BaseController {

	@Autowired
	private ExchangeGoodsServiceI exchangeGoodsService;
	@Autowired
	private LogServiceI logService;

	/**
	 * 跳转到商品交易管理页面
	 * 
	 * @return
	 */
	@RequestMapping("/manager")
	public String manager() {
		return "/admin/exchangeGoods/exchangeGoods";
	}

	/**
	 * 跳转到商品交易添加页面
	 * 
	 * @return
	 */
	@RequestMapping("/addPage")
	public String addPage(HttpServletRequest request) {
		ExchangeGoods r = new ExchangeGoods();
		r.setId(UUID.randomUUID().toString());
		request.setAttribute("exchangeGoods", r);
		return "/admin/exchangeGoods/exchangeGoodsAdd";
	}

	/**
	 * 添加商品交易
	 * 
	 * @return
	 */
	@RequestMapping("/add")
	@ResponseBody
	public Json add(ExchangeGoods exchangeGoods) {
		Json j = new Json();
		try {
			exchangeGoodsService.add(exchangeGoods);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		j.setSuccess(true);
		j.setMsg("添加成功！");
		return j;
	}

	/**
	 * 跳转到商品交易修改页面
	 * 
	 * @return
	 */
	@RequestMapping("/editPage")
	public String editPage(HttpServletRequest request, String id) {
		ExchangeGoods r = exchangeGoodsService.find(id);
		request.setAttribute("exchangeGoods", r);
		return "/admin/exchangeGoods/exchangeGoodsEdit";
	}

	/**
	 * 修改商品交易
	 * 
	 * @param exchangeGoods
	 * @return
	 */
	@RequestMapping("/edit")
	@ResponseBody
	public Json edit(HttpServletRequest request, HttpSession session,
			ExchangeGoods exchangeGoods) {
		Json j = new Json();
		try {
			exchangeGoodsService.edit(exchangeGoods);
			j.setSuccess(true);
			j.setMsg("编辑成功！");
			j.setObj(exchangeGoods);

			Log log = new Log();
			log.setType("update");// 操作描述
			log.setAuthor(InfoUtil.getUser(session));// 操作员
			log.setIp(InfoUtil.getIpAddr(request));// ip
			log.setTteble("t_exchangeGoods");// 操作的表
			log.setTid(exchangeGoods.getId());// 操作的ID
			log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
			logService.add(log);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return j;
	}

	/**
	 * 修改商品交易
	 * 
	 * @param exchangeGoods
	 * @return
	 */
	@RequestMapping("/editState")
	@ResponseBody
	public Json editState(HttpServletRequest request, HttpSession session,
			String id, String state) {
		Json j = new Json();
		try {
			if (StringUtils.isNotBlank(id)) {
				ExchangeGoods exchangeGoods = exchangeGoodsService.get(id);
				if (exchangeGoods != null) {
					exchangeGoods.setState(state);
					exchangeGoodsService.edit(exchangeGoods);
					Log log = new Log();
					log.setType("update");// 操作描述
					log.setAuthor(InfoUtil.getUser(session));// 操作员
					log.setIp(InfoUtil.getIpAddr(request));// ip
					log.setTteble("t_exchangeGoods");// 操作的表
					log.setTid(exchangeGoods.getId());// 操作的ID
					log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
					logService.add(log);
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		j.setSuccess(true);
		j.setMsg("编辑成功！");
		return j;
	}

	/**
	 * 获得商品交易列表
	 * 
	 * @return
	 */
	@RequestMapping("/dataGrid")
	@ResponseBody
	public DataGrid dataGrid(ExchangeGoods p, PageHelper ph) {
		return exchangeGoodsService.dataGrid(p, ph);
	}

	/**
	 * 删除商品交易
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/delete")
	@ResponseBody
	public Json delete(String id) {
		Json j = new Json();
		exchangeGoodsService.delete(id);
		j.setMsg("删除成功！");
		j.setSuccess(true);
		return j;
	}

	@RequestMapping("/batchDelete")
	@ResponseBody
	public Json batchDelete(String ids, HttpSession session) {
		Json j = new Json();
		if (ids != null && ids.length() > 0) {
			for (String id : ids.split(",")) {
				if (id != null) {
					this.delete(id);
				}
			}
		}
		j.setMsg("批量删除成功！");
		j.setSuccess(true);
		return j;
	}

	/**
	 * 导出数据为excel
	 * 
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@RequestMapping(value = "/export")
	public void exportExcel(HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		List<ExchangeGoods> exchangeGoodsList = exchangeGoodsService
				.exchangeGoodsList();

		HSSFWorkbook wb = new HSSFWorkbook();
		HSSFSheet sheet = wb.createSheet("ExchangeGoods");
		HSSFRow row = sheet.createRow((int) 0);
		HSSFCellStyle style = wb.createCellStyle();
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		String[] excelHeader = { "商品名称", "兑换数量", "兑换时间", "消耗积分", "收货人", "联系电话",
				"收货地址", "操作" };

		for (int i = 0; i < excelHeader.length; i++) {
			HSSFCell cell = row.createCell(i);
			cell.setCellValue(excelHeader[i]);
			cell.setCellStyle(style);
			sheet.autoSizeColumn(i);
		}

		for (int i = 0; i < exchangeGoodsList.size(); i++) {
			row = sheet.createRow(i + 1);
			ExchangeGoods p = exchangeGoodsList.get(i);
			row.createCell(0).setCellValue(p.getGoodsName());
			row.createCell(1).setCellValue(p.getExchangeNum());
			row.createCell(2).setCellValue(p.getExchangeTime());
			row.createCell(3).setCellValue(p.getConsumptionIntegral());
			row.createCell(4).setCellValue(p.getReceiveUser());
			row.createCell(5).setCellValue(p.getLxdh());
			row.createCell(6).setCellValue(p.getReceiveAddress());
			String cz = "";
			if (StringUtils.isNotBlank(p.getState())) {
				if ("0".equals(p.getState())) {
					cz = "已购买";
				}
				if ("1".equals(p.getState())) {
					cz = "配送中";
				}
				if ("2".equals(p.getState())) {
					cz = "已完成配送";
				}
			}
			row.createCell(7).setCellValue(cz);
		}
		response.setContentType("application/vnd.ms-excel");
		String filename = "商品兑换列表" + TimeUtils.getNow14() + ".xls";
		response.setHeader("Content-disposition", "attachment;filename="
				+ filename);
		OutputStream ouputStream = response.getOutputStream();
		wb.write(ouputStream);
		ouputStream.flush();
		ouputStream.close();
	}
}
