package com.lcjh.controller;

import java.util.Iterator;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;

import com.lcjh.result.BooleanBaseResult;

import cn.lg.generic.exception.BaseException;
import cn.lg.generic.result.ResultCodeEnum;

@ControllerAdvice
@Component
public class LGCommonController {
	
	private final Logger logger = LoggerFactory.getLogger(LGCommonController.class);
	
	@ExceptionHandler(value=Exception.class)
	@ResponseBody
	public BooleanBaseResult exceptionHandle(Exception e){
		logger.error("程序发生异常:信息-------------------", e);
		String message = e.getMessage();
		String code = "";
		BooleanBaseResult r = new BooleanBaseResult(true, e.getMessage());
		if(e instanceof BaseException){
			code = ((BaseException) e).getCode();
		}
		else if(e instanceof ConstraintViolationException){
			code = ResultCodeEnum.PATTERN_ERROR.getCode();
			ConstraintViolationException ee = (ConstraintViolationException)e;
			message = "";
			Iterator<ConstraintViolation<?>> it = ee.getConstraintViolations().iterator();
			while(it.hasNext()){
				ConstraintViolation<?> temp = it.next();
				message += temp.getMessage();
				if(it.hasNext()){
					message += ",";
				}
			}
			r.setErrorMessage(message);
		}
		else if(e instanceof MissingServletRequestParameterException || e instanceof MethodArgumentTypeMismatchException){
			code = ResultCodeEnum.PATTERN_ERROR.getCode();
			r.setErrorMessage(message);
		}
		else if(e instanceof  com.web.exception.PatternException){
			code = ResultCodeEnum.PATTERN_ERROR.getCode();
			r.setErrorMessage(message);
		}
		else if(e instanceof  IllegalArgumentException){
			code = ResultCodeEnum.PATTERN_ERROR.getCode();
			r.setErrorMessage(message);
		}
		else if(e instanceof  com.web.exception.BusinessDealException
				|| e instanceof  com.web.exception.BusinessValidateException
				){
			code = ResultCodeEnum.BUSSINESS_VALIDATE_ERROR.getCode();
		}
		else if(e instanceof  com.pingplusplus.exception.InvalidRequestException){
			code = ResultCodeEnum.BUSSINESS_VALIDATE_ERROR.getCode();
		}
		else{
			code = ResultCodeEnum.SYSTEM_ERROR.getCode();
			logger.error("系统错误:__code:{}__msg:{}",code, message);
		}
		r.setErrorCode(code);
		return r;
	}
	
}
