package com.admin.service.impl;

import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.AdDaoI;
import com.admin.dao.IntegralConfigDaoI;
import com.admin.dao.LoginUserDaoI;
import com.admin.dao.MnSjBmDaoI;
import com.admin.dao.MnSjZdDaoI;
import com.admin.dao.RoleDaoI;
import com.admin.dao.SjsDaoI;
import com.admin.dao.TgwdszDaoI;
import com.admin.dao.TzgwDaoI;
import com.admin.dao.UserDaoI;
import com.admin.model.Ad;
import com.admin.model.IntegralConfig;
import com.admin.model.JPushChatModel;
import com.admin.model.LoginUser;
import com.admin.model.MnSjBm;
import com.admin.model.MnSjZd;
import com.admin.model.MyCare;
import com.admin.model.Tgshow;
import com.admin.model.Tgsq;
import com.admin.model.Tgwdsz;
import com.admin.model.Tgxt;
import com.admin.model.Tresource;
import com.admin.model.Trole;
import com.admin.model.Tuser;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.service.AdServiceI;
import com.admin.service.JPushApiClient;
import com.admin.service.LoginUserServiceI;
import com.admin.service.MnSjZdServiceI;
import com.admin.service.MyCareServiceI;
import com.admin.service.TzgwServiceI;
import com.admin.service.UserServiceI;
import com.admin.util.MD5Util;
import com.web.entity.Person;
import com.web.util.PageModel;
import com.web.util.TimeUtils;

@Service
public class TzgwServiceImpl implements TzgwServiceI {

	@Autowired
	private TzgwDaoI dao;

	@Autowired
	private SjsDaoI sjsDaoI;

	@Autowired
	private LoginUserDaoI loginUserDaoI;

	@Autowired
	private IntegralConfigDaoI integralConfigDaoI;

	@Autowired
	private MnSjBmDaoI mnSjBmDaoI;

	@Autowired
	private MnSjZdDaoI mnSjZdDaoI;

	@Autowired
	private TgwdszDaoI tgwdszDaoI;

	@Autowired
	private MnSjZdServiceI mnSjZdServiceI;

	@Autowired
	private MyCareServiceI myCareServiceI;

	@Autowired
	private LoginUserServiceI loginUserServiceI;

	@Autowired
	private JPushApiClient jppApiClient;

	@Override
	public DataGrid dataGrid(Tgsq t, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Tgsq> ul = new ArrayList<Tgsq>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Tgsq t ";
		List<Tgsq> l = dao.find(hql + whereHql(t, params) + orderHql(ph),
				params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Tgsq t1 : l) {
				Tgsq u = new Tgsq();
				String userid = t1.getUserid();
				LoginUser loginuser = loginUserServiceI.getLoginUser(userid);
				String nickname = loginuser.getNickname();
				if (StringUtils.isNotBlank(nickname)) {
					t1.setNickname(nickname);
				} else {
					t1.setNickname("");
				}
				BeanUtils.copyProperties(t1, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count("select count(*) " + hql + whereHql(t, params),
				params));
		return dg;
	}

	/**
	 * where条件封装
	 * 
	 * @param ad
	 * @param params
	 * @return
	 */
	private String whereHql(Tgsq t, Map<String, Object> params) {
		String hql = "";
		if (t != null) {
			hql += " where 1=1 ";
			if (t.getStatus() != null) {
				if (!t.getStatus().equals("")) {
					hql += " and t.status = :status";
					params.put("status", t.getStatus());
				}
			}
			if (t.getUsername() != null) {
				hql += " and t.username like :username";
				params.put("username", "%%" + t.getUsername() + "%%");
			}

			if (t.getRealname() != null) {
				hql += " and t.realname like :realname";
				params.put("realname", "%%" + t.getRealname() + "%%");
			}
			if (t.getSzjg() != null) {
				hql += " and t.szjg like :szjg";
				params.put("szjg", "%%" + t.getSzjg() + "%%");
			}

		}
		return hql;
	}

	/**
	 * order封装
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "";
		if (ph.getSort() != null && ph.getOrder() != null) {
			orderString = " order by t." + ph.getSort() + " " + ph.getOrder();
		} else {
			orderString = " order by (t.iszb+0) desc, t.addtime desc  ";
		}
		return orderString;
	}

	/**
	 * 新增
	 */
	@Override
	public void add(String userid, String username, String realname,
			String sex, String age, String dq, String sfzh, String sfzimg,
			String cyzgh, String cyzgimg, String phone, String addr,
			String szjg, String cynx, String tgqm) throws Exception {
		Tgsq t = new Tgsq();
		t.setUserid(userid);
		t.setUsername(username);
		t.setRealname(realname);
		t.setSex(sex);
		t.setAge(age);
		t.setDq(dq);
		t.setSfzh(sfzh);
		t.setSfzimg(sfzimg);
		t.setCyzgh(cyzgh);
		t.setCyzgimg(cyzgimg);
		t.setPhone(phone);
		t.setAddr(addr);
		t.setSzjg(szjg);
		t.setCynx(cynx);
		t.setTgqm(tgqm);

		t.setId(UUID.randomUUID().toString());
		t.setAddtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		t.setStatus("0");
		dao.save(t);
	}

	/**
	 * 删除
	 */
	@Override
	public void delete(String id) throws Exception {
		Tgsq ad = dao.get(Tgsq.class, id);
		dao.delete(ad);
	}

	/**
	 * 修改
	 */
	@Override
	public void update(Tgsq t) throws Exception {
		Tgsq a = dao.get(Tgsq.class, t.getId());

		if (t.getStatus().equals("2")) { // 当审核变更为审核不通过时
			String tgid = t.getUserid();
			List<MyCare> careList = myCareServiceI.getCareTgList(tgid);
			if (careList.size() > 0) {
				for (int i = 0; i < careList.size(); i++) {
					String myCareId = careList.get(i).getId();
					myCareServiceI.delete(myCareId);
				}
			}
			LoginUser tgUser = loginUserServiceI.getUser(tgid);
			if (tgUser != null) {
				tgUser.setUsertype("1");
				loginUserServiceI.update(tgUser);
			}

		} else if (t.getStatus().equals("1")) {
			LoginUser tgUser = loginUserServiceI.getUser(t.getUserid());
			if (tgUser != null) {
				tgUser.setUsertype("2");
				loginUserServiceI.update(tgUser);
			}
			// 推送信息
			String title = "投顾申请审核信息";
			String content = tgUser.getNickname()
					+ ":您申请投资顾问资质审核已通过，请重新登录获取新的权限'";
//			List<String> alias = new ArrayList<String>();
//			alias.add(t.getUserid().replace("-", ""));
			List<String> rigstId = new ArrayList<String>();
			rigstId.add(tgUser.getRegistrationId());
			if(rigstId!=null&&rigstId.size()>0){
				JPushChatModel jpModel = new JPushChatModel();
				jpModel.setType("4"); // 申请投顾审核成功
				jpModel.setTitle(title);// 推送题目与内容
				jpModel.setContent(content);
				jpModel.setDataId(tgUser.getId());
//				jppApiClient.jPush(alias, jpModel);
				jppApiClient.jPush_rigstId(rigstId, jpModel);
			}
			

		}

		a.setAddtime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
		a.setUsername(t.getUsername());
		/*
		 * a.setUserid(t.getUserid()); a.setRealname(t.getRealname());
		 * a.setSex(t.getSex()); a.setAge(t.getAge());
		 */
		a.setDq(t.getDq());
		a.setSfzh(t.getSfzh());
		a.setSfzimg(t.getSfzimg());
		a.setCyzgh(t.getCyzgh());
		a.setCyzgimg(t.getCyzgimg());
		a.setCynx(t.getCynx());
		a.setPhone(t.getPhone());
		a.setAddr(t.getAddr());
		a.setSzjg(t.getSzjg());
		a.setTwjf(t.getTwjf());
		a.setStatus(t.getStatus());
		a.setKhdz(t.getKhdz());
		dao.update(a);
	}

	/**
	 * 得到对象
	 */
	@Override
	public Tgsq get(String id) throws Exception {
		return dao.get(Tgsq.class, id);
	}

	@Override
	public List<Tgsq> getAdList(String status, String userid, String page,
			String rows) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ").append(Tgsq.class.getSimpleName())
				.append(" a where 1=1");
		if (StringUtils.isNotBlank(status)) {
			sff.append(" and status='" + status + "'");
		}

		if (StringUtils.isNotBlank(userid)) {
			sff.append(" and userid='" + userid + "'");
		}
		List<Tgsq> list = dao.find(sff.toString(), Integer.valueOf(page),
				Integer.valueOf(rows));
		return list;
	}

	/**
	 * 审核
	 */
	@Override
	public void shenhe(Tgsq t) throws Exception {
		String id = t.getId();
		Tgsq tt = dao.get(Tgsq.class, id);
		tt.setStatus(t.getStatus());

		if (t.getStatus().equals("1")) {// 审核通过
			String userid = tt.getUserid();
			LoginUser l = loginUserDaoI.get(LoginUser.class, userid);
			l.setUsertype("2");// 将身份改为投资顾问
			loginUserDaoI.update(l);

			Tgwdsz tttt = new Tgwdsz();
			tttt.setJf("0");
			tttt.setSl("99999");
			tttt.setTgid(userid);
			tttt.setId(UUID.randomUUID().toString());
			tgwdszDaoI.save(tttt);

			String title01 = "投顾申请审核信息";
			String content01 = l.getNickname() + ":您申请投资顾问资质审核已通过，请重新登录获取新的权限'";
//			List<String> alias = new ArrayList<String>();
//			alias.add(userid.replace("-", ""));
			List<String> rig = new ArrayList<String>();
			rig.add(l.getRegistrationId());
			if(rig!=null&&rig.size()>0){
				JPushChatModel jpModel = new JPushChatModel();
				jpModel.setType("4"); // 申请投顾审核成功
				jpModel.setTitle(title01);// 推送题目
				jpModel.setContent(content01);// 推送内容
				jpModel.setDataId(userid);
//				jppApiClient.jPush(alias, jpModel);
				jppApiClient.jPush_rigstId(rig, jpModel);
			}
			
		}
		dao.update(tt);
	}

	@Override
	public Tgsq getInfo(String userid) throws Exception {
		StringBuffer sff = new StringBuffer();
		sff.append("select a from ").append(Tgsq.class.getSimpleName())
				.append(" a ");
		sff.append(" where userid='" + userid + "' and status='1'");
		List<Tgsq> list = dao.getList(sff.toString());
		if (list.size() > 0) {
			return list.get(0);
		}
		return null;
	}

	@Override
	public void update1(Tgsq t) throws Exception {
		Tgsq a = dao.get(Tgsq.class, t.getId());
		a.setStatus(t.getStatus());
		a.setBtgly(t.getBtgly());
		dao.update(a);
	}

	@Override
	public List<Tgshow> getTgShow(String userid, String page, String rows,
			String sort) {
		if (StringUtils.isBlank(page)) {
			page = "1";
		}
		if (StringUtils.isBlank(rows)) {
			rows = "10";
		}

		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		String today = formatter.format(date);
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(date);
		calendar.add(calendar.DATE, -1);// 把日期往后增加一天.整数往后推,负数往前移动
		date = calendar.getTime(); // 这个时间就是日期往后推一天的结果
		String ztdate = formatter.format(date); // 昨天
		String dateString = "";
		/**
		 * 判定请求数据日期方法
		 */
		String drqsql = "select count(1) from t_tgInfo where 1=1  and jstime ='"
				+ today + "'"; // 设定定日期sql
		BigInteger drql = dao.countBySql(drqsql);
		if (drql.equals(BigInteger.ZERO)) { // 今天收益资产未结算，数据请求日期设置为昨天
			dateString = ztdate;
		} else { // 今天收益资产结算后，数据请求日期设置为今天
			dateString = today;
		}

		/**
		 * 现阶段赛季
		 */
		List<MnSjZd> mnsjList = mnSjZdServiceI.getMnsjList();
		String zxSjid = "";
		String sjzcbj = "";
		if (mnsjList.size() > 0) {
			MnSjZd mnsjzd = mnsjList.get(0);
			zxSjid = mnsjzd.getId();
			sjzcbj = mnsjzd.getChuShi(); // 赛季赛本金
		}

		// 根据类型不同来判断是赛季赛还是普通赛
		String sql = "";
		sql += "select a.szjg,a.cyzgh,(select tx from loginuser where id=a.userid) tx,a.realname, "
				+ "(select count(1) from t_myCare where concernedid=a.userid) fss,  "
				+

				"(select sjspm from t_tginfo where userid = a.userid and jstime='"
				+ dateString
				+ "') sjspm, "
				+ "(select sjssy from t_tginfo where userid = a.userid and jstime='"
				+ dateString
				+ "') sjssyl, "
				+

				"(select ptspm from t_tginfo where userid = a.userid and jstime='"
				+ dateString
				+ "') ptspm, "
				+ "(select ptssy from t_tginfo where userid = a.userid and jstime='"
				+ dateString
				+ "') ptsyl, "
				+

				"(select ptsjb from loginuser where id=a.userid) ptsjb,  "
				+ "(select count(*) from t_answerQuestions where tzgwId=a.userid) bzxcs,  "
				+ "(select count(*) from t_replyQuestions where replyType!='2' and userid=a.userid) jdcs,  "
				+ "(select round(avg(zan/(zan+tucao))*100,2) from t_warCare where userid=a.userid) hpl , "
				+ "(select count(1) from t_tgdj where userid=a.userid)+(select count(1) from t_replyQuestions where userid=a.userid) as hyd ,a.id, "
				+ "(select count(*) from t_ywbdJf where 1=1 and myd='3' and tzgwid=a.userid) my,"
				+ "(select count(*) from t_ywbdJf where 1=1 and myd='1' and tzgwid=a.userid) bmy,"
				+ "ifnull(iszb,0) iszb,"
				+ "a.addtime ,"
				+ "(select sjsjb from loginuser where id=a.userid) sjsjb,"
				+ " a.userid " + " from t_tgsq a where status='1' ";
		if (StringUtils.isNotBlank(sort)) {
			if (sort.equals("01")) {
				sql += " order by iszb desc,ptspm desc";
			} else if (sort.equals("02")) { // 赛季赛排名
				sql += " order by iszb desc,sjspm desc";
			} else if (sort.equals("03")) {
				sql += " order by iszb desc,sjssyl + 0 desc";
			} else if (sort.equals("04")) { // 活跃度 被问最多的
				sql += " order by iszb desc,hyd desc";
			} else if (sort.equals("05")) { // 最积极的 回答次数最多的
				sql += " order by iszb desc,jdcs desc";
			} else if (sort.equals("06")) {
				sql += " order by iszb desc,fss desc"; // 以粉丝数据排名
			} else if (sort.equals("07")) {
				sql += " order by addtime desc,iszb desc";
			}
		} else {
			sql += " order by iszb desc,fss desc";
		}
		List<Object[]> list = dao.findBySql(sql, Integer.valueOf(page),
				Integer.valueOf(rows));
		List<Tgshow> list_1 = new ArrayList<Tgshow>();
		for (int i = 0; i < list.size(); i++) {
			Object[] ob = list.get(i);
			for (int k = 0; k < 15; k++) {
				if (ob[k] == null) {
					ob[k] = "";
				}
			}
			Tgshow t = new Tgshow();
			t.setHyd(ob[13].toString());
			t.setTgid(ob[14].toString());
			t.setSzjg(ob[0].toString());
			t.setCyzgzh(ob[1].toString());
			t.setTx(ob[2].toString());
			t.setName(ob[3].toString());
			t.setFss(ob[4].toString());
			t.setSjspm(ob[5].toString());
			t.setSjsyll(ob[6].toString() + "%");

			t.setPtspm(ob[7].toString());
			t.setPtsyll(ob[8].toString() + "%");// 普通赛盈利率
			t.setJbsl(ob[9].toString());// 普通赛金币
			t.setBzxcs(ob[10].toString());
			t.setJdcs(ob[11].toString());
			t.setHpl(ob[12].toString() + "%");
			String my = ob[15].toString();
			// //System.out.println("my的值是："+my);
			String bmy = ob[16].toString();
			// //System.out.println("bmy的值是："+bmy);
			String iszb = ob[17].toString();
			// //System.out.println("iszb的值是："+iszb);
			t.setIszb(iszb);
			if (my.equals("0")) {
				t.setYwbdmyd("0%");
			} else {
				int a = Integer.valueOf(my);
				int b = Integer.valueOf(bmy) + a;
				double c = a / b;
				String d = String.format("%.2f", c * 100);
				t.setYwbdmyd(d + "%");
			}
			list_1.add(t);
		}
		return list_1;
	}

	@Override
	public int getCount(String status, String userid) {
		StringBuffer sff = new StringBuffer();
		sff.append("select count(*)  from ").append(Tgsq.class.getSimpleName())
				.append(" a where 1=1");
		if (StringUtils.isNotBlank(status)) {
			sff.append(" and status='" + status + "'");
		}

		if (StringUtils.isNotBlank(userid)) {
			sff.append(" and userid='" + userid + "'");
		}
		return dao.count(sff.toString()).intValue();
	}

	@Override
	public int getCountForShow(String userid) {
		// 根据类型不同来判断是赛季赛还是普通赛
		String sql = "";
		sql = "select * from t_tgsq where status='1'";
		List<Object[]> list = dao.findBySql(sql);
		return list.size();
	}

	@Override
	public Tgshow getTgShowDetail(String tgid) {

		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		String today = formatter.format(date);
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(date);
		calendar.add(calendar.DATE, -1);// 把日期往后增加一天.整数往后推,负数往前移动
		date = calendar.getTime(); // 这个时间就是日期往后推一天的结果
		String ztdate = formatter.format(date); // 昨天
		String dateString = "";
		/**
		 * 判定请求数据日期方法
		 */
		String drqsql = "select count(1) from t_tgInfo where 1=1  and jstime ='"
				+ today + "'"; // 设定定日期sql
		BigInteger drql = dao.countBySql(drqsql);
		if (drql.equals(BigInteger.ZERO)) { // 今天收益资产未结算，数据请求日期设置为昨天
			dateString = ztdate;
		} else { // 今天收益资产结算后，数据请求日期设置为今天
			dateString = today;
		}

		/**
		 * 现阶段赛季
		 */

		List<MnSjZd> mnsjList = mnSjZdServiceI.getMnsjList();
		String zxSjid = "";
		String sjzcbj = "";
		if (mnsjList.size() > 0) {
			MnSjZd mnsjzd = mnsjList.get(0);
			zxSjid = mnsjzd.getId();
			sjzcbj = mnsjzd.getChuShi(); // 赛季赛本金
		}
		String sql = "select a.szjg,a.cyzgh,(select tx from loginuser where id=a.userid) tx,a.realname, "
				+ "(select count(1) from t_myCare where concernedid=a.userid) fss,  "
				+

				"(select sjspm from t_tginfo where userid = a.userid and jstime='"
				+ dateString
				+ "') sjspm, "
				+ "(select sjssy from t_tginfo where userid = a.userid and jstime='"
				+ dateString
				+ "') sjssyl, "
				+

				"(select ptspm from t_tginfo where userid = a.userid and jstime='"
				+ dateString
				+ "') ptspm, "
				+ "(select ptssy from t_tginfo where userid = a.userid and jstime='"
				+ dateString
				+ "') ptsyl, "
				+

				"(select ptsjb from loginuser where id=a.userid) ptsjb,  "
				+ "(select count(*) from t_answerQuestions where tzgwId=a.userid) bzxcs,  "
				+ "(select count(*) from t_replyQuestions where replyType!='2' and userid=a.userid) jdcs,  "
				+ "(select round(avg(zan/(zan+tucao))*100,2) from t_warCare where userid=a.userid) hpl , "
				+ "(select count(1) from t_tgdj where userid=a.userid)+(select count(1) from t_replyQuestions where userid=a.userid) as hyd ,a.id, "
				+ "(select count(*) from t_ywbdJf where 1=1 and myd='3' and tzgwid=a.userid) my,"
				+ "(select count(*) from t_ywbdJf where 1=1 and myd='1' and tzgwid=a.userid) bmy, a.userid "
				+ " from t_tgsq a where a.userid='" + tgid + "'";
		List<Object[]> list = dao.findBySql(sql);
		if (list.size() > 0) {
			Object[] ob = list.get(0);
			for (int i = 0; i < 13; i++) {
				if (ob[i] == null) {
					ob[i] = "";
				}
			}
			Tgshow t = new Tgshow();
			t.setHyd(ob[13].toString());
			t.setTgid(ob[14].toString());
			t.setSzjg(ob[0].toString());
			t.setCyzgzh(ob[1].toString());
			t.setTx(ob[2].toString());
			t.setName(ob[3].toString());
			t.setFss(ob[4].toString());
			t.setSjspm(ob[5].toString());
			t.setSjsyll(ob[6].toString() + "%");
			t.setJbsl(ob[9].toString());// 普通赛金币
			t.setPtspm(ob[7].toString());
			t.setPtsyll(ob[8].toString() + "%");// 普通赛盈利率
			t.setBzxcs(ob[10].toString());
			t.setJdcs(ob[11].toString());
			t.setHpl(ob[12].toString() + "%");
			String my = ob[15].toString();
			String bmy = ob[16].toString();
			if (my.equals("0")) {
				t.setYwbdmyd("0%");
			} else {
				int a = Integer.valueOf(my);
				int b = Integer.valueOf(bmy) + a;
				double c = a / b;
				String d = String.format("%.2f", c * 100);
				t.setYwbdmyd(d + "%");
			}
			return t;
		}
		return null;
	}

	// 上期排名
	@Override
	public int getTgPtspm(String tgid) {
		String sql = "select (select count(*)+1 "
				+ "from t_mnSjBm where dqsd> "
				+ "(select dqsd from t_mnSjBm where bmsj< "
				+ "(select dqsd from t_mnSjBm where bmsj< "
				+ "(select bmsj from t_mnSjBm where userid=a.userid order by bmsj desc limit 1)  "
				+ "and userid=a.userid limit 1))) pm from t_tgsq a where a.userid='"
				+ tgid + "'";
		List list = dao.findBySql(sql);
		int a = 0;
		if (list.size() > 0) {
			BigInteger ob = (BigInteger) list.get(0);
			a = ob.intValue();
		}
		return a;
	}

	@Override
	public int getPtsPm(String tgid) {
		String sql = "select (select (count(*)+1) from loginuser where ptsjb>(select ptsjb from loginuser where id=a.id)) from loginuser a where a.id='"
				+ tgid + "'";
		List list = dao.findBySql(sql);
		int a = 0;
		if (list.size() > 0) {
			BigInteger ob = (BigInteger) list.get(0);
			a = ob.intValue();
		}
		return a;
	}

	@Override
	public double getPtsyll(String tgid) {
		String sql = "select round((((select ptsjb from loginuser where id=a.id)-(select ptsjb from t_integralConfig where 1=1 limit 1))/"
				+ "(select ptsjb from t_integralConfig where 1=1 limit 1))*100) ptssyl "
				+ "from loginuser a where a.id='" + tgid + "'";
		double a = 0;
		List list = dao.findBySql(sql);
		if (list.size() > 0) {
			double ob = (Double) list.get(0);
			a = ob;
		}
		return a;
	}

	@Override
	public List<Tgsq> pdList(String userid) {
		String hql = "";
		if (StringUtils.isNotBlank(userid)) {
			hql = " from Tgsq where 1=1 and userid='" + userid
					+ "' and status in ('1','0' )";
		} else {
			return null;
		}
		List<Tgsq> list = dao.find(hql);
		return list;
	}

	@Override
	public void zbsz(String id, String zbsz) throws Exception {
		Tgsq t = dao.get(Tgsq.class, id);
		if (t != null) {
			t.setIszb(zbsz);
			dao.update(t);
		}
	}

	@Override
	public void qxzb() throws Exception {
		List<Tgsq> list = dao.find("from Tgsq where iszb='1' ");
		for (int i = 0; i < list.size(); i++) {
			Tgsq t = list.get(i);
			t.setIszb("0");
			dao.update(t);
		}
	}

	@Override
	public List<Tgshow> getTglist() {

		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		String today = formatter.format(date);
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(date);
		calendar.add(calendar.DATE, -1);// 把日期往后增加一天.整数往后推,负数往前移动
		date = calendar.getTime(); // 这个时间就是日期往后推一天的结果
		String ztdate = formatter.format(date); // 昨天
		String dateString = "";
		/**
		 * 判定请求数据日期方法
		 */
		String drqsql = "select count(1) from t_tgInfo where 1=1  and jstime ='"
				+ today + "'"; // 设定定日期sql
		BigInteger drql = dao.countBySql(drqsql);
		if (drql.equals(BigInteger.ZERO)) { // 今天收益资产未结算，数据请求日期设置为昨天
			dateString = ztdate;
		} else { // 今天收益资产结算后，数据请求日期设置为今天
			dateString = today;
		}

		/**
		 * 现阶段赛季
		 */
		List<MnSjZd> mnsjList = mnSjZdServiceI.getMnsjList();
		String zxSjid = "";
		String sjzcbj = "";
		if (mnsjList.size() > 0) {
			MnSjZd mnsjzd = mnsjList.get(0);
			zxSjid = mnsjzd.getId();
			sjzcbj = mnsjzd.getChuShi(); // 赛季赛本金
		}

		// 根据类型不同来判断是赛季赛还是普通赛
		// 所有的投顾数据相同用户不能重复
		String sql = "";
		sql += "select a.szjg,a.cyzgh,(select tx from loginuser where id=a.userid) tx,a.realname, "
				+ "(select count(1) from t_myCare where concernedid=a.userid) fss,  "
				+ "(select sjspm from t_tginfo where userid = a.userid and jstime='"
				+ dateString
				+ "') sjspm, "
				+ "(select sjssy from t_tginfo where userid = a.userid and jstime='"
				+ dateString
				+ "') sjssyl, "
				+

				"(select ptspm from t_tginfo where userid = a.userid and jstime='"
				+ dateString
				+ "') ptspm, "
				+ "(select ptssy from t_tginfo where userid = a.userid and jstime='"
				+ dateString
				+ "') ptsyl, "
				+

				"(select ptsjb from loginuser where id=a.userid) ptsjb,  "
				+ "(select count(*) from t_answerQuestions where tzgwId=a.userid) bzxcs,  "
				+ "(select count(*) from t_replyQuestions where replyType!='2' and userid=a.userid) jdcs,  "
				+ "(select round(avg(zan/(zan+tucao))*100,2) from t_warCare where userid=a.userid) hpl , "
				+ "(select count(1) from t_tgdj where userid=a.userid)+(select count(1) from t_replyQuestions where userid=a.userid) as hyd ,a.id, "
				+ "(select count(*) from t_ywbdJf where 1=1 and myd='3' and tzgwid=a.userid) my,"
				+ "(select count(*) from t_ywbdJf where 1=1 and myd='1' and tzgwid=a.userid) bmy,"
				+ "ifnull(iszb,0) iszb,"
				+ "(select sjsjb from loginuser where id=a.userid) sjsjb,"
				+ " a.userid " + " from t_tgsq a where status='1'  GROUP BY a.userid";
		//System.out.println(sql);
		List<Object[]> list = dao.findBySql(sql);
		List<Tgshow> list_1 = new ArrayList<Tgshow>();
		for (int i = 0; i < list.size(); i++) {
			Object[] ob = list.get(i);
			for (int k = 0; k < 15; k++) {
				if (ob[k] == null) {
					ob[k] = "";
				}
			}
			Tgshow t = new Tgshow();
			t.setHyd(ob[13].toString());
			t.setTgid(ob[14].toString());
			t.setSzjg(ob[0].toString());
			t.setCyzgzh(ob[1].toString());
			t.setTx(ob[2].toString());
			t.setName(ob[3].toString());
			t.setFss(ob[4].toString());
			t.setSjspm(ob[5].toString());
			t.setSjsyll(ob[6].toString() + "%");

			t.setPtspm(ob[7].toString());
			t.setPtsyll(ob[8].toString() + "%");// 普通赛盈利率
			t.setJbsl(ob[9].toString());// 普通赛金币
			t.setBzxcs(ob[10].toString());
			t.setJdcs(ob[11].toString());
			t.setHpl(ob[12].toString() + "%");
			String my = ob[15].toString();
			String bmy = ob[16].toString();
			String iszb = ob[17].toString();
			t.setIszb(iszb);
			if (my.equals("0")) {
				t.setYwbdmyd("0%");
			} else {
				int a = Integer.valueOf(my);
				int b = Integer.valueOf(bmy) + a;
				double c = a / b;
				String d = String.format("%.2f", c * 100);
				t.setYwbdmyd(d + "%");
			}
			list_1.add(t);
		}
		return list_1;
	}

	@Override
	public List<Tgsq> getZbList() {
		String hql = " from Tgsq where 1=1 and iszb ='1'";
		List<Tgsq> list = dao.find(hql);
		return list;
	}

	@Override
	public List<Tgsq> getAllTgList() {
		String hql = " from Tgsq where 1=1 order by addtime desc";
		List<Tgsq> list = dao.find(hql);
		return list;
	}

	String[] excelHeader = { "用户名", "真实姓名", "性别", "地区", "身份证号", "所在机构", "申请时间",
			"状态" };

	@Override
	public HSSFWorkbook export(List<Tgsq> list) {
		HSSFWorkbook wb = new HSSFWorkbook();
		HSSFSheet sheet = wb.createSheet("Tgsq");
		HSSFRow row = sheet.createRow((int) 0);
		HSSFCellStyle style = wb.createCellStyle();
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);

		for (int i = 0; i < excelHeader.length; i++) {
			HSSFCell cell = row.createCell(i);
			cell.setCellValue(excelHeader[i]);
			cell.setCellStyle(style);
			sheet.autoSizeColumn(i);
		}

		for (int i = 0; i < list.size(); i++) {
			row = sheet.createRow(i + 1);
			Tgsq p = list.get(i);
			row.createCell(0).setCellValue(p.getUsername());
			row.createCell(1).setCellValue(p.getRealname());
			String sex = "";
			if ("0".equals(p.getSex())) {
				sex = "女";
			} else {
				sex = "男";
			}
			row.createCell(2).setCellValue(sex);
			row.createCell(3).setCellValue(p.getDq());
			row.createCell(4).setCellValue(p.getSfzh());
			row.createCell(5).setCellValue(p.getSzjg());
			row.createCell(6).setCellValue(p.getAddtime());
			String status = "0";
			if ("0".equals(p.getStatus())) {
				status = "未审核";
			} else if ("1".equals(p.getStatus())) {
				status = "审核通过";
			} else if ("2".equals(p.getStatus())) {
				status = "审核不通过";
			}
			row.createCell(7).setCellValue(status);

		}
		return wb;
	}

	
	
}
