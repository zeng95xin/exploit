package com.admin.dao;

import java.io.Serializable;
import java.math.BigInteger;
import java.util.List;
import java.util.Map;

import com.admin.model.AppVersion;
import com.admin.model.TcpApplication;
import com.admin.model.TczdXz;
import com.admin.model.Tgsdz;
import com.admin.model.TxwxGl;
import com.admin.model.WcpApplication;
import com.web.entity.Person;
import com.web.util.PageModel;

/**
 * 基础数据库操作类
 * 
 * 其他DAO继承此类获取常用的数据库操作方法
 * 
 * @author
 * 
 * @param <T>
 *            模型
 */
public interface BaseDaoI<T> {

	/**
	 * 保存一个对象
	 * 
	 * @param o
	 *            对象
	 * @return 对象的ID
	 */
	public Serializable save(T o);

	/**
	 * 保存一个股学堂对象
	 * 
	 * @param o
	 *            对象
	 * @return 对象的ID
	 */
	// public Serializable save(Tgxt o);

	/**
	 * 删除一个对象
	 * 
	 * @param o
	 *            对象
	 */
	public void delete(T o);

	/**
	 * 更新一个对象
	 * 
	 * @param o
	 *            对象
	 */
	public void update(T o);

	/**
	 * 保存或更新一个对象
	 * 
	 * @param o
	 *            对象
	 */
	public void saveOrUpdate(T o);

	/**
	 * 通过主键获得对象
	 * 
	 * @param c
	 *            类名.class
	 * @param id
	 *            主键
	 * @return 对象
	 */
	public T get(Class<T> c, Serializable id);

	// public Tgxt getGxt(Class<Tgxt> c, Serializable id);

	/**
	 * 通过HQL语句获取一个对象
	 * 
	 * @param hql
	 *            HQL语句
	 * @return 对象
	 */
	public T get(String hql);

	/**
	 * 通过HQL语句获取一个对象
	 * 
	 * @param hql
	 *            HQL语句
	 * @param params
	 *            参数
	 * @return 对象
	 */
	public T get(String hql, Map<String, Object> params);

	// public Tgxt getGxt(String hql, Map<String, Object> params);

	public Tgsdz getGqbdz(String hql, Map<String, Object> params);

	/**
	 * 获得对象列表
	 * 
	 * @param hql
	 *            HQL语句
	 * @return List
	 */
	public List<T> find(String hql);
	
	public List<T> find(String hql, boolean isLock);

	/**
	 * 获得对象列表
	 * 
	 * @param hql
	 *            HQL语句
	 * @param params
	 *            参数
	 * @return List
	 */
	public List<T> find(String hql, Map<String, Object> params);

	/**
	 * 获得分页后的对象列表
	 * 
	 * @param hql
	 *            HQL语句
	 * @param page
	 *            要显示第几页
	 * @param rows
	 *            每页显示多少条
	 * @return List
	 */
	public List<T> find(String hql, int page, int rows);

	/**
	 * 获得分页后的对象列表
	 * 
	 * @param hql
	 *            HQL语句
	 * @param params
	 *            参数
	 * @param page
	 *            要显示第几页
	 * @param rows
	 *            每页显示多少条
	 * @return List
	 */
	public List<T> find(String hql, Map<String, Object> params, int page,
			int rows);

	public List<Person> findOne(String hql, Map<String, Object> params,
			int page, int rows);

	// public List<Tgxt> findGxtOne(String hql, Map<String, Object> params, int
	// page, int rows);

	public List<TxwxGl> findTxwxGlOne(String hql, Map<String, Object> params,
			int page, int rows);

	public List<Tgsdz> findGqbdzOne(String hql, Map<String, Object> params,
			int page, int rows);

	public List<TczdXz> findGqbCzdOne(String hql, Map<String, Object> params,
			int page, int rows);

	/**
	 * 统计数目
	 * 
	 * @param hql
	 *            HQL语句(select count(*) from T)
	 * @return long
	 */
	public Long count(String hql);
	/**
	 * 统计数目
	 * @param hql
	 * @return
	 */
	public Double countDouble(String hql);
	
	public double sumDouble(String hql, Map<String, Object> params);

	/**
	 * 统计数目
	 * 
	 * @param hql
	 *            HQL语句(select count(*) from T where xx = :xx)
	 * @param params
	 *            参数
	 * @return long
	 */
	public Long count(String hql, Map<String, Object> params);

	/**
	 * 执行一条HQL语句
	 * 
	 * @param hql
	 *            HQL语句
	 * @return 响应结果数目
	 */
	public int executeHql(String hql);

	/**
	 * 执行一条HQL语句
	 * 
	 * @param hql
	 *            HQL语句
	 * @param params
	 *            参数
	 * @return 响应结果数目
	 */
	public int executeHql(String hql, Map<String, Object> params);

	/**
	 * 获得结果集
	 * 
	 * @param sql
	 *            SQL语句
	 * @return 结果集
	 */
	public List<Object[]> findBySql(String sql);
	
	
	public List<Object> findBySql1(String sql);

	/**
	 * 最佳答人
	 */

	public List<Object[]> findZjdr(String sql);

	/**
	 * 获得结果集
	 * 
	 * @param sql
	 *            SQL语句
	 * @param page
	 *            要显示第几页
	 * @param rows
	 *            每页显示多少条
	 * @return 结果集
	 */
	public List<Object[]> findBySql(String sql, int page, int rows);

	/**
	 * 获得结果集
	 * 
	 * @param sql
	 *            SQL语句
	 * @param params
	 *            参数
	 * @return 结果集
	 */
	public List<Object[]> findBySql(String sql, Map<String, Object> params);

	/**
	 * 获得结果集
	 * 
	 * @param sql
	 *            SQL语句
	 * @param params
	 *            参数
	 * @param page
	 *            要显示第几页
	 * @param rows
	 *            每页显示多少条
	 * @return 结果集
	 */
	public List<Object[]> findBySql(String sql, Map<String, Object> params,
			int page, int rows);
	
	public <E>List<E> findBySqlBuildObject(String sql, Map<String, Object> params, Class<E> transformersClass, Integer page, Integer rows);
	public <E>E findBySqlBuildObjectOne(String sql, Map<String, Object> params, Class<E> transformersClass);
	
	public Object executeSqlNonUpdate(String sql, Map<String, Object> params);
	
	/**
	 * 执行SQL语句
	 * 
	 * @param sql
	 *            SQL语句
	 * @return 响应行数
	 */
	public int executeSql(String sql);

	/**
	 * 执行SQL语句
	 * 
	 * @param sql
	 *            SQL语句
	 * @param params
	 *            参数
	 * @return 响应行数
	 */
	public int executeSql(String sql, Map<String, Object> params);

	/**
	 * 统计
	 * 
	 * @param sql
	 *            SQL语句
	 * @return 数目
	 */
	public BigInteger countBySql(String sql);

	/**
	 * 统计
	 * 
	 * @param sql
	 *            SQL语句
	 * @param params
	 *            参数
	 * @return 数目
	 */
	public BigInteger countBySql(String sql, Map<String, Object> params);

	public PageModel findAllUser(int offset, int pagesize);

	public List<T> getList(String sff);

	public List<TcpApplication> getCpList(String userid);

	// public List<Tgxt> getGxtList(String fl);

	public List<TxwxGl> getTxwxGlList();

	public List<Tgsdz> getGqbdzList(String fl);

	public List<WcpApplication> getWcpList(String userid);

	/**
	 * 获取猜涨跌list
	 * 
	 * @return
	 */
	public List<TczdXz> getCzdList();

	/**
	 * 更新一个股学堂对象
	 * 
	 * @param o
	 *            对象
	 */
	/*
	 * public void update(Tgxt o);
	 * 
	 * 
	 * public void delete(Tgxt o);
	 */

	/**
	 * getAppVersion
	 * 
	 * @param hql
	 * @param params
	 * @return
	 */
	public AppVersion getAppVersion();

	/*
	 * 是否需要上锁
	 */
	public T get(String hql,String objectName);
	
}
