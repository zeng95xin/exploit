package com.admin.service.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.DecimalFormat;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.ModelMap;

import com.admin.model.JPushChatModel;
import com.admin.model.LoginUser;
import com.admin.model.MnSjBm;
import com.admin.model.Mncp;
import com.admin.model.UserJbxfInfo;
import com.admin.model.gpsy;
import com.admin.service.GpBuySellService;
import com.admin.service.GpsyServiceI;
import com.admin.service.JPushApiClient;
import com.admin.service.LoginUserServiceI;
import com.admin.service.MnSjBmServiceI;
import com.admin.service.MncpServiceI;
import com.admin.service.MyCareServiceI;
import com.admin.service.UserJbxfInfoServiceI;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.web.util.TimeUtils;

@Service
public class GpBuySellServiceImpl implements GpBuySellService{
	
	private static final Logger logger=LoggerFactory.getLogger(GpBuySellServiceImpl.class);
	
	@Autowired
	private LoginUserServiceI loginUserService;
	
	@Autowired
	private MncpServiceI mncpServiceI;
	
	@Autowired
	private UserJbxfInfoServiceI userJbxfInfoServiceI;
	
	@Autowired
	private MnSjBmServiceI mnSjBmServiceI;
	
	@Autowired
	private MyCareServiceI myCareServiceI;
	
	@Autowired
	private JPushApiClient jPushApiClient;
	
	@Autowired
	private GpsyServiceI gpsyServiceI;

	@Override
	public JSONObject updateGPMR(HttpServletRequest request,HttpServletResponse response, ModelMap modelMap, HttpSession session)  {
		JSONObject json = new JSONObject();
		try {
			synchronized (this) {
				//System.out.println("------------1");
				String userid = request.getParameter("userid");
				String username = request.getParameter("username");
				String gddm = request.getParameter("gddm");
				String zqdm = request.getParameter("zqdm");
				String zqname = request.getParameter("zqname"); // 证券名称
				// String bz = "0";//未成交
				String wtsl = request.getParameter("wtsl");// 委托数量
				// Integer cjsl = 0;//成交数量
				String wtjg = request.getParameter("wtjg"); // 委托价格
				// String cz = "0";// 操作：0 买入；1 卖出
				String mrlx = request.getParameter("mrlx");
				String sjsId = request.getParameter("sjsId");// 如果是赛季赛需要传入当前赛季的id(必传)
				
				
				if (StringUtils.isNotBlank(zqdm)) {
					String timeTp = TimeUtils.getTime("yyyyMMddHHmmss");
					String stocks = zqdm;
					// 统一请求接口数据
					URL u = new URL(
							"http://route.showapi.com/131-46?showapi_appid=15094"
									+ "&showapi_timestamp="
									+ timeTp
									+ "&stocks="
									+ stocks
									+ "&needIndex=1&showapi_sign=288557843a564302bcaab02569355b40");
					InputStream in = u.openStream();
					ByteArrayOutputStream out = new ByteArrayOutputStream();
					//System.out.println(u);
					try {
						byte buf[] = new byte[1024];
						int read = 0;
						while ((read = in.read(buf)) > 0) {
							out.write(buf, 0, read);
						}
					} finally {
						if (in != null) {
							in.close();
						}
					}
					byte b[] = out.toByteArray();
					JSONObject jsonJg = JSON.parseObject(new String(b, "utf-8")); // 将json结果转换成jsonObject
					JSONObject showBody = jsonJg.getJSONObject("showapi_res_body"); // 获取到大盘指数结果集
					JSONArray jsList = showBody.getJSONArray("list"); // 获取实时个股数组数据
					JSONObject gg_m = new JSONObject();
					if (jsList != null && (jsList.size() > 0)) {
						gg_m=jsList.getJSONObject(0);
						String closePrice=gg_m.getString("closePrice");
						String nowPrice=gg_m.getString("nowPrice");
						BigDecimal t_closePrice=new BigDecimal(closePrice);
						BigDecimal t_nowPrice=new BigDecimal(nowPrice);
						BigDecimal t_ZDFDPrice=t_closePrice.multiply(new BigDecimal("0.1"));
						BigDecimal t_ZDPrice=t_closePrice.add(t_ZDFDPrice);
						BigDecimal ZDPrice=t_ZDPrice.setScale(2, BigDecimal.ROUND_HALF_UP);
						
						if ((ZDPrice.compareTo(t_nowPrice))<=0) {//涨停价比现价小或者相等时不能买入
							json.put("errorCode", "10");
							json.put("errorMsg", "该股票已经涨停，不能买入，不可委托！");
							return json;
						}
					}
				}
				
				String pdsj = mncpServiceI.pdWtTime(sjsId, wtsl, userid, mrlx,
						wtjg);
				if ("1".equals(pdsj)) {
					json.put("errorCode", "5");
					json.put("errorMsg", "不在委托时间；不可委托！");
					return json;
				}
				if ("2".equals(pdsj)) {
					json.put("errorCode", "6");
					json.put("errorMsg", "委托数量非正确整数！");
					return json;
				}
				if ("3".equals(pdsj)) {
					json.put("errorCode", "7");
					json.put("errorMsg", "委托赛季非报名赛季！");
					return json;
				}
				if ("4".equals(pdsj)) {
					json.put("errorCode", "8");
					json.put("errorMsg", "余额不足；不可委托！");
					return json;
				}
				if (Double.parseDouble(wtjg) <= 0) {
					json.put("errorCode", "9");
					json.put("errorMsg", "委托价格不能低于0；不可委托！");
					return json;
				}

				if (StringUtils.isNotBlank(userid)) {
					LoginUser loginUser = loginUserService.getLoginUser(userid);
					String userPtsJb = loginUser.getPtsjb(); // 获取普通赛金币
					String userSjJb = loginUser.getSjsjb();// 获取赛季赛金币
					// 获取委托总价
					Double zcb = Double.parseDouble(wtsl)
							* Double.parseDouble(wtjg);
					Double nowPtsJb = Double.parseDouble(userPtsJb) - zcb; // 普通赛余额
					Double nowSjJb = Double.parseDouble(userSjJb) - zcb; // 赛季赛余额

					if (loginUser != null) {
						UserJbxfInfo jbxh = new UserJbxfInfo(); // 金币消费记录
						jbxh.setCz("0");// 操作：0，买入；1，卖出；2，撤销
						jbxh.setUserid(userid);
						jbxh.setZqdm(zqdm);
						jbxh.setXhjbsl("-" + zcb.toString());
						jbxh.setMrlx(mrlx);

						Mncp mncp = new Mncp();
						mncp.setUserid(userid);
						mncp.setUsername(username);
						mncp.setGddm(gddm);
						mncp.setZqdm(zqdm);
						mncp.setZqname(zqname);
						mncp.setBz("0");
						mncp.setWtsl(wtsl);
						mncp.setCjsl(0);
						mncp.setWtjg(wtjg);
						mncp.setCz("0");
						mncp.setMrlx(mrlx);
						if ("0".equals(mrlx) && nowPtsJb >= 0) {// 普通赛
							mncp.setMrzj(String.valueOf(zcb));
							// 更新用户普通赛金币
							loginUser.setPtsjb(String.valueOf(nowPtsJb));
							loginUserService.update(loginUser);
							mncpServiceI.add(mncp);// 买入委托
							jbxh.setNowye(nowPtsJb.toString());
							userJbxfInfoServiceI.add(jbxh);
							json.put("errorCode", "0");
							json.put("errorMsg", "普通赛委托成功");
						} else if ("1".equals(mrlx) && nowSjJb >= 0) { // 赛季赛
							mncp.setMrzj(String.valueOf(zcb));
							// 更新用户赛季赛金币
							loginUser.setSjsjb(String.valueOf(nowSjJb));
							loginUserService.update(loginUser);
							mncp.setSjsId(sjsId);
							mncpServiceI.add(mncp);
							jbxh.setNowye(nowSjJb.toString());
							userJbxfInfoServiceI.add(jbxh);
							loginUser.setSjsjb(String.valueOf(nowSjJb));
							loginUserService.update(loginUser);
							json.put("errorCode", "0");
							json.put("errorMsg", "赛季赛委托成功");

							MnSjBm mnSjBm = mnSjBmServiceI.findByUserIdAndSjId(
									userid, sjsId);
							if (mnSjBm != null) {
								mnSjBm.setDqsd(nowSjJb.toString());
								mnSjBmServiceI.edit(mnSjBm);
							}
							if ("2".equals(loginUser.getUsertype())) {
								String title = "股天乐信息";
								String content = "你关注的股天乐投资顾问'"
										+ loginUser.getNickname() + "' 入手'"
										+ zqname + "'-- '" + wtsl + "'股!";
//							List<String> alias = myCareServiceI
//									.getUseridList(userid);
								List<String>reigsts=myCareServiceI.getRigestId(userid);
								if(reigsts!=null&&reigsts.size()>0){
									JPushChatModel jpModel = new JPushChatModel();
									jpModel.setType("1"); // 股票交易
									jpModel.setTitle(title);// 推送题目与内容
									jpModel.setContent(content);
									jpModel.setDataId(loginUser.getId()); // 投顾id
									//System.out.println("|type:"+1+"|content:"+content+"|dataId"+jpModel.getDataId()+"|reigsts"+reigsts.size()+"|");
									jPushApiClient.jPush_rigstId(reigsts, jpModel);
//								jPushApiClient.jPush(alias, jpModel);
								}
								
							}
							if ("1".equals(loginUser.getUsertype())) {// 普通牛人
								String title = "股天乐信息";
								String content = "你关注的牛人'"
										+ loginUser.getNickname() + "' 入手'"
										+ zqname + "'-- '" + wtsl + "'股!";
//							List<String> alias = myCareServiceI
//									.getUseridList(userid);
								List<String>reigsts=myCareServiceI.getRigestId(userid);
								if(reigsts!=null&&reigsts.size()>0){
								JPushChatModel jpModel = new JPushChatModel();
								jpModel.setType("1"); // 股票交易
								jpModel.setTitle(title);// 推送题目与内容
								jpModel.setContent(content);
								jpModel.setDataId(loginUser.getId()); // 投顾id
//							jPushApiClient.jPush(alias, jpModel);
								//System.out.println("|type:"+1+"|content:"+content+"|dataId"+jpModel.getDataId()+"|reigsts"+reigsts.size()+"|");
								jPushApiClient.jPush_rigstId(reigsts, jpModel);
								}
							}

						} else {
							json.put("errorCode", "2");
							json.put("errorMsg", "余额不足，无法买入！");
						}

					}
					//System.out.println("------------2");
				} else {
					json.put("errorCode", "1");
					json.put("errorMsg", "你还没登录呢 ！");
				}
				//System.out.println("------------3");
			}
		} catch (NumberFormatException e) {
			e.printStackTrace();
			logger.error("%%%%%%%%%%%%股票买入数字格式化异常", e);
		} catch (MalformedURLException e) {
			e.printStackTrace();
			logger.error("%%%%%%%%%%%%股票买入URL异常", e);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			logger.error("%%%%%%%%%%%%股票买入编码异常", e);
		} catch (IOException e) {
			e.printStackTrace();
			logger.error("%%%%%%%%%%%%股票买入io流异常", e);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("%%%%%%%%%%%%股票买入异常", e);
		}
		return json;
	}

	@Override
	public JSONObject updateGPMC(HttpServletRequest request,HttpServletResponse response, ModelMap modelMap, HttpSession session)  {
		JSONObject json = new JSONObject();
		try {
			synchronized (this) {
				//System.out.println("---------------------------------------1");
				String userid = request.getParameter("userid"); // 用户id
				String username = request.getParameter("username"); // 用户名称
				String gddm = request.getParameter("gddm"); // 沪A、深A
				String zqdm = request.getParameter("zqdm"); // 证券代码 sh600006
				String zqname = request.getParameter("zqname");// 证券代码证券名称
				String bz = "0";// 未成交
				String wtsl = request.getParameter("mcsl"); // 卖出委托数量
				Integer cjsl = 0;// 成交数量
				String wtjg = request.getParameter("wtjg"); // 卖出委托价格
				String cz = "1";// 卖出
				String mclx = request.getParameter("mclx");// 卖出委托类型普通赛，赛季赛
				String mrlx = request.getParameter("mrlx"); // 买入类型 0：普通赛；1：赛季赛、
				String sjsid = request.getParameter("sjsId"); // 若为卖出为赛季赛是，必传赛季赛id
				
				

				if (StringUtils.isNotBlank(zqdm)) {
					String timeTp = TimeUtils.getTime("yyyyMMddHHmmss");
					String stocks = zqdm;
					// 统一请求接口数据
					URL u = new URL(
							"http://route.showapi.com/131-46?showapi_appid=15094"
									+ "&showapi_timestamp="
									+ timeTp
									+ "&stocks="
									+ stocks
									+ "&needIndex=1&showapi_sign=288557843a564302bcaab02569355b40");
					InputStream in = u.openStream();
					ByteArrayOutputStream out = new ByteArrayOutputStream();
					//System.out.println(u);
					try {
						byte buf[] = new byte[1024];
						int read = 0;
						while ((read = in.read(buf)) > 0) {
							out.write(buf, 0, read);
						}
					} finally {
						if (in != null) {
							in.close();
						}
					}
					byte b[] = out.toByteArray();
					JSONObject jsonJg = JSON.parseObject(new String(b, "utf-8")); // 将json结果转换成jsonObject
					JSONObject showBody = jsonJg.getJSONObject("showapi_res_body"); // 获取到大盘指数结果集
					JSONArray jsList = showBody.getJSONArray("list"); // 获取实时个股数组数据
					JSONObject gg_m = new JSONObject();
					if (jsList != null && (jsList.size() > 0)) {
						gg_m=jsList.getJSONObject(0);
						String closePrice=gg_m.getString("closePrice");
						String nowPrice=gg_m.getString("nowPrice");
						BigDecimal t_closePrice=new BigDecimal(closePrice);
						BigDecimal t_nowPrice=new BigDecimal(nowPrice);
						BigDecimal t_ZDFDPrice=t_closePrice.multiply(new BigDecimal("0.1"));
						BigDecimal t_ZDPrice=t_closePrice.subtract(t_ZDFDPrice);
						BigDecimal ZDPrice=t_ZDPrice.setScale(2, BigDecimal.ROUND_HALF_UP);
						
						if ((ZDPrice.compareTo(t_nowPrice))>=0) {//跌停价比现价大或者相等时不能卖出
							json.put("errorCode", "10");
							json.put("errorMsg", "该股票已经跌停，不能卖出，不可委托！");
							return json;
						}
					}
				}
				
				

				String pdsj = mncpServiceI.pdmcWtTime(sjsid, wtsl, userid,
						mrlx, "0");
				if ("1".equals(pdsj)) {
					json.put("errorCode", "5");
					json.put("errorMsg", "不在委托时间范围内，不可委托！");
					return json;
				}
				if ("2".equals(pdsj)) {
					json.put("errorCode", "6");
					json.put("errorMsg", "委托数量非正确整数！");
					return json;
				}
				if ("3".equals(pdsj)) {
					json.put("errorCode", "7");
					json.put("errorMsg", "委托赛季非报名赛季！");
					return json;
				}

				if (Double.parseDouble(wtjg) <= 0) {
					json.put("errorCode", "8");
					json.put("errorMsg", "委托价格不能低于0，不可委托！");
					return json;
				}
				String sjid = null;
				gpsy nowGpsy = null;
				if (mrlx.equals("0")) {
					// 获取该用户持仓数据
					sjid = "111";
					nowGpsy = gpsyServiceI.getGpsy(userid, zqdm, mrlx, sjid);
				} else if (mrlx.equals("1")) {
					sjid = sjsid;
					nowGpsy = gpsyServiceI.getGpsy(userid, zqdm, mrlx, sjid);
				}
				if (nowGpsy != null) {
					Double yyccsl = Double.parseDouble(nowGpsy.getCgsl()); // 原有持仓数据
					if ((yyccsl - Double.parseDouble(wtsl)) < 0) {
						json.put("errorCode", "2");
						json.put("errorMsg", "委托数量大于持仓数量，无法委托！");
						return json;
					} else {
						Double bgCgsl = yyccsl - Double.parseDouble(wtsl);
						// 获取委托成本价
						Double zcb = Double.parseDouble(wtsl)
								* Double.parseDouble(wtjg);
						if (StringUtils.isNotBlank(userid)) {
							
							List<Mncp> list02 = mncpServiceI.getJrcgList(userid, zqdm,
									mrlx);
							//获取今天买入的数量
							int count=0;
							for(int i=0;i<list02.size();i++){
								Mncp mncp = list02.get(i);
								count = count + mncp.getCjsl();
							}
							//如果今天没有买入直接添加交易
							if(count!=0){
								//原有持股数-今天买入的持股数如果等于0说明一股都不可以交易
								if((yyccsl-count)==0){
									json.put("errorCode", "9");
									json.put("errorMsg", "今日可用持股数不够");
									return json;
								//（原有持股数-今天买入的持股数）小于委托数量
								}else if((yyccsl-count)<Double.parseDouble(wtsl)){
									json.put("errorCode", "9");
									json.put("errorMsg", "今日可用持股数不够");
									return json;
								}
								
							}
							
							Mncp mncp = new Mncp();
							mncp.setUserid(userid);
							mncp.setUsername(username);
							mncp.setGddm(gddm);
							mncp.setZqdm(zqdm);
							mncp.setZqname(zqname);
							mncp.setBz(bz);
							mncp.setWtsl(wtsl);// 卖出委托数量
							mncp.setCjsl(cjsl);
							mncp.setWtjg(wtjg);// 卖出委托价格
							mncp.setCz(cz);
							mncp.setMrzj(zcb.toString());
							mncp.setMclx(mclx);
							mncp.setMrlx(mrlx);
							/*
							 * mncp.setYhs(yhs); mncp.setSxf(sxf);
							 */
							
							mncp.setSjsId(sjsid);
							if (bgCgsl > 0) {
								nowGpsy.setCgsl(bgCgsl.toString());
							} else {
								nowGpsy.setCgsl("0.0");
							}
							nowGpsy.setJstime(TimeUtils
									.getTime("yyyy-MM-dd HH:mm:ss"));
							nowGpsy.setWtmcTime(TimeUtils
									.getTime("yyyy-MM-dd HH:mm:ss"));
							gpsyServiceI.edit(nowGpsy);
							mncpServiceI.add(mncp);

							json.put("errorCode", "0");
							json.put("errorMsg", "委托成功");
						} else {
							json.put("errorCode", "1");
							json.put("errorMsg", "你还没登录呢 ！");
						}
					}
					//System.out.println("--------------2");
				}
				//System.out.println("-------------------3");
			}
		} catch (NumberFormatException e) {
			e.printStackTrace();
			logger.error("^^^^^^^^^^^^^^^^股票卖出数字格式化异常", e);
		} catch (MalformedURLException e) {
			e.printStackTrace();
			logger.error("^^^^^^^^^^^^^^^^股票卖出URL异常", e);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			logger.error("^^^^^^^^^^^^^^^^股票卖出编码异常", e);
		} catch (IOException e) {
			e.printStackTrace();
			logger.error("^^^^^^^^^^^^^^^^股票卖出IO流异常", e);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("^^^^^^^^^^^^^^^^股票卖出异常", e);
		}
		return json;

	}

	@Override
	public JSONObject updateGPCX(HttpServletRequest request,
			HttpServletResponse response, ModelMap modelMap, HttpSession session)
			{
		JSONObject json = new JSONObject();
		try {
			DecimalFormat df = new DecimalFormat("#.##");
			String userid = request.getParameter("userid"); // 用户id(必传)
			String mrlx = request.getParameter("mrlx");// 买入类型 0：普通赛；1：赛季赛(必传)
			String zqdm = request.getParameter("zqdm");// 证券代码(必传)
			String wttime = request.getParameter("wttime");// 委托时间(必传)
			mncpServiceI.updateCxjl(userid, zqdm, mrlx, wttime);
			Mncp mncp = mncpServiceI.getmncp(userid, zqdm, mrlx, wttime);
			if (mncp != null) {
				if (mncp.getCz().equals("0")) {
					String id = mncp.getId();
					String cz = mncp.getCz();
					mncp.setCz("2");// 设置为撤销
					mncp.setBz("0");// 设置为撤销
					try {
						mncpServiceI.edit(mncp);
					} catch (Exception e) {
						json.put("errorCode", "3");
						json.put("errorMsg", "撤销失败,委托数据已经成交");
						return json;
					}
					
					// String mrzj
					// =(Double.parseDouble(mncp.getWtjg())*Double.parseDouble(mncp.getWtjg()));//获取买入总价
					String mrzj = mncp.getMrzj();// 获取买入总价
					LoginUser loginUser = loginUserService.getUser(userid);
					String yyptsjb = loginUser.getPtsjb();
					String yysjsjb = loginUser.getSjsjb();
					if (cz.equals("0") && mrlx.equals("0")) {// 如果为买入委托且买入类型为普通赛
						Double dqptsjb = Double.parseDouble(yyptsjb)
								+ Double.parseDouble(mrzj);
						loginUser.setPtsjb(df.format(dqptsjb));
						loginUserService.update(loginUser);
					} else if (cz.equals("0") && mrlx.equals("1")) {
						Double dqsjsjb = Double.parseDouble(yysjsjb)
								+ Double.parseDouble(mrzj);
						loginUser.setSjsjb(df.format(dqsjsjb));
						loginUserService.update(loginUser);
					}
				} else if (mncp.getCz().equals("1")) {
					String wtsl = mncp.getWtsl();
					gpsy nowGpsy = gpsyServiceI.getNowGpsy(userid, zqdm, mrlx);
					if (nowGpsy != null) {
						Double dqcgsl = Double.parseDouble(nowGpsy.getCgsl())
								+ Double.parseDouble(wtsl);
						nowGpsy.setCgsl(df.format(dqcgsl));
						gpsyServiceI.edit(nowGpsy);
						mncp.setCz("2");// 设置为撤销
						mncp.setBz("2");// 设置为撤销备注
						try {
							mncpServiceI.edit(mncp);
						} catch (Exception e) {
							json.put("errorCode", "3");
							json.put("errorMsg", "撤销失败,委托数据已经成交");
							return json;
						}
						
					}
				}

				json.put("errorCode", "0");
				json.put("errorMsg", "撤销成功");
			} else {
				json.put("errorCode", "1");
				json.put("errorMsg", "非法撤销请求");
			}
		} catch (NumberFormatException e) {
			e.printStackTrace();
			logger.error("·················股票撤单数字格式化异常", e);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("·················股票撤单异常", e);
		}
		return json;
	}

}
