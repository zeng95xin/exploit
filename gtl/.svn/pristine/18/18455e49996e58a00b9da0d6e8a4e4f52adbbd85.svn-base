package com.web.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.Jfxhjl;
import com.admin.model.LoginUser;
import com.admin.service.ChestBoxBuyService;
import com.admin.service.ChestBoxEvaluateService;
import com.admin.service.ChestBoxService;
import com.admin.service.HostMainService;
import com.admin.service.JfxhjlfServiceI;
import com.admin.service.LoginUserServiceI;
import com.web.entity.Buyers;
import com.web.entity.ChestBox;
import com.web.entity.ChestBoxBuy;
import com.web.entity.ChestBoxEvaluate;
import com.web.entity.HostMain;
import com.web.exception.BusinessDealException;
import com.web.exception.BusinessValidateException;
import com.web.exception.CodeEnum;
import com.web.exception.PatternException;
import com.web.result.BaseListResult;
import com.web.result.BaseObjectResult;
import com.web.util.TimeUtils;

/**
 * 百宝箱买卖控制器
 * @author Administrator
 *
 */

@Controller
@RequestMapping("/boxBuy")
public class ChestBoxBuyController {
	
	private static final Logger logger = LoggerFactory.getLogger(ChestBoxBuyController.class);
	
	@Autowired
	private ChestBoxBuyService chestBoxBuyService;
	
	@Autowired
	private LoginUserServiceI loginUserServiceI;
	
	@Autowired
	private ChestBoxService chestBoxService;
	
	@Autowired
	private ChestBoxEvaluateService chestBoxEvaluateService;
	
	@Autowired
	private JfxhjlfServiceI jfxhjlfServiceI;
	
	@Autowired
	private HostMainService hostMainService;
	
	/**
	 * 购买百宝箱
	 * @param req
	 * @param chestBox
	 * @return
	 */
	//@RequestMapping(value = "/buy", method = RequestMethod.POST, produces = { MediaType.APPLICATION_JSON_VALUE })
	@RequestMapping(value = "/buy", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseObjectResult<ChestBoxBuy> addBuyBox(HttpServletRequest req,HttpServletResponse res,
			ChestBoxBuy chestBoxBuy) {
		logger.info("购买百宝箱: {}", chestBoxBuy);
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<ChestBoxBuy> baseResult = new BaseObjectResult<ChestBoxBuy>();
		ChestBox cb=new ChestBox();
		LoginUser lg= new LoginUser();
		LoginUser lgu= new LoginUser();
		HostMain hm=new HostMain();
		boolean flag=false;
		boolean flag1=false;
		try {
			// 参数校验
			if (chestBoxBuy == null) {
				throw new PatternException("百宝箱信息不能为空");
			}
			if (StringUtils.isBlank(chestBoxBuy.getBoxID())) {
				throw new PatternException("百宝箱ID不能为空");
			}
			if (StringUtils.isBlank(chestBoxBuy.getBoxBuyerId())) {
				throw new PatternException("购买者Id不能为空");
			}
			flag=chestBoxBuyService.checkBuyer(chestBoxBuy.getBoxID(), chestBoxBuy.getBoxBuyerId());
			flag1=chestBoxBuyService.checkBuyNum(chestBoxBuy.getBoxID());
			if (flag) {
				throw new PatternException("您已经购买了该百宝箱！");
			}
			if (flag1) {
				throw new PatternException("该百宝箱已达购买上限，无法购买！");
			}
			lg=loginUserServiceI.getUser(chestBoxBuy.getBoxBuyerId());
			cb=chestBoxService.get(chestBoxBuy.getBoxID());
			
			if (cb == null ) {
				throw new PatternException("该百宝箱不存在！");
			}else{
				if (StringUtils.isNotBlank(cb.getBoxHome())) {
					chestBoxBuy.setHouseName(cb.getBoxHome());
				}
				if (StringUtils.isNotBlank(cb.getBoxPrice())) {
					chestBoxBuy.setBoxPrice(cb.getBoxPrice());
				}
				if (StringUtils.isNotBlank(cb.getBoxTypeName())) {
					chestBoxBuy.setBoxTypeName(cb.getBoxTypeName());
				}
				if (StringUtils.isNotBlank(cb.getBoxType())) {
					chestBoxBuy.setBoxType(cb.getBoxType());
				}
				if (StringUtils.isNotBlank(cb.getBoxTitle())) {
					chestBoxBuy.setBoxTitle(cb.getBoxTitle());
				}
				if (StringUtils.isNotBlank(cb.getHostMainNickname())) {
					chestBoxBuy.setHostName(cb.getHostMainNickname());
				}
				if (StringUtils.isNotBlank(cb.getBoxServiceBeginTime())) {
					chestBoxBuy.setBoxServiceBeginTime(cb.getBoxServiceBeginTime());
				}
				if (StringUtils.isNotBlank(cb.getBoxServiceEndTime())) {
					chestBoxBuy.setBoxServiceEndTime(cb.getBoxServiceEndTime());
				}
				if (StringUtils.isNotBlank(cb.getBoxIntroduction())) {
					chestBoxBuy.setBoxIntroduction(cb.getBoxIntroduction());
				}
				if (StringUtils.isNotBlank(cb.getBoxHostID())) {
					hm=hostMainService.get(cb.getBoxHostID());
				}
				
			}
			
			if (lg!= null) {
				if (lg.getJifen()<Integer.parseInt(cb.getBoxPrice())) {
					throw new PatternException("用户积分不足！");
				}
				Integer integ=lg.getJifen()-Integer.parseInt(cb.getBoxPrice());
				lg.setJifen(integ);
				loginUserServiceI.update(lg);
				if (StringUtils.isNotBlank(lg.getNickname())) {
					chestBoxBuy.setBoxBuyerNickname(lg.getNickname());
				}
			}else{
				throw new PatternException("用户不存在！");
			}
			
			chestBoxBuy.setBuyTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
			chestBoxBuy.setId(UUID.randomUUID().toString());
			chestBoxBuy.setIsBuy("1");
			chestBoxBuyService.add(chestBoxBuy);
			loginUserServiceI.update(lg);
			
			Jfxhjl jf=new Jfxhjl();
			jf.setResaon("用户购买百宝箱消费");
			jf.setUserid(chestBoxBuy.getBoxBuyerId());
			jf.setWzid(chestBoxBuy.getId());
			jf.setSl("-"+cb.getBoxPrice());
			if (StringUtils.isNotBlank(lg.getUsertype())) {
				jf.setUserType(lg.getUsertype());
			}
			if (StringUtils.isNotBlank(lg.getName())) {
				jf.setUsername(lg.getName());
			}
			if (StringUtils.isNotBlank(lg.getNickname())) {
				jf.setNickname(lg.getNickname());
			}
			jfxhjlfServiceI.add(jf);
			
			if (hm != null) {
				if (StringUtils.isNotBlank(hm.getUserId())) {
					lgu=loginUserServiceI.getUser(hm.getUserId());
					if (lgu != null) {
						if (StringUtils.isNotBlank(cb.getBoxPrice())) {
							lgu.setJifen(lgu.getJifen()+Integer.parseInt(cb.getBoxPrice()));
							loginUserServiceI.update(lgu);
						}

						Jfxhjl jf1=new Jfxhjl();
						jf1.setResaon("百宝箱被订阅！");
						jf1.setUserid(hm.getUserId());
						jf1.setWzid(chestBoxBuy.getId());
						jf1.setSl("+"+cb.getBoxPrice());
						if (StringUtils.isNotBlank(lgu.getUsertype())) {
							jf1.setUserType(lgu.getUsertype());
						}
						if (StringUtils.isNotBlank(lgu.getName())) {
							jf1.setUsername(lgu.getName());
						}
						if (StringUtils.isNotBlank(lgu.getNickname())) {
							jf1.setNickname(lgu.getNickname());
						}
						jfxhjlfServiceI.add(jf1);
					}
				}
			}
			
			baseResult.setErrorCode("0");
			baseResult.setErrorMessage("购买成功！");
			baseResult.setResult(chestBoxBuy);
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<ChestBoxBuy>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<ChestBoxBuy>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<ChestBoxBuy>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<ChestBoxBuy>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
	
	/**
	 * 根据用户ID查询用户的购买的百宝箱
	 * @param req
	 * @param res
	 * @param chestBoxBuy
	 * @return
	 */
	//@RequestMapping(value = "/myBox", method = RequestMethod.POST, produces = { MediaType.APPLICATION_JSON_VALUE })
	@RequestMapping(value = "/myBox", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<ChestBoxBuy> searchBoxByName(HttpServletRequest req,HttpServletResponse res,
			ChestBoxBuy chestBoxBuy,String row ,String page) {
		logger.info("查询百宝箱: {}", chestBoxBuy);
		res.setCharacterEncoding("UTF-8");
		BaseListResult<ChestBoxBuy> baseResult = new BaseListResult<ChestBoxBuy>();
		List<ChestBoxBuy> list =new ArrayList<ChestBoxBuy>();
		List<ChestBoxBuy> list1 =new ArrayList<ChestBoxBuy>();
		
		try {
			// 参数校验
			if (chestBoxBuy == null) {
				throw new PatternException("百宝箱信息不能为空");
			}
			if (StringUtils.isBlank(chestBoxBuy.getBoxBuyerId())) {
				throw new PatternException("用户不能为空");
			}
			
			list=chestBoxBuyService.getByUserId(chestBoxBuy.getBoxBuyerId(), row, page);
			if (list!= null && (list.size() > 0)) {
				for (ChestBoxBuy chestBoxBuy2 : list) {
					ChestBoxEvaluate chest=new ChestBoxEvaluate();
					ChestBox box=new ChestBox();
					chest=chestBoxEvaluateService.getByBoxId(chestBoxBuy2.getBoxID(), chestBoxBuy2.getBoxBuyerId());
					if (chest != null) {
						if (StringUtils.isNotBlank(chest.getBoxEvaluateContext())) {
							chestBoxBuy2.setBoxEvaluateContext(chest.getBoxEvaluateContext());
						}
					}
					box=chestBoxService.get(chestBoxBuy2.getBoxID());
					if (box != null) {
						if (StringUtils.isNotBlank(box.getBoxPrice())) {
							chestBoxBuy2.setBoxDiscountPrice(box.getBoxPrice());
						}
						if (StringUtils.isNotBlank(box.getBoxDiscountPrice())) {
							chestBoxBuy2.setBoxPrice(box.getBoxDiscountPrice());
						}
					}
					list1.add(chestBoxBuy2);
				}
				
			}
			baseResult.setErrorCode("0");
			baseResult.setErrorMessage("查询成功！");
			baseResult.setResult(list1);
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<ChestBoxBuy>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxBuy>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxBuy>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<ChestBoxBuy>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
	/**
	 * 分页获取某个百宝箱的购买者
	 * @param req
	 * @param res
	 * @param chestBoxBuy
	 * @param row
	 * @param page
	 * @return
	 */
	@RequestMapping(value = "/buyers", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<Buyers> getBuers(HttpServletRequest req,HttpServletResponse res,
			ChestBoxBuy chestBoxBuy,String row,String page) {
		logger.info("查询百宝箱的购买者: {}", chestBoxBuy);
		res.setCharacterEncoding("UTF-8");
		BaseListResult<Buyers> baseResult = new BaseListResult<Buyers>();
		List<Buyers> list =new ArrayList<Buyers>();
		
		try {
			req.setCharacterEncoding("UTF-8");
			// 参数校验
			if (chestBoxBuy == null) {
				throw new PatternException("百宝箱信息不能为空");
			}
			if (StringUtils.isBlank(chestBoxBuy.getBoxID())) {
				throw new PatternException("百宝箱ID不能为空");
			}
			
			list=chestBoxBuyService.getBuserByBoxId(chestBoxBuy.getBoxID(), row, page);
			//if (list!= null && (list.size() > 0)) {
				
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("查询成功！");
				baseResult.setResult(list);
			/*}else{
				
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("未有人购买百宝箱！");
				baseResult.setResult(list);
			}*/
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<Buyers>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<Buyers>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<Buyers>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<Buyers>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
	/**
	 * 检测用户是否购买了该百宝箱
	 * @param req
	 * @param res
	 * @param chestBoxBuy
	 * @return
	 */
	@RequestMapping(value = "/check", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseObjectResult<ChestBoxBuy> checkBuyBox(HttpServletRequest req,HttpServletResponse res,
			ChestBoxBuy chestBoxBuy) {
		logger.info("检测用户是否购买了该百宝箱: {}", chestBoxBuy);
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<ChestBoxBuy> baseResult = new BaseObjectResult<ChestBoxBuy>();
		ChestBox cb=new ChestBox();
		LoginUser lg= new LoginUser();
		
		boolean flag=false;
		try {
			// 参数校验
			if (chestBoxBuy == null) {
				throw new PatternException("百宝箱信息不能为空");
			}
			if (StringUtils.isBlank(chestBoxBuy.getBoxID())) {
				throw new PatternException("百宝箱ID不能为空");
			}
			if (StringUtils.isBlank(chestBoxBuy.getBoxBuyerId())) {
				throw new PatternException("购买者Id不能为空");
			}
			lg=loginUserServiceI.getUser(chestBoxBuy.getBoxBuyerId());
			cb=chestBoxService.get(chestBoxBuy.getBoxID());
			
			if (cb == null ) {
				throw new PatternException("该百宝箱不存在！");
			}
			
			if (lg == null) {
				throw new PatternException("用户不存在！");
			}
			 
			flag=chestBoxBuyService.checkBuyer(chestBoxBuy.getBoxID(), chestBoxBuy.getBoxBuyerId());
			if (flag) {
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("您已经订阅了该百宝箱！");
				//baseResult.setResult(chestBoxBuy);
			}else{
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("您还未订阅该百宝箱！");
				//baseResult.setResult(chestBoxBuy);
			}
			
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<ChestBoxBuy>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<ChestBoxBuy>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<ChestBoxBuy>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<ChestBoxBuy>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
	}
	
}
