package com.web.controller;


import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.Jfxhjl;
import com.admin.model.LoginUser;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.service.GiftService;
import com.admin.service.HostMainService;
import com.admin.service.JfxhjlfServiceI;
import com.admin.service.LogServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.service.SendGiftService;
import com.web.entity.Gift;
import com.web.entity.HostMain;
import com.web.entity.SendGift;
import com.web.exception.BusinessDealException;
import com.web.exception.BusinessValidateException;
import com.web.exception.CodeEnum;
import com.web.exception.PatternException;
import com.web.result.BaseListResult;
import com.web.result.BaseObjectResult;
import com.web.util.TimeUtils;

/**
 * 送礼物控制器
 * @author Administrator
 *
 */
@Controller
@RequestMapping("/giftSend")
public class GiftSendCotroller {

private static final Logger logger = LoggerFactory.getLogger(GiftSendCotroller.class);
	
	@Autowired
	private LogServiceI logService;
	
	@Autowired
	private SendGiftService sendGiftService;
	
	@Autowired
	private LoginUserServiceI loginUserServiceI;
	
	@Autowired
	private HostMainService hostMainService;
	
	@Autowired
	private GiftService giftService;
	
	@Autowired
	private JfxhjlfServiceI jfxhjlfServiceI;
	
	/**
	 * 送礼物管理
	 * @return
	 */
	@RequestMapping("/manager")
	public String manager() {
		return "/admin/gift/sendGiftManagement";
	}
	
	/**
	 * 获取送礼物列表
	 * 
	 * @param p
	 * @param ph
	 * @return
	 */
	@RequestMapping("/dataGrid")
	@ResponseBody
	public DataGrid dataGrid(SendGift p, PageHelper ph) {
		
		return sendGiftService.dataGrid(p, ph);
	}
	
	/**
	 * 新增送礼物
	 * @param res
	 * @param sendGift
	 * @return
	 */
	@RequestMapping(value = "/add", method = {RequestMethod.GET , RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseObjectResult<String> addGiftSend(HttpServletResponse res,SendGift sendGift) {

		logger.info("新增送礼: {}", sendGift);
		
		res.setCharacterEncoding("UTF-8");
		BaseObjectResult<String> baseResult = new BaseObjectResult<String>();
		//SendGift sg=new SendGift();
		LoginUser lg=new LoginUser();
		LoginUser lgh=new LoginUser();
		HostMain hm=new HostMain();
		Gift gift=new Gift();
		try {
			if (sendGift == null) {
				throw new PatternException("送礼信息为空");
			}
			if (StringUtils.isBlank(sendGift.getGiftId())) {
				throw new PatternException("礼物信息不能为空");
			}
			if (StringUtils.isBlank(sendGift.getSendUserID())) {
				throw new PatternException("送礼者信息不能为空");
			}
			if (StringUtils.isBlank(sendGift.getReceivedUserId())) {
				throw new PatternException("受礼者信息不能为空");
			}
			lg=loginUserServiceI.getUser(sendGift.getSendUserID());
			hm=hostMainService.get(sendGift.getReceivedUserId());
			gift=giftService.get(sendGift.getGiftId());
			if (gift != null) {
				if (StringUtils.isNotBlank(gift.getGiftName())) {
					sendGift.setGiftName(gift.getGiftName());
				}
				if (StringUtils.isNotBlank(gift.getGiftImage())) {
					sendGift.setGiftImage(gift.getGiftImage());
				}
				
					sendGift.setGiftPrice(gift.getGiftPrice());
				
				
			} else {
				throw new PatternException("礼物不存在！");
			}
			if (lg != null) {
				if (lg.getJifen() < (gift.getGiftPrice()*sendGift.getGiftNum())) {
					throw new PatternException("用户积分不足！");
				}
				Double dou=lg.getJifen()-(gift.getGiftPrice()*sendGift.getGiftNum());
				lg.setJifen(dou.intValue());
				loginUserServiceI.update(lg);
				if (StringUtils.isNotBlank(lg.getNickname())) {
					sendGift.setSendUserNmae(lg.getNickname());
				}
				if (StringUtils.isNotBlank(lg.getTx())) {
					sendGift.setSendUserImage(lg.getTx());
				}
			} else {
				throw new PatternException("用户不存在！");
			}
			if (hm != null) {
				if (StringUtils.isNotBlank(hm.getHostNickname())) {
					sendGift.setReceivedUserName(hm.getHostNickname());
				}
				
			} else {
				throw new PatternException("主播不存在！");
			}
			
			sendGift.setAllPrice(gift.getGiftPrice()*sendGift.getGiftNum());
			sendGift.setSendTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));
			//BeanUtils.copyProperties(sendGift, sg);
			sendGift.setSendGiftId(UUID.randomUUID().toString());
			sendGiftService.add(sendGift);
			
			Jfxhjl jf=new Jfxhjl();
			jf.setResaon("用户送礼物消费");
			jf.setUserid(sendGift.getSendUserID());
			jf.setWzid(sendGift.getSendGiftId());
			//jf.setSl("-"+Integer.parseInt(sendGift.getAllPrice().toString()));
			jf.setSl("-"+sendGift.getAllPrice().intValue());
			if (StringUtils.isNotBlank(lg.getUsertype())) {
				jf.setUserType(lg.getUsertype());
			}
			if (StringUtils.isNotBlank(lg.getName())) {
				jf.setUsername(lg.getName());
			}
			if (StringUtils.isNotBlank(lg.getNickname())) {
				jf.setNickname(lg.getNickname());
			}
			jfxhjlfServiceI.add(jf);
			
			if (hm != null) {
				if (StringUtils.isNotBlank(hm.getUserId())) {
					lgh=loginUserServiceI.getUser(hm.getUserId());
					
					if (lgh != null) {
						lgh.setJifen(lgh.getJifen()+sendGift.getAllPrice().intValue());
						loginUserServiceI.update(lgh);
						
						Jfxhjl jfh=new Jfxhjl();
						jfh.setResaon("收到用户送礼物");
						jfh.setUserid(sendGift.getSendUserID());
						jfh.setWzid(sendGift.getSendGiftId());
						//jfh.setSl("+"+Integer.parseInt(sendGift.getAllPrice().toString()));
						jfh.setSl("+"+sendGift.getAllPrice().intValue());
						if (StringUtils.isNotBlank(lgh.getUsertype())) {
							jfh.setUserType(lgh.getUsertype());
						}
						if (StringUtils.isNotBlank(lgh.getName())) {
							jfh.setUsername(lgh.getName());
						}
						if (StringUtils.isNotBlank(lgh.getNickname())) {
							jfh.setNickname(lgh.getNickname());
						}
						jfxhjlfServiceI.add(jfh);
					}
				}
			}
			
			baseResult = new BaseObjectResult<String>("0", "送礼成功");
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseObjectResult<String>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<String>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseObjectResult<String>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseObjectResult<String>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}
	/**
	 * 分页获取某主播收到的礼物
	 * @param req
	 * @param res
	 * @param sendGift
	 * @param row
	 * @param page
	 * @return
	 */
	@RequestMapping(value = "/hostGift", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<SendGift> getHostGift(HttpServletRequest req,HttpServletResponse res,SendGift sendGift,String row,String page) {

		logger.info("获取该主播收到的礼物: {}",sendGift);
		res.setCharacterEncoding("UTF-8");
		BaseListResult<SendGift> baseResult = new BaseListResult<SendGift>();
		List<SendGift> listCare = new ArrayList<SendGift>();
		try {
			
			if (sendGift == null) {
				throw new PatternException("关注信息不能为空");
			}
			/*if (StringUtils.isBlank(mycare.getUserId())) {
				throw new PatternException("用户ID不能为空");
			}*/
			
			if (StringUtils.isBlank(sendGift.getReceivedUserId())) {
				throw new PatternException("主播ID不能为空");
			}
			
			listCare=sendGiftService.getByHostId(sendGift.getReceivedUserId(), row, page);
			//if ((listCare != null) && (listCare.size() > 0)) {
				
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("查询成功");
				baseResult.setResult(listCare);
		/*	} else {
				
				
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("您还未收到礼物!");
				baseResult.setResult(listCare);
			}*/
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<SendGift>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<SendGift>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<SendGift>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<SendGift>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}
	/**
	 * 根据用户ID分页查询送出去的礼物
	 * @param req
	 * @param res
	 * @param sendGift
	 * @param row
	 * @param page
	 * @return
	 */
	@RequestMapping(value = "/userGift", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<SendGift> getUserGift(HttpServletRequest req,HttpServletResponse res,SendGift sendGift,String row,String page) {

		logger.info("获取该用户送出的礼物: {}",sendGift);
		res.setCharacterEncoding("UTF-8");
		BaseListResult<SendGift> baseResult = new BaseListResult<SendGift>();
		List<SendGift> listCare = new ArrayList<SendGift>();
		try {
			
			if (sendGift == null) {
				throw new PatternException("关注信息不能为空");
			}
			if (StringUtils.isBlank(sendGift.getSendUserID())) {
				throw new PatternException("用户ID不能为空");
			}
			
			/*if (StringUtils.isBlank(sendGift.getReceivedUserId())) {
				throw new PatternException("主播ID不能为空");
			}*/
			
			listCare=sendGiftService.getByUserId(sendGift.getSendUserID(), row, page);
			//if ((listCare != null) && (listCare.size() > 0)) {
				
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("查询成功");
				baseResult.setResult(listCare);
			/*} else {
				
				
				baseResult.setErrorCode("1");
				baseResult.setErrorMessage("您可以选择主播开始送礼啦!");
				baseResult.setResult(listCare);
			}
			*/
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<SendGift>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<SendGift>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<SendGift>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<SendGift>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}
	
	/**
	 * 粉丝排行中点击某粉丝，分页查询该粉丝对某主播的送礼详情
	 * @param req
	 * @param res
	 * @param sendGift
	 * @param row
	 * @param page
	 * @return
	 */
	@RequestMapping(value = "/uhGift", method = {RequestMethod.GET,RequestMethod.POST}, produces = { MediaType.APPLICATION_JSON_VALUE })
	@ResponseBody
	public BaseListResult<SendGift> getUserHostGift(HttpServletRequest req,HttpServletResponse res,SendGift sendGift,String row,String page) {

		logger.info("获取该主播收到该粉丝的礼物: {}",sendGift);
		res.setCharacterEncoding("UTF-8");
		BaseListResult<SendGift> baseResult = new BaseListResult<SendGift>();
		List<SendGift> listCare = new ArrayList<SendGift>();
		try {
			
			if (sendGift == null) {
				throw new PatternException("关注信息不能为空");
			}
			if (StringUtils.isBlank(sendGift.getSendUserID())) {
				throw new PatternException("用户ID不能为空");
			}
			
			if (StringUtils.isBlank(sendGift.getReceivedUserId())) {
				throw new PatternException("主播ID不能为空");
			}
			
			listCare=sendGiftService.getByUserIdAndHostId(sendGift.getReceivedUserId(), sendGift.getSendUserID(), row, page);
			//if ((listCare != null) && (listCare.size() > 0)) {
				
				baseResult.setErrorCode("0");
				baseResult.setErrorMessage("查询成功");
				baseResult.setResult(listCare);
			//} 
			
		} catch (PatternException e) {
			//System.out.println("参数校验失败," + e.getMessage());
			baseResult = new BaseListResult<SendGift>(
					CodeEnum.PATTERN_ERROR.getCode(), e.getMessage());
		} catch (BusinessDealException e) {
			//System.out.println("业务处理异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<SendGift>(
					CodeEnum.BUSSINESS_HANDLE_ERROR.getCode(), e.getMessage());
		} catch (BusinessValidateException e) {
			//System.out.println("业务验证异常， 错误信息：" + e.getMessage());
			baseResult = new BaseListResult<SendGift>(
					CodeEnum.BUSSINESS_VALIDATE_ERROR.getCode(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			//System.out.println("系统异常，" + e.getMessage());
			baseResult = new BaseListResult<SendGift>(
					CodeEnum.SYSTEM_ERROR.getCode(), "系统异常");
		}
		return baseResult;
		
	}
}
