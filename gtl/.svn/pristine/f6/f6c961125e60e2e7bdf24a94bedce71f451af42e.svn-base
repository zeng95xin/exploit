package com.admin.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.admin.dao.GxtDaoI;
import com.admin.dao.RmgpDaoI;
import com.admin.dao.RoleDaoI;
import com.admin.dao.UserDaoI;
import com.admin.dao.WebDaoI;
import com.admin.model.Rmgp;
import com.admin.model.Tgxt;
import com.admin.model.Tresource;
import com.admin.model.Trole;
import com.admin.model.Tuser;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.pageModel.User;
import com.admin.service.GxtServiceI;
import com.admin.service.RmgpServiceI;
import com.admin.service.UserServiceI;
import com.admin.service.WebServiceI;
import com.admin.util.MD5Util;
import com.web.entity.Person;
import com.web.util.PageModel;
import com.web.util.TimeUtils;

@Service
public class RmgpServiceImpl implements RmgpServiceI {

	@Autowired
	private WebDaoI dao;

	@Autowired
	private RmgpDaoI rmgpDaoI;

	@Override
	public DataGrid dataGridForOne(Rmgp g, PageHelper ph) {
		DataGrid dg = new DataGrid();
		List<Rmgp> ul = new ArrayList<Rmgp>();
		Map<String, Object> params = new HashMap<String, Object>();
		String hql = " from Rmgp t ";
		List<Rmgp> l = rmgpDaoI.find(hql + whereHqlForOne(g, params)
				+ orderHql(ph), params, ph.getPage(), ph.getRows());
		if (l != null && l.size() > 0) {
			for (Rmgp t : l) {
				Rmgp u = new Rmgp();
				BeanUtils.copyProperties(t, u);
				ul.add(u);
			}
		}
		dg.setRows(ul);
		dg.setTotal(dao.count(
				"select count(*) " + hql + whereHqlForOne(g, params), params));
		return dg;
	}

	/**
	 * where 条件封装
	 * 
	 * @param p
	 * @param params
	 * @return
	 */
	private String whereHqlForOne(Rmgp g, Map<String, Object> params) {
		String hql = "";
		if (g != null) {
			hql += " where 1=1 ";
			if (StringUtils.isNotBlank(g.getName())) {
				hql += " and t.name like :name";
				params.put("name", "%%" + g.getName() + "%%");
			}
			if (StringUtils.isNotBlank(g.getCode())) {
				hql += " and t.code =:code";
				params.put("code", g.getCode());
			}

		}
		return hql;
	}

	/**
	 * 排序条件
	 * 
	 * @param ph
	 * @return
	 */
	private String orderHql(PageHelper ph) {
		String orderString = "  order by searchTimes desc";
		/*
		 * if (ph.getSort() != null && ph.getOrder() != null) { orderString =
		 * " order by t." + ph.getSort() + " " + ph.getOrder(); }
		 */
		return orderString;
	}

	@Override
	public void delete(String id) {
		rmgpDaoI.delete(rmgpDaoI.get(Rmgp.class, id));
	}

	@Override
	synchronized public void add(Rmgp p) throws Exception {
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put("gxttitel", p.getGxttitel());
		p.setId(UUID.randomUUID().toString());

		rmgpDaoI.save(p);

	}

	@Override
	public Person get(String id) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		Person t = dao.get("select distinct t from Person t  where t.id = :id",
				params);
		Person u = new Person();
		BeanUtils.copyProperties(t, u);
		return u;
	}

	@Override
	public Rmgp getRmgp(String code) {

		Map<String, Object> params = new HashMap<String, Object>();
		params.put("code", code);
		Rmgp r = rmgpDaoI.get(
				"select distinct t from Rmgp t  where t.code = :code", params);
		return r;
	}

	@Override
	public String edit(Rmgp rg) throws Exception {
		Rmgp r = rmgpDaoI.get(Rmgp.class, rg.getId());
		r.setChat(rg.getChat());
		r.setCode(rg.getCode());
		r.setName(rg.getName());
		r.setSearchTimes(rg.getSearchTimes() + 1);
		rmgpDaoI.update(r);
		return "1";
	}

	@Override
	public void update(Rmgp p) throws Exception {
		rmgpDaoI.update(p);
	}

	@Override
	public List<Rmgp> getList() {
		String hql = "from Rmgp where 1=1 ";
		hql += " order by searchTimes desc ";
		List<Rmgp> list = rmgpDaoI.find(hql);
		return list;
	}

	String[] excelHeader = { "标题", "分类", "发布者", "发布时间" };

	@Override
	public HSSFWorkbook export(List<Rmgp> list) {
		HSSFWorkbook wb = new HSSFWorkbook();
		HSSFSheet sheet = wb.createSheet("Rmgp");
		HSSFRow row = sheet.createRow((int) 0);
		HSSFCellStyle style = wb.createCellStyle();
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);

		for (int i = 0; i < excelHeader.length; i++) {
			HSSFCell cell = row.createCell(i);
			cell.setCellValue(excelHeader[i]);
			cell.setCellStyle(style);
			sheet.autoSizeColumn(i);
		}

		for (int i = 0; i < list.size(); i++) {
			row = sheet.createRow(i + 1);
			Rmgp p = list.get(i);
			row.createCell(0).setCellValue(p.getCode());
			row.createCell(1).setCellValue(p.getName());
			row.createCell(2).setCellValue(p.getSearchTimes());
		}
		return wb;
	}

	@Override
	public int getCount(String fl) {
		String hql = "select count(*) from Rmgp where 1=1 ";
		if (StringUtils.isNotBlank(fl)) {
			hql = " and code='" + fl + "'";
		}
		return rmgpDaoI.count(hql).intValue();
	}

}
