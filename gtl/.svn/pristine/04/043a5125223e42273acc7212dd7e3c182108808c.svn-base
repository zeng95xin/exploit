package com.admin.service.baseImpl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;

import com.admin.dao.BaseDaoI;
import com.admin.service.base.BaseServiceI;

public class BaseServiceImpl<T> implements BaseServiceI<T>{
	
	@Autowired protected BaseDaoI<T> baseDaoI;
	
	@Override
	public Serializable save(T o) {
		return baseDaoI.save(o);
	}

	@Override
	public void delete(T o) {
		baseDaoI.delete(o);
	}

	@Override
	public void update(T o) {
		baseDaoI.update(o);
	}

	@Override
	public void saveOrUpdate(T o) {
		baseDaoI.saveOrUpdate(o);
	}

	@Override
	public T get(Class<T> c, Serializable id) {
		return baseDaoI.get(c, id);
	}

	@Override
	public T get(String hql) {
		return baseDaoI.get(hql);
	}

	@Override
	public T get(String hql, Map<String, Object> params) {
		return baseDaoI.get(hql, params);
	}

	@Override
	public List<T> find(String hql) {
		return baseDaoI.find(hql);
	}

	@Override
	public List<T> find(String hql, Map<String, Object> params) {
		return baseDaoI.find(hql, params);
	}
	
	@Override
	public int count(String hql, Map<String, Object> params) {
		return baseDaoI.count(hql, params).intValue();
	}
	
	@Override
	public double sumDouble(String hql, Map<String, Object> params) {
		return baseDaoI.sumDouble(hql, params);
	}

	@Override
	public List<T> find(String hql, int page, int rows) {
		return baseDaoI.find(hql,page,rows);
	}

	@Override
	public List<T> find(String hql, Map<String, Object> params, int page,
			int rows) {
		return baseDaoI.find(hql, params, page, rows);
	}
	
	@Override
	public List<Object[]> findBySql(String sql, Map<String, Object> params) {
		return baseDaoI.findBySql(sql, params);
	}
	
	@Override
	public <E>List<E> findBySqlBuildObject(String sql, Map<String, Object> params, Class<E> transformersClass, Integer page, Integer rows){
		return baseDaoI.findBySqlBuildObject(sql, params, transformersClass, page, rows);
	}
	
	@Override
	public <E>E findBySqlBuildObjectOne(String sql, Map<String, Object> params, Class<E> transformersClass){
		return baseDaoI.findBySqlBuildObjectOne(sql, params, transformersClass);
	}

	@Override
	public int countBySql(String sql, Map<String, Object> params) {
		return baseDaoI.countBySql(sql, params).intValue();
	}
	
}
