package com.admin.controller;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import jxl.write.WritableWorkbook;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.aspectj.weaver.NewParentTypeMunger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.admin.model.Log;
import com.admin.model.LoginUser;
import com.admin.model.TczdXz;
import com.admin.model.Tgsdz;
import com.admin.model.Tgxt;
import com.admin.pageModel.DataGrid;
import com.admin.pageModel.Json;
import com.admin.pageModel.PageHelper;
import com.admin.pageModel.SessionInfo;
import com.admin.service.CzdServiceI;
import com.admin.service.GqbServiceI;
import com.admin.service.GxtServiceI;
import com.admin.service.LogServiceI;
import com.admin.service.LoginUserServiceI;
import com.admin.util.ConfigUtil;
import com.admin.util.InfoUtil;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.web.entity.Person;
import com.web.util.TimeUtils;

@Controller
@RequestMapping("/gqb")
public class GqbController extends BaseController {
	@Autowired
	private GqbServiceI gqbServiceI;

	@Autowired
	private LogServiceI logService;

	@Autowired
	private CzdServiceI czdServiceI;

	private LoginUserServiceI loginUserService;

	WritableWorkbook book = null;

	/**
	 * 跳转到页面
	 * 
	 * @return
	 */
	@RequestMapping("/index")
	public String manager() {
		// 每天的date时刻执行task, 仅执行一次
		// timer.schedule(task, date);
		return "/page/index";

	}

	@RequestMapping("/gqbAdd")
	public String gqbAdd(HttpServletRequest request,
			HttpServletResponse response, ModelMap modelMap) throws Exception {
		String fl = request.getParameter("fl");
		request.setAttribute("fl", fl);
		return "/admin/gqb/gqbAdd";
	}

	/**
	 * 跳转到段子列表页面
	 * 
	 * @return
	 */
	@RequestMapping("/gqb")
	public String gqb(HttpServletRequest request, HttpServletResponse response,
			ModelMap modelMap) throws Exception {

		return "/admin/gqb/gsdz";
	}

	/**
	 * 跳转到甘甜股市列表页面
	 * 
	 * @return
	 */
	@RequestMapping("/gtgs")
	public String gtgs(HttpServletRequest request,
			HttpServletResponse response, ModelMap modelMap) throws Exception {

		return "/admin/gqb/gtgs";
	}

	/**
	 * 跳转到股道情歌列表页面
	 * 
	 * @return
	 */
	@RequestMapping("/gdqg")
	public String gdqg(HttpServletRequest request,
			HttpServletResponse response, ModelMap modelMap) throws Exception {

		return "/admin/gqb/gdqg";
	}

	/**
	 * 跳转到趣味小图列表页面
	 * 
	 * @return
	 */
	@RequestMapping("/qwxt")
	public String qwxt(HttpServletRequest request,
			HttpServletResponse response, ModelMap modelMap) throws Exception {

		return "/admin/gqb/qwxt";
	}

	/**
	 * 跳转到有趣视频列表页面
	 * 
	 * @return
	 */
	@RequestMapping("/yqsp")
	public String yqsp(HttpServletRequest request,
			HttpServletResponse response, ModelMap modelMap) throws Exception {

		return "/admin/gqb/yqsp";
	}

	/**
	 * 跳转到股趣吧猜涨跌列表页面
	 * 
	 * @return
	 */
	@RequestMapping("/czd")
	public String czd(HttpServletRequest request, HttpServletResponse response,
			ModelMap modelMap) throws Exception {

		return "/admin/gqb/gqbczd";
	}
	
	@RequestMapping("/zdzy")
	public String zdzy(HttpServletRequest request, HttpServletResponse response,
			ModelMap modelMap) throws Exception {

		return "/admin/gqb/gszdzy";
	}

	/**
	 * 获取股趣吧段子数据表格
	 * 
	 * @param user
	 * @return
	 */
	@RequestMapping("/dataGrid")
	@ResponseBody
	public DataGrid dataGrid(Tgsdz g, PageHelper ph, String qublb) {
		String lb = null;

		if ("1".equals(qublb)) {
			lb = "股市段子";
		} else if ("2".equals(qublb)) {
			lb = "甘甜股事";
		} else if ("3".equals(qublb)) {
			lb = "股道情歌";
		} else if ("4".equals(qublb)) {
			lb = "趣味小图";
		} else if ("5".equals(qublb)) {
			lb = "有趣视频";
		}

		g.setQublb(lb);
		return gqbServiceI.dataGridForOne(g, ph);
	}
	
	/**
	 *股取吧置顶或者主页列表展示
	 * @param g
	 * @param ph
	 * @return
	 */
	@RequestMapping("/dataGriddy")
	@ResponseBody
	public DataGrid dataGriddy(Tgsdz g, PageHelper ph) {
		
		return gqbServiceI.dataGridForTwo(g, ph);
	}

	/**
	 * 获取股 猜涨跌数据表格
	 * 
	 * @param user
	 * @return
	 */
	@RequestMapping("/czddataGrid")
	@ResponseBody
	public DataGrid czddataGrid(TczdXz g, PageHelper ph) {

		return gqbServiceI.czdDataGridForOne(g, ph);
	}

	/**
	 * 删除记录
	 * 
	 * @param id
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/delete")
	@ResponseBody
	public Json delete(String id, HttpSession session,
			HttpServletRequest request) throws Exception {
		SessionInfo sessionInfo = (SessionInfo) session.getAttribute(ConfigUtil
				.getSessionInfoName());
		Json j = new Json();
		if (id != null && !id.equalsIgnoreCase(sessionInfo.getId())) {// 不能删除自己
			gqbServiceI.delete(id);
		}
		j.setMsg("删除成功！");

		Log log = new Log();
		log.setType("delete");// 操作描述
		log.setAuthor(InfoUtil.getUser(session));// 操作员
		log.setIp(InfoUtil.getIpAddr(request));// ip
		log.setTteble("t_gsdz");// 操作的表
		log.setTid(id);// 操作的ID
		log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
		logService.add(log);
		j.setSuccess(true);
		return j;
	}

	/**
	 * 跳转到添加用户页面
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/addgxtPage")
	public String addgxtPage(HttpServletRequest request) {
		return "/admin/gxt/addgxtPage";
	}

	/**
	 * 添加
	 * 
	 * @return
	 */
	@RequestMapping("/add")
	@ResponseBody
	public Json add(Tgsdz p, HttpServletRequest request, HttpSession session) {
		Json j = new Json();
		try {
			if (p.getQublb().equals("1")) {
				p.setQublb("股市段子");
			} else if (p.getQublb().equals("2")) {
				p.setQublb("甘甜股事");
			} else if (p.getQublb().equals("3")) {
				p.setQublb("股道情歌");
			} else if (p.getQublb().equals("4")) {
				p.setQublb("趣味小图");
			} else if (p.getQublb().equals("5")) {
				p.setQublb("有趣视频");
			}
			gqbServiceI.add(p);
			j.setSuccess(true);
			j.setMsg("添加成功！");
			j.setObj(p);

			Log log = new Log();
			log.setType("add");// 操作描述
			log.setAuthor(InfoUtil.getUser(session));// 操作员
			log.setIp(InfoUtil.getIpAddr(request));// ip
			log.setTteble("t_gsdz");// 操作的表
			log.setTid(p.getId());// 操作的ID
			log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
			logService.add(log);
			j.setSuccess(true);
		} catch (Exception e) {
			// e.printStackTrace();
			j.setMsg(e.getMessage());
		}
		return j;
	}

	/**
	 * 跳转修改页面
	 * 
	 * @return
	 */
	@RequestMapping("/editPage")
	public String editPage(HttpServletRequest request, String id) {
		Tgsdz u = gqbServiceI.get(id);
		request.setAttribute("Tgsdz", u);
		return "/admin/gqb/gqbEdit";// 页面还没写
	}

	/**
	 * 更新股去吧类容
	 * 
	 * @param user
	 * @return
	 */
	@RequestMapping("/edit")
	@ResponseBody
	public Json edit(Tgsdz p, HttpServletRequest request, HttpSession session) {
		Json j = new Json();
		try {
			if (p.getQublb().equals("1")) {
				p.setQublb("股市段子");
			} else if (p.getQublb().equals("2")) {
				p.setQublb("甘甜股事");
			} else if (p.getQublb().equals("3")) {
				p.setQublb("股道情歌");
			} else if (p.getQublb().equals("4")) {
				p.setQublb("趣味小图");
			} else if (p.getQublb().equals("5")) {
				p.setQublb("有趣视频");
			}
			gqbServiceI.edit(p);
			j.setSuccess(true);
			j.setMsg("编辑成功！");
			j.setObj(p);

			Log log = new Log();
			log.setType("update");// 操作描述
			log.setAuthor(InfoUtil.getUser(session));// 操作员
			log.setIp(InfoUtil.getIpAddr(request));// ip
			log.setTteble("t_gsdz");// 操作的表
			log.setTid(p.getId());// 操作的ID
			log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
			logService.add(log);
			j.setSuccess(true);
		} catch (Exception e) {
			// e.printStackTrace();
			j.setMsg(e.getMessage());
		}

		return j;
	}

	/**
	 * 批量删除记录
	 * 
	 * @param ids
	 *            ('0','1','2')
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/batchDelete")
	@ResponseBody
	public Json batchDelete(String ids, HttpSession session,
			HttpServletRequest request) throws Exception {
		Json j = new Json();
		if (ids != null && ids.length() > 0) {
			for (String id : ids.split(",")) {
				if (id != null) {
					this.delete(id, session, request);
				}
			}
		}
		j.setMsg("批量删除成功！");
		j.setSuccess(true);
		return j;
	}
	
	/**
	 * 取消置顶和主页推荐
	 * @param id
	 * @param session
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/deleteZY")
	@ResponseBody
	public Json deleteZY(String id, HttpSession session,
			HttpServletRequest request) throws Exception {
		/*SessionInfo sessionInfo = (SessionInfo) session.getAttribute(ConfigUtil
		.getSessionInfoName());*/
		Json j = new Json();
		//if (id != null && !id.equalsIgnoreCase(sessionInfo.getId())) {// 不能删除自己
		if(StringUtils.isNotBlank(id)){
			gqbServiceI.deleteZY(id);
		}
		j.setMsg("取消成功！");

		Log log = new Log();
		log.setType("update");// 操作描述
		log.setAuthor(InfoUtil.getUser(session));// 操作员
		log.setIp(InfoUtil.getIpAddr(request));// ip
		log.setTteble("t_gsdz");// 操作的表
		log.setTid(id);// 操作的ID
		log.setTime(TimeUtils.getTime("yyyy-MM-dd HH:mm:ss"));// 修改时间
		logService.add(log);
		j.setSuccess(true);
		return j;
	}
	
	/**
	 * 批量取消置顶和主页推荐
	 * @param ids
	 * @param session
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/batchDeleteZY")
	@ResponseBody
	public Json batchDeleteZY(String ids, HttpSession session,
			HttpServletRequest request) throws Exception {
		Json j = new Json();
		if (ids != null && ids.length() > 0) {
			for (String id : ids.split(",")) {
				if (id != null) {
					this.deleteZY(id, session, request);
				}
			}
		}
		j.setMsg("批量取消成功！");
		j.setSuccess(true);
		return j;
	}

	/***
	 * 猜涨跌结算
	 * 
	 * @return
	 * @throws Exception
	 */
	public JSONObject czdjs() throws Exception {

		JSONObject json = new JSONObject();
		JSONArray arr = new JSONArray();
		String timeTp = TimeUtils.getTime("yyyyMMdd") + "152900";
		TczdXz tczdXz = null;
		LoginUser loginUser = null;

		List<TczdXz> czdList = gqbServiceI.getCzdList(); // 获取猜涨跌下注list
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < czdList.size(); i++) {
			tczdXz = (TczdXz) czdList.get(i);
			String xzdm = tczdXz.getCzdxzdm(); // 下注代码
			sb.append(xzdm).append(",");
		}
		String stocks = sb.toString();
		if (stocks.length() > 0) {
			stocks = stocks.substring(0, stocks.length() - 1); // 去除拼装StringBuffer的最后一个逗号
		}
		// 获取积分奖励概率

		// 统一请求接口数据
		URL u = new URL("http://route.showapi.com/131-46?showapi_appid=6127"
				+ "&showapi_timestamp=" + timeTp + "&stocks=" + stocks
				+ "&needIndex=1&showapi_sign=a28416fd6ff14246b4783026128a6f83");
		InputStream in = u.openStream();
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		try {
			byte buf[] = new byte[1024];
			int read = 0;
			while ((read = in.read(buf)) > 0) {
				out.write(buf, 0, read);
			}
		} finally {
			if (in != null) {
				in.close();
			}
		}
		byte b[] = out.toByteArray();

		JSONObject jsonJg = JSON.parseObject(new String(b, "utf-8")); // 将json结果转换成jsonObject
		for (int k = 0; k < czdList.size(); k++) {
			JSONObject j = new JSONObject();
			tczdXz = (TczdXz) czdList.get(k);
			String xzlx = tczdXz.getCzdxzlx(); // 猜涨跌下注类型
			String ccd = tczdXz.getCcd(); // 猜涨点
			Integer xzjf = Integer.parseInt(tczdXz.getXzjf());
			String userid = tczdXz.getUserid();
			String code = tczdXz.getCzdxzdm(); // 下注代码
			loginUser = loginUserService.getLoginUser(userid);
			Integer nowJf = loginUser.getJifen(); // 用户现有积分
			JSONObject showBody = jsonJg.getJSONObject("showapi_res_body"); // 获取到大盘指数结果集
			if ("01".equals(xzlx)) {// 猜测为大盘
				JSONArray indexList = showBody.getJSONArray("indexList"); // 获取大盘数组数据
				for (int n = 0; n < indexList.size(); n++) {
					JSONObject jg_k = indexList.getJSONObject(n);
					if (jg_k.getString("code").equals(code)) {
						// String yestodayClosePrice =
						// jg_k.getString("yestodayClosePrice"); // 昨天收盘价
						Float jrClosePrice = Float.parseFloat(jg_k
								.getString("nowPrice")); // 今日收盘价\
						Float ds = Float.parseFloat(ccd); // 猜测点
						Float wcz = ds - jrClosePrice; // 误差值
						if (Math.abs(wcz) >= 0 || Math.abs(wcz) <= 10) { // 如果误差值在10个点之内算猜中
							// 更新猜涨跌数据（积分、状态）
							String jljf = String.valueOf(xzjf * 2);// 奖励积分
							tczdXz.setFhjf(jljf);
							tczdXz.setCdzt("01");// 猜测状态：//01 猜中，02 未猜中，03 未结算
							czdServiceI.edit(tczdXz); // 更新猜涨跌列表

							Integer jsjf = nowJf + Integer.parseInt(jljf); // 结算后积分
							loginUser.setJifen(jsjf);
							loginUserService.update(loginUser); // 更新用户积分
						} else {
							tczdXz.setFhjf("0");
							tczdXz.setCdzt("02");// 猜测状态：//01 猜中，02 未猜中，03 未结算
							czdServiceI.edit(tczdXz);
						}

					}

				}
				j.put("userid", tczdXz.getId());
				j.put("username", loginUser.getName());
				j.put("code", code);
				arr.add(j);

			} else if ("02".equals(xzlx)) {
				JSONArray list = showBody.getJSONArray("list"); // 获取个股数组数据
				for (int m = 0; m < list.size(); m++) {
					JSONObject jg_m = list.getJSONObject(m);
					if (jg_m.getString("code").equals(code)) {
						String nowPrice = jg_m.getString("nowPrice");// 当前价格
						String yestodayClosePrice = jg_m
								.getString("closePrice");// 昨日收盘价
						Float newSpPrice = Float.parseFloat(nowPrice);
						Float yesSpPrice = Float.parseFloat(yestodayClosePrice);
						Float gwcz = (newSpPrice / yesSpPrice) - 1; // 个股误差值
						if (Math.abs(gwcz) <= 0.005 && Math.abs(gwcz) >= 0) {// 如果个股猜测涨幅指数在范围内
							String jljf = String.valueOf(xzjf * 2);// 奖励积分
							tczdXz.setFhjf(jljf);
							tczdXz.setCdzt("01");// 猜测状态：//01 猜中，02 未猜中，03 未结算
							czdServiceI.edit(tczdXz);

							Integer jsjf = nowJf + Integer.parseInt(jljf); // 结算后积分
							loginUser.setJifen(jsjf);
							loginUserService.update(loginUser); // 更新用户积分

						} else {
							tczdXz.setFhjf("0");
							tczdXz.setCdzt("02");// 猜测状态：//01 猜中，02 未猜中，03 未结算
							czdServiceI.edit(tczdXz);
						}
					}
				}
				j.put("userid", tczdXz.getId());
				j.put("username", loginUser.getName());
				j.put("code", code);
				arr.add(j);
			} else {
				j.put("errorMsg", "非法猜测选项");
				j.put("userid", tczdXz.getId());
				j.put("username", loginUser.getName());
				j.put("code", code);
				arr.add(j);

			}

		}
		json.put("errorCode", "0");
		json.put("rows", arr);
		json.put("total", czdList.size());
		return json;
	}

	/**
	 * 导出数据为excel
	 * 
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@RequestMapping(value = "/export")
	public void exportExcel(HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		String fl = request.getParameter("fl");
		if (fl.equals("1")) {
			fl = "股市段子";
		} else if (fl.equals("2")) {
			fl = "甘甜股事";
		} else if (fl.equals("3")) {
			fl = "股道情歌";
		} else if (fl.equals("4")) {
			fl = "趣味小图";
		} else if (fl.equals("5")) {
			fl = "有趣视频";
		}
		List<Tgsdz> list = gqbServiceI.getList(fl, "", "");

		HSSFWorkbook wb = gqbServiceI.export(list);
		response.setContentType("application/vnd.ms-excel");
		String filename = "股学堂列表" + TimeUtils.getNow14() + ".xls";
		response.setHeader("Content-disposition", "attachment;filename="
				+ filename);
		OutputStream ouputStream = response.getOutputStream();
		wb.write(ouputStream);
		ouputStream.flush();
		ouputStream.close();

	}
}
